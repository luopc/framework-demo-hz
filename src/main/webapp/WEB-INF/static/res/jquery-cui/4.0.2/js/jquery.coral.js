/*!
 * jQuery JavaScript Library v1.11.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:19Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

/*!
 * jQuery coral Core 4.0.1
 */
if (document.documentMode !== undefined ) { // IE only
	if (document.documentMode <= 5) {
		alert("CoralUI can not be used in this ('quirks') mode!");
	}
}
var CoralUIVersion = "4.1.5";
var Coral = {
	cc: function( componentName, id ){
		$.parser.component.push({componentName: componentName, id: id});
	}
}
var validAction = false, timer = false, resizable = true;
(function( $, undefined ) {
$.coral = $.coral || {};
$.coral.openTag = true;
$.coral.strictLayout = false;
$(document).unbind(".clearTips").bind("click.clearTips", function(e){
	if ( validAction ) {
		validAction = false;
		e.stopPropagation();
		return;
	}
	$(".coral-validate-state-error").slideUp(100, function( e ){
		$(this).remove();
	});
	validAction = false;
});

// 鼠标滚动时，重新计算校验提示信息的位置
$(document).unbind("mousewheel").bind("mousewheel", function(e) {
	var validateSuffix = $.validate.validateSuffix();
	
	setTimeout( function() {
		$.each( $(".coral-validate-state-error"), function(idx, item) {
			var className = $(item).attr("class");
			var componentId = className.substring(0, className.indexOf(validateSuffix));
			var $field = $("#"+componentId).find(".ctrl-init");
			var $validator = $field.parents(".coral-validate");
			$(item).remove();
			$validator.validate("validItem", $field, null, true);
		});
	}, 0);
});
//
$.coral.getStyles = function (el) {
	if(window.getComputedStyle){
		var styles= window.getComputedStyle( el, null );
		return styles;
	}else if(document.documentElement.currentStyle){
		var styles= el.currentStyle;
		return styles;
	}
};
$.coral.fitParent = function ($ele, fit) {
	fit = (fit == undefined ? true : fit);
	var parent = $ele.parent().closest(".ctrl-fit-element")[0];
	parent = $(parent);
	if (fit) {
		if (!parent.hasClass("coral-noscroll")) {
			parent.addClass("coral-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").addClass("coral-panel-fit");
			}
		}
	} else {
		if (parent.hasClass("coral-noscroll")) {
			parent.removeClass("coral-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").removeClass("coral-panel-fit");
			}
		}
	}
	return {
		width: parent.width(),
		height: parent.height()
	};
};
$.coral.getLeft = function ( my, of ) {
	var left = of.offset().left;
	if (left + my.outerWidth() > $(window).outerWidth()
			+ $(document).scrollLeft()) {
		left = $(window).outerWidth() + $(document).scrollLeft()
				- my.outerWidth();
	}
	if (left < 0) {
		left = 0;
	}
	return left;
};
$.coral.getTop = function ( my, of, direction ) {
	var top = of.offset().top + of.outerHeight();
	
	if (direction == "up") {
		top = of.offset().top - my.outerHeight();	
	} else {
		if (top + my.outerHeight() > $(window).outerHeight()
				+ $(document).scrollTop()) {
			top = of.offset().top - my.outerHeight();
		}
		if (top < $(document).scrollTop()) {
			top = of.offset().top + of.outerHeight();
		}		
	}
	
	return top;
};
$.coral.findComponent = function( selector, context ){
	var component = [];
	if ( !selector ){ selector = '.ctrl-init'; }
	var init = $( selector, context );
	var rclass = /[\t\r\n]/g;
	if (init.length){
		$.each(init, function(){
			var name = "",
				className = this.className.replace(rclass, " ").split(" "),
				i = 0,
				l = className.length;
			for ( ; i < l; i++ ) {
				name = $( this ).attr( "component-role" );
				if ( name == "datepicker" ){
					component.push([{"element":$(this),"name":name}]);
				} else {
					component.push($(this)[name]("instance"));//$().textbox()
				}
				break;
			}
		});
	}
	return component;
};
$.coral.setIslabel = function(isSet, context) {
	var fields = $.coral.findComponent(".ctrl-form-element", context),
		i = 0, 
		l = fields.length;
	for (i; i < l; i++) {
        var c = fields[i];
        if ( c instanceof Array) {
        	$(c[0].element)[c[0].name]("option", "isLabel", isSet);
        }else {
        	c._setOption("isLabel", isSet);
        	if(c.element.hasClass("hasTooltip")) {
        		if(isSet == false) {
        			c.element.tooltip("enable");
        		} else {
        			c.element.tooltip("disable");
        		}
        	}
        }
	}
};
$.coral.setReadOnly = function(isSet, context){
	var fields = $.coral.findComponent( ".ctrl-form-element", context),
		i = 0, 
		l = fields.length;
	for (i; i < l; i++) {
	    var c = fields[i];
	    if ( c instanceof Array ){
	    	$(c[0].element)[c[0].name]("option", "readonly", isSet);
	    }else {
	    	c._setOption("readonly", isSet);
	    	if(c.element.hasClass("hasTooltip")) {
	    		if(isSet == false) {
	    			c.element.tooltip("enable");
	    		} else {
	    			c.element.tooltip("disable");
	    		}
	    	}
	    }
	}
};
$.coral.renderComponent = function( context ){
	var component = [];
	var selector = '.coral-no-rendered';
	if ( !context ){ context = 'body'; }
	var init = $( selector, context );
	var rclass = /[\t\r\n]/g;
	if (init.length){
		$.each(init, function(){
			var name = "",
				className = this.className.replace(rclass, " ").split(" "),
				i = 0,
				l = className.length;
			for ( ; i < l; i++ ) {
				name = $( this ).attr( "component-role" );
				rendered = $( this ).prop( "rendered" );
				if ( !rendered ) {
					$( this ).removeClass( "coral-no-rendered" );
					var ins = $(this)[name]("instance");
					$( this ).addClass( "ctrl-init ctrl-init-"+this.componentName );
					ins._create();
					ins._renderComponent();
				}
				break;
			}
		});
	}
	return component;
};

$.coral.valid = {};
$.coral.valid = function( element/*, hasErrorTips*/ ) {
	validAction = true;
	var count = 0,
		excluded = $.data(element, "excluded"),
		validElements = element.find($("[class*='coral-validation-']")),
		errTipsType = null,
		hasErrorTips = true;
	
	 if ( excluded && "string" === typeof excluded ) {
         // Convert to array first
         excluded = $.map( excluded.split( ',' ), function( item ) {
             // Trim the spaces
             return $.trim( item );
         });
     }
	 if ( "form" === element[0].tagName.toLowerCase() ) {
		 errTipsType = element.form("option", "errTipsType");		 
	 }
	 
	 validElements.each( function () {
		 var className = this.className, 
			 coralType = "",
			 clsArray = className.split(" ");
			 
		 for ( var item in clsArray ) {
			 if ( clsArray[item].indexOf( "coral-validation-" ) >=  0 ) {
				 coralType = clsArray[item].substr( clsArray[item].indexOf( "coral-validation-" ) + 17 );
				 break;
			 }
		 }
		 // 如果在排除范围内，则返回，不校验
		 if ( _isExclud( $( this )[coralType]("component"), excluded) ) {
    		 return ;
    	 }
		 if ( "none" === errTipsType ) {
			 hasErrorTips = false;
		 }
		 if ( !_valid( $( this ), coralType, hasErrorTips ) ) {
			 if ( "first" === errTipsType ) {
				 hasErrorTips = false;
			 }
			 ++ count;
		 }
	 });
	 
	 if ( count > 0 ) {
		 return false;
	 } else {
		 return true;
	 }
	
     function _isExclud( $component, excluded ) {
    	 if ( !excluded ) {
    		 return false;
    	 }
    	 
    	 var length = excluded.length;
         
    	 for ( var i = 0; i < length; i++ ) {
             if ( "string" === typeof excluded[i] && $component.is(excluded[i]) ){
                 return true;
             }
         }
    	 
    	 return false;
     }
     
     function _valid( $element, coralType, hasErrorTips ) {    	 
    	 if ( "datepicker" == coralType ) {
    		 return $element[coralType]( "valid", $element, hasErrorTips );
    	 }
    	 // 如果不在上面的列中，则默认通过校验
    	 if ( $.inArray( coralType, ["textbox", "combobox", "combotree", "radio", "radiolist", "checkbox", "checkboxlist"] ) > -1 ) {
    		 return $element[coralType]( "valid", hasErrorTips );
    	 }
     }      
}

jQuery.support.placeholder = (function(){
    var i = document.createElement('input');
    return 'placeholder' in i;
})();

var uuid = 0,
	runiqueId = /^coral-id-\d+$/;

// $.coral might exist from components with no dependencies, e.g., $.coral.position


$.extend( $.coral, {
	version: "4.0.3",
	
	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	},
	zindex : 1000
});
var timer = false;
// plugins
$.fn.extend({
	scrollParent: function( includeHidden ) {
		var position = this.css( "position" ),
			excludeStaticParent = position === "absolute",
			overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
			scrollParent = this.parents().filter( function() {
				var parent = $( this );
				if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
					return false;
				}
				return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );
			}).eq( 0 );

		return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;
	},
	
	uniqueId: function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "coral-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	},
	closestComponent: function(selector){
		return this.each(function() {
			$( this ).closest( ".ctrl-init-" + selector );
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.coral.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),
	
	disableSelection: (function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.bind( eventType + ".coral-disableSelection", function( event ) {
				event.preventDefault();
			});
		};
	})(),

	enableSelection: function() {
		return this.unbind( ".coral-disableSelection" );
	},
	
	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	}
});

$.extend( $.coral, {
	// $.coral.plugin is deprecated. Use $.component() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.coral[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args, allowDisconnected ) {
			var i,
				set = instance.plugins[ name ];
			
			if ( !set ) {
				return;
			}
			if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
				return;
			}
			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},
	/**
	 * qiucs @2014.7.18
	 * 在window对象中获取指定函数(字符串)
	 */
	toFunction : function (fn) {
		var ns = null, i = 0, _fn = null;//不再设置为function，否则无法判断此function是否是undefined
		if ($.isFunction(fn)) {
			return fn;
		}
		if (typeof fn === "string") {
			// 1. 没有多层命名空间
			if ($.isFunction(window[fn])) {
				return window[fn];
			}
			// 2. 多层命名空间的有运算的
			try {
				_fn = eval("(" + fn + ")");
				if ($.isFunction(_fn)) {
					return _fn;
				}
			} catch (e) {}
			// 3. 多层命名空间无运算的	
			if (fn.indexOf(".") > 0) {
				ns = fn.split(".");
				_fn = window[ns[0]];
				if (!_fn) return null;
				for (i = 1; i < ns.length; i ++) {
					_fn = _fn[ns[i]];
					if (!_fn) return null;
				}
			}
			return _fn;
		}
		
		return fn;
	}
});

$.extend({
	/**
	 * qiucs @2014.7.23
	 * 通过url获取JSON对象
	 */
	loadJson : function (url, params) {
		var data = null;
		$.ajax({
			url : url,
			type: "get",
			dataType : "json",
			async : false,
			data : params,
			success : function(rlt) {
				data = rlt;
			},
			error : function (req, error, errThrow) {
				$.error("function load json error: " + error);
			}
		});
		return data;
	},
	/**
	 * qiucs @2014.9.18
-	 * 判断当元素是否为coral组件
-	 * @param elem 元素
-	 * @param type 组件类型，如 button/comobobox/ panel/ ...
	 */
	isCoral : function (elem, type) {
		if (arguments.length < 2 || !elem) return false;
		if (elem.jquery) elem = elem.get(0);
		return !!$.data(elem, "coral-" + type);
	}
});

$.extend( $.coral, {
	contextPathFun : function () {
		//获取当前网址，如： http://localhost:8080/coral/meun.jsp
		var curWwwPath=window.document.location.href;
		//获取主机地址之后的目录，如：coral/meun.jsp
 	    var pathName=window.document.location.pathname;
 	    var pos=curWwwPath.indexOf(pathName);
	    //获取主机地址，如： http://localhost:8083
 	    var localhostPaht=curWwwPath.substring(0,pos);
	    //获取带"/"的项目名，如：/coral
 	    var projectName=pathName.substring(0,pathName.substr(1).indexOf('/')+1);
 	    return projectName;
	},
	adjusted : function(element){
		var maxHeight,
		$element = $(element),
		parent = $element.parent();
		
		maxHeight = parent.height();
		$element.siblings( ":visible" ).each(function() {
			var elem = $( this ),
				position = elem.css( "position" );

			if ( position === "absolute" || position === "fixed" ) {
				return;
			}
			maxHeight -= elem.outerHeight( true );
		});
		$element.height( Math.max( 0, maxHeight - $element.innerHeight() + $element.height() ) )
			//.css( "overflow", "auto" );//
			.addClass("coral-scroll");
		$.coral.refreshAllComponent(element);
		$.coral.fitParent(parent, true);
	},
	/**
	 * 处理 overflow
	 **/
	beforeDoOverflow : function(element){
		//$(".overflow-auto").removeClass("overflow-auto").addClass("overflow-hidden");
		//$(".coral-panel-body").removeClass("overflow-auto").addClass("overflow-hidden");
		//$(".coral-adjusted").addClass("overflow-hidden");
	},
	/**
	 * 处理 overflow
	 **/
	doOverflow : function(element){
	/*	if (timer !== false) {
			clearTimeout(timer);
		}
		timer = setTimeout(function() {
			//$(".overflow-hidden").removeClass("overflow-hidden").addClass("overflow-auto");
			//$(".coral-panel-body").removeClass("overflow-hidden");
			//$(".coral-adjusted").removeClass("overflow-hidden").addClass("overflow-auto");
		},999);*/
	},
	/***
	 * com: compoent
	 * pCom: parentComponent
	 */
	isFit: function(com, pCom){
		// closetParentComponent
		var closestPCom = $(com).parent().closest(".ctrl-fit-element");
		if (!closestPCom.length) {
			closestPCom = $("body");
		}
		// 如果找到的直接父组件（closestPCom）与传进来的父容器（pCom）相等，
		// 或者父容器（pCom）由直接父组件提供（closestPCom），
		// 则判断为是最佳自适应时机
		var isBestFit = closestPCom.length && ( closestPCom[0] === $(pCom)[0] || closestPCom.find( pCom ).length );
		return isBestFit;
	},
	/**
	 * refresh all the coral comonent to adjusted container 
	 **/
	refreshAllComponent : function(parentComponent){
		$.coral.beforeDoOverflow();
		if( typeof(parentComponent)=="undefined" ) {
			parentComponent = "body";
		}
		var layoutSet = null;
		if ($.coral.strictLayout) {
			layoutSet = $(parentComponent).children(
				".fill:visible, " +
				".ctrl-fit-element:visible, " +
				".coral-adjusted:visible"
			);
		} else {
			layoutSet = $(parentComponent).find(
				".ctrl-fit-element:visible, " +
				".fill:visible, " +
				".coral-adjusted:visible"
			);
		}
		layoutSet.each(function() {
			if ($(this).hasClass("coral-adjusted") || $(this).hasClass("fill")) {
				$(this).addClass("ctrl-fit-element coral-scroll");
			}
			var type = $(this).attr("component-role");
			if (!type) {
				if ($(this).hasClass("coral-adjusted") || $(this).hasClass("fill")) {
					$.coral.adjusted(this);
				}
			} else {
				if ($.coral.isFit($(this)[type]("component"), parentComponent)) {
					$(this)[type]("refresh");
/*					if ($(this).hasClass("ctrl-init-layout")) {
						$(this).layout("refresh");
					}
					if ($(this).hasClass("ctrl-init-accordion")) {
						$(this).accordion("refresh");
					}
					if ($(this).hasClass("ctrl-init-tabs")) {
						$(this).tabs("refresh");
					}
					if ($(this).hasClass("ctrl-init-grid")) {
						$(this).grid("refresh");
					}
					if ($(this).hasClass("ctrl-init-toolbar")) {
						$(this).toolbar("refresh");
					}
					if ($(this).hasClass("ctrl-init-form")) {
						$(this).form("refresh");
					}*/
				}
			}
		});
		$.coral.doOverflow();
	}
});
$.coral.contextPath = $.coral.contextPathFun.apply();

})( jQuery );
(function($) {
	$.fn.caret = function(pos) {
	    var target = this[0];
		var isContentEditable = target.contentEditable === 'true';
	    //get
	    if (arguments.length == 0) {
	    	//HTML5
	    	if (window.getSelection) {
	    		//contenteditable
		        if (isContentEditable) {
		        	target.focus();
		        	var range1 = window.getSelection().getRangeAt(0),
		        		range2 = range1.cloneRange();
					range2.selectNodeContents(target);
					range2.setEnd(range1.endContainer, range1.endOffset);
					return range2.toString().length;
		        }
		        //textarea
		        return target.selectionStart;
		      }
	    	//IE<9
	    	if (document.selection) {
	    		target.focus();
	    		//contenteditable
	    		if (isContentEditable) {
	    			var range1 = document.selection.createRange(), 
	    		  		range2 = document.body.createTextRange();
		    		  range2.moveToElementText(target);
		    		  range2.setEndPoint('EndToEnd', range1);
		    		  return range2.text.length;
	    		}
		    	  //textarea
		    	  var pos = 0,
		    	  	range = target.createTextRange(),
		            range2 = document.selection.createRange().duplicate(),
		            bookmark = range2.getBookmark();
		    	  range.moveToBookmark(bookmark);
		    	  while (range.moveStart('character', -1) !== 0) pos++;
		    	  return pos;
	    	}
	    	// Addition for jsdom support
	    	if (target.selectionStart)
	    		return target.selectionStart;
	    	//not supported
	    	return 0;
	    }
	    //set
	    if (pos == -1)
	    	pos = this[isContentEditable? 'text' : 'val']().length;
	    //HTML5
	    if (window.getSelection) {
	    	//contenteditable
	    	if (isContentEditable) {
	    		target.focus();
	    		window.getSelection().collapse(target.firstChild, pos);
	    	}
	    	//textarea
	    	else
	    		target.setSelectionRange(pos, pos);
	    }
	    //IE<9
	    else if (document.body.createTextRange) {
	    	if (isContentEditable) {
	    		var range = document.body.createTextRange();
	    	  		range.moveToElementText(target);
    	  		range.moveStart('character', pos);
    	  		range.collapse(true);
    	  		range.select();
	    	} else {
		    	  var range = target.createTextRange();
		    	  range.move('character', pos);
		    	  range.select();
	    	}
	    }
	    if (!isContentEditable)
	    	target.focus();
	    return pos;
	}
})(jQuery);


/*!
 * jQuery coral component 4.0.1
 */
(function( $, undefined ) {

var uuid = 0,
	slice = Array.prototype.slice;
$.cleanData = (function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// http://bugs.jquery.com/ticket/8235
			} catch( e ) {}
		}
		orig( elems );
	};
})( $.cleanData );

$.component = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple components (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Component;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createComponent ) {
			return new constructor( options, element );
		}
		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			options = $.component.extend( {},
				$.fn[name].defaults || {},this._parseOptions(element),
				options );
			this._createComponent( options, element );
		}
	};
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the component later
		_proto: $.extend( {}, prototype ),
		// track components that inherit from this component in case this component is
		// redefined after a component inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.component.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.component.extend( basePrototype, {
		// TODO: remove support for componentEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for components that aren't DOM-based
		componentEventPrefix: existingConstructor ? (basePrototype.componentEventPrefix || name) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		componentName: name,
		componentFullName: fullName
	});

	// If this component is being redefined then we need to find all components that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this component. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child component using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.component( childPrototype.namespace + "." + childPrototype.componentName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.component.bridge( name, constructor );
	
	return constructor;	
};

$.component.extend = function( target ) {
	var input = slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.component.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.component.extend( {}, value );
				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.component.bridge = function( name, object ) {
	var fullName = object.prototype.componentFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.component.extend.apply( null, [ options ].concat(args) ) :
			options;

		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );
				if ( !instance ) {
					return $.error( "cannot call methods on " + name + " prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}
				if ( options === "instance" ) {
					returnValue = instance;
					return false;
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " component instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					/*if ( this.id && typeof (this.id) == "string" ) {
						var $Script = $( "#"+this.id + "_s" );
						if( $Script.length>0 ) {
							$Script.remove();
						}
					}*/
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Component = function( /* options, element */ ) {};
$.Component._childConstructors = [];

$.Component.prototype = {
	componentName: "component",
	componentEventPrefix: "",
	defaultElement: "<div>",
	castProperties: null, /*options中的哪些属性值(字符串)要转换为对象["data","setting.checkalbe"]*/
	options: {
		disabled: false,
		authorized: true,
		rendered: true,
		// callbacks
		onCreate: null
	},
	formFieldArray: [
	    "autocomplete", "autocompletetree", "combobox", "combotree", "combogrid",
	    "checkbox", "checkboxlist", "datepicker", "radio","radiolist", "spinner", "textbox","fileuploader"
    ],
	panelArray: [
	    "accordion", "dialog", "form", "grid", "layout", "panel", "tabs", "toolbar"
    ],
	_createComponent: function( options, element ) {
		var that = this;
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = uuid++;
		this.eventNamespace = "." + this.componentName + this.uuid;
		// 组件身份识别
		if ( !this.element.attr( "component-role" ) ) {
			// TODO: 目前没有好的方案对一个组件初始化两次，所以只能这么做，
			// 如果不处理，element的component-role会被改变
			this.element.attr( "component-role", this.componentName );
		}
		/**
		 * add parseOptions to support the parse option of tag
		 * 
		 * added by mengshuai
		 */
		this.options = $.component.extend( {},
			this.options,
			this._getCreateOptions(),
			options );
		
		/*if($.migrate&&options&&$.migrate[this.componentName]
			&&this.componentName!="grid"
			&&this.componentName!="tree"//grid在内部处理migrate，此处跳过migrate来提供效率
				){
			this.options = $.extend(true,{},this.options,$.migrate[this.componentName](options));
		}*/
		if ( !this.options.authorized || this.options.authorized === "false" ) { this.element.remove(); }
		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();

		if ( element !== this ) {
			$.data( element, this.componentFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}
		/*if ( typeof ( this.options.rendered ) == "undefined" ) {
			this.options.rendered = true;
		} else {
			this.options.rendered = false;
		}*/
		this.element.prop( "rendered", !!this.options.rendered );
		if ( !this.options.rendered ) {
			this.element.addClass( "coral-no-rendered" );
			return;
		} else {
			this.element.addClass( "ctrl-init ctrl-init-"+this.componentName );
			this._create();
		}
		this._renderComponent();
	},
	_renderComponent: function(){
		if ( this.options.componentCls ) {
			this.component().addClass( this.options.componentCls );
		}
		if ( this.options.cls ) {
			this.element.addClass( this.options.cls );
		}
		// 处理动态添加的表单元素，添加校验
		if ( $.inArray( this.componentName, this.formFieldArray ) > -1 ) {
			this.element.addClass( "ctrl-form-element coral-validation-" + this.componentName );
			//var form = this.element.closest("form");
			// 如果form存在，则不进行添加
			// 如果form不存在，额外的进行添加
			//if ( !form.length && !$.data( this.element[0], "inited" )) {
			$.validate.addField( this.element, this.options );
			//}
			
		}
		if ( $.inArray( this.componentName, this.panelArray ) > -1 ) {
			this.element.addClass( "ctrl-fit-element" );
		}
		
		this._trigger( "onCreate", null, this._getCreateEventData() );
		this._init();
	},
	/*_onFieldOptionChange: function( $field, e, ui ) {
		var type = $field.attr( "component-role" );
		if ( ui.key == "required" ) {
			var showRequiredMark = $field[type]("option", "showRequiredMark") || 
				this.options.showRequiredMark || $.validate.showRequiredMark;
			var hideRequiredMark = $field[type]("option", "hideRequiredMark") || 
				this.options.hideRequiredMark || $.validate.hideRequiredMark;
			if ( ui.value == true ) {
				showRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
			} else {
				hideRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
			}
		}
	},*/
	_parseOptions: function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [], this.castProperties));
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,

	valid: function() {
		var data = {
			hasTips: false,
			element: this.element
		};
		return ( $.validate.validateField( null, data ).length > 0 ? false : true );
	},
	isValid: function(){
		
	},
	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			// 1.9 BC for #7810
			// TODO remove dual storage
			.removeData( this.componentName )
			.removeData( this.componentFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.componentFullName ) );
		this.element.removeClass(
		"ctrl-form-element " + "ctrl-init ctrl-init-" + this.componentName );
		this.component()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeAttr( "component-role" )
			.removeClass(
				this.componentFullName + "-disabled " +
				"coral-state-disabled" );
		this.element.removeAttr( "component-role" );
		this.element.removeAttr( "data-options" );
		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "coral-state-hover" );
		this.focusable.removeClass( "coral-state-focus" );
	},
	_destroy: $.noop,

	component: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.component.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.component.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
			this.element.trigger( "onOptionChange", {key: key, value: options[ key ]} );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.component()
				.toggleClass( this.componentFullName + "-disabled coral-state-disabled", !!value )
				.attr( "aria-disabled", value );

			// If the component is becoming disabled, then nothing is interactive
			if ( value ) {
				this.hoverable.removeClass( "coral-state-hover" );
				this.focusable.removeClass( "coral-state-focus" );
			}
		}

		return this;
	},
	enable: function() {
		return this._setOptions({ disabled: false });
	},
	disable: function() {
		return this._setOptions({ disabled: true });
	},
	show: function() {
		this.component().removeClass("coral-state-hidden").show();
	},
	hide: function() {
		this.component().addClass("coral-state-hidden").hide();
	},
	// 初始化搜索引擎，创建拼音搜索索引
	/**
	 * key 如： 
	 * dataArr 如： [{id:'1', name:'节点1'},{id:'2', name:'节点2'}]
	 */
	_pinyinEngine: function () {
		return new pinyinEngine();
	},
	_pinyinSetCache: function (engine, key, dataArr) {
		
		for (var i in dataArr) {
			// @param	{Array}	标签
			// @param	{Any}	被索引的内容
			engine.setCache([dataArr[i][key]], dataArr[i]);
		}
		
		return engine;
	},
	/** 
	 * @param engine 
	 * @param keyword 搜索的关键字
	 * @param callback 返回dataResult
	 */
	_pinyinSearch: function (engine, keyword, callback) {
		var dataResult = [];
		
		engine.search(keyword, function (data) {
			dataResult.push(data);
		});
		
		callback(dataResult);
	},
	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.component();
		} else {
			// accept selectors, DOM elements
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow components to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "coral-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "coral-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "coral-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "coral-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "coral-state-focus" );
			}
		});
	},
    addNoTrigger: function ( string ){
    	this.options.noTriggerEvent.push(string);
    },
	_trigger: function( type, event, data ) {
		var noTrigger = this.options.noTriggerEvent||[];
		if ( noTrigger.length ) {
			for( var i=0;i<noTrigger.length;i++ ){
				if( type==noTrigger[i] ){
					noTrigger.splice(i,1);
					return;
				} 
			}
		}
		var prop, orig, 
			/**
			 * 1. $.isFunction to find the function of tag
			 * 
			 * 2. if "type" is function then not trigger the function of options.
			 */
		    fn = $.isFunction(type)?type:$.coral.toFunction( this.options[ type ] ), rData = {};

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.componentEventPrefix ?
			type :
			this.componentEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];
		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		// customData只是为了用在回调函数中，自定义事件的e.data中无法取得此处的customData
		event.data = event.data || {};
		$.extend(event.data, this.options.dataCustom);
		return !( $.isFunction(fn) && fn.apply( this.element[0], [ event ].concat( data ) ) === false || event.isDefaultPrevented() );
		/*rData["prevented"] = !( $.isFunction(fn) && fn.apply( this.element[0], [ event ].concat( data ) ) === false 
			|| event.isDefaultPrevented() );
		
		if (data[0] && data[0]["getData"] == true) {
			rData["result"] = event["result"];
		} else {
			return rData["prevented"];
		}
		return rData;*/
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Component.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

})( jQuery );

(function($){
	$.parser = {
		auto: true,
		doneArr: [],
		component: [],
		onComplete: function(context){},
		onInit: function(context){},
		plugins:["tabs","layout","grid","panel","button", "menubutton" , "treebutton","splitbutton", "accordion","textbox", "autocomplete","uploader", "radio","radiolist","checkbox","checkboxlist","spinner","slider","combo","combobox","combotree","combogrid","datepicker","form","picgrid","tree","toolbar","progressbar","menu","menubar","contextmenu","slidemenu","tieredmenu","navigatemenu","dialog","subfield"],
		parse: function(context){
			$.parser.onInit.call($.parser, context);
			var aa = [];
			
			$.each($.parser.component,function(i){
				var c = $.parser.component.shift();
				if(c) {//如果下面的初始化有递归调用parse方法，此时这个组件可能已经被初始化掉了
					var ele = $( "#" + c.id );
					if (ele.length){
						if (ele[c.componentName]){
							ele[c.componentName]();
						}
						if ( c.id && typeof (c.id) == "string" ) {
							var $Script = $( "#"+c.id + "_s" );
							if( $Script.length>0 ) {
								$Script.remove();
							}
						}
					}
				}
			});
			for(var i=0; i<$.parser.plugins.length; i++){
				var name = $.parser.plugins[i];
				var r = $('.coralui-' + name, context);
				r.removeClass('coralui-' + name);
				if (r.length){
					if (r[name]){
						r[name]();
					} else {
						aa.push({name:name,jq:r});
					}
				}
			}
			if (aa.length){
				var names = [];
				for(var i=0; i<aa.length; i++){
					names.push(aa[i].name);
				}
				for(var i=0; i<aa.length; i++){
					var name = aa[i].name;
					var jq = aa[i].jq;
					jq[name]();
					
				}
				$.parser.onComplete.call($.parser, context);
			} else {
				$.parser.onComplete.call($.parser, context);
			}
			
			$.each($.parser.doneArr,function(i){
				var fun = $.parser.doneArr.shift();
				if ( $.isFunction(fun) ) {
					fun.call($.parser, context);
				}
			});
			//每次refresh只考虑当前元素的内容元素
			$.coral.refreshAllComponent(context);
			$.parser.onComplete.call($.parser, context);
		},
		/**
		 * parse options, including standard 'data-options' attribute.
		 * 
		 * calling examples:
		 * $.parser.parseOptions(target);
		 * $.parser.parseOptions(target, ['id','title','width',{fit:'boolean',border:'boolean'},{min:'number'}]);
		 *  castProperties --options中要转换了属性 格式：["data", "setting.xx.xx", ...]
		 */
		parseOptions: function(target, properties, castProperties){
			var t = $(target),
			    s = $.trim(t.attr('data-options')),
			    first = null,
			    last  = null,
			    opts  = null,
			    i     = 0,
			    name  = null,
			    value = null,
			    type  = null,
			    options = {};
			
			if (s){
				first = s.substring(0,1);
				last  = s.substring(s.length-1,1);
				if (first != '{') s = '{' + s;
				if (last != '}') s = s + '}';
				options = (new Function('return ' + s))();
			}
				
			if (properties){
				opts = {};
				for(var i=0; i<properties.length; i++){
					value = properties[i];
					if (typeof value == 'string'){
						if (value == 'width' || value == 'height' || value == 'left' || value == 'top'){
							opts[value] = parseInt(target.style[value]) || undefined;
						} else {
							opts[value] = t.attr(value);
						}
					} else {
						for(name in value){
							type = value[name];
							if (type == 'boolean'){
								opts[name] = t.attr(name) ? (t.attr(name) == 'true') : undefined;
							} else if (type == 'number'){
								opts[name] = t.attr(name)=='0' ? 0 : parseFloat(t.attr(name)) || undefined;
							}
						}
					}
				}
				$.extend(options, opts); opts = null;
			}
			if ( castProperties instanceof Array) {
				for (i = 0; i < castProperties.length; i++) {
					name = castProperties[i];
					change2object(options, name.split("."));
				}
			}
			return options;
		}
	};
	$(function(){
		if (!window.easyloader && $.parser.auto){
			$.parser.parse();
		}
	});
	
	/**
	 * 把指定属性名的值(字符串)转换为对象
	 */
	function change2object (obj, keys)  {
		var key = keys.shift();
		if (keys.length == 0) {
			if (obj && obj[key] && typeof obj[key] === "string") {
				try {
					obj[key] = (new Function('return ' + obj[key]))();
				} catch (e) {}
			}
		} else {
			change2object (obj[key], keys);
		}
	}
	$.parseDone = function(done){
		$.parser.doneArr.push(done);
	};
})(jQuery);

( function ( $, undefined ) {
	"use strict";
	
	var uuid = 0, validateSuffix = "coralForm", validatePrefix = "validate";

	$.validate = {
		options: {
			onStatus: "onstatus",
			errorMode: 1,// 0表示下面显示错误信息  ；1代表感叹号 ； 
			errMsgPosition: "leftBottom",
			requiredMsg : "*必输项",
			triggers: {
				textbox: ["onchange","onblur","onkeyup"],
				radio: ["onchange","onblur"],
				checkbox: ["onchange","onblur"],
				radiolist: ["onchange","onblur"],
				checkboxlist: ["onchange","onblur"],
				combobox: ["onchange","onblur"],
				combotree: ["onchange","onblur"],
				combogrid: ["onchange","onblur"],
				datepicker: ["onchange","onblur"],
				autocomplete: ["onchange","onblur"],
				spinner: ["onchange","onblur"],
				textboxlist: ["onchange","onblur"],
				autocompletetree: ["onchange","onblur"],
				fileuploader: ["onchange"]
			}
		},
		// 返回校验后缀
		validateSuffix: function() {
			return validateSuffix;
		},
		/**
		 * param
		 * json {
		 *	validType: "minlength", //("required", "maxlength", "validType", "pattern")
		 *	validValue: "5"         //("false", "20", "number/float/ip/port", "正则表达式String")
		 *	optionValue: "yyyy-MM-dd",
		 *	elementValue: "value"
		 * }
		 * 
		 * return "" || "<%=出错信息 %>";
		 */		
		_validate: function (json) {
			var validType = json.validType,
				validValue = json.validValue,
				elementValue = json.elementValue,
				optionValue = json.optionValue,
				field = json.field,
				requiredMsg = json.requiredMsg,
				errMsg = json.errMsg;
			
			if (typeof validValue == "undefined") {
				return "";
			}
			
			switch (validType) {
				case "required":
					return this._checkRequired(validValue, elementValue, requiredMsg);
				case "minlength": 
					return this._checkMinlength(validValue, elementValue, errMsg);
				case "maxlength": 
					return this._checkMaxlength(validValue, elementValue, errMsg);
				case "pattern": 
					return this._checkPattern(validValue, elementValue, errMsg);
				case "validType":
					return this._checkValidType(validValue, elementValue, optionValue, errMsg);
				case "valid":
					return this._checkValid(validValue, elementValue, errMsg, field);
				default:
					return "";
			}			
		},
		/**
		 * 获取校验组件的类型
		 * @param el 组件jquery对象
		 * @return {string} 组件类型
		 */
		getFieldType: function(el) {
			return $( el ).attr( "component-role" );
			/*var classArray = $(el)[0].className.split(" "),
				type = "";

			for ( var item in classArray ) {
				if ( classArray[item].indexOf( "coral-validation-" ) >=  0 ) {
					type = classArray[item].substr( classArray[item].indexOf( "coral-validation-" ) + 17 );
					return type;
				}
			}
			
			return null;*/
		},
		validTypeNames: ["required","minlength","maxlength","pattern","validType","valid"],
		// 校验类型控制 ??
		validTypeOptions: {
			"maxlength": {
				restrictInput: false,
				showTooltip: false
			},
			"number": {
				restrictInput: false
			},
			"naturalnumber": {
				restrictInput: false
			},
			"integer": {
				restrictInput: false
			},
			"float": {
				restrictInput: false
			},
			"zh": {
				restrictInput: false
			},
			"letter": {
				restrictInput: false
			},
			"uppercase": {
				restrictInput: false
			},
			"lowercase": {
				restrictInput: false
			},
			"zhOrNumOrLett": {
				restrictInput: false
			},
			"ip": {
				restrictInput: false
			},
			"port": {
				restrictInput: false
			},
			"url": {
				restrictInput: false
			},
			"email": {
				restrictInput: false
			},
			"mobile": {
				restrictInput: false
			},
			"idno": {
				restrictInput: false
			},
			"zipcode": {
				restrictInput: false
			}
		},
		/**
		 * data: isComponent ,如果是grid可能是对td的校验，无法获取component和option，也不能通过内置的校验进行提示
		 */
		validateField: function( event, data ) {
			validAction = true;
			data.validoptions = data.validoptions || {};
			var el = data.element,
				type = $.validate.getFieldType( el ),
	    	 	component = data.notComponent?data.component : el[type]("component"),
	    	 	options = data.notComponent?data.validoptions : el[type]("option"), // 获取组件的所有参数（options）
	    	 	val = null, 
	    	 	hasTips = data.hasTips,
	    	 	errorArrayOriginal = [],
	    	 	errorResults = [],
	    	 	errorMode = options.errorMode || data.validoptions.errorMode || $.validate.options.errorMode,
	    	 	errMsgPosition = options.errMsgPosition || data.validoptions.errMsgPosition || $.validate.options.errMsgPosition,
	    	 	readonly = options.readonly,
	    	 	disabled = options.disabled,
	    	 	isLabel = options.isLabel;
			if (!component.is(":visible")) {
	    		hasTips =  false;
	    	}
			hasTips = false;
			// don't valid hidden input element 
			if ( "hidden" == el.attr("type") ) {
				el.prop( "isError", false );
				return errorResults;
			} 
			// if isLabel or disabled ,then don't valid 
			if ( isLabel || disabled) {
				el.prop( "isError", false ); 
				return errorResults;
			}
			if ( data.notComponent ) {
				val = data.value;
			} else {
				// get value of the special way
				if ( "radio" === type || "checkbox" === type ) {
					val = el.prop("checked") ? el[type]("getValue") : "";
				} else if ( "datepicker" === type ) {
					val = el[type]( "option", "value" );
				} else {
					try {
						val = el[type]("getValidateValue");// default way to getValue method
					} catch (e){
						$.error( "cannot call methods on " + type + " , please achieve the getValue method !" );
					}
				}
			}
			for( var i = 0; i < this.validTypeNames.length; i++ ) {
				var vt = this.validTypeNames[i],
					vo = {
						optionValue: options.validType,
						requiredMsg: options.requiredMsg, 
						elementValue: val,
						field: el,
						errMsg: options.errMsg,
						validValue: options[ vt ], 
						validType: vt 
					};
				//when validType is required, it does't need valid empty value
				if ( options[ vt ] && (vt == "required")?true:(val != "") ) {
					var error = $.validate._validate( vo );
					error == "" || errorResults.push( error );// if has error, then push the error to results.
				}
			}
			if ( errorResults.length > 0 ) {
				$.validate.hideErrors( component );
				if ( !data.notComponent ) {
					if( errorMode == 0 ){
						$(component).attr( "data-errors", errorResults.toString() ); 
					} else {
						var paddingRight = component.css("padding-right");
						component.append("<span class='cui-icon-notification2 coral-errorIcon' style='right:"+paddingRight+"' data-errors = '"+errorResults.toString()+"' ></span>")											
						component.addClass( "hasErrorIcon " );
					}
				}
				component.addClass( "coral-validate-error " );
				var eventData = errorResults;
				$.validate._apply(options.onValidError, el, event, eventData);
				$(el).prop( "isError", true );
				return errorResults;
			} else {
				$.validate._apply(options.onValidSuccess, el, event, {});
				component.removeClass( "coral-validate-error" );
				$.validate.hideErrors( component );
				$(el).prop( "isError", false ); 
				$(component).removeAttr( "data-errors" ); 
				return errorResults;
			}
		},
		/**
	      * 改变回调函数的的指针this为初始化的field，
	      **/
	     _apply: function( callback, el, event, data ) {
	    	 var fun = $.coral.toFunction( callback );
	    	 
	    	 if ( $.isFunction(fun) ) {
	    		 return fun.apply( el, [event, data] );
	    	 }
	     },
		//脚本校验
		_checkValid: function (validValue, elementValue, errMsg, field) {
			var errMsgResult = "";
			
			if ( !!errMsg ) {
				errMsgResult = errMsg;
			}
			
			var validResult = null;
			
			if (validValue) {
				validResult = $.coral.toFunction(validValue).apply( field&&field[0], [{"value": elementValue}] );
				if ( typeof validResult == "object" && typeof validResult.isValid == "boolean" ) {
					
					if ( validResult.isValid ) {
						return "";
					} else {
						if ( !!validResult.errMsg ) {
							return validResult.errMsg;
						}
						return errMsgResult == "" ? validResult.errMsg : errMsgResult;
					}
				}
				if ( typeof validResult == "boolean" ) {
					if ( validResult ) {
						return errMsgResult;
					} else {
						return errMsgResult;
					}
				}
				/*if ( typeof validResult.isValid == "boolean" ) {
					if (typeof validResult.message != "string") {
						return "";
					}
					if ( validResult.isValid ) {
						return "";
					} else {
						return errMsgResult == "" ? validResult.message : errMsgResult;
					}
				}*/
			}
			return "";
		},
//			_trigger1: function( field, validValue, data ) {
//				return $.coral.toFunction(validValue).apply( field[0], data );
//				/*var that = this;
//				
//				event = $.Event(event);
//				
//				var rData = {};
//				
//				var _fn = $.coral.toFunction(validValue);
//				_fn.apply( null, [ event ].concat( data ) );
//				
//				if ( data[0] && data[0]["getData"] == true ) {
//					rData["result"] = event["result"];
//				} else {
//					return rData["prevented"];
//				}
//				
//				return rData;*/
//				
//				
//			},
		//校验必输项
		_checkRequired: function (validValue, elementValue, requiredMsg) {
			//var errMsgResult = $.fn.coralValidator.validators["required"];
			//此处应该配置requiredMsg
			var errMsgResult = $.validate.options.requiredMsg;			
			if ( requiredMsg ) {
				errMsgResult = requiredMsg;
			}
			
			if (typeof validValue == "boolean" && validValue && ("" == $.trim(elementValue))) {
				return errMsgResult;
			} else {
				return "";
			}
		},
		//校验最小长度
		_checkMinlength: function (validValue, elementValue, errMsg) {
			var errMsgResult = "最少输入" + validValue + "个字符！";
			
			if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
				errMsgResult = errMsg;
			}
			if (validValue && this._isPositiveInteger(validValue)) {
				var minLength = parseInt(validValue), nowLength = this._getByteLength(elementValue);
				
				if (nowLength < minLength) {
					return errMsgResult;
				} else {
					return "";
				}
			}
		},
		//校验最大长度
		_checkMaxlength: function (validValue, elementValue, errMsg) {
			var errMsgResult = "最多输入" + validValue + "个字符！";
			
			if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
				errMsgResult = errMsg;
			}
			
			if (validValue && this._isPositiveInteger(validValue)) {
				var maxLength = parseInt(validValue), nowLength = this._getByteLength(elementValue);
				
				if (nowLength > maxLength) {
					return errMsgResult;
				} else {
					return "";
				}
			}
		},
		//校验正则表达式
		_checkPattern: function(validValue, elementValue, errMsg) {
			var errMsgResult = "请输入匹配的字符串！";
			
			if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
				errMsgResult = errMsg;
			}
			
			if (validValue) {
				var reg = eval(validValue.replace(/\/\//g, "\/"));
				if (!reg.test($.trim(elementValue))) {
					return errMsgResult;
				} else {
					return "";
				}
			} else {
				return "";
			}	
		},
		//校验快捷类型
		_checkValidType: function (validValue, elementValue, optionValue, errMsg) {
			var errMsgResult = "";
			
			if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
				errMsgResult = errMsg;
			}
			
			var val = elementValue;
			
			switch (validValue) {
				case "number":
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入数字！";
					}
					return this._isNumber(val) ? "" :  errMsgResult;
				case "naturalnumber": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入自然数！";
					}
					return this._isNaturalnumber(val) ? "" :  errMsgResult;
				case "integer": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入整数！";
					}
					return this._isInteger(val) ? "" :  errMsgResult;
				case "float": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入实数！";
					}
					return this._isFloat(val) ? "" :  errMsgResult;
				case "zh": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入汉字！";
					}
					return this._isZh(val) ? "" :  errMsgResult;
				case "letter": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入英文字母！";
					}
					return this._isLetter(val) ? "" :  errMsgResult;
				case "uppercase":
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入大写英文字母！";
					}
					return this._isUppercase(val) ? "" :  errMsgResult;
				case "lowercase":
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入小写英文字母！";
					}
					return this._isLowercase(val) ? "" :  errMsgResult;
				case "zhOrNumOrLett":
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入汉字、数字、英文字母！";
					}
					return this._isZhOrNumOrLett(val) ? "" :  errMsgResult;
				case "ip":
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入合法的计算机IP地址！";
					}
					return this._isIp(val) ? "" :  errMsgResult;
				case "port": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入合法的计算机IP地址端口号！";
					}
					return this._isPort(val) ? "" :  errMsgResult;
				case "url": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入合法的网页地址！";
					}
					return this._isUrl(val) ? "" :  errMsgResult;
				case "email": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入合法的电子邮件地址！";
					}
					return this._isEmail(val) ? "" :  errMsgResult;
				case "mobile": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入合法的手机号码！";
					}
					return this._isMobile(val) ? "" :  errMsgResult;
				case "idno": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入合法的身份证号码！";
					}
					return this._isIDNo(val) ? "" :  errMsgResult;
				case "zipcode": 
					if ( "" == errMsgResult ) {
						errMsgResult = "请输入合法邮政编码！";
					}
					return this._isZipcode(val) ? "" :  errMsgResult;
				default: 
					return "";
			}
		},
		_isNumber: function ( val ) {
			if(!isNaN( val )) {
				return true;
			} else {
				return false;
			}
		},
		_isNaturalnumber: function ( val ) {
			if (/^[0-9]+$/.test( val )) {
				return true;
			} else {
				return false;
			}
		},
		_isInteger: function ( val ) {
			if (/^(\+|-)?\d+$/.test( val )) {
				return true;
			} else {
				return false;
			}
		},
		_isFloat: function ( val ) {
			if (/^(\+|-)?\d+($|\.\d+$)/.test( val )) {
				return true;
			} else {
				return false;
			}
		},
		_isZh: function ( val ) {
			if (/^[\u4e00-\u9fa5]+$/.test(val)) {  
				return true;  
		    } else {
		    	return false;
		    }   
		},
		_isLetter: function ( val ) {
			if (/^[A-Za-z]+$/.test(val)) {  
				return true;  
		    } else {
		    	return false;
		    }   
		},
		_isUppercase: function ( val ) {
			if (/^[A-Z]+$/.test(val)) {  
				return true;  
		    } else {
		    	return false;
		    }   
		},
		_isLowercase: function ( val ) {
			if (/^[a-z]+$/.test(val)) {  
				return true;  
		    } else {
		    	return false;
		    }   
		},
		_isZhOrNumOrLett: function ( val ) {
			if (/^[0-9a-zA-Z\u4e00-\u9fa5]+$/.test(val)) {  
				return true;  
		    } else {
		    	return false;
		    }   
		},
		_isIp: function ( val ) {
			if (/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/.test(val)) {  
				if(RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256)  
					return true;
		    } else {
		    	return false;
		    }   
		},
		_isPort: function ( val ) {
			if (this._isNaturalnumber (val) && val < 65536) { 
				return true;
		    } else {
		    	return false;
		    }   
		},
		_isUrl: function ( val ) {
			if (/^http:\/\/(www\.)?.+.?$/.test(val)) { 
				return true;
		    } else {
		    	return false;
		    }   
		},
		_isEmail: function ( val ) {
			if (/^([-_A-Za-z0-9\.]+)@([_A-Za-z0-9]+\.)+[A-Za-z0-9]{2,3}$/.test(val)) { 
				return true;
		    } else {
		    	return false;
		    }   
		},
		_isMobile: function ( val ) {
			if (/^0?(13[0-9]|15[012356789]|18[0-9]|14[57])[0-9]{8}$/.test(val)) { 
				return true;
		    } else {
		    	return false;
		    }   
		},
		_isIDNo: function ( val ) {
			 var aCity={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"};  
			   
		    var iSum = 0;  
		    var info = "";  
		    var strIDno = val;  
		    var idCardLength = strIDno.length;    
		    if(!/^\d{17}(\d|x)$/i.test(strIDno)&&!/^\d{15}$/i.test(strIDno))   
		    {  
		        return false;  
		    }  
		   
		    //在后面的运算中x相当于数字10,所以转换成a  
		    strIDno = strIDno.replace(/x$/i,"a");  
		  
		    if(aCity[parseInt(strIDno.substr(0,2))]==null)  
		    {  
		        return false;  
		    }  
		      
		    if (idCardLength==18)  
		    {  
		        var sBirthday=strIDno.substr(6,4)+"-"+Number(strIDno.substr(10,2))+"-"+Number(strIDno.substr(12,2));  
		        var d = new Date(sBirthday.replace(/-/g,"/"))  
		        if(sBirthday!=(d.getFullYear()+"-"+ (d.getMonth()+1) + "-" + d.getDate()))  
		        {  
		            return false;  
		        }  
		  
		        for(var i = 17;i>=0;i --)  
		            iSum += (Math.pow(2,i) % 11) * parseInt(strIDno.charAt(17 - i),11);  
		  
		        if(iSum%11!=1)  
		        {    
		            return false;  
		        }  
		    }  
		    else if (idCardLength==15)  
		    {  
		        sBirthday = "19" + strIDno.substr(6,2) + "-" + Number(strIDno.substr(8,2)) + "-" + Number(strIDno.substr(10,2));  
		        var d = new Date(sBirthday.replace(/-/g,"/"))  
		        var dd = d.getFullYear().toString() + "-" + (d.getMonth()+1) + "-" + d.getDate();     
		        if(sBirthday != dd)  
		        {   
		            return false;  
		        }  
		    }  
		    return true; 
		},
		_isZipcode: function ( val ) {
			if (this._isNaturalnumber(val) && val.length == 6) { 
				return true;
		    } else {
		    	return false;
		    }   
		},
		_isDate: function ( val, format ) {
			var date = $.trim(val); 
		    var year,month,day,datePat,matchArray;  
		  
		    if(/^(y{4})(-|\/)(M{1,2})\2(d{1,2})$/.test(format))  
		        datePat = /^(\d{4})(-|\/)(\d{1,2})\2(\d{1,2})$/;  
		    else if(/^(y{4})(年)(M{1,2})(月)(d{1,2})(日)$/.test(format))  
		        datePat = /^(\d{4})年(\d{1,2})月(\d{1,2})日$/;  
		    else if(format=="yyyyMMdd")  
		        datePat = /^(\d{4})(\d{2})(\d{2})$/;  
		    else  
		    {   
		        return false;  
		    }  
		    matchArray = date.match(datePat);  
		    if(matchArray == null)   
		    {  
		        return false;  
		    }  
		    if(/^(y{4})(-|\/)(M{1,2})\2(d{1,2})$/.test(format))  
		    {  
		        year = matchArray[1];  
		        month = matchArray[3];  
		        day = matchArray[4];  
		    } else  
		    {  
		        year = matchArray[1];  
		        month = matchArray[2];  
		        day = matchArray[3];  
		    }  
		    if (month < 1 || month > 12)  
		    {               
		        return false;  
		    }  
		    if (day < 1 || day > 31)  
		    {  
		        return false;  
		    }       
		    if ((month==4 || month==6 || month==9 || month==11) && day==31)  
		    {  
		        return false;  
		    }       
		    if (month==2)  
		    {  
		        var isleap=(year % 4==0 && (year % 100 !=0 || year % 400==0));  
		        if (day>29)  
		        {                  
		            return false;  
		        }  
		        if ((day==29) && (!isleap))  
		        {                 
		            return false;  
		        }  
		    }  
		    return true;   
		},
		/**
		 * show required "*"
		 */
		showRequiredMark: function( ui ) {
			var $component = ui.component;
			$component.find( "span.coral-validate-required:first" ).remove();
			$component.append( "<span class='coral-validate-required'>*</span>" );
		},
		hideRequiredMark: function( ui ) {
			var $component = ui.component;
			//$component.removeClass("coral-validate-starBefore");
			$component.find( "span.coral-validate-required:first" ).remove();
		},
		/**
		 * 
		 * @param element
		 * @param errorArray
		 * @param tipsPosition: leftTop, leftBottom, rightTop, rightBottom, right
		 */
		showErrors: function(element, errorArray, tipsPosition, noDelay) {
			// 如果是前置模式，则提示错误信息相对于 border 元素
			var $component = element; // cache component element
			if (element.hasClass("coral-hasLabel") || element.hasClass("coral-validate-starBefore")) {
				if ( element.find(".coral-radio-label").length ) {
					element = element.find(".coral-radio-label");
				} else if ( element.find(".coral-checkbox-label").length ) {
					element = element.find(".coral-checkbox-label");
				} else if ( element.find(".coral-label").next().length ) {
					element = element.find(".coral-label").next();
				} else if (element.find(".coral-validate-required").next().length) {
					element = element.find(".coral-validate-required").next();
				}
			}
			//setTimeout(function(){
			var hasForm = true, $form = $(element).parents("form"),
				container = "tooltip",
				errorContent = errorArray.join("<br />"), 
				$message, 
				position, 
				$element = $(element);
			var id = $element.attr("id"), $message = $("."+id+validateSuffix);
			var errorArrowClass = "coral-validate-errorArrow-top";
			
			if ( $(element).parents("form").length != 0 ) {
				container = $( $form ).form("option", "container");
			} 
			switch (tipsPosition) {
				case "leftTop": 
					errorArrowClass = "coral-validate-errorArrow-top";
					break;
				case "leftBottom": 
					errorArrowClass = "coral-validate-errorArrow-bottom";
					break;
				case "rightTop":
					errorArrowClass = "coral-validate-errorArrow-top";
					break;
				case "rightBottom":
					errorArrowClass = "coral-validate-errorArrow-bottom";
					break;
				case "right":
					errorArrowClass = "coral-validate-errorArrow-right";
					break;
				default:
					break;
			}

			var arrow = '<div class="' + errorArrowClass + '"></div>';
			if(id==null) {
				id = $element.attr("id", validatePrefix + uuid++).attr("id");
			}
			if($("."+id+validateSuffix).length>0){
				$("."+id+validateSuffix).find(".error-content").html(errorContent);
			} else {
				$message = $("<div class='" + id+validateSuffix + " coral-validate-state-error'><div class='error-content'>"+errorContent+"</div>"+arrow+"</div>");
				var formContext = $(element).parents("form").attr("context");
				// 如果为elements 则插在element后面，如果为body 则插在body里面；
				if ( $( formContext ).length > 0 ) {
					$( formContext ).append($message);
				} else {
					$(document.body).append($message);
				}
					
				position = $element.position();
			}
			var my = "left top", at = "right-20 top-" + ( $message.outerHeight() + 8 );
			switch (tipsPosition) {
				case "leftTop": 
					my = "right top";
					at = "left+" + $message.outerWidth() + " top-" + ( $message.outerHeight() + 8 );
					break;
				case "leftBottom": 
					my = "right bottom";
					at = "left+" + $message.outerWidth() + " bottom+" + ( $message.outerHeight() + 8 );
					break;
				case "rightTop":
					my = "left top";
					at = "right-20 top-" + ( $message.outerHeight() + 8 );
					break;
				case "rightBottom":
					my = "left bottom";
					at = "right-20 bottom+" + ( $message.outerHeight() + 8 );
					break;
				case "right":
					my = "left middle";
					at = "right+15 middle";
					break;
				default:
					break;
			};
			
			$message.position({
				my: my,
				at: at,
				of: $element
			});
			
			$component.addClass("coral-validate-error");
			//}, 0);
			var that = this;
			// 校验提示信息（不包括红色边框），在2秒后消失。
			setTimeout(function() {
				//that.hideErrorsTip($element);
			}, 2000);	
		},
		/**
		 * 清除页面上的错误提示信息，以及元素的红色提示边框
		 */
		clearErrors:function(context){
			var fields = $.coral.findComponent( ".ctrl-form-element", context ),
				i = 0, 
				l = fields.length;
			for (i; i < l; i++) {
		        var c = fields[i];
		        if ( c instanceof Array ){
		        	$(c[0].element)[c[0].name]("clearError");
		        }else {
		        	 c.clearError();
		        }
			}
		},
		clear: function() {
			$(".coral-validate-state-error").remove();
			$( ".coral-errorIcon" ).remove();
			$(".coral-validate-error").removeClass("coral-validate-error");
		},
		hideErrors: function ( element ) {
			var $element = $(element);
			var id = $element.attr("id");
			$("." + id + validateSuffix).remove();
			$( ".coral-errorIcon", $element ).remove();
			$element.removeClass("coral-validate-error hasErrorIcon ");
		},
	        	
		hideErrorsTip: function(element){
			var $element = $(element);
			var id = $element.attr("id");
			$("."+id + validateSuffix).remove();
		},
		_showTooltip: function(element, tips){
			var $element = $(element);
			var $message = $("<div class='coral-validate-tooltip'>" + tips + "</div>");
			$(document.body).after($message);
			var position = $element.position();
			$message.position({
				my: "left top",
				at: "right+20 top+" + ($(element).height()/2 - $message.outerHeight()/2),
				of: $element
			});
		},
		_hideTooltip: function(element){
			var $element = $(element);
			$('.coral-validate-tooltip').remove();
		},
		//截取字符串，根据长度（支持中英文混合）
		_getSubString: function(str, n) { 
			var r=/[^\x00-\xff]/g;			
			if(str.replace(r,"mm").length<=n)
				return str;
			
			var m = Math.floor(n/2); 
			for(var i = m; i < str.length; i++) {
				if (str.substr(0, i).replace(r,"mm").length >= n) { 
					return str.substr(0,i); 
				}
			}
			
			return str; 
		},
		//获取字符串的字节长度
		_getByteLength: function (str) {			
			var length = 0; 

			for (var i = 0; i < str.length; i++) {
				var item = str.charAt(i);
				
				if (item.match(/[^\x00-\xff]/ig) != null) //全角 
					length += 2; 
				else 
					length += 1; 
			} 
			return length; 
		}, 
		//判断是否是正整数
		_isPositiveInteger: function (str) {
			return parseInt(str).toString() === "NaN" ? false : (parseInt(str) > 0 ? true : false);
		},
		/**
		 * add field on form
		 */
		addField: function( fields, options ){
			var that = this;
			fields.each( function(index, field) {
				var $field = $( field ),
					form = $field.closest(".coral-form-default"),//form 初始化好才有coral-form-default这个样式
					formOptions =form.length > 0 ? 
						$.extend( {},$.validate.options, form["form"]("option") ): 
						$.extend( {},$.validate.options );
				if ( 
					// 说明form没有初始化好
					$field.closest(".coral-form-default").length === 0 && 
					// 说明存在form
					$field.closest("form").length > 0 ) return;
				
				var type = $.validate.getFieldType( $field ),
					component = $field[type]("component"),
					opts = $field[type]("option"),
					required = $field[type]("option", "required"),
					name = $field[type]("option", "name"),
					showStar = $field[type]("option", "showStar"),
					starBefore = $field[type]("option", "starBefore"),
					validTypeOptions = $field[type]("option", "validTypeOptions"),
					triggers = $field[type]("option", "triggers") || formOptions.triggers[type] || $.validate.options.triggers[type];
				//var excluded = opts.excluded || that.options.excluded;
				//options.fields[ name ] = $.extend({}, opts, options.fields[field]);
				if ( !$.data( $field[0], "inited" ) ) {
					$.data( $field[0], "inited", true );
				}
				
				 // 绑定触发校验的事件
				var events = $.map( triggers, function(item) {
                    return type + item + ".field";
                }).join(" ");	
				// 绑定组件的校验方法
				$field.off(".field").on( events, function( event, ui ) {
					$.validate.validItem($( this ), event, true);
				});
				// 绑定组件的校验方法
				$field.off(".restrictInput").on( type + "onkeydown.restrictInput", function( event, ui ) {
					return $.validate.restrictInput($( this ), event);
				})/*.on(type + "onfocus.restrictInput", function(event, ui) {
					this.style.imeMode = 'disabled';
				})*/;
				$field.off(".restrictInputup").on( type + "onkeyup.restrictInputup", function( event, ui ) {
					return $.validate.restrictInput($( this ), event);
				});
				if ($field[type]("option", "maxlength")){
					$.validate.showTooltip($(this), validTypeOptions);
				}
				// 绑定form的校验方法
				$field.off(".validate").on( type + formOptions.onStatus + ".validate", function( event, ui ) {
					$.validate.validItem($( this ), event, ui.hasTips);
				});
				$field.off(".prop").on( "onOptionChange.prop", function( event, ui ) {
					$.validate._onFieldOptionChange($( this ), event, ui);
				});
				// 初始化必输项设置 *
				if ( typeof required === "boolean" && required ) {
					$field.trigger( "onOptionChange", {key: "required", value: required } );
				}
			});
		},

		showTooltip: function (el, validTypeOptions){
			validTypeOptions = $.extend(true,{},$.validate.validTypeOptions,validTypeOptions);
			var showTooltip = validTypeOptions.maxlength.showTooltip;			
			if (!showTooltip) return;	
			$(el).attr("tooltips","tooltips");
			$(el).tooltip({
				items : "[tooltips]"
			}).addClass("hasTooltip");
			$.validate.getMaxLength(el);
			$(el).on({
				"keyup": function(e){
					$.validate.getMaxLength(el);
				}
			})
		},
		getMaxLength: function(el){
			var number = 0,
				val = $(el).val(),
			    type = $(el).attr( "component-role" ),
			    isLabel = $(el)[type]("option","isLabel"),
			    readonly = $(el)[type]("option","readonly"),
			    readonlyInput = $(el)[type]("option","readonlyInput"),
			    length = $.validate._getByteLength(val),
			    maxlength = $(el)[type]("option","maxlength"),
			    number = maxlength - length;
			if(isLabel == false && readonly == false && readonlyInput == false){
				$(el).tooltip("option","content","还可以输入"+ number +"个字符");
			}
		},
		/**
		 * 强制校验处理方法
		 **/
		restrictInput: function ( el, event, hasTips ) {
			var type = $( el ).attr( "component-role" ),
				opts = $( el )[type]("option"),
				result = null;

			$.each($.validate.validTypeNames, function(i, d) {
				var opt = opts[d],// maxlength opt -> 10
					arg1 = $.validate.validTypeOptions[d],// {}				
					arg2 = $.validate.validTypeOptions[opt],// {}
					argKey = null,
					argValue = null;
					
				if (opt && arg1) {
					argKey = d;
					argValue = arg1;
				} else if (opt && arg2) {
					argKey = opt;
					argValue = arg2;
				}

				if ( argKey && argValue ) {
					if ( argValue.restrictInput ) {
						result = $.validate.forbiddenInput(argKey, event, el);
					}
				}
			});	

			return result;
	    },
	    /**
	    	禁止输入处理
	    **/
	    forbiddenInput: function (arg, event, el) {
	    	var type = $( el ).attr( "component-role" ),
				opts = $( el )[type]("option"),
				result = null;
	    	var val = el.val();
	    	switch (arg) {
				case "maxlength":
					if ( ( !event.ctrlKey && -1 == $.inArray(event.keyCode,[8, 46, 9, 37, 39, 35, 36]) ) && ( "" !== $.validate._checkMaxlength(opts[arg], val+String.fromCharCode(event.keyCode)) ) ) {
						var length = 0,
						    string = [];
						for ( var i = 0; i < val.length; i++ ){
							var item = val.charAt(i);														
							if ( item.match(/[^\x00-\xff]/ig) !== null ){//全角 
								length += 2; 
								if ( length <= opts[arg] ){
									string.push(item);
								}
						}
							else {
								length += 1; 
								if ( length <= opts[arg] ){
									string.push(item);
								}
							}
						} 
						el.val(string.join(""));
						result =  false;
					}
					break;
				case "number":
					if ( ( !event.ctrlKey && -1 == $.inArray(event.keyCode,[8, 46, 9, 37, 39, 35, 36]) ) && ( event.keyCode < 48 || (event.keyCode > 57 && event.keyCode < 96) || event.keyCode > 105 ) ) {
						result = false;
					}
					var re = /^[0-9]+.?[0-9]*$/;
					if ( !re.test(val)){
						$( el ).val("");
					}
					break;
				default:
					break;
			}

			return result;
	    },
	    _changeRequiredMark: function($field, ui) {
	    	var type = $field.attr("component-role");
	    	var form = $field.closest(".ctrl-init-form"),
				formOptions;
			if ( form.length > 0 ) {
				formOptions = form.form("option");
			}
	    	var showRequiredMark = $field[type]("option", "showRequiredMark") || 
					(formOptions && formOptions.showRequiredMark) || $.validate.showRequiredMark;
			var hideRequiredMark = $field[type]("option", "hideRequiredMark") || 
					(formOptions && formOptions.hideRequiredMark) || $.validate.hideRequiredMark;
			showRequiredMark = $.coral.toFunction(showRequiredMark);
			hideRequiredMark = $.coral.toFunction(hideRequiredMark);
			if ( ui.value === true ) {
				showRequiredMark && showRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
			} else {
				hideRequiredMark && hideRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
			}
	    },
		_onFieldOptionChange: function( $field, e, ui ) {
			var type = $field.attr("component-role"),
				key = ui.key;
			switch(key) {
				case "required":
					$.validate._changeRequiredMark($field, ui);
					$field[type]("clearError");
				case "isLabel":
				case "readonly":
				case "readonlyInput":
					$field[type]("clearError"); 
			}
		},		
		/**
		 * 校验表单元素的方法
		 **/
		validItem: function ( el, event, hasTips ) {
			var options = this.options;
			var data = {
				validoptions: options,
				hasTips: hasTips,
				element: el
			};
			var type = $( el ).attr( "component-role" ),
				opts = $( el )[type]("option"),
				excluded = opts.excluded;
			if (excluded) return ;
		 	$.validate.validateField( event ,data );    	 	
	    },
		setExcluded: function(isSet, context){
			var fields = $.coral.findComponent( ".ctrl-form-element", $(context) ),
				i = 0, 
				l = fields.length;
			for (i; i < l; i++) {
		        var c = fields[i];
		        if ( c instanceof Array ){
		        	$(c[0].element)[c[0].name]("option", "excluded", isSet);
		        	$(c[0].element)[c[0].name]("component").removeClass( "coral-validate-error" );
		        	$(c[0].element)[c[0].name]("component").removeAttr( "data-errors" ); 
		        	$( ".coral-errorIcon", $(c[0].element)[c[0].name]("component") ).remove();
		        	// clear error states
		        	$(c[0].element).prop( "isError", false );
		        } else {
		        	c._setOption("excluded", isSet);
		        	c.component().removeClass( "coral-validate-error" );
			        c.component().removeAttr( "data-errors" ); 
			        $( ".coral-errorIcon", c.component() ).remove();
			        // clear error states
			        c.element.prop( "isError", false );
		        }
			}
		}
	};
	
	$.component( "coral.validate", {
		version: $.coral.version,
		options: {
			onStatus: "onstatus",
			showStar: true, // 必输项，是否显示 “*”
			errMessages: {
				required: "* 必输项",
				minLength: "{0}",
				maxLength: "{0}",
				pattern: "",
				validType: {
					number: ""	
				},
				valid: ""
			}, 
			fields: {},
			errMsgPosition: "leftBottom", // "leftTop", "leftBottom", "rightTop", "rightBottom", "right"
			excluded: [":disabled", ":hidden", ":not(:visible)"] // ":disabled,:hidden,:not(:visible)" 校验的时候排除不检验的元素
		},
		
		/**
		 * judge the field need valid or not
		 **/
		_isExclud: function ( $field, excluded ) {
	    	 if ( !excluded ) {
	    		 return false;
	    	 }
	    	 
	    	 var length = excluded.length;
	    	 var type = $field.attr( "component-role" ),
	    	 	opts = $field[type]("option"),
	    	 	isExcluded = opts.excluded,
				$component = $field[type]("component");
	    	 for ( var i = 0; i < length; i++ ) {
	             if ( ( "string" === typeof excluded[i] && 
	            		 $component.is(excluded[i]) ) || isExcluded ){
	                 return true;
	             }
	         }
	    	 return false;
	     },
		/**
		 * 构建组件
		 * @return
		 */
		_create: function() {
			var that = this;
			this.element.addClass( "coral-validate ctrl-init ctrl-init-validate" );
			that._initField();
			this.element.addClass( "inited-validate" );
		},
		_destroy: function(){
			this.element.removeClass( "coral-validate ctrl-init ctrl-init-validate" );
			this._super();
		},
		//设置属性处理
		_setOption: function( key, value ) {
			//默认属性不允许更改
			if (key == "id" || key == "name") {
				return;
			}
			
			this._super( key, value );
			
			return ;
		},
		/**
		 * remove field on form
		 */
		removeField: function(){
			
		},
		/**
		 * update rules on field
		 */ 
		updateField: function(){
			
		},
		/**
		 * add field on form
		 *//*
		addField: function( fields, options ){
			var that = this;
				
			fields.each( function(index, field) {
				var $field = $( field ),
					type = $.validate.getFieldType( $field ),
					component = $field[type]("component"),
					opts = $field[type]("option"),
					required = $field[type]("option", "required"),
					name = $field[type]("option", "name"),
					showStar = $field[type]("option", "showStar"),
					starBefore = $field[type]("option", "starBefore"),
					triggers = $field[type]("option", "triggers") || that.options.triggers[type];
				//var excluded = opts.excluded || that.options.excluded;
				options.fields[ name ] = $.extend({}, opts, options.fields[field]);
				if ( !$.data( $field[0], "inited" ) ) {
					$.data( $field[0], "inited", true );
				}
				
				 // 绑定触发校验的事件
				var events = $.map( triggers, function(item) {
                    return type + item + ".field";
                }).join(" ");	
				// 绑定组件的校验方法
				$field.off(".field").on( events, function( event, ui ) {
					that.validItem($( this ), event, true);
				});
				// 绑定form的校验方法
				$field.off(".validate").on( type + that.options.onStatus + ".validate", function( event, ui ) {
					that.validItem($( this ), event, ui.hasTips);
				});
				$field.off(".prop").on( "onOptionChange.prop", function( event, ui ) {
					that._onFieldOptionChange($( this ), event, ui);
				});
				// 初始化必输项设置 *
				if ( typeof required === "boolean" && required ) {
					$field.trigger( "onOptionChange", {key: "required", value: required } );
				}
			});
		},*/
		/*_onFieldOptionChange: function( $field, e, ui ) {
			var type = $field.attr( "component-role" );
			if ( ui.key == "required" ) {
				var showRequiredMark = $field[type]("option", "showRequiredMark") || 
					this.options.showRequiredMark || $.validate.showRequiredMark;
				var hideRequiredMark = $field[type]("option", "hideRequiredMark") || 
					this.options.hideRequiredMark || $.validate.hideRequiredMark;
				if ( ui.value == true ) {
					showRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
				} else {
					hideRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
				}
			}
		},*/
		/**
		 * 绑定触发校验的事件
		 * @return 
		 */
		_initField: function() {
			//var fields = $(this.element).parent().find($("[class*='coral-validation-']"));
			var fields = $( this.element ).find( ".ctrl-form-element" );
			$.validate.addField( fields, this.options );
			
		},
	     /**
		 *  校验所有元素
		 *  @param el 组件jquery对象
		 *  @return {boolean} true代表通过，false代表不通过
		 */
		valid: function( el ) {
			if ( !el ) {
				el = this.element;
			}
			
			var that = this,
				fields = null,
				errCount = 0,
				excluded = this.options.excluded,
				errTipsType = null,
				hasTips = true;
			
			if ( excluded && "string" === typeof excluded ) {
		         excluded = $.map( excluded.split( ',' ), function( item ) {
		             return $.trim( item );
		         });
		    }
			
			if ( el.is($("[class*='coral-validation-']")) ) {
				fields = $(el);
			} else {
				fields = $(el).parent().find($("[class*='coral-validation-']"));
			}
			if ( "form" === $(el)[0].tagName.toLowerCase()) {
				errTipsType = $(el).form("option", "errTipsType");
			}
			errTipsType = "none";
			fields.each( function( index ) {
				var $field = $( this ),
					type = $.validate.getFieldType( $field );
				 // 如果在排除范围内，则返回，不校验
				if ( that._isExclud( $field, excluded) ) {
		    		 return ;
				}
				if ( "none" === errTipsType ) {
					hasTips = false;
				}
				
				$field.trigger( type + that.options.onStatus + ".validate",  { hasTips: hasTips } );
				 
				if ( $field.prop( "isError" ) ) {
					if ( "first" === errTipsType ) {
						hasTips = false;
					}
					if(errCount == 0){
						$field[type]("focus");
					}
					++ errCount;
				}
			});
			return ( errCount > 0 ? false : true );
		}	
	});	
})(jQuery);

/*!
 * 组件库 4.0：鼠标辅助工具
 *
 * 依赖JS文件:
 *	jquery.coral.component.js
 */
(function( $, undefined ) {

var mouseHandled = false;
$( document ).mouseup( function() {
	mouseHandled = false;
});

$.component("coral.mouse", {
	version: "4.0.1",
	options: {
		cancel: "input,textarea,button,select,option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.bind("mousedown."+this.componentName, function(event) {
				return that._mouseDown(event);
			})
			.bind("click."+this.componentName, function(event) {
				if (true === $.data(event.target, that.componentName + ".preventClickEvent")) {
					$.removeData(event.target, that.componentName + ".preventClickEvent");
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind("."+this.componentName);
		if ( this._mouseMoveDelegate ) {
			this.document
				.unbind("mousemove."+this.componentName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.componentName, this._mouseUpDelegate);
		}
	},

	_mouseDown: function(event) {
		// don't let more than one component handle mouseStart
		if( mouseHandled ) { return; }

		// we may have missed mouseup (out of window)
		(this._mouseStarted && this._mouseUp(event));

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = (event.which === 1),
			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				that.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if (true === $.data(event.target, this.componentName + ".preventClickEvent")) {
			$.removeData(event.target, this.componentName + ".preventClickEvent");
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return that._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return that._mouseUp(event);
		};
		this.document
			.bind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.bind( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// IE mouseup check - mouseup happened when mouse was out of window
		if ($.coral.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
			return this._mouseUp(event);
		}
		// Iframe mouseup check - mouseup occurred in another document
		else if ( !event.which ) {
			return this._mouseUp( event );
		}
		
		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		this.document
			.unbind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.unbind( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target === this._mouseDownEvent.target) {
				$.data(event.target, this.componentName + ".preventClickEvent", true);
			}

			this._mouseStop(event);
		}

		mouseHandled = false;
		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function(/* event */) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function(/* event */) {},
	_mouseDrag: function(/* event */) {},
	_mouseStop: function(/* event */) {},
	_mouseCapture: function(/* event */) { return true; }
});

})(jQuery);

/*!
 * jQuery coral Sortable 4.0.1
 *
 * Depends:
 *	jquery.coral.core.js
 *	jquery.coral.component.js
 *	jquery.coral.mouse.js
 */
(function( $, undefined ) {

/*jshint loopfunc: true */

function isOverAxis( x, reference, size ) {
	return ( x >= reference ) && ( x < ( reference + size ) );
}

function isFloating(item) {
	return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
}

$.component("coral.sortable", $.coral.mouse, {
	version: "4.0.1",
	componentEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},
	_create: function() {

		var o = this.options;
		this.containerCache = {};
		this.element.addClass("coral-sortable");

		//Get the items
		this.refresh();

		//Let's determine if the items are being displayed horizontally
		this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();
		
		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		this.element.find( ".coral-sortable-handle" ).removeClass( "coral-sortable-handle" );
		$.each( this.items, function() {
			( this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) : this.item )
					.addClass( "coral-sortable-handle" );
		});
	},
	_destroy: function() {
		this.element
			.removeClass( "coral-sortable coral-sortable-disabled" )
			.find( ".coral-sortable-handle" )
			.removeClass( "coral-sortable-handle" );
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[i].item.removeData(this.componentName + "-item");
		}

		return this;
	},

	_mouseCapture: function(event, overrideHandle) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if (this.reverting) {
			return false;
		}

		if(this.options.disabled || this.options.type === "static") {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems(event);

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$(event.target).parents().each(function() {
			if($.data(this, that.componentName + "-item") === that) {
				currentItem = $(this);
				return false;
			}
		});
		if($.data(event.target, that.componentName + "-item") === that) {
			currentItem = $(event.target);
		}

		if(!currentItem) {
			return false;
		}
		if(this.options.handle && !overrideHandle) {
			$(this.options.handle, currentItem).find("*").addBack().each(function() {
				if(this === event.target) {
					validHandle = true;
				}
			});
			if(!validHandle) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function(event, overrideHandle, noActivation) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css("position", "absolute");
		this.cssPosition = this.helper.css("position");

		//Generate the original position
		this.originalPosition = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Cache the former DOM position
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] !== this.currentItem[0]) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if(o.containment) {
			this._setContainment();
		}

		if( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
		}

		if(o.opacity) { // opacity option
			if (this.helper.css("opacity")) {
				this._storedOpacity = this.helper.css("opacity");
			}
			this.helper.css("opacity", o.opacity);
		}

		if(o.zIndex) { // zIndex option
			if (this.helper.css("zIndex")) {
				this._storedZIndex = this.helper.css("zIndex");
			}
			this.helper.css("zIndex", o.zIndex);
		}

		//Prepare scrolling
		if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger("start", event, this._uiHash());

		//Recache the helper size
		if(!this._preserveHelperProportions) {
			this._cacheHelperProportions();
		}


		//Post "activate" events to possible containers
		if( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if($.coral.ddmanager) {
			$.coral.ddmanager.current = this;
		}

		if ($.coral.ddmanager && !o.dropBehaviour) {
			$.coral.ddmanager.prepareOffsets(this, event);
		}

		this.dragging = true;

		this.helper.addClass("coral-sortable-helper");
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;

	},

	_mouseDrag: function(event) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		if (!this.lastPositionAbs) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if(this.options.scroll) {
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
				}

				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
				}

			} else {

				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}

				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}

			}

			if(scrolled !== false && $.coral.ddmanager && !o.dropBehaviour) {
				$.coral.ddmanager.prepareOffsets(this, event);
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo("absolute");

		//Set the helper position
		if(!this.options.axis || this.options.axis !== "y") {
			this.helper[0].style.left = this.position.left+"px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
			this.helper[0].style.top = this.position.top+"px";
		}

		//Rearrange
		for (i = this.items.length - 1; i >= 0; i--) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[i];
			itemElement = item.item[0];
			intersection = this._intersectsWithPointer(item);
			if (!intersection) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items form other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this moving items in "sub-sortables" can cause the placeholder to jitter
			// beetween the outer and inner container.
			if (item.instance !== this.currentContainer) {
				continue;
			}

			// cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if (itemElement !== this.currentItem[0] &&
				this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
				!$.contains(this.placeholder[0], itemElement) &&
				(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
					this._rearrange(event, item);
				} else {
					break;
				}

				this._trigger("change", event, this._uiHash());
				break;
			}
		}

		//Post events to containers
		this._contactContainers(event);

		//Interconnect with droppables
		if($.coral.ddmanager) {
			$.coral.ddmanager.drag(this, event);
		}

		//Call callbacks
		this._trigger("sort", event, this._uiHash());

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function(event, noPropagation) {

		if(!event) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ($.coral.ddmanager && !this.options.dropBehaviour) {
			$.coral.ddmanager.drop(this, event);
		}

		if(this.options.revert) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
			}
			this.reverting = true;
			$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
				that._clear(event);
			});
		} else {
			this._clear(event, noPropagation);
		}

		return false;

	},

	cancel: function() {

		if(this.dragging) {

			this._mouseUp({ target: null });

			if(this.options.helper === "original") {
				this.currentItem.css(this._storedCSS).removeClass("coral-sortable-helper");
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for (var i = this.containers.length - 1; i >= 0; i--){
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", null, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		if (this.placeholder) {
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) {
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
			}
			if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
				this.helper.remove();
			}

			$.extend(this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			});

			if(this.domPosition.prev) {
				$(this.domPosition.prev).after(this.currentItem);
			} else {
				$(this.domPosition.parent).prepend(this.currentItem);
			}
		}

		return this;

	},

	serialize: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			str = [];
		o = o || {};

		$(items).each(function() {
			var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
			if (res) {
				str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
			}
		});

		if(!str.length && o.key) {
			str.push(o.key + "=");
		}

		return str.join("&");

	},

	toArray: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			ret = [];

		o = o || {};

		items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function(item) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
		) {
			return isOverElement;
		} else {

			return (l < x1 + (this.helperProportions.width / 2) && // Right Half
				x2 - (this.helperProportions.width / 2) < r && // Left Half
				t < y1 + (this.helperProportions.height / 2) && // Bottom Half
				y2 - (this.helperProportions.height / 2) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function(item) {

		var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (!isOverElement) {
			return false;
		}

		return this.floating ?
			( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
			: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

	},

	_intersectsWithSides: function(item) {

		var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (this.floating && horizontalDirection) {
			return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
		} else {
			return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && (delta > 0 ? "down" : "up");
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && (delta > 0 ? "right" : "left");
	},

	refresh: function(event) {
		this._refreshItems(event);
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
	},

	_getItemsAsjQuery: function(connected) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if(connectWith && connected) {
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for ( j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.componentFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".coral-sortable-helper").not(".coral-sortable-placeholder"), inst]);
					}
				}
			}
		}

		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".coral-sortable-helper").not(".coral-sortable-placeholder"), this]);

		for (i = queries.length - 1; i >= 0; i--){
			queries[i][0].each(function() {
				items.push(this);
			});
		}

		return $(items);

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find(":data(" + this.componentName + "-item)");

		this.items = $.grep(this.items, function (item) {
			for (var j=0; j < list.length; j++) {
				if(list[j] === item.item[0]) {
					return false;
				}
			}
			return true;
		});

	},

	_refreshItems: function(event) {

		this.items = [];
		this.containers = [this];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
			connectWith = this._connectWith();

		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for (j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.componentFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);
					}
				}
			}
		}

		for (i = queries.length - 1; i >= 0; i--) {
			targetData = queries[i][1];
			_queries = queries[i][0];

			for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
				item = $(_queries[j]);

				item.data(this.componentName + "-item", targetData); // Data for target checking (mouse manager)

				items.push({
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				});
			}
		}

	},

	refreshPositions: function(fast) {

		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for (i = this.items.length - 1; i >= 0; i--){
			item = this.items[i];

			//We ignore calculating positions of all connected containers when we're not over them
			if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
				continue;
			}

			t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

			if (!fast) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if(this.options.custom && this.options.custom.refreshContainers) {
			this.options.custom.refreshContainers.call(this);
		} else {
			for (i = this.containers.length - 1; i >= 0; i--){
				p = this.containers[i].element.offset();
				this.containers[i].containerCache.left = p.left;
				this.containers[i].containerCache.top = p.top;
				this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function(that) {
		that = that || this;
		var className,
			o = that.options;

		if(!o.placeholder || o.placeholder.constructor === String) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[0].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[0] )
							.addClass(className || that.currentItem[0].className+" coral-sortable-placeholder")
							.removeClass("coral-sortable-helper");

					if ( nodeName === "tr" ) {
						that.currentItem.children().each(function() {
							$( "<td>&#160;</td>", that.document[0] )
								.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
								.appendTo( element );
						});
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function(container, p) {

					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
					if(className && !o.forcePlaceholderSize) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
				}
			};
		}

		//Create the placeholder
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

		//Append it after the actual current item
		that.currentItem.after(that.placeholder);

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update(that, that.placeholder);

	},

	_contactContainers: function(event) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// get innermost container that intersects with item
		for (i = this.containers.length - 1; i >= 0; i--) {

			// never consider a container that's located within the item itself
			if($.contains(this.currentItem[0], this.containers[i].element[0])) {
				continue;
			}

			if(this._intersectsWith(this.containers[i].containerCache)) {

				// if we've already found a container and it's more "inner" than this, then continue
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
					continue;
				}

				innermostContainer = this.containers[i];
				innermostIndex = i;

			} else {
				// container doesn't intersect. trigger "out" event if necessary
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", event, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		// if no intersecting containers found, return
		if(!innermostContainer) {
			return;
		}

		// move the item into the container if it's not there already
		if(this.containers.length === 1) {
			if (!this.containers[innermostIndex].containerCache.over) {
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}
		} else {

			//When entering a new container, we will find the item with the least distance and append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || isFloating(this.currentItem);
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "clientX" : "clientY";
			
			for (j = this.items.length - 1; j >= 0; j--) {
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
					continue;
				}
				if(this.items[j].item[0] === this.currentItem[0]) {
					continue;
				}
				
				cur = this.items[j].item.offset()[posProperty];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up": "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
				return;
			}

			if(this.currentContainer === this.containers[innermostIndex]) {
				return;
			}

			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
			this.currentContainer = this.containers[innermostIndex];

			//Update the placeholder
			this.options.placeholder.update(this.currentContainer, this.placeholder);

			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		}


	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

		//Add the helper to the DOM if that didn't happen already
		if(!helper.parents("body").length) {
			$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
		}

		if(helper[0] === this.currentItem[0]) {
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
		}

		if(!helper[0].style.width || o.forceHelperSize) {
			helper.width(this.currentItem.width());
		}
		if(!helper[0].style.height || o.forceHelperSize) {
			helper.height(this.currentItem.height());
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {


		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this information
		// with an ugly IE fix
		if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.coral.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition === "relative") {
			var p = this.currentItem.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if(o.containment === "parent") {
			o.containment = this.helper[0].parentNode;
		}
		if(o.containment === "document" || o.containment === "window") {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
				($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
			];
		}

		if(!(/^(document|window|parent)$/).test(o.containment)) {
			ce = $(o.containment)[0];
			co = $(o.containment).offset();
			over = ($(ce).css("overflow") !== "hidden");

			this.containment = [
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options

			if(this.containment) {
				if(event.pageX - this.offset.click.left < this.containment[0]) {
					pageX = this.containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < this.containment[1]) {
					pageY = this.containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > this.containment[2]) {
					pageX = this.containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > this.containment[3]) {
					pageY = this.containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
				pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
				pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																// The absolute mouse position
				this.offset.click.top -													// Click offset (relative to the element)
				this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX -																// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_rearrange: function(event, i, a, hardRefresh) {

		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay(function() {
			if(counter === this.counter) {
				this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
			}
		});

	},

	_clear: function(event, noPropagation) {

		this.reverting = false;
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and
		// everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
		if(!this._noFinalSort && this.currentItem.parent().length) {
			this.placeholder.before(this.currentItem);
		}
		this._noFinalSort = null;

		if(this.helper[0] === this.currentItem[0]) {
			for(i in this._storedCSS) {
				if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
					this._storedCSS[i] = "";
				}
			}
			this.currentItem.css(this._storedCSS).removeClass("coral-sortable-helper");
		} else {
			this.currentItem.show();
		}

		if(this.fromOutside && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		}
		if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".coral-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if (this !== this.currentContainer) {
			if(!noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}
		}


		//Post events to containers
		for (i = this.containers.length - 1; i >= 0; i--){
			if(!noPropagation) {
				delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
			}
			if(this.containers[i].containerCache.over) {
				delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
				this.containers[i].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if(this._storedOpacity) {
			this.helper.css("opacity", this._storedOpacity);
		}
		if(this._storedZIndex) {
			this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
		}

		this.dragging = false;
		if(this.cancelHelperRemoval) {
			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return false;
		}

		if(!noPropagation) {
			this._trigger("beforeStop", event, this._uiHash());
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

		if(this.helper[0] !== this.currentItem[0]) {
			this.helper.remove();
		}
		this.helper = null;

		if(!noPropagation) {
			for (i=0; i < delayedTriggers.length; i++) {
				delayedTriggers[i].call(this, event);
			} //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());
		}

		this.fromOutside = false;
		return true;

	},

	_trigger: function() {
		if ($.Component.prototype._trigger.apply(this, arguments) === false) {
			this.cancel();
		}
	},

	_uiHash: function(_inst) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $([]),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

});

})(jQuery);

/*!
 * 组件库4.0：拖动辅助工具
 *
 * 依赖JS文件:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.component.js
 */
(function( $, undefined ) {

$.component("coral.draggable", $.coral.mouse, {
	version: "4.0.1",
	componentEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
			this.element[0].style.position = "relative";
		}
		if (this.options.addClasses){
			this.element.addClass("coral-draggable");
		}
		if (this.options.disabled){
			this.element.addClass("coral-draggable-disabled");
		}
		this._setHandleClassName();
		
		this._mouseInit();
	},
	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".coral-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this.element.removeClass( "coral-draggable coral-draggable-dragging coral-draggable-disabled" );
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function(event) {

		var document = this.document[ 0 ],
			o = this.options;

		// support: IE9
		// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
		try {
			// Support: IE9+
			// If the <body> is blurred, IE will switch windows, see #9520
			if ( document.activeElement && document.activeElement.nodeName.toLowerCase() !== "body" ) {
				// Blur any element that currently has focus, see #4261
				$( document.activeElement ).blur();
			}
		} catch ( error ) {}

		// among others, prevent a drag on a resizable-handle
		if (this.helper || o.disabled || $(event.target).closest(".coral-resizable-handle").length > 0) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle(event);
		if (!this.handle) {
			return false;
		}

		$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
			$("<div class='coral-draggable-iframeFix' style='background: #fff;'></div>")
			.css({
				width: this.offsetWidth + "px", height: this.offsetHeight + "px",
				position: "absolute", opacity: "0.001", zIndex: 1000
			})
			.css($(this).offset())
			.appendTo("body");
		});

		return true;

	},

	_mouseStart: function(event) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		this.helper.addClass("coral-draggable-dragging");

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ($.coral.ddmanager) {
			$.coral.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.offsetParentCssPosition = this.offsetParent.css( "position" );

		//The element's absolute position on the page minus margins
		this.offset = this.positionAbs = this.element.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		//Reset scroll cache
		this.offset.scroll = false;

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if (this._trigger("start", event) === false) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ($.coral.ddmanager && !o.dropBehaviour) {
			$.coral.ddmanager.prepareOffsets(this, event);
		}

		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
		if ( $.coral.ddmanager ) {
			$.coral.ddmanager.dragStart(this, event);
		}

		return true;
	},

	_mouseDrag: function(event, noPropagation) {
		// reset any necessary cached properties (see #5009)
		if ( this.offsetParentCssPosition === "fixed" ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo("absolute");

		//Call plugins and callbacks and use the resulting position if something is returned
		if (!noPropagation) {
			var ui = this._uiHash();
			if(this._trigger("drag", event, ui) === false) {
				this._mouseUp({});
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";
		
		if($.coral.ddmanager) {
			$.coral.ddmanager.drag(this, event);
		}

		return false;
	},

	_mouseStop: function(event) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ($.coral.ddmanager && !this.options.dropBehaviour) {
			dropped = $.coral.ddmanager.drop(this, event);
		}

		//if a drop comes from outside (a sortable)
		if(this.dropped) {
			dropped = this.dropped;
			this.dropped = false;
		}

		//if the original element is no longer in the DOM don't bother to continue (see #8269)
		if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
			return false;
		}

		if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
				if(that._trigger("stop", event) !== false) {
					that._clear();
				}
			});
		} else {
			if(this._trigger("stop", event) !== false) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function(event) {
		//Remove frame helpers
		$("div.coral-draggable-iframeFix").each(function() {
			this.parentNode.removeChild(this);
		});

		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
		if( $.coral.ddmanager ) {
			$.coral.ddmanager.dragStop(this, event);
		}
		
		// The interaction is over; whether or not the click resulted in a drag, focus the element
		this.element.focus();
		
		return $.coral.mouse.prototype._mouseUp.call(this, event);
	},

	cancel: function() {

		if(this.helper.is(".coral-draggable-dragging")) {
			this._mouseUp({});
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function(event) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
			this.handleElement.addClass( "coral-draggable-handle" );
	},
	
	_removeHandleClassName: function() {
		this.handleElement.removeClass( "coral-draggable-handle" );
	},
		
	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[ 0 ], [ event ])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

		if (!helper.parents("body").length) {
			helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
		}

		if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
			helper.css("position", "absolute");
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},
	
	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt(this.helper.css( "top" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt(this.helper.css( "left" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},
	
	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.element.css("marginLeft"), 10) || 0),
			top: (parseInt(this.element.css("marginTop"), 10) || 0),
			right: (parseInt(this.element.css("marginRight"), 10) || 0),
			bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
		};
	},
	
	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var over, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document") {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		over = c.css( "overflow" ) !== "hidden";

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) - ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) - this.helperProportions.width - this.margins.left - this.margins.right,
			( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) - ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) - this.helperProportions.height - this.margins.top  - this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function(d, pos) {

		if (!pos) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod)
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ){
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if (event.pageX - this.offset.click.left < containment[0]) {
					pageX = containment[0] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top < containment[1]) {
					pageY = containment[1] + this.offset.click.top;
				}
				if (event.pageX - this.offset.click.left > containment[2]) {
					pageX = containment[2] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top > containment[3]) {
					pageY = containment[3] + this.offset.click.top;
				}
			}

			if (o.grid) {
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (
				pageY -																	// The absolute mouse position
				this.offset.click.top	-												// Click offset (relative to the element)
				this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (
				pageX -																	// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this.helper.removeClass("coral-draggable-dragging");
		if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function(type, event, ui) {
		ui = ui || this._uiHash();
		$.coral.plugin.call( this, type, [ event, ui, this ], true );
		//The absolute position has to be recalculated after plugins
		if(type === "drag") {
			this.positionAbs = this._convertPositionTo("absolute");
		}
		return $.Component.prototype._trigger.call(this, type, event, ui);
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

});

$.coral.plugin.add("draggable", "connectToSortable", {
	start: function( event, ui, inst ) {

		var o = inst.options,
			uiSortable = $.extend({}, ui, { item: inst.element });
		inst.sortables = [];
		$(o.connectToSortable).each(function() {
			var sortable = $.data(this, "coral-sortable");
			if (sortable && !sortable.options.disabled) {
				inst.sortables.push({
					instance: sortable,
					shouldRevert: sortable.options.revert
				});
				sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
				sortable._trigger("activate", event, uiSortable);
			}
		});

	},
	stop: function( event, ui, inst ) {

		//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
		var uiSortable = $.extend( {}, ui, {
			item: inst.element
		});

		$.each(inst.sortables, function() {
			if(this.instance.isOver) {

				this.instance.isOver = 0;

				inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
				this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

				//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
				if(this.shouldRevert) {
					this.instance.options.revert = this.shouldRevert;
				}

				//Trigger the stop of the sortable
				this.instance._mouseStop(event);

				this.instance.options.helper = this.instance.options._helper;

				//If the helper has been the original item, restore properties in the sortable
				if(inst.options.helper === "original") {
					this.instance.currentItem.css({ top: "auto", left: "auto" });
				}

			} else {
				this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
				this.instance._trigger("deactivate", event, uiSortable);
			}

		});

	},
	drag: function( event, ui, inst ) {

		var that = this;

		$.each(inst.sortables, function() {

			var innermostIntersecting = false,
				thisSortable = this;

			//Copy over some variables to allow calling the sortable's native _intersectsWith
			this.instance.positionAbs = inst.positionAbs;
			this.instance.helperProportions = inst.helperProportions;
			this.instance.offset.click = inst.offset.click;

			if(this.instance._intersectsWith(this.instance.containerCache)) {
				innermostIntersecting = true;
				$.each(inst.sortables, function () {
					this.instance.positionAbs = inst.positionAbs;
					this.instance.helperProportions = inst.helperProportions;
					this.instance.offset.click = inst.offset.click;
					if (this !== thisSortable &&
						this.instance._intersectsWith(this.instance.containerCache) &&
						$.contains(thisSortable.instance.element[0], this.instance.element[0])
					) {
						innermostIntersecting = false;
					}
					return innermostIntersecting;
				});
			}


			if(innermostIntersecting) {
				//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
				if(!this.instance.isOver) {

					this.instance.isOver = 1;
					//Now we fake the start of dragging for the sortable instance,
					//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
					//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
					this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("coral-sortable-item", true);
					this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
					this.instance.options.helper = function() { return ui.helper[0]; };

					event.target = this.instance.currentItem[0];
					this.instance._mouseCapture(event, true);
					this.instance._mouseStart(event, true, true);

					//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
					this.instance.offset.click.top = inst.offset.click.top;
					this.instance.offset.click.left = inst.offset.click.left;
					this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
					this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

					inst._trigger("toSortable", event);
					inst.dropped = this.instance.element; //draggable revert needs that
					//hack so receive/update callbacks work (mostly)
					inst.currentItem = inst.element;
					this.instance.fromOutside = inst;

				}

				//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
				if(this.instance.currentItem) {
					this.instance._mouseDrag(event);
				}

			} else {

				//If it doesn't intersect with the sortable, and it intersected before,
				//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
				if(this.instance.isOver) {

					this.instance.isOver = 0;
					this.instance.cancelHelperRemoval = true;

					//Prevent reverting on this forced stop
					this.instance.options.revert = false;

					// The out event needs to be triggered independently
					this.instance._trigger("out", event, this.instance._uiHash(this.instance));

					this.instance._mouseStop(event, true);
					this.instance.options.helper = this.instance.options._helper;

					//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
					this.instance.currentItem.remove();
					if(this.instance.placeholder) {
						this.instance.placeholder.remove();
					}

					inst._trigger("fromSortable", event);
					inst.dropped = false; //draggable revert needs that
				}

			}

		});

	}
});

$.coral.plugin.add("draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;
		
		if (t.css("cursor")) {
			o._cursor = t.css("cursor");
		}
		t.css("cursor", o.cursor);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if (o._cursor) {
			$("body").css("cursor", o._cursor);
		}
	}
});

$.coral.plugin.add("draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if(t.css("opacity")) {
			o._opacity = t.css("opacity");
		}
		t.css("opacity", o.opacity);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if(o._opacity) {
			$(ui.helper).css("opacity", o._opacity);
		}
	}
});

$.coral.plugin.add("draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] && i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if (!o.axis || o.axis !== "x") {
				if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}
			}

			if (!o.axis || o.axis !== "y") {
				if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}
			}

		}

		if (scrolled !== false && $.coral.ddmanager && !o.dropBehaviour) {
			$.coral.ddmanager.prepareOffsets(i, event);
		}

	}
});

$.coral.plugin.add("draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$(o.snap.constructor !== String ? ( o.snap.items || ":data(coral-draggable)" ) : o.snap).each(function() {
			var $t = $(this),
				$o = $t.offset();
			if (this !== i.element[0]) {
				i.snapElements.push({
					item: this,
					width: $t.outerWidth(), height: $t.outerHeight(),
					top: $o.top, left: $o.left
				});
			}
		});

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for (i = inst.snapElements.length - 1; i >= 0; i--){

			l = inst.snapElements[i].left;
			r = l + inst.snapElements[i].width;
			t = inst.snapElements[i].top;
			b = t + inst.snapElements[i].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
				if (inst.snapElements[i].snapping) {
					(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = false;
				continue;
			}

			if (o.snapMode !== "inner") {
				ts = Math.abs(t - y2) <= d;
				bs = Math.abs(b - y1) <= d;
				ls = Math.abs(l - x2) <= d;
				rs = Math.abs(r - x1) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
				}
			}

			first = (ts || bs || ls || rs);

			if (o.snapMode !== "outer") {
				ts = Math.abs(t - y1) <= d;
				bs = Math.abs(b - y2) <= d;
				ls = Math.abs(l - x1) <= d;
				rs = Math.abs(r - x2) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
				}
			}

			if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			}
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

		}

	}
});

$.coral.plugin.add("draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray($(o.stack)).sort(function(a, b) {
				return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
			});

		if (!group.length) { return; }

		min = parseInt($(group[0]).css("zIndex"), 10) || 0;
		$(group).each(function(i) {
			$(this).css("zIndex", min + i);
		});
		this.css("zIndex", (min + group.length));
	}
});

$.coral.plugin.add("draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if (t.css("zIndex")) {
			o._zIndex = t.css("zIndex");
		}
		t.css("zIndex", o.zIndex);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if (o._zIndex) {
			$(ui.helper).css("zIndex", o._zIndex);
		}
	}
});

})(jQuery);

/*!
 * jQuery coral Droppable 4.0.1
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.component.js
 *	jquery.ui.mouse.js
 *	jquery.ui.draggable.js
 */
(function( $, undefined ) {

function isOverAxis( x, reference, size ) {
	return ( x >= reference ) && ( x < ( reference + size ) );
}

$.component("coral.droppable", {
	version: "4.0.1",
	componentEventPrefix: "drop",
	options: {
		accept: "*",
		activeClass: false,
		addClasses: true,
		greedy: false,
		hoverClass: false,
		scope: "default",
		tolerance: "intersect",

		// callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction(accept) ? accept : function(d) {
			return d.is(accept);
		};

		this.proportions = function( /* valueToWrite */ ) {
				if ( arguments.length ) {
						// Store the droppable's proportions
						proportions = arguments[ 0 ];
				} else {
						// Retrieve or derive the droppable's proportions
						return proportions ?
								proportions :
								proportions = {
										width: this.element[ 0 ].offsetWidth,
										height: this.element[ 0 ].offsetHeight
								};
			}
		};
		this._addToManager( o.scope );

		(o.addClasses && this.element.addClass("coral-droppable"));

	},

	_addToManager: function( scope ) {
		// Add the reference and positions to the manager
		$.coral.ddmanager.droppables[ scope ] = $.coral.ddmanager.droppables[ scope ] || [];
		$.coral.ddmanager.droppables[ scope ].push( this );
	},
	
	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[i] === this ) {
				drop.splice(i, 1);
			}
		}
	},

	_destroy: function() {
		var drop = $.coral.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );
		
		this.element.removeClass("coral-droppable coral-droppable-disabled");
	},

	_setOption: function(key, value) {

		if(key === "accept") {
			this.accept = $.isFunction(value) ? value : function(d) {
				return d.is(value);
			};
		} else if ( key === "scope" ) {
			var drop = $.coral.ddmanager.droppables[ this.options.scope ];
			
			this._splice( drop );
			this._addToManager( value );
		}
		
		this._super( key, value );
	},

	_activate: function(event) {
		var draggable = $.coral.ddmanager.current;
		if(this.options.activeClass) {
			this.element.addClass(this.options.activeClass);
		}
		if(draggable){
			this._trigger("activate", event, this.ui(draggable));
		}
	},

	_deactivate: function(event) {
		var draggable = $.coral.ddmanager.current;
		if(this.options.activeClass) {
			this.element.removeClass(this.options.activeClass);
		}
		if(draggable){
			this._trigger("deactivate", event, this.ui(draggable));
		}
	},

	_over: function(event) {

		var draggable = $.coral.ddmanager.current;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return;
		}

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) {
				this.element.addClass(this.options.hoverClass);
			}
			this._trigger("over", event, this.ui(draggable));
		}

	},

	_out: function(event) {

		var draggable = $.coral.ddmanager.current;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return;
		}

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) {
				this.element.removeClass(this.options.hoverClass);
			}
			this._trigger("out", event, this.ui(draggable));
		}

	},

	_drop: function(event,custom) {

		var draggable = custom || $.coral.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return false;
		}

		this.element.find(":data(coral-droppable)").not(".coral-draggable-dragging").each(function() {
			var inst = $.data(this, "coral-droppable");
			if(
				inst.options.greedy &&
				!inst.options.disabled &&
				inst.options.scope === draggable.options.scope &&
				inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
				$.coral.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance, event)
			) { childrenIntersection = true; return false; }
		});
		if(childrenIntersection) {
			return false;
		}

		if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.activeClass) {
				this.element.removeClass(this.options.activeClass);
			}
			if(this.options.hoverClass) {
				this.element.removeClass(this.options.hoverClass);
			}
			this._trigger("drop", event, this.ui(draggable));
			return this.element;
		}

		return false;

	},

	ui: function(c) {
		return {
			draggable: (c.currentItem || c.element),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	}

});


$.coral.intersect = (function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs || draggable.position.absolute ).left,
			y1 = ( draggable.positionAbs || draggable.position.absolute ).top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) && isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
})();

/*
	This manager tracks offsets of draggables and droppables
*/
$.coral.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function(t, event) {

		var i, j,
			m = $.coral.ddmanager.droppables[t.options.scope] || [],
			type = event ? event.type : null, // workaround for #2317
			list = (t.currentItem || t.element).find(":data(coral-droppable)").addBack();

		droppablesLoop: for (i = 0; i < m.length; i++) {

			//No disabled and non-accepted
			if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
				continue;
			}

			// Filter out elements in the current dragged item
			for (j=0; j < list.length; j++) {
				if(list[j] === m[i].element[0]) {
					m[i].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[i].visible = m[i].element.css("display") !== "none";
			if(!m[i].visible) {
				continue;
			}

			//Activate the droppable if used directly from draggables
			if(type === "mousedown") {
				m[i]._activate.call(m[i], event);
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });
		}

	},
	drop: function(draggable, event) {

		var dropped = false;
		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each(($.coral.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {

			if(!this.options) {
				return;
			}
			if (!this.options.disabled && this.visible && $.coral.intersect(draggable, this, this.options.tolerance, event)) {
				dropped = this._drop.call(this, event) || dropped;
			}

			if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call(this, event);
			}

		});
		return dropped;

	},
	dragStart: function( draggable, event ) {
		//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
			if( !draggable.options.refreshPositions ) {
				$.coral.ddmanager.prepareOffsets( draggable, event );
			}
		});
	},
	drag: function( draggable, event ) {

		//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
		if(draggable.options.refreshPositions) {
			$.coral.ddmanager.prepareOffsets(draggable, event);
		}

		//Run through all droppables and check their positions based on specific tolerance options
		$.each($.coral.ddmanager.droppables[draggable.options.scope] || [], function() {

			if(this.options.disabled || this.greedyChild || !this.visible) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = $.coral.intersect(draggable, this, this.options.tolerance, event),
				c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
			if(!c) {
				return;
			}

			if (this.options.greedy) {
				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents(":data(coral-droppable)").filter(function () {
					return $.data(this, "coral-droppable").options.scope === scope;
				});

				if (parent.length) {
					parentInstance = $.data(parent[0], "coral-droppable");
					parentInstance.greedyChild = (c === "isover");
				}
			}

			// we just moved into a greedy child
			if (parentInstance && c === "isover") {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call(parentInstance, event);
			}

			this[c] = true;
			this[c === "isout" ? "isover" : "isout"] = false;
			this[c === "isover" ? "_over" : "_out"].call(this, event);

			// we just moved out of a greedy child
			if (parentInstance && c === "isout") {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call(parentInstance, event);
			}
		});

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
		//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if( !draggable.options.refreshPositions ) {
			$.coral.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

})(jQuery);

/*!
 * jQuery coral Resizable 4.0.1
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.component.js
 */
(function( $, undefined ) {

function num(v) {
	return parseInt(v, 10) || 0;
}

function isNumber(value) {
	return !isNaN(parseInt(value, 10));
}
function hasScroll( el, a ) {
	
	//If overflow is hidden, the element might have extra content, but the user wants to hide it
	if ( $( el ).css( "overflow" ) === "hidden") {
		return false;
	}
	
	var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
	has = false;

	if ( el[ scroll ] > 0 ) {
		return true;
	}
	
	// TODO: determine which cases actually cause this to happen
	// if the element doesn't have the scroll set, see if it's possible to
	// set the scroll
	el[ scroll ] = 1;
	has = ( el[ scroll ] > 0 );
	el[ scroll ] = 0;
	return has;
}
$.component("coral.resizable", $.coral.mouse, {
	version: "4.0.1",
	componentEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		containment: false,
		ghost: false,
		grid: false,
		layout: false,//layout缁勪欢浣跨敤姝ゅ睘鎬�		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,
		// See #7960
		zIndex: 90,

		// callbacks
		resize: null,
		start: null,
		stop: null
	},
	_create: function() {

		var n, i, handle, axis, hname,
			that = this,
			o = this.options;
		this.element.addClass("coral-resizable");

		$.extend(this, {
			_aspectRatio: !!(o.aspectRatio),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "coral-resizable-helper" : null
		});

		//Wrap the element if it cannot hold child nodes
		if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

			//Create a wrapper element and set the wrapper to the new current internal element
			this.element.wrap(
				$("<div class='coral-wrapper' style='overflow: hidden;'></div>").css({
					position: this.element.css("position"),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css("top"),
					left: this.element.css("left")
				})
			);

			//Overwrite the original this.element
			this.element = this.element.parent().data(
				"coral-resizable", this.element.data("coral-resizable")
			);

			this.elementIsWrapper = true;

			//Move margins to the wrapper
			this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
			this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

			//Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css("resize");
			this.originalElement.css("resize", "none");

			//Push the actual element to our proportionallyResize internal array
			this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

			// avoid IE jump (hard set the margin)
			this.originalElement.css({ margin: this.originalElement.css("margin") });

			// fix handlers offset
			this._proportionallyResize();

		}

		this.handles = o.handles || (!$(".coral-resizable-handle", this.element).length ? "e,s,se" : { n: ".coral-resizable-n", e: ".coral-resizable-e", s: ".coral-resizable-s", w: ".coral-resizable-w", se: ".coral-resizable-se", sw: ".coral-resizable-sw", ne: ".coral-resizable-ne", nw: ".coral-resizable-nw" });
		if(this.handles.constructor === String) {

			if ( this.handles === "all") {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split(",");
			this.handles = {};

			for(i = 0; i < n.length; i++) {

				handle = $.trim(n[i]);
				hname = "coral-resizable-"+handle;
				axis = $("<div class='coral-resizable-handle " + hname + "'></div>");

				// Apply zIndex to all handles - see #7960
				axis.css({ zIndex: o.zIndex });

				//TODO : What's going on here?
				if ("se" === handle) {
					axis.addClass("coral-icon coral-icon-gripsmall-diagonal-se");
				}

				//Insert into internal handles object and append to element
				this.handles[handle] = ".coral-resizable-"+handle;
				this.element.append(axis);
			}

		}

		this._renderAxis = function(target) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for(i in this.handles) {

				if(this.handles[i].constructor === String) {
					this.handles[i] = this.element.children( this.handles[ i ] ).first().show();
				}

				//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

					axis = $(this.handles[i], this.element);

					//Checking the correct pad and border
					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

					//The padding type i have to apply...
					padPos = [ "padding",
						/ne|nw|n/.test(i) ? "Top" :
						/se|sw|s/.test(i) ? "Bottom" :
						/^e$/.test(i) ? "Right" : "Left" ].join("");

					target.css(padPos, padWrapper);

					this._proportionallyResize();

				}

				//TODO: What's that good for? There's not anything to be executed left
				if(!$(this.handles[i]).length) {
					continue;
				}
			}
		};

		//TODO: make renderAxis a prototype function
		this._renderAxis(this.element);

		this._handles = $(".coral-resizable-handle", this.element)
			.disableSelection();

		//Matching axis name
		this._handles.mouseover(function() {
			if (!that.resizing) {
				if (this.className) {
					axis = this.className.match(/coral-resizable-(se|sw|ne|nw|n|e|s|w)/i);
				}
				//Axis, default = se
				that.axis = axis && axis[1] ? axis[1] : "se";
			}
		});

		//If we want to auto hide the elements
		if (o.autoHide) {
			this._handles.hide();
			$(this.element)
				.addClass("coral-resizable-autohide")
				.mouseenter(function() {
					if (o.disabled) {
						return;
					}
					$(this).removeClass("coral-resizable-autohide");
					that._handles.show();
				})
				.mouseleave(function(){
					if (o.disabled) {
						return;
					}
					if (!that.resizing) {
						$(this).addClass("coral-resizable-autohide");
						that._handles.hide();
					}
				});
		}

		//Initialize the mouse interaction
		this._mouseInit();

	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function(exp) {
				$(exp).removeClass("coral-resizable coral-resizable-disabled coral-resizable-resizing")
					.removeData("resizable").removeData("coral-resizable").unbind(".resizable").find(".coral-resizable-handle").remove();
			};

		//TODO: Unwrap at same DOM position
		if (this.elementIsWrapper) {
			_destroy(this.element);
			wrapper = this.element;
			this.originalElement.css({
				position: wrapper.css("position"),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css("top"),
				left: wrapper.css("left")
			}).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css("resize", this.originalResizeStyle);
		_destroy(this.originalElement);

		return this;
	},

	_mouseCapture: function(event) {
		var i, handle,
			capture = false;

		for (i in this.handles) {
			handle = $(this.handles[i])[0];
			if (handle === event.target || $.contains(handle, event.target)) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function(event) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = num(this.helper.css("left"));
		curtop = num(this.helper.css("top"));

		if (o.containment) {
			curleft += $(o.containment).scrollLeft() || 0;
			curtop += $(o.containment).scrollTop() || 0;
		}

		//Store needed variables
		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };
		this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: el.width(), height: el.height() };
		this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalPosition = { left: curleft, top: curtop };
		this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		//Aspect Ratio
		this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

		cursor = $(".coral-resizable-" + this.axis).css("cursor");
		$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

		el.addClass("coral-resizable-resizing");
		this._propagate("start", event);
		return true;
	},

	_mouseDrag: function(event) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = (event.pageX-smp.left)||0,
			dy = (event.pageY-smp.top)||0,
			trigger = this._change[a];

		this._updatePrevProperties();
				
		if (!trigger) {
			return false;
		}

		// Calculate the attrs that will be change
		data = trigger.apply(this, [event, dx, dy]);

		// Put this in the mouseDrag handler since the user can start pressing shift while resizing
		this._updateVirtualBoundaries(event.shiftKey);
		if (this._aspectRatio || event.shiftKey) {
			data = this._updateRatio(data, event);
		}

		data = this._respectSize(data, event);

		this._updateCache(data);

		// plugins callbacks need to be called first
		this._propagate("resize", event);

		props = this._applyChanges();
		
		if (!this._helper && this._proportionallyResizeElements.length) {
			this._proportionallyResize();
		}

		// Call the user callback if the element was resized
		if ( ! $.isEmptyObject(props) ) {
			this._updatePrevProperties();
			this._trigger("resize", event, this.ui());
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function(event) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if(this._helper) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && (/textarea/i).test(pr[0].nodeName);
			soffseth = ista && hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

			if (!o.animate) {
				this.element.css($.extend(s, { top: top, left: left }));
			}

			that.helper.height(that.size.height);
			that.helper.width(that.size.width);

			if (this._helper && !o.animate) {
				this._proportionallyResize();
			}
		}

		$("body").css("cursor", "auto");

		this.element.removeClass("coral-resizable-resizing");

		this._propagate("stop", event ,this.ui());

		if (this._helper) {
			this.helper.remove();
		}

		return false;

	},
	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function(forceAspectRatio) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
			maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
			minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
			maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
		};

		if(this._aspectRatio || forceAspectRatio) {
			// We want to create an enclosing box whose aspect ration is the requested one
			// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if(pMinWidth > b.minWidth) {
				b.minWidth = pMinWidth;
			}
			if(pMinHeight > b.minHeight) {
				b.minHeight = pMinHeight;
			}
			if(pMaxWidth < b.maxWidth) {
				b.maxWidth = pMaxWidth;
			}
			if(pMaxHeight < b.maxHeight) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function(data) {
		this.offset = this.helper.offset();
		if (isNumber(data.left)) {
			this.position.left = data.left;
		}
		if (isNumber(data.top)) {
			this.position.top = data.top;
		}
		if (isNumber(data.height)) {
			this.size.height = data.height;
		}
		if (isNumber(data.width)) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if (isNumber(data.height)) {
			data.width = (data.height * this.aspectRatio);
		} else if (isNumber(data.width)) {
			data.height = (data.width / this.aspectRatio);
		}

		if (a === "sw") {
			data.left = cpos.left + (csize.width - data.width);
			data.top = null;
		}
		if (a === "nw") {
			data.top = cpos.top + (csize.height - data.height);
			data.left = cpos.left + (csize.width - data.width);
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
			isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.position.top + this.size.height,
			cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
		if (isminw) {
			data.width = o.minWidth;
		}
		if (isminh) {
			data.height = o.minHeight;
		}
		if (ismaxw) {
			data.width = o.maxWidth;
		}
		if (ismaxh) {
			data.height = o.maxHeight;
		}

		if (isminw && cw) {
			data.left = dw - o.minWidth;
		}
		if (ismaxw && cw) {
			data.left = dw - o.maxWidth;
		}
		if (isminh && ch) {
			data.top = dh - o.minHeight;
		}
		if (ismaxh && ch) {
			data.top = dh - o.maxHeight;
		}

		// fixing jump error on top/left - bug #2330
		if (!data.width && !data.height && !data.left && data.top) {
			data.top = null;
		} else if (!data.width && !data.height && !data.top && data.left) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseInt( borders[ i ], 10 ) || 0 );
			widths[ i ] += ( parseInt( paddings[ i ], 10 ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if (!this._proportionallyResizeElements.length) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++) {

			prel = this._proportionallyResizeElements[i];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if (!this.outerDimensions) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css({
				height: (element.height() - this.outerDimensions.height) || 0,
				width: (element.width() - this.outerDimensions.width) || 0
			});

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if(this._helper) {

			this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

			this.helper.addClass(this._helper).css({
				width: this.element.outerWidth() - 1,
				height: this.element.outerHeight() - 1,
				position: "absolute",
				left: this.elementOffset.left +"px",
				top: this.elementOffset.top +"px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			});

			this.helper
				.appendTo("body")
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function(event, dx) {
			return { width: this.originalSize.width + dx };
		},
		w: function(event, dx) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function(event, dx, dy) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function(event, dx, dy) {
			return { height: this.originalSize.height + dy };
		},
		se: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		sw: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		},
		ne: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		nw: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		}
	},

	_propagate: function(n, event) {
		$.coral.plugin.call(this, n, [event, this.ui()]);
		(n !== "resize" && this._trigger(n, event, this.ui()));
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

});

/*
 * Resizable Extensions
 */

$.coral.plugin.add("resizable", "animate", {

	stop: function( event ) {
		var that = $(this).data("coral-resizable"),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && (/textarea/i).test(pr[0].nodeName),
			soffseth = ista && hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

		that.element.animate(
			$.extend(style, top && left ? { top: top, left: left } : {}), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseInt(that.element.css("width"), 10),
						height: parseInt(that.element.css("height"), 10),
						top: parseInt(that.element.css("top"), 10),
						left: parseInt(that.element.css("left"), 10)
					};

					if (pr && pr.length) {
						$(pr[0]).css({ width: data.width, height: data.height });
					}

					// propagating resize, and updating values for each animation step
					that._updateCache(data);
					that._propagate("resize", event);

				}
			}
		);
	}

});

$.coral.plugin.add("resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $(this).data("coral-resizable"),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

		if (!ce) {
			return;
		}

		that.containerElement = $(ce);

		if (/document/.test(oc) || oc === document) {
			that.containerOffset = { left: 0, top: 0 };
			that.containerPosition = { left: 0, top: 0 };

			that.parentData = {
				element: $(document), left: 0, top: 0,
				width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
			};
		}

		// i'm a node, so compute top, left, right, bottom
		else {
			element = $(ce);
			p = [];
			$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = (hasScroll(ce, "left") ? ce.scrollWidth : cw );
			height = (hasScroll(ce) ? ce.scrollHeight : ch);

			that.parentData = {
				element: ce, left: co.left, top: co.top, width: width, height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			(that._helper ?
				that.offset.left - cop.left :
				(that.offset.left - co.left)) );

		hoset = Math.abs( that.sizeDiff.height +
			(that._helper ?
				that.offset.top - cop.top :
				(that.offset.top - co.top)) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ){
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}
	}
});

$.coral.plugin.add("resizable", "alsoResize", {

	start: function () {
		var that = $(this).data("coral-resizable"),
			o = that.options,
			_store = function (exp) {
				$(exp).each(function() {
					var el = $(this);
					el.data("coral-resizable-alsoresize", {
						width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
						left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
					});
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
			if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
			else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
		}else{
			_store(o.alsoResize);
		}
	},

resize: function (event, ui) {
	var that = $(this).data("coral-resizable"),
		o = that.options,
		os = that.originalSize,
		op = that.originalPosition,
		delta = {
			height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
			top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
		},

		_alsoResize = function (exp, c) {
			$(exp).each(function() {
				var el = $(this), start = $(this).data("coral-resizable-alsoresize"), style = {},
					css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
				var styles = $.coral.getStyles(el[0]);//在jquery.core.js中添加了getStyles()方法，获取元素的style值；
				//判断一下浏览器是否支持boxSizing并获得元素boxSizing的属性值是否为border-box
				var isBorderBox = jQuery.support.boxSizing && jQuery.css( el, "boxSizing", false, styles ) === "border-box";
				$.each(css, function (i, prop) {
					var sum = (start[prop]||0) + (delta[prop]||0);
					if (sum && sum >= 0) {
						/**原代码：直接 style[prop] = sum || null;
						 * 不对boxSizing的值进行判断
						 * 改后的代码：对boxSizing的值进行判断，如果box-sizing:border-box,进行处理*/
						if ( isBorderBox ) {
							if($.inArray(prop,['width','height'])>=0){
								el[prop](sum);
							}else{
								el.css(prop,sum);
							}
						} else {
							style[prop] = sum || null;
						}
					}
				});
				el.css(style);
			});
		};

	if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
		$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
	}else{
		_alsoResize(o.alsoResize);
	}
},

stop: function () {
	$(this).removeData("resizable-alsoresize");
	}
});

$.coral.plugin.add("resizable", "ghost", {

	start: function() {

		var that = $(this).data("coral-resizable"), o = that.options, cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost
			.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
			.addClass("coral-resizable-ghost")
			.addClass(typeof o.ghost === "string" ? o.ghost : "");

		that.ghost.appendTo(that.helper);

	},

	resize: function(){
		var that = $(this).data("coral-resizable");
		if (that.ghost) {
			that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
		}
	},

	stop: function() {
		var that = $(this).data("coral-resizable");
		if (that.ghost && that.helper) {
			that.helper.get(0).removeChild(that.ghost.get(0));
		}
	}

});

$.coral.plugin.add("resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $(this).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
			gridX = (grid[0]||1),
			gridY = (grid[1]||1),
			ox = Math.round((cs.width - os.width) / gridX) * gridX,
			oy = Math.round((cs.height - os.height) / gridY) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
			isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
			isMinWidth = o.minWidth && (o.minWidth > newWidth),
			isMinHeight = o.minHeight && (o.minHeight > newHeight);

		o.grid = grid;

		if (isMinWidth) {
			newWidth += gridX;
		}
		if (isMinHeight) {
			newHeight += gridY;
		}
		if (isMaxWidth) {
			newWidth -= gridX;
		}
		if (isMaxHeight) {
			newHeight -= gridY;
		}

		if (/^(se|s|e)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if (/^(ne)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if (/^(sw)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}
				
			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridY - outerDimensions.height;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

});

})(jQuery);

/*!
 * jQuery coral Selectable 4.0.1
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.component.js
 */
(function( $, undefined ) {

$.component("coral.selectable", $.coral.mouse, {
	version: "4.0.1",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var selectees,
			that = this;

		this.element.addClass("coral-selectable");

		this.dragged = false;

		// cache selectee children based on filter
		this.refresh = function() {
			selectees = $(that.options.filter, that.element[0]);
			selectees.addClass("coral-selectee");
			selectees.each(function() {
				var $this = $(this),
					pos = $this.offset();
				$.data(this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass("coral-selected"),
					selecting: $this.hasClass("coral-selecting"),
					unselecting: $this.hasClass("coral-unselecting")
				});
			});
		};
		this.refresh();

		this.selectees = selectees.addClass("coral-selectee");

		this._mouseInit();

		this.helper = $("<div class='coral-selectable-helper'></div>");
	},

	_destroy: function() {
		this.selectees
			.removeClass("coral-selectee")
			.removeData("selectable-item");
		this.element
			.removeClass("coral-selectable coral-selectable-disabled");
		this._mouseDestroy();
	},

	_mouseStart: function(event) {
		var that = this,
			options = this.options;

		this.opos = [event.pageX, event.pageY];

		if (this.options.disabled) {
			return;
		}

		this.selectees = $(options.filter, this.element[0]);

		this._trigger("start", event);

		$(options.appendTo).append(this.helper);
		// position helper (lasso)
		this.helper.css({
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		});

		if (options.autoRefresh) {
			this.refresh();
		}

		this.selectees.filter(".coral-selected").each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.startselected = true;
			if (!event.metaKey && !event.ctrlKey) {
				selectee.$element.removeClass("coral-selected");
				selectee.selected = false;
				selectee.$element.addClass("coral-unselecting");
				selectee.unselecting = true;
				// selectable UNSELECTING callback
				that._trigger("unselecting", event, {
					unselecting: selectee.element
				});
			}
		});

		$(event.target).parents().addBack().each(function() {
			var doSelect,
				selectee = $.data(this, "selectable-item");
			if (selectee) {
				doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("coral-selected");
				selectee.$element
					.removeClass(doSelect ? "coral-unselecting" : "coral-selected")
					.addClass(doSelect ? "coral-selecting" : "coral-unselecting");
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;
				// selectable (UN)SELECTING callback
				if (doSelect) {
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				} else {
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
				return false;
			}
		});

	},

	_mouseDrag: function(event) {

		this.dragged = true;

		if (this.options.disabled) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[0],
			y1 = this.opos[1],
			x2 = event.pageX,
			y2 = event.pageY;

		if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
		if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

		this.selectees.each(function() {
			var selectee = $.data(this, "selectable-item"),
				hit = false;

			//prevent helper from being selected if appendTo: selectable
			if (!selectee || selectee.element === that.element[0]) {
				return;
			}

			if (options.tolerance === "touch") {
				hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
			} else if (options.tolerance === "fit") {
				hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
			}

			if (hit) {
				// SELECT
				if (selectee.selected) {
					selectee.$element.removeClass("coral-selected");
					selectee.selected = false;
				}
				if (selectee.unselecting) {
					selectee.$element.removeClass("coral-unselecting");
					selectee.unselecting = false;
				}
				if (!selectee.selecting) {
					selectee.$element.addClass("coral-selecting");
					selectee.selecting = true;
					// selectable SELECTING callback
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				}
			} else {
				// UNSELECT
				if (selectee.selecting) {
					if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
						selectee.$element.removeClass("coral-selecting");
						selectee.selecting = false;
						selectee.$element.addClass("coral-selected");
						selectee.selected = true;
					} else {
						selectee.$element.removeClass("coral-selecting");
						selectee.selecting = false;
						if (selectee.startselected) {
							selectee.$element.addClass("coral-unselecting");
							selectee.unselecting = true;
						}
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
				if (selectee.selected) {
					if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
						selectee.$element.removeClass("coral-selected");
						selectee.selected = false;

						selectee.$element.addClass("coral-unselecting");
						selectee.unselecting = true;
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
			}
		});

		return false;
	},

	_mouseStop: function(event) {
		var that = this;

		this.dragged = false;

		$(".coral-unselecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("coral-unselecting");
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger("unselected", event, {
				unselected: selectee.element
			});
		});
		$(".coral-selecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("coral-selecting").addClass("coral-selected");
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger("selected", event, {
				selected: selectee.element
			});
		});
		this._trigger("stop", event);

		this.helper.remove();

		return false;
	}

});

})(jQuery);

/*!
 * 组件库4.0：元素位置辅助工具
 */
(function( $, undefined ) {

$.coral = $.coral || {};

var cachedScrollbarWidth, supportsOffsetFractions,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			// support: jQuery 1.6.x
			// jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
			width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !supportsOffsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.coral.position[ collision[ i ] ] ) {
				$.coral.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem : elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.coral.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			}
			else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
			else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.coral.position.flip.left.apply( this, arguments );
			$.coral.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.coral.position.flip.top.apply( this, arguments );
			$.coral.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function () {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

}( jQuery ) );

/*!
 * 组件库4.0：下拉框
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 *    jquery.coral.panel.js
 *    jquery.validatehelper.js
 */

(function ($) {
"use strict";
$.component("coral.formelement", {
	version: "4.0.2",
	options: {
	},
	getValidateValue: function() {
		return this.getValue();
	},
	clearError: function(){
		this.component().removeClass("hasErrorIcon coral-validate-error");
		this.component().find(".coral-errorIcon").remove();
		this.element.prop("isError", false);
	}
});
})(jQuery);
(function ($) {
"use strict";
$.component("coral.inputbase", $.coral.formelement, {
	version: "4.0.2",
	options: {
		inputButtonGutter: 5//textbox和button之间的间距
	},
	_outerButtons: function() {
		this.uiDialogOuterButtonPanel = $('<span/>',{
			className: "coral-outerbuttonset coral-corner-all"
		});
		this.component().append(this.uiDialogOuterButtonPanel);
		this._createButtons(this.options.buttonOptions,null, this.uiDialogOuterButtonPanel);
		this.component().css("padding-right", this.uiDialogOuterButtonPanel.outerWidth() + 8);
	},
	_createButtonPanel: function() {
		var is = false,
			i,
			direction = "right",
			pos = "inner",
			key = "innerRight",
			opermethod = "prepend",
			buttons = this.options.buttons;
		for (i=0; i < this.options.buttons.length;i++) {
			if (buttons[i]["innerLeft"]) {
				key = "innerLeft";
				direction = "left";
				if (buttons[i]["innerLeft"][0].type && buttons[i]["innerLeft"][0].type == "combobox") {
					this._addComboboxPanel(pos,key,direction,opermethod,i);
					is = true;
				}else {
					this._addButtonPanel(pos,key,direction,opermethod,i);
					is = true;
				}
			}
			if (buttons[i]["innerRight"]) {
				key = "innerRight";
				direction = "right";
				opermethod = "append";
				if (buttons[i]["innerRight"][0].type && buttons[i]["innerRight"][0].type == "combobox") {
					this._addComboboxPanel(pos,key,direction,opermethod,i);
					is = true;
				} else {
					this._addButtonPanel(pos,key,direction,opermethod,i);
					is = true;
				}
			}
			if (buttons[i]["outerRight"]) {
				key = "outerRight";
				direction = "right";
				pos = "outer";
				opermethod = "append";
				if (buttons[i]["outerRight"][0].type && buttons[i]["outerRight"][0].type == "combobox") {
					this._addComboboxPanel(pos,key,direction,opermethod,i);
					is = true;
				} else {
					this._addButtonPanel(pos,key,direction,opermethod,i);
					is = true;
				}
			}
			if (buttons[i]["outerLeft"]) {
				key = "outerLeft";
				direction = "left";
				pos = "outer";
				if (buttons[i]["outerLeft"][0].type && buttons[i]["outerLeft"][0].type == "combobox") {
					this._addComboboxPanel(pos,key,direction,opermethod,i);
					is = true;
				} else {
					this._addButtonPanel(pos,key,direction,opermethod,i);
					is = true;
				}
			}
			if (buttons[i]["floatRight"]) {
				key = "floatRight";
				pos = "float";
				opermethod = "append";
				if (buttons[i]["floatRight"][0].type && buttons[i]["floatRight"][0].type == "combobox") {
					this._addComboboxPanel(pos,key,direction,opermethod,i);
					is = true;
				} else {
					this._addButtonPanel(pos,key,direction,opermethod,i);
					is = true;
				}
			}
			if (buttons[i]["floatLeft"]) {
				key = "floatLeft";
				direction = "left";
				pos = "float";
				if (buttons[i]["floatLeft"][0].type && buttons[i]["floatLeft"][0].type == "combobox") {
					this._addComboboxPanel(pos,key,direction,opermethod,i);
					is = true;
				} else {
					this._addButtonPanel(pos,key,direction,opermethod,i);
					is = true;
				}
			}
		}
		if (!is) {
			this.uiDialogButtonPanel = $("<span class='"+ key +" coral-textbox-btn-icons coral-buttonset coral-corner-" + direction+" '></span>"); 
			this._createButtons(this.options.buttons, direction , this.uiDialogButtonPanel);
			this.elementBorder.append(this.uiDialogButtonPanel);
			this.elementBorder.css("padding-right", this.uiDialogButtonPanel.outerWidth());
			this.uiDialogButtonPanel.css("right", 0);
			this.rightPos = this.uiDialogButtonPanel.outerWidth();
		}
	},
	_addButtonPanel: function(pos,key,direction,opermethod,i) {
		this._addPanel(pos,key,direction,opermethod,i,"button");
	},
	_addComboboxPanel: function(pos,key,direction,opermethod,i) {
		this._addPanel(pos,key,direction,opermethod,i,"comboButton");
	},
	_addPanel: function(pos,key,direction,opermethod,i,button) {
		var that = this;
		function createButton(buttons,direction,panel,button) {
			if (button == "button") {
				that._createButtons(buttons, direction , panel);
			} else {
				if (pos == "outer") {
					that._createCombobox(buttons, pos + direction , panel);
				} else {
					that._createCombobox(buttons, direction , panel);
				}
			}
		}
		this.uiButtonPanel = $("<span class='"+ key +" coral-textbox-btn-icons coral-buttonset coral-inner coral-corner-"+direction+" '></span>");
		this.uiOuterButtonPanel = $("<span class=\"coral-outerbuttonset coral-outer coral-corner-all \"></span>");
		if (pos == "inner") {
			createButton( this.options.buttons[i][key], direction , this.uiButtonPanel,button);
			this.elementBorder[opermethod]( this.uiButtonPanel );
			this.elementBorder.css("padding-" + direction, this.uiButtonPanel.outerWidth());
			this.uiButtonPanel.css(direction, 0);
		} else if(pos == "float"){
			this.component()[opermethod]( this.uiOuterButtonPanel );
			createButton( this.options.buttons[i][key], null , this.uiOuterButtonPanel,button );
			this.uiOuterButtonPanel.css(
					direction, -(this.uiOuterButtonPanel.outerWidth() + this.options.inputButtonGutter)
				);
		}else {
			this.component()[opermethod](this.uiOuterButtonPanel);
			createButton(this.options.buttons[i][key], direction, this.uiOuterButtonPanel,button,pos);
			var width = this.uiOuterButtonPanel.outerWidth();
			this.component().css(
					"padding-" + direction, this.uiOuterButtonPanel.outerWidth() + this.options.inputButtonGutter
				);
			this.uiOuterButtonPanel.css( direction, 0 ).css("width",width);
		}
		if(pos + direction === "innerright"){
			this.rightPos = this.uiButtonPanel.outerWidth();
		}

	},
	_createButtons: function(buttons , direction , appendTo) {
		var that = this;
		if ($.isEmptyObject(buttons)) buttons = {};
		if (buttons instanceof Array == false ) {
			buttons = [buttons];
		}
		$.each( buttons, function(i) {
			var buttonOptions,
				addCls = "",
				removeCls = "",
				click,
				props = $.extend({type: "button"}, {click: this.click});
			this.click = this.onClick || this.click;
			delete this.onClick;
			click = this.click || $.noop;
			props.click = function() {
				click.apply(that.element[0], arguments);
			};
			delete this.click;
			removeCls = "coral-corner-all";
			if (direction == "left") {
				if(i == 0){
					addCls = "coral-corner-left";
				}
				$( "<button></button>", props ).button(this)
				.addClass(addCls).removeClass(removeCls).appendTo(appendTo);
			} else if (direction == "right") {
					if(i==(buttons.length-1)) {
						addCls = "coral-corner-right";
					}
					$("<button></button>", props).button(this)
					.addClass(addCls).removeClass(removeCls).appendTo(appendTo);
				}else{
					$("<button></button>", props).button(this)
					.addClass(addCls).appendTo(appendTo);
				}
			this.click = click;
		});
	},
	_createCombobox: function(comboboxs,direction, appendTo) {
		var that = this;
		if ($.isEmptyObject(comboboxs)) comboboxs = {};
		if (comboboxs instanceof Array === false) {
			comboboxs = [comboboxs];
		}
		$.each(comboboxs, function(i) {
			var	addCls = "",
				removeCls = "";
			removeCls = "coral-corner-all";
			delete this.type;
			this.width = "item";
			if (direction == "left") {
				if (i === 0) {
					addCls = "coral-corner-left";
				}
				addCls = "coral-inner-left";
			} else if (direction == "right") {
				if (i == (comboboxs.length - 1)) {
					addCls = "coral-corner-right";
				}
				addCls = "coral-corner-right";
			} else if (direction == "outerright") {
				addCls = "coral-out-right";
			} else if (direction == "outerleft") {
				addCls = "coral-out-left";
			}
			var combobox1 = $("<input type='text'/>").appendTo("body");
			combobox1.off(".aaa")
				.on("comboboxonload.aaa", {target: combobox1}, function(e){
					that.load.apply(e.data.target.combobox("instance"));
				})
				.on("comboboxonchange.aaa", {target: combobox1}, function(e){
					that.load.apply(e.data.target.combobox("instance"));
				})
				.combobox(this);
			combobox1
				.combobox("component").addClass(addCls)
				.removeClass(removeCls)
				.appendTo(appendTo)
			    .addClass("coral-DropDownButton");
		});
	},
	load: function(){
		var opts = this.options,
	        sumWidth = 0;
		if (this.component().closest(".coral-inner")) {
			if (this.component().hasClass("coral-inner-left")) {
				$(".coral-inner").find(".coral-inner-left").each(function() {
					sumWidth += $(this).width();
				})
				var elementBorder = this.component().closest(".coral-textbox-border");
				elementBorder.css("padding-left",sumWidth);
			}
		}
		if (this.component().closest(".coral-outer")) {
			if (this.component().hasClass("coral-out-right")) {
				this._getOuterButton("right");
			} else if (this.component().hasClass("coral-out-left")) {
				this._getOuterButton("left");
			}
		}
	},
	_getOuterButton:function(direction){
		var gutter = this.options.inputButtonGutter,sumWidth = 0;
		if (this.component().hasClass("coral-out-" + direction)) {
			$(".coral-outer").find(".coral-out-" + direction).each(function(){
				sumWidth += $(this).width();
			})
			this.component().closest(".coral-outer").css("width", sumWidth);
			this.component()
				.closest(".coral-outer")
				.closest(".coral-textbox")
				.css(
					"padding-" + direction, 
					sumWidth + gutter
				);
			
		} 
	}
});
})(jQuery);

;(function($){
/**
 * jqGrid Chinese Translation for v3.6
 * waiting 2010.01.18
 * http://waiting.javaeye.com/
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 * 
 * update 2010.05.04
 *		add double u3000 SPACE for search:odata to fix SEARCH box display err when narrow width from only use of eq/ne/cn/in/lt/gt operator under IE6/7
**/
$.grid = {
	defaults : {
		recordtext: "{0} - {1}\u3000共 {2} 条",	// 共字前是全角空格
		pagetext:"共 {0} 页",
		emptyrecords: "无数据显示",
		loadtext: "数据加载中...",
		pgtext : " {0} 共 {1} 页"
	},
	search : {
		caption: "搜索...",
		Find: "查找",
		Reset: "重置",
		odata : ['等于\u3000\u3000', '不等\u3000\u3000', '小于\u3000\u3000', '小于等于','大于\u3000\u3000','大于等于', 
			'开始于','不开始于','属于\u3000\u3000','不属于','结束于','不结束于','包含\u3000\u3000','不包含'],
		groupOps: [	{ op: "AND", text: "所有" },	{ op: "OR",  text: "任一" }	],
		matchText: " 匹配",
		rulesText: " 规则"
	},
	edit : {
		bUpdate:'更新',
		addCaption: "添加记录",
		editCaption: "编辑记录",
		bSubmit: "提交",
		bCancel: "取消",
		bClose: "关闭",
		saveData: "数据已改变，是否保存？",
		bYes : "是",
		bNo : "否",
		bExit : "取消",
		msg: {
			required:"此字段必需",
			number:"请输入有效数字",
			minValue:"输值必须大于等于 ",
			maxValue:"输值必须小于等于 ",
			email: "这不是有效的e-mail地址",
			integer: "请输入有效整数",
			date: "请输入有效时间",
			url: "无效网址。前缀必须为 ('http://' 或 'https://')",
			nodefined : " 未定义！",
			novalue : " 需要返回值！",
			customarray : "自定义函数需要返回数组！",
			customfcheck : "Custom function should be present in case of custom checking!"
			
		}
	},
	view : {
		caption: "查看记录",
		bClose: "关闭"
	},
	del : {
		caption: "删除",
		msg: "删除所选记录？",
		bSubmit: "删除",
		bCancel: "取消"
	},
	nav : {
		edittext: "",
		edittitle: "编辑所选记录",
		addtext:"",
		addtitle: "添加新记录",
		deltext: "",
		deltitle: "删除所选记录",
		searchtext: "",
		searchtitle: "查找",
		refreshtext: "",
		refreshtitle: "刷新表格",
		alertcap: "注意",
		alerttext: "请选择记录",
		viewtext: "",
		viewtitle: "查看所选记录"
	},
	col : {
		caption: "选择列",
		bSubmit: "确定",
		bCancel: "取消"
	},
	errors : {
		errcap : "错误",
		nourl : "没有设置url",
		norecords: "没有要处理的记录",
		model : "colNames 和 colModel 长度不等！"
	},
	formatter : {
		integer : {thousandsSeparator: ",", defaultValue: '0'},
		number : {decimalSeparator:".", thousandsSeparator: " ", decimalPlaces: 2, defaultValue: '0.00'},
		currency : {decimalSeparator:".", thousandsSeparator: " ", decimalPlaces: 2, prefix: "", suffix:"", defaultValue: '0.00'},
		date : {
			dayNames:   [
				"Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat",
		         "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
			],
			monthNames: [
				"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
				"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
			],
			AmPm : ["am","pm","AM","PM"],
			S: function (j) {return j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th'},
			srcformat: 'Y-m-d',
			newformat: 'm-d-Y',
			masks : {
				ISO8601Long:"Y-m-d H:i:s",
				ISO8601Short:"Y-m-d",
				ShortDate: "Y/j/n",
				LongDate: "l, F d, Y",
				FullDateTime: "l, F d, Y g:i:s A",
				MonthDay: "F d",
				ShortTime: "g:i A",
				LongTime: "g:i:s A",
				SortableDateTime: "Y-m-d\\TH:i:s",
				UniversalSortableDateTime: "Y-m-d H:i:sO",
				YearMonth: "F, Y"
			},
			reformatAfterEdit : false
		},
		baseLinkUrl: '',
		showAction: '',
		target: '',
		checkbox : {/*disabled:true*/},
		idName : 'id'
	}
};
})(jQuery);

;(function($){
/*
 * jqGrid common function
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
*/
/*global jQuery, $ */

$.extend($.grid,{
// Modal functions
	showModal : function(h) {
		h.w.show();
	},
	closeModal : function(h) {
		h.w.hide().attr("aria-hidden","true");
		if(h.o) {h.o.remove();}
	},
	hideModal : function (selector,o) {
		o = $.extend({jqm : true, gb :''}, o || {});
		if(o.onClose) {
			var oncret =  o.onClose(selector);
			if (typeof oncret == 'boolean'  && !oncret ) { return; }
		}
		if ($.fn.jqm && o.jqm === true) {
			$(selector).attr("aria-hidden","true").jqmHide();
		} else {
			if(o.gb !== '') {
				try {$(".jqgrid-overlay:first",o.gb).hide();} catch (e){}
			}
			$(selector).hide().attr("aria-hidden","true");
		}
	},
//Helper functions
	findPos : function(obj) {
		var curleft = 0, curtop = 0;
		if (obj.offsetParent) {
			do {
				curleft += obj.offsetLeft;
				curtop += obj.offsetTop;
			} while (obj = obj.offsetParent);
			//do not change obj == obj.offsetParent
		}
		return [curleft,curtop];
	},
	createModal : function(aIDs, content, p, insertSelector, posSelector, appendsel, css) {		
		var mw  = document.createElement('div'), rtlsup, self = this;
		css = $.extend({}, css || {});
		rtlsup = $(p.gbox).attr("dir") == "rtl" ? true : false;
		mw.className= "coral-component coral-component-content coral-corner-all coral-jqdialog";
		mw.id = aIDs.themodal;
		var mh = document.createElement('div');
		mh.className = "coral-jqdialog-titlebar coral-component-header coral-corner-all coral-helper-clearfix";
		mh.id = aIDs.modalhead;
		$(mh).append("<span class='coral-jqdialog-title'>"+p.caption+"</span>");
		var ahr= $("<a href='javascript:void(0)' class='coral-jqdialog-titlebar-close coral-corner-all'></a>")
		.hover(function(){ahr.addClass('coral-state-hover');},
			   function(){ahr.removeClass('coral-state-hover');})
		.append("<span class='coral-icon coral-icon-closethick'></span>");
		$(mh).append(ahr);
		if(rtlsup) {
			mw.dir = "rtl";
			$(".coral-jqdialog-title",mh).css("float","right");
			$(".coral-jqdialog-titlebar-close",mh).css("left",0.3+"em");
		} else {
			mw.dir = "ltr";
			$(".coral-jqdialog-title",mh).css("float","left");
			$(".coral-jqdialog-titlebar-close",mh).css("right",0.3+"em");
		}
		var mc = document.createElement('div');
		$(mc).addClass("coral-jqdialog-content coral-component-content").attr("id",aIDs.modalcontent);
		$(mc).append(content);
		mw.appendChild(mc);
		$(mw).prepend(mh);
		if(appendsel===true) { $('body').append(mw); } //append as first child in body -for alert dialog
		else if (typeof appendsel == "string")
			$(appendsel).append(mw);
		else {$(mw).insertBefore(insertSelector);}
		$(mw).css(css);
		if(typeof p.jqModal === 'undefined') {p.jqModal = true;} // internal use
		var coord = {};
		if ( $.fn.jqm && p.jqModal === true) {
			if(p.left ===0 && p.top===0 && p.overlay) {
				var pos = [];
				pos = this.findPos(posSelector);
				p.left = pos[0] + 4;
				p.top = pos[1] + 4;
			}
			coord.top = p.top+"px";
			coord.left = p.left;
		} else if(p.left !==0 || p.top!==0) {
			coord.left = p.left;
			coord.top = p.top+"px";
		}
		$("a.coral-jqdialog-titlebar-close",mh).click(function(){
			var oncm = $("#"+$.grid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
			var gboxclose = $("#"+$.grid.jqID(aIDs.themodal)).data("gbox") || p.gbox;
			self.hideModal("#"+$.grid.jqID(aIDs.themodal),{gb:gboxclose,jqm:p.jqModal,onClose:oncm});
			return false;
		});
		if (p.width === 0 || !p.width) {p.width = 300;}
		if(p.height === 0 || !p.height) {p.height =200;}
		if(!p.zIndex) {
			var parentZ = $(insertSelector).parents("*[role=dialog]").filter(':first').css("z-index");
			if(parentZ) {
				p.zIndex = parseInt(parentZ,10)+2;
			} else {
				p.zIndex = 950;
			}
		}
		var rtlt = 0;
		if( rtlsup && coord.left && !appendsel) {
			rtlt = $(p.gbox).width()- (!isNaN(p.width) ? parseInt(p.width,10) :0) - 8; // to do
		// just in case
			coord.left = parseInt(coord.left,10) + parseInt(rtlt,10);
		}
		if(coord.left) { coord.left += "px"; }
		$(mw).css($.extend({
			width: isNaN(p.width) ? "auto": p.width+"px",
			height:isNaN(p.height) ? "auto" : p.height + "px",
			zIndex:p.zIndex,
			overflow: 'hidden'
		},coord))
		.attr({tabIndex: "-1","role":"dialog","aria-labelledby":aIDs.modalhead,"aria-hidden":"true"});
		if(typeof p.drag == 'undefined') { p.drag=true;}
		if(typeof p.resize == 'undefined') {p.resize=true;}
		if (p.drag) {
			$(mh).css('cursor','move');
			if($.fn.jqDrag) {
				$(mw).jqDrag(mh);
			} else {
				try {
					$(mw).draggable({handle: $("#"+$.grid.jqID(mh.id))});
				} catch (e) {}
			}
		}
		if(p.resize) {
			if($.fn.jqResize) {
				$(mw).append("<div class='jqResize coral-resizable-handle coral-resizable-se coral-icon coral-icon-gripsmall-diagonal-se coral-icon-grip-diagonal-se'></div>");
				$("#"+$.grid.jqID(aIDs.themodal)).jqResize(".jqResize",aIDs.scrollelm ? "#"+$.grid.jqID(aIDs.scrollelm) : false);
			} else {
				try {
					$(mw).resizable({handles: 'se, sw',alsoResize: aIDs.scrollelm ? "#"+$.grid.jqID(aIDs.scrollelm) : false});
				} catch (r) {}
			}
		}
		if(p.closeOnEscape === true){
			$(mw).keydown( function( e ) {
				if( e.which == 27 ) {
					var cone = $("#"+$.grid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
					self.hideModal(this,{gb:p.gbox,jqm:p.jqModal,onClose: cone});
				}
			});
		}
	},
	viewModal : function (selector,o){
		o = $.extend({
			toTop: true,
			overlay: 10,
			modal: false,
			overlayClass : 'coral-component-overlay',
			onShow: this.showModal,
			onHide: this.closeModal,
			gbox: '',
			jqm : true,
			jqM : true
		}, o || {});
		if ($.fn.jqm && o.jqm === true) {
			if(o.jqM) { $(selector).attr("aria-hidden","false").jqm(o).jqmShow(); }
			else {$(selector).attr("aria-hidden","false").jqmShow();}
		} else {
			if(o.gbox !== '') {
				$(".jqgrid-overlay:first",o.gbox).show();
				$(selector).data("gbox",o.gbox);
			}
			$(selector).show().attr("aria-hidden","false");
			try{$(':input:visible',selector)[0].focus();}catch(_){}
		}
	},

	info_dialog : function(caption, content,c_b, modalopt) {
		var mopt = {
			width:290,
			height:'auto',
			dataheight: 'auto',
			drag: true,
			resize: false,
			caption:"<b>"+caption+"</b>",
			left:250,
			top:170,
			zIndex : 1000,
			jqModal : true,
			modal : false,
			closeOnEscape : true,
			align: 'center',
			buttonalign : 'center',
			buttons : []
		// {text:'textbutt', id:"buttid", onClick : function(){...}}
		// if the id is not provided we set it like info_button_+ the index in the array - i.e info_button_0,info_button_1...
		};
		$.extend(mopt,modalopt || {});
		var jm = mopt.jqModal, self = this;
		if($.fn.jqm && !jm) { jm = false; }
		// in case there is no jqModal
		var buttstr ="";
		if(mopt.buttons.length > 0) {
			for(var i=0;i<mopt.buttons.length;i++) {
				if(typeof mopt.buttons[i].id == "undefined") { mopt.buttons[i].id = "info_button_"+i; }
				buttstr += "<a href='javascript:void(0)' id='"+mopt.buttons[i].id+"' class='fm-button coral-state-default coral-corner-all'>"+mopt.buttons[i].text+"</a>";
			}
		}
		var dh = isNaN(mopt.dataheight) ? mopt.dataheight : mopt.dataheight+"px",
		cn = "text-align:"+mopt.align+";";
		var cnt = "<div id='info_id'>";
		cnt += "<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:"+dh+";"+cn+"'>"+content+"</div>";
		cnt += c_b ? "<div class='coral-component-content coral-helper-clearfix' style='text-align:"+mopt.buttonalign+";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a href='javascript:void(0)' id='closedialog' class='fm-button coral-state-default coral-corner-all'>"+c_b+"</a>"+buttstr+"</div>" :
			buttstr !== ""  ? "<div class='coral-component-content coral-helper-clearfix' style='text-align:"+mopt.buttonalign+";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>"+buttstr+"</div>" : "";
		cnt += "</div>";

		try {
			if($("#info_dialog").attr("aria-hidden") == "false") {
				this.hideModal("#info_dialog",{jqm:jm});
			}
			$("#info_dialog").remove();
		} catch (e){}
		this.createModal({
			themodal:'info_dialog',
			modalhead:'info_head',
			modalcontent:'info_content',
			scrollelm: 'infocnt'},
			cnt,
			mopt,
			'','',true
		);
		// attach onclick after inserting into the dom
		if(buttstr) {
			$.each(mopt.buttons,function(i){
				$("#"+$.grid.jqID(this.id),"#info_id").bind('click',function(){mopt.buttons[i].onClick.call($("#info_dialog")); return false;});
			});
		}
		$("#closedialog", "#info_id").click(function(){
			self.hideModal("#info_dialog",{jqm:jm});
			return false;
		});
		$(".fm-button","#info_dialog").hover(
			function(){$(this).addClass('coral-state-hover');},
			function(){$(this).removeClass('coral-state-hover');}
		);
		if($.isFunction(mopt.beforeOpen) ) { mopt.beforeOpen(); }
		this.viewModal("#info_dialog",{
			onHide: function(h) {
				h.w.hide().remove();
				if(h.o) { h.o.remove(); }
			},
			modal :mopt.modal,
			jqm:jm
		});
		if($.isFunction(mopt.afterOpen) ) { mopt.afterOpen(); }
		try{ $("#info_dialog").focus();} catch (m){}
	},
// Form Functions
	createEl : function(eltype,options,vl,autowidth, ajaxso) { 
		var elem = "", $t = this;
		function bindEv (el, opt) {
			if($.isFunction(opt.dataInit)) {
				opt.dataInit.call($t,el);
			}
			if(opt.dataEvents) {
				$.each(opt.dataEvents, function() {
					if (this.data !== undefined) {
						$(el).bind(this.type, this.data, this.fn);
					} else {
						$(el).bind(this.type, this.fn);
					}
				});
			}
			return opt;
		}
		function setAttributes(elm, atr, exl ) {
			/*var exclude = ['dataInit','dataEvents','dataUrl', 'buildSelect','sopt', 'searchhidden', 'defaultValue', 'attr'];
			if(typeof(exl) != "undefined" && $.isArray(exl)) {
				$.merge(exclude, exl);
			}
			$.each(atr, function(key, value){
				if($.inArray(key, exclude) === -1) {
					$(elm).attr(key,value);
				}
			});*/
			if(!atr.hasOwnProperty('id')) {
				$(elm).attr('id', $.grid.randId());
			}
		}
		switch (eltype)
		{
			case "textarea" :
				elem = document.createElement("textarea");
				if(autowidth) {
					if(!options.cols) { $(elem).css({width:"98%"});}
				} else if (!options.cols) { options.cols = 20; }
				if(!options.rows) { options.rows = 2; }
				if(vl=='&nbsp;' || vl=='&#160;' || (vl.length==1 && vl.charCodeAt(0)==160)) {vl="";}
				elem.value = vl;
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				$(elem).attr({"role":"textbox","multiline":"true"});
			break;
			// lihaibo zs begin
			/*case "checkbox" : //what code for simple checkbox
				elem = document.createElement("input");
				elem.type = "checkbox";
				if( !options.value ) {
					var vl1 = vl.toLowerCase();
					if(vl1.search(/(false|0|no|off|undefined)/i)<0 && vl1!=="") {
						elem.checked=true;
						elem.defaultChecked=true;
						elem.value = vl;
					} else {
						elem.value = "on";
					}
					$(elem).attr("offval","off");
				} else {
					var cbval = options.value.split(":");
					if(vl === cbval[0]) {
						elem.checked=true;
						elem.defaultChecked=true;
					}
					elem.value = cbval[0];
					$(elem).attr("offval",cbval[1]);
				}
				setAttributes(elem, options, ['value']);
				options = bindEv(elem,options);
				$(elem).attr("role","checkbox");
			break;*/
			//lihaibo zs end
			case "select" :
				elem = document.createElement("select");
				elem.setAttribute("role","select");
				var msl, ovm = [];
				if(options.multiple===true) {
					msl = true;
					elem.multiple="multiple";
					$(elem).attr("aria-multiselectable","true");
				} else { msl = false; }
				if(typeof(options.dataUrl) != "undefined") {
					$.ajax($.extend({
						url: options.dataUrl,
						type : "GET",
						dataType: "html",
						context: {elem:elem, options:options, vl:vl},
						success: function(data){
							var a,	ovm = [], elem = this.elem, vl = this.vl,
							options = $.extend({},this.options),
							msl = options.multiple===true;
							if($.isFunction(options.buildSelect)) {
								var b = options.buildSelect.call($t,data);
								a = $(b).html();
							} else {
								a = $(data).html();
							}
							if(a) {
								$(elem).append(a);
								setAttributes(elem, options);
								//options = bindEv(elem,options);
								if(typeof options.size === 'undefined') { options.size =  msl ? 3 : 1;}
								if(msl) {
									ovm = vl.split(",");
									ovm = $.map(ovm,function(n){return $.trim(n);});
								} else {
									ovm[0] = $.trim(vl);
								}
								//$(elem).attr(options);
								setTimeout(function(){
									$("option",elem).each(function(i){
										//if(i===0) { this.selected = ""; }
										// fix IE8/IE7 problem with selecting of the first item on multiple=true
										if (i === 0 && elem.multiple) { this.selected = false; }
										$(this).attr("role","option");
										if($.inArray($.trim($(this).text()),ovm) > -1 || $.inArray($.trim($(this).val()),ovm) > -1 ) {
											this.selected= "selected";
										}
									});
								},0);
							}
						}
					},ajaxso || {}));
				} else if(options.value) {
					var i;
					if(typeof options.size === 'undefined') {
						options.size = msl ? 3 : 1;
					}
					if(msl) {
						ovm = vl.split(",");
						ovm = $.map(ovm,function(n){return $.trim(n);});
					}
					if(typeof options.value === 'function') { options.value = options.value(); }
					var so,sv, ov, 
					sep = options.separator === undefined ? ":" : options.separator,
					delim = options.delimiter === undefined ? ";" : options.delimiter;
					if(typeof options.value === 'string') {
						so = options.value.split(delim);
						for(i=0; i<so.length;i++){
							sv = so[i].split(sep);
							if(sv.length > 2 ) {
								sv[1] = $.map(sv,function(n,ii){if(ii>0) { return n;} }).join(sep);
							}
							ov = document.createElement("option");
							ov.setAttribute("role","option");
							ov.value = sv[0]; ov.innerHTML = sv[1];
							elem.appendChild(ov);
							if (!msl &&  ($.trim(sv[0]) == $.trim(vl) || $.trim(sv[1]) == $.trim(vl))) { ov.selected ="selected"; }
							if (msl && ($.inArray($.trim(sv[1]), ovm)>-1 || $.inArray($.trim(sv[0]), ovm)>-1)) {ov.selected ="selected";}
						}
					} else if (typeof options.value === 'object') {
						var oSv = options.value;
						for ( var key in oSv) {
							if (oSv.hasOwnProperty(key ) ){
								ov = document.createElement("option");
								ov.setAttribute("role","option");
								ov.value = key; ov.innerHTML = oSv[key];
								elem.appendChild(ov);
								if (!msl &&  ( $.trim(key) == $.trim(vl) || $.trim(oSv[key]) == $.trim(vl)) ) { ov.selected ="selected"; }
								if (msl && ($.inArray($.trim(oSv[key]),ovm)>-1 || $.inArray($.trim(key),ovm)>-1)) { ov.selected ="selected"; }
							}
						}
					}
					setAttributes(elem, options, ['value']);
					//options = bindEv(elem,options);
				}
			break;
			case "datepicker" :
			case "autocomplete" :
			case "autocompletetree" :
			case "text" :
			case "password" :
			case "button" :
				var role;
				if(eltype=="button") { role = "button"; }
				else { role = "textbox"; }
				elem = document.createElement("input");
				if(eltype=="datepicker") elem.type = "text";//日期控件初始化用input[type=text]
				else if(eltype=="autocomplete") elem.type = "text";//autocomplete控件初始化用input[type=text]
				else elem.type = eltype;
				elem.value = vl;
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				if(eltype != "button"){
					if(autowidth) {
						if(!options.size) { $(elem).css({width:"98%"}); }
					} else if (!options.size) { options.size = 20; }
				}
				$(elem).attr("role",role);
			break;
			case "image" :
			case "file" :
				elem = document.createElement("input");
				elem.type = eltype;
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				break;
			case "custom" :
				elem = document.createElement("span");
				try {
					if($.isFunction(options.custom_element)) {
						var celm = options.custom_element.call($t,vl,options);
						if(celm) {
							celm = $(celm).addClass("customelement").attr({id:options.id,name:options.name});
							$(elem).empty().append(celm);
						} else {
							throw "e2";
						}
					} else {
						throw "e1";
					}
				} catch (e) {
					if (e=="e1") { this.info_dialog($.grid.errors.errcap,"function 'custom_element' "+$.grid.edit.msg.nodefined, $.grid.edit.bClose);}
					if (e=="e2") { this.info_dialog($.grid.errors.errcap,"function 'custom_element' "+$.grid.edit.msg.novalue,$.grid.edit.bClose);}
					else { this.info_dialog($.grid.errors.errcap,typeof(e)==="string"?e:e.message,$.grid.edit.bClose); }
				}
				break;
			//lihaibo add begin
			/*case "radio":
				elem = document.createElement("input");
				elem.type = eltype;
				setAttributes(elem, options);
				options = bindEv(elem,options);
				break;*/
			case "checkbox": 
				elem = document.createElement("input");
				elem.type = eltype;
				elem.value = vl;
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				break;
			case "combobox":				
			case "combotree":
			case "combogrid":
				elem = document.createElement("input");
				elem.type = "text";
				elem.value = vl;
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				break;
			default:
				break;
			//lihaibo add end
		}
		return elem;
	},
// Date Validation Javascript
	checkDate : function (format, date) {
		var daysInFebruary = function(year){
		// February has 29 days in any year evenly divisible by four,
		// EXCEPT for centurial years which are not also divisible by 400.
			return (((year % 4 === 0) && ( year % 100 !== 0 || (year % 400 === 0))) ? 29 : 28 );
		},
		DaysArray = function(n) {
			for (var i = 1; i <= n; i++) {
				this[i] = 31;
				if (i==4 || i==6 || i==9 || i==11) {this[i] = 30;}
				if (i==2) {this[i] = 29;}
			}
			return this;
		};

		var tsp = {}, sep;
		format = format.toLowerCase();
		//we search for /,-,. for the date separator
		if(format.indexOf("/") != -1) {
			sep = "/";
		} else if(format.indexOf("-") != -1) {
			sep = "-";
		} else if(format.indexOf(".") != -1) {
			sep = ".";
		} else {
			sep = "/";
		}
		format = format.split(sep);
		date = date.split(sep);
		if (date.length != 3) { return false; }
		var j=-1,yln, dln=-1, mln=-1;
		for(var i=0;i<format.length;i++){
			var dv =  isNaN(date[i]) ? 0 : parseInt(date[i],10);
			tsp[format[i]] = dv;
			yln = format[i];
			if(yln.indexOf("y") != -1) { j=i; }
			if(yln.indexOf("m") != -1) { mln=i; }
			if(yln.indexOf("d") != -1) { dln=i; }
		}
		if (format[j] == "y" || format[j] == "yyyy") {
			yln=4;
		} else if(format[j] =="yy"){
			yln = 2;
		} else {
			yln = -1;
		}
		var daysInMonth = DaysArray(12),
		strDate;
		if (j === -1) {
			return false;
		} else {
			strDate = tsp[format[j]].toString();
			if(yln == 2 && strDate.length == 1) {yln = 1;}
			if (strDate.length != yln || (tsp[format[j]]===0 && date[j]!="00")){
				return false;
			}
		}
		if(mln === -1) {
			return false;
		} else {
			strDate = tsp[format[mln]].toString();
			if (strDate.length<1 || tsp[format[mln]]<1 || tsp[format[mln]]>12){
				return false;
			}
		}
		if(dln === -1) {
			return false;
		} else {
			strDate = tsp[format[dln]].toString();
			if (strDate.length<1 || tsp[format[dln]]<1 || tsp[format[dln]]>31 || (tsp[format[mln]]==2 && tsp[format[dln]]>daysInFebruary(tsp[format[j]])) || tsp[format[dln]] > daysInMonth[tsp[format[mln]]]){
				return false;
			}
		}
		return true;
	},
	isEmpty : function(val)
	{
		if (val.match(/^\s+$/) || val === "")	{
			return true;
		} else {
			return false;
		}
	},
	checkTime : function(time){
	// checks only hh:ss (and optional am/pm)
		var re = /^(\d{1,2}):(\d{2})([ap]m)?$/,regs;
		if(!this.isEmpty(time))
		{
			regs = time.match(re);
			if(regs) {
				if(regs[3]) {
					if(regs[1] < 1 || regs[1] > 12) { return false; }
				} else {
					if(regs[1] > 23) { return false; }
				}
				if(regs[2] > 59) {
					return false;
				}
			} else {
				return false;
			}
		}
		return true;
	},
	checkValues : function(val, valref,g, customobject, nam) {
		var edtrul,i, nm, dft, len;
		if(typeof(customobject) === "undefined") {
			if(typeof(valref)=='string'){
				for( i =0, len=g.options.colModel.length;i<len; i++){
					if(g.options.colModel[i].name==valref) {
						edtrul = g.options.colModel[i].editrules;
						valref = i;
						try { nm = g.options.colModel[i].formoptions.label; } catch (e) {}
						break;
					}
				}
			} else if(valref >=0) {
				edtrul = g.options.colModel[valref].editrules;
			}
		} else {
			edtrul = customobject;
			nm = nam===undefined ? "_" : nam;
		}
		if(edtrul) {
			if(!nm) { nm = g.options.colNames[valref]; }
			if(edtrul.required === true) {
				if( this.isEmpty(val) )  { return [false,nm+": "+$.grid.edit.msg.required,""]; }
			}
			// force required
			var rqfield = edtrul.required === false ? false : true;
			if(edtrul.number === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(isNaN(val)) { return [false,nm+": "+$.grid.edit.msg.number,""]; }
				}
			}
			if(typeof edtrul.minValue != 'undefined' && !isNaN(edtrul.minValue)) {
				if (parseFloat(val) < parseFloat(edtrul.minValue) ) { return [false,nm+": "+$.grid.edit.msg.minValue+" "+edtrul.minValue,""];}
			}
			if(typeof edtrul.maxValue != 'undefined' && !isNaN(edtrul.maxValue)) {
				if (parseFloat(val) > parseFloat(edtrul.maxValue) ) { return [false,nm+": "+$.grid.edit.msg.maxValue+" "+edtrul.maxValue,""];}
			}
			var filter;
			if(edtrul.email === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
				// taken from $ Validate plugin
					filter = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
					if(!filter.test(val)) {return [false,nm+": "+$.grid.edit.msg.email,""];}
				}
			}
			if(edtrul.integer === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(isNaN(val)) { return [false,nm+": "+$.grid.edit.msg.integer,""]; }
					if ((val % 1 !== 0) || (val.indexOf('.') != -1)) { return [false,nm+": "+$.grid.edit.msg.integer,""];}
				}
			}
			if(edtrul.date === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(g.options.colModel[valref].formatoptions && g.options.colModel[valref].formatoptions.newformat) {
						dft = g.options.colModel[valref].formatoptions.newformat;
					} else {
						dft = g.options.colModel[valref].datefmt || "Y-m-d";
					}
					if(!this.checkDate (dft, val)) { return [false,nm+": "+$.grid.edit.msg.date+" - "+dft,""]; }
				}
			}
			if(edtrul.time === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(!this.checkTime (val)) { return [false,nm+": "+$.grid.edit.msg.date+" - hh:mm (am/pm)",""]; }
				}
			}
			if(edtrul.url === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					filter = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
					if(!filter.test(val)) {return [false,nm+": "+$.grid.edit.msg.url,""];}
				}
			}
			if(edtrul.custom === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if($.isFunction(edtrul.custom_func)) {
						var ret = edtrul.custom_func.call(g,val,nm);
						if($.isArray(ret)) {
							return ret;
						} else {
							return [false,$.grid.edit.msg.customarray,""];
						}
					} else {
						return [false,$.grid.edit.msg.customfcheck,""];
					}
				}
			}
		}
		return [true,"",""];
	}
});
})(jQuery);

(function($){

"use strict";

$.grid = $.grid||{};
$.component( "coral.grid",{
	version: "4.0.1",
	castProperties : ["rowEditButtons", "data", "initData", "rowList", "pagerTemplate", "celloptions"],
	options: {
		
	},
	grid: {
			
	},
	diff: 2,
	getScrollBarWidth: function () {
		var inner = document.createElement('p');
		inner.style.width = "100%";
		inner.style.height = "200px";

		var outer = document.createElement('div');
		outer.style.position = "absolute";
		outer.style.top = "0px";
		outer.style.left = "0px";
		outer.style.visibility = "hidden";
		outer.style.width = "200px";
		outer.style.height = "150px";
		outer.style.overflow = "hidden";
		outer.appendChild (inner);

		document.body.appendChild (outer);
		var w1 = inner.offsetWidth;
	  	outer.style.overflow = 'scroll';
	  	var w2 = inner.offsetWidth;
	  	if (w1 == w2) w2 = outer.clientWidth;

	  	document.body.removeChild (outer);

	  	return (w1 - w2)+this.diff;
	},
	_destroy: function(){
        var destroyPag = "",
            elementId = $(this.element).attr("id");
        if (this.pagers){
             destroyPag = $(this.pagers).empty().addClass(elementId);
        }
        $(this.element).empty();
		this.element.removeClass( "ctrl-init ctrl-init-grid" );
		this.element.removeClass( "coral-grid" );
		this.element.removeClass( this.options.cls );
        this.component().replaceWith(this.element).append(destroyPag); 
	},
	/***
	 * 第一步：
	 * 初始化生成统一的模型数据
	 * 第二步：
	 * 分离不同表格的构造方法，构造方法基于统一模型，可方便切换
	 * 第三部：
	 * 构造表格，绑定方法
	 * 
	 */
	_create: function() {
		var options = this.options,
			that = this,
			activeClass = "coral-state-active",
			focusClass = "coral-state-focus",
			id = this.element.uniqueId().attr("id");
		options.id = id;
		var p = {
			_index : {},
			altRows:false,
			altclass: " coral-priority-secondary ",
			ajaxGridOptions:{},//grid请求的默认参数
			asyncType: "post",//Ajax 的 http 请求模式
			autoSave: false,//点击表格其他位置是否自动保存编辑状态的单元格。
			autoValid: true,
			autoWidth: true,
			allowSaveOnError: true,//出错的时候是否允许保存，默认是允许的。
			cls: "",
			caption: "",
			colModel: [],//列模型，根据页面html，自动构造
			colNames: [],//列名字，根据页面html，自动构造
			cellLayout: 1,
			cellEdit: false,
			cellsubmit: "clientArray",
			clicksToEdit: 2,
			data : [],
			datatype: "json",
			direction : "ltr",
			deselectAfterSort: true,
			emptyrecords: "无数据",
			ExpandColumn: null,
			height: 150,//列表默认高度
			idPrefix : "",
			initData: false,
			customPicgrid: $.noop(),
			gridview: false,
			grouping : false,
			groupingView : {groupField:[],groupOrder:[], groupText:[],groupColumnShow:[],groupSummary:[], showSummaryOnHide: false, sortitems:[], sortnames:[], summary:[],summaryval:[], plusicon: 'cui-icon-plus3', minusicon: 'cui-icon-minus3', displayField: [], groupSummaryPos:[], formatDisplayField : [], _locgr : false},
			groupHeaders: [],
			groupHeader: false,
			fitStyle: "auto",
			forceFit : false,
			hoverrows : true,
			lastsort: 0,
			loadonce: true,
			loadui: "enable", // lihaibo 20141111
			loadtext: "加载中，请耐心等候 ...", // lihaibo 20141111
			minWidth: false,
			multiselect: false,
			multiselectWidth: 30,
			multikey: "",
			model: "grid",
			page: 1,//列表默认页码
			pager: "",
			pagerStyle: "flex",
			pginput: true,
			records: 0,
			rninput: true,
			rowEditButtons: [],
			pgbuttons: true,
			picTemplate: "picTemplate",
			postData: {},
			prmNames: {page:"P_pageNumber",rows:"P_pagesize", sort: "P_orders",order: "sord", search:"_search", nd:"nd", id:"id",oper:"oper",editoper:"edit",addoper:"add",deloper:"del", subgridid:"id", npage: null, totalrows:"totalrows"},
			rowNum: 20,//默认每页显示行数
			rowNumMax: 200,//默认每页显示最大行数
			rownumbers: false,
			rownumWidth: 35,
			rowList: [10,20,30],
			savedRow: [],
			scrollOffset:this.getScrollBarWidth(),
			selarrrow: [],
			singleselect: false,
			sortorder: "asc",
			treeGrid : false,
			treeGridModel : 'adjacency',
			treeReader : {},
			treeANode : -1,
			tree_root_level : 0,
			onSortableColumns: false,
			sortableColumnsOptions: {},
			onSortableRows: false,
			beforeSortableRows: false,
			afterSortableRows: false,
			editableRows: false,
			containSortOrder: false,
			sortSeparator: " ",
			shrinkToFit: true,
			toppager: false,
			toolbar: [false,""],
			url: "",//grid加载的远程地址
			useProp: true,
			viewsortcols : [false,'vertical',true],
			viewrecords: true,
			minIndex: null,
			maxIndex: null,
			preIndex: null,
			beforePopulate: null
		};
		options = $.extend(true,{},p,$.grid.defaults,this.options);
		// 兼容处理
		if(options.model == "pic"){options.model = "card";}
		this.options = options;
		this.options.isValid = true;
		options.postData = $.coral.toFunction(options.postData);
		options.localReader = $.extend(true,{
			root: "data",
			page: "pageNumber",
			total: "totalPages",
			records: "total",
			repeatitems: false,
			cell: "cell",
			id: "id",
			userData: "userData",
			subgrid: {root:"data", repeatitems: true, cell:"cell"}
		},options.localReader);
		
		options.jsonReader = $.extend(true,{
			root: "data",
			page: "pageNumber",
			total: "totalPages",
			records: "total",
			repeatitems: false,
			cell: "cell",
			id: "id",
			userData: "userData"
		},options.jsonReader);
		if(this.options.data.length) { this.normalizeData(); this.refreshIndex(); }
		this.id = id;
		var grid = {
			groupHeader: [],
			headers:[],
			cols:[],
			footers: [],
			dragStart: function(i,x,y) {//index, event, the offset of column
				var grid = this;
				this.resizing = { idx: i, startX: x.clientX, sOL : y[0]};
				grid.columnsView.style.cursor = "col-resize";
				this.curGbox = $("#rs_m"+$.grid.coralID(that.options.id),"#"+$.grid.coralID(that.options.id));
				this.curGbox.css({display:"block",left:y[0],top:y[1],height:y[2]});
				that._trigger("onResizeStart", x, [{"index":i}]);
				document.onselectstart=function(){return false;};
			},
			dragMove: function(x) {
				if(this.resizing) {
					var diff = x.clientX-this.resizing.startX,
					h = this.headers[this.resizing.idx], //current header
					newWidth = that.options.direction === "ltr" ? h.width + diff : h.width - diff, //new width of current header
					hn, //new header
					nWn; //new width of new header
					$("#test").html(diff);
					if(newWidth > 33) {
						this.curGbox.css({left:this.resizing.sOL+diff});
						if(that.options.forceFit===true ){
							hn = this.headers[this.resizing.idx+options.nv];
							nWn = that.options.direction === "ltr" ? hn.width - diff : hn.width + diff;
							if(nWn >33) {
								h.newWidth = newWidth;
								hn.newWidth = nWn;
							}
						} else {
							this.newWidth = that.options.direction === "ltr" ? that.options.tblwidth+diff : that.options.tblwidth-diff;
							h.newWidth = newWidth;
						}
					}
				}
			},
			dragEnd: function() {
				this.columnsView.style.cursor = "default";
				if(this.resizing) {
					var idx = this.resizing.idx,
					nw = this.headers[idx].newWidth || this.headers[idx].width;
					nw = parseInt(nw,10);
					this.resizing = false;
					$("#rs_m"+$.grid.coralID(that.options.id)).css("display","none");
					that.options.colModel[idx].width = nw;
					this.headers[idx].width = nw;
					this.headers[idx].el.style.width = nw + "px";
					this.cols[idx].style.width = nw+"px";
					if($('table:first',this.rowsView).hasClass("coral-grid-btable-frozen")){//处理冻结行
						$("tr.jqgfirstrow>td:eq("+idx+")", $('table:first',this.rowsView))[0].style.width = nw+"px";
					}
					var groupHeader = $("tr.jqg-first-row-header>th:eq("+idx+")", $('table:first',this.columnsView));
					if(groupHeader.length>0){groupHeader[0].style.width = nw+"px";}
					if(this.footers.length>0) {this.footers[idx].style.width = nw+"px";}
					if(that.options.forceFit===true){
						nw = this.headers[idx+options.nv].newWidth || this.headers[idx+options.nv].width;
						this.headers[idx+options.nv].width = nw;
						this.headers[idx+options.nv].el.style.width = nw + "px";
						this.cols[idx+options.nv].style.width = nw+"px";
						if(this.footers.length>0) {this.footers[idx+options.nv].style.width = nw+"px";}
						that.options.colModel[idx+options.nv].width = nw;
						
						groupHeader = $("tr.jqg-first-row-header>th:eq("+(idx+options.nv)+")", $('table:first',this.columnsView));
						if(groupHeader.length>0){groupHeader[0].style.width = nw+"px";}
					} else {
						that.options.tblwidth = this.newWidth || that.options.tblwidth;
						//$('table:first',this.rowsView).css("width",that.options.tblwidth+"px");
						$('table',this.rowsView).css("width",that.options.tblwidth+"px");//包括冻结行的宽度
						$('table:first',this.columnsView).css("width",that.options.tblwidth+"px");
						this.columnsView.scrollLeft = this.rowsView.scrollLeft;
						if(that.options.footerrow) {
							$('table:first',this.sDiv).css("width",p.tblwidth+"px");
							this.sDiv.scrollLeft = this.rowsView.scrollLeft;
						}
					}
					that._trigger("onResizeStop",null, [{"newWidth":nw,"index":idx,"headers":this.headers}]);
				}
				this.curGbox = null;
				document.onselectstart=function(){return true;};
			},
			selectionPreserver : function(that) {
				var opts = that.options,
				sr = opts.selrow, sra = opts.selarrrow ? $.makeArray(opts.selarrrow) : null,
				left = that.grid.rowsView.scrollLeft,
				restoreSelection = function() {
					var i;
					opts.selrow = null;
					opts.selarrrow = [];
					if(opts.multiselect && sra && sra.length>0) {
						for(i=0;i<sra.length;i++){
							if (sra[i] != sr) {
								$(that.element).grid("setSelection",sra[i],false, null);
							}
						}
					}
					if (sr) {
						$(that.element).grid("setSelection",sr,false,null);
					}
					that.grid.rowsView.scrollLeft = left;
					$(that.element).unbind('.selectionPreserver', restoreSelection);
				};
				$(that.element).bind('gridComplete.selectionPreserver', restoreSelection);				
			}
		};
		this.grid = grid;
		
		/* 
		 * 找到页面上定义的列容器
		 * 分页条的class名字包含grid的id，所以查找列的时候需要排除此情况
		 * */
		var gridColumns = this.element.find(">div").filter(function(){
				if($(this).hasClass(that.options.id))return false;
				return true;
			}),
			gridRows = $("<div class='coral-grid-rows'></div>");
		if(gridColumns.length==0){//如果是js初始化需要手动创建列div
			this.element.prepend("<div></div>");
			gridColumns =  this.element.find(">div").filter(function(){
				if($(this).hasClass(that.id))return false;
				return true;
			});
		}
		that.gridRows = gridRows;
		that.gridColumns = gridColumns;
		
		that._analyzeColumns(gridColumns);
		gridColumns.addClass("coral-grid-columns").after(gridRows);
		//rowsView 表格内容部分的view
		grid.rowsView = document.createElement("div");
		$(grid.rowsView).addClass("coral-grid-rows-view").appendTo(gridRows);
		
	//	$("<div class='coral-grid-loading' id='"+"load_"+$.grid.coralID(that.options.id)+"'>" + that.options.loadtext + "</div>").appendTo( this.element );
		$("<span class='coral-grid-noRecordsTips' id='"+"noRecordsTips_"+$.grid.coralID(that.options.id)+"'>" + that.options.emptyrecords + "</span>").appendTo( $(grid.rowsView) );
		
		//columnsView 表格表头部分的view
		grid.columnsView = document.createElement("div");
		$(grid.columnsView).addClass("coral-state-default coral-grid-columns-view").appendTo(gridColumns)
			.append("<div class='coral-grid-topRightCell'></div>");	
		that.pic = $("<ul class='coral-pic'></ul>");
		gridColumns.addClass("coral-grid-columns").after(that.pic);
		if(that.options.grouping===true) {
			that.options.scroll = false;
			that.options.rownumbers = false;
			//that.options.subGrid = false;
			that.options.treeGrid = false;
			that.options.gridview = true;
		}
		if(this.options.treeGrid === true) {
			try { $(that.element).grid("setTreeGrid");} catch (_) {}
			if(that.options.datatype != "local") { that.options.localReader = {id: "_id_"};	}
		}
		if(this.options.subGrid) {
			try { $(that.element).grid("setSubGrid");} catch (s){}
		}
		
		if(this.options.multiselect) {
			this.options.singleselect = false;
		}
		this.options.keyName=false;
		for (var i=0; i<this.options.colModel.length;i++) {
			this.options.colModel[i] = $.extend(true, {}, this.options.cmTemplate, this.options.colModel[i].template || {}, this.options.colModel[i]);
			if (this.options.keyName === false && this.options.colModel[i].key===true) {
				this.options.keyName = this.options.colModel[i].name;
			}
		}
		//设置多选
		if(this.options.multiselect) {
			this.options.colNames.unshift("<input role='checkbox' id='cb_"+this.options.id+"' class='cbox' type='checkbox'/>");
			//this.options.colModel.unshift({name:'cb',width:isSafari ? that.options.multiselectWidth+that.options.cellLayout : that.options.multiselectWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
			this.options.colModel.unshift({name:'cb', width:that.options.multiselectWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
		}else if(this.options.singleselect){
			this.options.colNames.unshift("");
			this.options.colModel.unshift({name:'cb', width:that.options.multiselectWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
		}
		//设置行号
		if(this.options.rownumbers) {
			this.options.colNames.unshift("");
			this.options.colModel.unshift({name:'rn',width:that.options.rownumWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
		}
		that._transToGrid();
		that._transToPicgrid();
		
		that._transPagers();
		that._cvH = $(grid.columnsView).height();//列头的高度不能每次获取，如果切换的时候列头的高度是隐藏的，获得的值是0
		// 20150203 grid 初始化时，数据加载前，先让pager拉下来（假如是自适应的情况下）
		if ( "fill" !== options.fitStyle ) {
		}
		that._setGridHeight(that.options.height);
		// 20150203
		if(options.model == "grid") {
			that.pic.hide();
		}else if(options.model == "card"){
			that.gridRows.hide();
			that.gridColumns.hide();
		}
		// lihaibo 20141111 begin
		
		that.setFrozenColumns();
		this.component().addClass(options.componentCls);
		this._populate();
		// end
		that._setUpEvent();
		$(window).unload(function () {
			that = null;
		});
		// Clicks outside of a grid cancel any edit row
		this._on( this.document, {
			mousedown: function( event ) {
				if ( this.options.autoSave && this._closeOnDocumentClick( event ) ) {
					this.restoreAll( event );
				}
			}
		});
	},
	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".coral-grid" ).length;
	},
	_transPagers: function(){
		var that = this;
		// 处理多个分页条
		this.pagers = $("."+this.id);
		this.pagers.each(function(ind){
			$(this).addClass("coral-grid-pager").removeClass(that.id).attr("id","pager_"+ ind++ +"_"+that.id);
		});
		if(this.pagers){
			this.pagers.each(function(i){
				that._setPager( that.pagers[i].id, '' );
			});
			that.options.pager = "."+that.id;
		}
	},
	toolbar: function(){
		return $( ".pager-toolbar", this.element );
	},
	_transToPicgrid: function(){
		var that = this;
			
		that.pic.css({height:230,'overflow':'auto'});
	},
	_transToGrid: function(){
		var that = this,
			options = this.options;
		if ($.inArray(that.options.multikey,that._sortkeys) == -1 ) {that.options.multikey = false;}
		that.options.sortorder = that.options.sortorder.toLowerCase();
		
		this.element.addClass("coral-grid");
		this.element.addClass(that.options.cls); // add cls attribute
		
		that._transGridView();
		//$(gv).css("width",grid.width+"px");
		
	},
	_transGridView: function(){
		var that = this,
			options = this.options,
			grid = this.grid,
		    ni = options.rownumbers===true ? 1 :0,
		    gi = options.multiselect ===true ? 1 :(options.singleselect === true ? 1 :0),
		    si = options.subGrid===true ? 1 :0;
		var dir= options.direction,i;
		var thead = "<thead><tr class='coral-grid-labels' role='rowheader'>",
		tdc, idn, w, res, sort,
		td, ptr, tbody, imgs,iac="",idc="";
		// 最后一列不允许拖拽列宽
		if(options.shrinkToFit===true && options.forceFit===true) {
			for (i=options.colModel.length-1;i>=0;i--){
				if(!options.colModel[i].hidden) {
					options.colModel[i].resizable=false;
					break;
				}
			}
		}

		$.each(this.options.colModel, function() {
			if(typeof this.hidden === 'undefined') {this.hidden=false;}
		});
		//if(that.options.viewsortcols[1] == 'horizontal') {iac=" coral-i-asc";idc=" coral-i-desc";}
		//tdc = isMSIE ?  "class='coral-th-div-ie'" :"";
		imgs = "<span class='s-ico' style='display:none'><span sort='asc' class='coral-grid-ico-sort coral-icon-asc"+iac+" coral-state-disabled cui-icon-arrow-up5 coral-sort-"+dir+"'></span>";
		imgs += "<span sort='desc' class='coral-grid-ico-sort coral-icon-desc"+idc+" coral-state-disabled cui-icon-arrow-down5 coral-sort-"+dir+"'></span></span>";
		for(i=0;i<options.colNames.length;i++){
			var tooltip = that.options.headertitles ? (" title=\""+$.grid.stripHtml(that.options.colNames[i])+"\"") :"";
			var coralColumnSortableDisabledClass = options.colModel[i].columnSortable ? "coral-columnSortable-disabled" : "";
			//var tooltip = "";
			thead += "<th id='"+options.id+"_"+options.colModel[i].name+"' role='columnheader' class='coral-state-default " + coralColumnSortableDisabledClass + " coral-th-column coral-th-"+dir+"'"+ tooltip+">";
			idn = options.colModel[i].index || options.colModel[i].name;
			if( i<ni+si+gi ){
				thead += "<div id='jqgh_"+options.id+"_"+options.colModel[i].name+"' "+tdc+">"+options.colNames[i];
			}else{
				thead += "<div id='jqgh_"+options.id+"_"+options.colModel[i].name+"' "+" title='"+options.colNames[i]+"'"+tdc+">"+options.colNames[i];
			}
			if(!options.colModel[i].width)  { options.colModel[i].width = 150; }
			else { options.colModel[i].width = parseInt(options.colModel[i].width,10); }
			if(typeof(options.colModel[i].title) !== "boolean") { options.colModel[i].title = true; }
			if (idn == options.sortname) {
				options.lastsort = i;
			}
			thead += imgs+"</div></th>";
		}
		thead += "</tr></thead>";
		imgs = null;
		var hTable = $("<table class='coral-grid-htable' role='grid' aria-labelledby='gbox_"+this.id+"' cellspacing='0' cellpadding='0' border='0'></table>").append(thead);
		that.gridColumns.find(".coral-grid-columns-view").append(hTable);
		
		$("thead tr:first th",grid.columnsView).hover(function(){$(this).addClass('coral-state-hover');},function(){$(this).removeClass('coral-state-hover');});
		that._setMultiselect();
		var ww;
		if(typeof(options.width)!=='undefined') {
			if(typeof(options.width)=='string'&&options.width=='auto'){
				var pw = $(that.element).innerWidth();
				that.options.width = pw > 0?  pw: 'nw';
				ww = pw;
			//	that._setOption('width',pw);
			}else{
				ww = options.width;
			//	that._setOption('width',options.width);
			}
		}
		// beforePopulate里面可能设置了colModel里面的值，所以诸如_setColWidth引用colModel属性的方法都
		// 要放到beforePopulate后面。
		that._trigger("beforePopulate", null, []);
		// 设置宽度 有可能改变colmodel的宽度
		this._setColWidth();
		$(that.element).append("<div class='coral-grid-resize-mark' id='rs_m"+that.options.id+"'>&#160;</div>");
		
		thead = $("thead:first",that.element).get(0);
		
		var thr = $("tr:first",thead),
		firstr = "<tr class='jqgfirstrow' role='row' style='height:auto'>";
		$("th",thr).each(function ( j ) {
			w = options.colModel[j].width;
			if(typeof options.colModel[j].resizable === 'undefined') {options.colModel[j].resizable = true;}
			if(options.colModel[j].resizable){
				res = document.createElement("span");
				$(res).html("&#160;").addClass('coral-grid-resize coral-grid-resize-'+dir);
				$(res).css("cursor","col-resize");
				$(this).addClass(options.resizeclass);
			} else {
				res = "";
			}
			$(this).css("width",w+"px").prepend(res);
			//$(this).prepend(res);
			var hdcol = "";
			if( options.colModel[j].hidden ) {
				$(this).css("display","none");
				hdcol = "display:none;";
			}
			firstr += "<td role='gridcell' style='height:0px;width:"+w+"px;"+hdcol+"'></td>";
			grid.headers.push({ width: w, el: this });
			//grid.headers[j] = { width: w, el: this };
			sort = options.colModel[j].sortable;
			if( typeof sort !== 'boolean') {options.colModel[j].sortable =  true; sort=true;}
			var nm = options.colModel[j].name;
			if( !(nm == 'cb' || nm=='subgrid' || nm=='rn') ) {
				if(options.viewsortcols[2]){
					$(">div",this).addClass('coral-grid-sortable');
				}
			}
			if(sort) {
				if(options.viewsortcols[0]) {$("div span.s-ico",this).show(); if(j==options.lastsort){ $("div span.coral-icon-"+options.sortorder,this).removeClass("coral-state-disabled");}}
				else if( j == options.lastsort) {$("div span.s-ico",this).show();$("div span.coral-icon-"+options.sortorder,this).removeClass("coral-state-disabled");}
			}
			//if(options.footerrow) { tfoot += "<td role='gridcell' "+that._formatCol(j,0,'', null, '', false)+">&#160;</td>"; }
		}).mousedown(function(e) {
			if ($(e.target).closest("th>span.coral-grid-resize").length != 1) { return; }
			var ci = that._getColumnHeaderIndex(this);
			if(options.forceFit===true) {options.nv= that._nextVisible(ci);}//options.nv: the interval between current column to the next visible column
			grid.dragStart(ci, e, that._getOffset(ci));
			return false;
		}).click(function(e) {
			if (options.disableClick) {
				options.disableClick = false;
				return false;
			}
			var s = "th>div.coral-grid-sortable",r,d;
			if (!options.viewsortcols[2]) { s = "th>div>span>span.coral-grid-ico-sort"; }
			var t = $(e.target).closest(s);
			if (t.length != 1) { return; }
			var ci = that._getColumnHeaderIndex(this);
			if (!options.viewsortcols[2]) { r=true;d=t.attr("sort"); }
			that._sortData( $('div',this)[0].id, ci, r, d, this);
			return false;
		});
		if (that.options.onSortableColumns && $.fn.sortable) {
			try {
				$(that.element).grid("sortableColumns", thr);
			} catch (e){}
		}
		
		firstr += "</tr>";
		var bTable = $("<table id='"+that.options.id+"_table' class='coral-grid-btable' role='grid' cellspacing='0' cellpadding='0' border='0'></table>").append(firstr);
		that.gridRows.find(".coral-grid-rows-view").append(bTable);
		this.rows = that.gridRows.find(".coral-grid-btable")[0].rows;
		this.element.prepend("<div class='coral-grid-view'></div>");
		if(that.options.caption.length>0){
			grid.caption = document.createElement("div");
			grid.caption.className = "coral-grid-caption";
			$(grid.caption).html(that.options.caption);
			this.element.prepend(grid.caption);
		}
		$(grid.columnsView).add(grid.rowsView).parent().appendTo(this.element.find(".coral-grid-view"));
		//if(options.width===true) {
		
		if(options.shrinkToFit===true && options.forceFit===true) {
			$('table:first',grid.rowsView).css("width",that.grid.width+"px");//设置表格行宽度
			$('table:first',grid.columnsView).css("width",that.grid.width+"px");//设置表格列宽度
		}
		else if(options.shrinkToFit===false){
			$('table:first',grid.rowsView).css("width",that.options.tblwidth+"px");//设置表格行宽度
			$('table:first',grid.columnsView).css("width",that.options.tblwidth+"px");//设置表格列宽度
		}
		that._setOption('width',ww);
		this.grid.cols = this.rows[0].cells;
		/*设置表头分组，如果为true则解析表头，如果为false则需要手动分组*/
		if(options.groupHeader){
			this.setGroupHeaders({
				useColSpanStyle :  true,
				groupHeaders:options.groupHeaders
			});
			//分组内部的排序
			/*var thrThird = $("tr.jqg-third-row-header",thead);
			if (that.options.sortable && $.fn.sortable) {
				try {
					$(that.element).grid("sortableColumns", thrThird);
				} catch (e){}
			}*/
		}
		
		thead = null;
		hTable = null;
		bTable = null;
	},
	_sortkeys: ["shiftKey","altKey","ctrlKey"],
	_getColumnHeaderIndex: function (th) {
		var that = this;
		var i, headers = that.grid.headers, ci = $.grid.getCellIndex(th);
		if (this.grid.rightfhDiv) {
			ci = headers.length - ci - 1;
		}
		for (i = 0; i < headers.length; i++) {
			if (th === headers[i].el) {
				ci = i;
				break;
			}
		}
		return ci;
	},
	/*解析grid的colModel和colNames*/
	_analyzeColumns:function(columns){
		var that = this,
			i = 0,
			options = this.options;
		//解析colModel和colNames
		columns.children().each(function(i){
			var opts = $.parser.parseOptions(this,null,["data"]);
			if(typeof(opts.name)!="undefined"){
				options.colModel.push(opts);
				options.colNames.push(opts.label||$(this).html());
			}else if(typeof(opts.header)!="undefined"){
				var len = 0;
				var inOption;
				$(this).children().each(function(i){
					var opts = $.parser.parseOptions(this,null,["data"]);
					options.colModel.push(opts);
					options.colNames.push(opts.label||$(this).html());
					len++;
					i==0&&(inOption = opts);
				});
				options.groupHeaders.push({startColumnName: inOption.name, numberOfColumns: len, titleText: opts.header});
			}
		});
		for (i=0;i<this.options.colModel.length;i++){
			var model = this.options.colModel[i];
			// 处理formatter
			if ( model.formatter == "combobox" ||
					model.formatter == "combotree" || model.formatter == "combogrid") {
				if ( model.revertCode != false ) {//默认设置为true
					model.revertCode = true;
				}
			}
			
			model.postMode = model.postMode || "value";
			// 处理edit
			if ( model.edittype == "combobox" || 
					model.edittype == "combotree" || 
					model.edittype == "autocomplete" || model.edittype == "combogrid" ) {
				( model.edittype == "combotree" ) && ( model.dataStructure = "tree" );
				model.formatter = model.formatter || "convertCode";
			}
		}
		if ( this.options.colNames.length === 0 ) {
			for (i=0;i<this.options.colModel.length;i++){
				this.options.colNames[i] = this.options.colModel[i].label || this.options.colModel[i].name;
			}
		}
		if ( this.options.colNames.length !== this.options.colModel.length ) {
			alert("errors! colNames not equals to colModel!");
			return;
		}
		/*清除初始化时候的div列模型*/
		columns.children().not(".coral-grid-columns-view").remove();
	},
	_updateMultiSelectIndexsOption: function (options) {
		var min_index = options.minIndex,
			max_index = options.maxIndex,
			pre_index = options.preIndex,
			cur_index = options.curIndex;
		
		if (null == min_index) {
			min_index = max_index = pre_index = (null == pre_index ? cur_index : pre_index);
		}
		
	 	if (cur_index <= min_index) {
		   	min_index = cur_index;
		 } else if (cur_index > min_index && cur_index < max_index) {
			 if ( pre_index == max_index && pre_index != min_index) {
				 max_index = cur_index;
			 } else if ( pre_index == min_index && pre_index != max_index ) {
				 min_index = cur_index;
			 } else {
				 min_index = Math.min (cur_index, pre_index);
		    	 max_index = Math.max (cur_index, pre_index);	 
			 }    			
	     } else if (cur_index > max_index) {
			max_index = cur_index;
	     }
	 	
	 	return {
	 		minIndex: min_index,
	 		maxIndex: max_index,
	 		preIndex: pre_index
	 	};
	},
	// 添加 shift 多选支持功能
	_addShiftKeySelect: function (e, ui) {
		var that = this,
			opts = that.options;
		// 平稳退化，及变量定义		
		if (!ui.rowId) {
			return ;
		}                                                          
		var $this = $(that.element), 
			rows = $this.find(".coral-grid-btable")[0].rows,
			curIndex = rows.namedItem (ui.rowId).rowIndex;	
		// shiftKey 处理代码
		if (e.shiftKey) {
			var indexsOption = that._updateMultiSelectIndexsOption({maxIndex:opts.maxIndex, minIndex:opts.minIndex, preIndex:opts.preIndex, curIndex:curIndex});
			opts.minIndex = indexsOption.minIndex;
			opts.maxIndex = indexsOption.maxIndex;
			opts.preIndex = indexsOption.preIndex;
			
	    	$this.grid('resetSelection');
		    for (var i = opts.minIndex; i <= opts.maxIndex; i++) {
		        if (i != curIndex || opts.multikey ) {
		            $this.grid('setSelection', rows[i].id, false);
		        }
		    }
		    
		    if (document.selection && document.selection.empty) {
		        document.selection.empty();
		    } else if (window.getSelection) {
		        window.getSelection().removeAllRanges();
	   		}
		} else {
			// 其他 Key 处理代码
			opts.minIndex = opts.maxIndex = null;	
		}	
		
		// 非 ctrlKey 并且非 shiftKey 处理代码
		/*if (!e.ctrlKey && !e.shiftKey) {
			$this.grid('resetSelection');
		}	*/
		opts.preIndex = curIndex;
	},
	_setUpEvent: function(){
		var that = this,
			grid = this.grid,
			options = this.options;
		var ri,ci, tdHtml, td,  ptr;
		if( that.options.cellEdit === false && that.options.hoverrows === true) {
			$(that.element).bind('mouseover',function(e) {
				var isPicgrid = !!(that.options.model == "card");
				if(isPicgrid){
					ptr = $(e.target,that.pic).closest("li.gridPanel").find(".rowgrid");
					if($(ptr).attr("class") !== "coral-subgrid") {
						$(ptr).addClass("coral-state-hover");
					}
				}else{
					ptr = $(e.target,that.rows).closest("tr.jqgrow");
					if($(ptr).attr("class") !== "coral-subgrid" ) {
						$(ptr).addClass("coral-state-hover");
					}
				}
			}).bind('mouseout',function(e) {
				var isPicgrid = !!(that.options.model == "card");
				if(isPicgrid){
					ptr = $(e.target,that.pic).closest("li.gridPanel ").find(".rowgrid");
				}else{
					ptr = $(e.target,that.rows).closest("tr.jqgrow");
				}
				$(ptr).removeClass("coral-state-hover");
			});
		}
		/*监听grid表格内滚动条横向拖动时，滚动表头*/
		$(grid.rowsView).scroll(function(e){
			if(options.scroll) {
				var scrollTop = $(grid.rowsView)[0].scrollTop;
				if(grid.scrollTop === undefined) { grid.scrollTop = 0; }
				if (scrollTop != grid.scrollTop) {
					grid.scrollTop = scrollTop;
					if (grid.timer) { clearTimeout(grid.timer); }
					grid.timer = setTimeout(grid.populateVisible, options.scrollTimeout);
				}
			}
			$(grid.columnsView)[0].scrollLeft = $(grid.rowsView)[0].scrollLeft;
			$(".coral-grid-btable-frozen").css(
				'left',-$(grid.rowsView)[0].scrollLeft+"px"
			);
			var b = $( ".row-editable", that.element ),
				editRow = $(that.element).grid("getInd",that.editRowIndex,true);
			
			if (b.length > 0) {
				that.editButtonsPos(that.editRowIndex,b);
			}
			
			if(options.footerrow) {
				grid.sDiv.scrollLeft = $(grid.rowsView)[0].scrollLeft;
			}
			if( e ) { e.stopPropagation(); }
		});
		//表格上的单击事件处理
		$(".coral-grid-btable", that.element).add(that.pic).click(function(e) {
			var isPicgrid = !!(that.options.model == "card");
			var rowId;
			td = e.target;
			if(isPicgrid){
				ptr = $(td,that.pic).closest("li.gridPanel");
			}else{
				ptr = $(td,that.rows).closest("tr.jqgrow");
			}
			/*此处需要处理冻结列（行）的情况*/
			if($(ptr).length === 0 || ptr[0].className.indexOf( 'coral-state-disabled' ) > -1 ||
					$(td,that.element).closest("table.coral-grid-btable").length < 0 ) {
				return this;
			}
			var scb = $(td).hasClass("cbox"),
			//cSel = $(that.element).triggerHandler("gridBeforeSelectRow", [ptr[0].id, e]);
			cSel = that._trigger("beforeSelectRow", e, [{"rowId":ptr[0].id}]);
			cSel = (cSel === false || cSel === 'stop') ? false : true;

			//if(cSel && $.isFunction(that.options.beforeSelectRow)) { cSel = that.options.beforeSelectRow.call(that.element,ptr[0].id, e); }
			if (td.tagName == 'A' || ((td.tagName == 'INPUT' || td.tagName == 'TEXTAREA' || td.tagName == 'OPTION' || td.tagName == 'SELECT' ) && !scb) ) { return; }
			if(cSel === true) {
				rowId = ptr[0].id;
				tdHtml = $(td).closest("td,th").html();
				if(!isPicgrid){
					ci = $.grid.getCellIndex(td);
					that._addShiftKeySelect(e, {"rowId":ptr[0].id});
					that._trigger("onSelectCell",e , [{"rowId":rowId,"rowIndex":ptr[0].rowIndex,"cellIndex":ci,"cellHtml":tdHtml}]);
				}
				if( that.options.editableRows && that.options.clicksToEdit == 1 &&
					options.editrow != rowId ){
					//that.restoreRow(options.editrow);
					that.restoreRow(options.editrow);
					if ( that.rowEditButtons  ) {
						that.rowEditButtons.remove();
					}
				}
				
				if( that.options.editableRows && that.options.clicksToEdit == 1 && !scb ){
					options.editrow = ptr[0].id;
					that.editRow(ptr[0].id, true);
				}
				if( that.options.cellEdit === true && that.options.clicksToEdit == 1 ) {
					
					//如果是多选并且选的是checkbox的情况则触发'setSelection'方法
					//列不可编辑，并且multikey为false时，应该选中；否则，不选中
					var editable = that.options.colModel[ci].editable;
					var mul = that.options.multiselect || that.options.singleselect;
					if( ( mul && scb ) || ( mul && !editable && !that.options.multikey ) ) {
						$(that.element).grid("setSelection", rowId ,true,e);
					} else {
					//	ri = ptr[0].rowIndex;
						if(!isPicgrid){
							try {$(that.element).grid("editCell",ptr[0].rowIndex,ci,true);} catch (_) {}
						}
					}
				} else if ( !that.options.multikey ) {
					if(that.options.multiselect && that.options.multiboxonly) {
						if(scb){$(that.element).grid("setSelection",rowId,true,e);}
						else {
							var frz = that.options.frozenColumns ? that.options.id+"_frozen" : "";
							$(that.options.selarrrow).each(function(i,n){
								var ind = that.rows.namedItem(n);
								$(ind).removeClass("coral-state-highlight");
								$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(n))[that.options.useProp ? 'prop': 'attr']("checked", false);
								if(frz) {
									$("#"+$.grid.coralID(n), "#"+$.grid.coralID(frz)).removeClass("coral-state-highlight");
									$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(n), "#"+$.grid.coralID(frz))[that.options.useProp ? 'prop': 'attr']("checked", false);
								}
							});
							that.options.selarrrow = [];
							$(that.element).grid("setSelection",rowId,true,e);
						}
					} else {
						//编辑状态不触发点击事件 只点击复选框的时候触发选中事件
						if ( scb || typeof(that.editRowIndex) != "undefiend" && that.editRowIndex != rowId ) {
							$(that.element).grid("setSelection",rowId,true,e);
						}
					}
				} else { 
					if ( e[ that.options.multikey ] ) {
						$(that.element).grid("setSelection",rowId,true,e);
					} else if( ( that.options.multiselect || that.options.singleselect ) && scb ) {
						/*scb = $("#jqg_"+$.grid.coralID(that.options.id)+"_"+ri).is(":checked");
						$("#jqg_"+$.grid.coralID(that.options.id)+"_"+ri)[that.options.useProp ? 'prop' : 'attr']("checked", scb);*/
						$(that.element).grid("setSelection",rowId,true,e);
						// 如取消选中的选框，则将全选框也取消
						if (!scb) {
							that._cancelCheckAll();
						}
					}
				}
			}
		});
		// 刷新列表
		$(that.element)
		// 列表上双击事件
		.dblclick(function(e) {
			td = e.target;
			ptr = $(td,that.rows).closest("tr.jqgrow");
			if( $(ptr).length === 0 ){return;}
			if( that.options.editableRows && options.editrow != ptr[0].id ){
				that.restoreRow(options.editrow);
				if ( that.rowEditButtons ) {
					that.rowEditButtons.remove();
				}
			}
			var ri = ptr[0].rowIndex;
			var ci = $.grid.getCellIndex(td);
			if( that.options.editableRows && that.options.clicksToEdit == 2 ){
				options.editrow = ptr[0].id;
				that.editRow(ptr[0].id, true);
			}
			if( that.options.cellEdit === true && that.options.clicksToEdit == 2 ) {
				ri = ptr[0].rowIndex;
				try {$(that.element).grid("editCell",ri,ci,true);} catch (_) {}
			} 
			that._trigger( "onDblClickRow", null, [{"rowId":ptr[0].id,"rowIndex":ri,"cellIndex":ci}]);
		})
		// 列表上右键菜单
		.bind('contextmenu', function(e) {
			td = e.target;
			ptr = $(td,that.rows).closest("tr.jqgrow");
			if($(ptr).length === 0 ){return;}
			if(!that.options.multiselect) {	$(that.element).grid("setSelection",ptr[0].id,true,e);	}
			ri = ptr[0].rowIndex;
			ci = $.grid.getCellIndex(td);
			that._trigger("onRightClickRow",null,[{"rowId":ptr[0].id,"rowIndex":ri,"cellIndex":ci}]);
			//$(that).triggerHandler("gridRightClickRow", [$(ptr).attr("id"),ri,ci,e]);
			//if ($.isFunction(this.options.onRightClickRow)) { that.options.onRightClickRow.call(ts,$(ptr).attr("id"),ri,ci, e); }
		});
		// 监听鼠标移动
		$(grid.columnsView).mousemove(function (e) {
			// 如果grid列被鼠标按下，则resizing为true，当鼠标移动时调用grid的dragMove方法
			if(grid.resizing){grid.dragMove(e);return false;}
		});
		$(".coral-grid-labels",grid.columnsView).bind("selectstart", function () { return false; });
		// 监听鼠标释放
		$(document).mouseup(function () {
			// 如果grid列被鼠标按下，则resizing为true，当鼠标释放时调用grid的dragEnd方法
			if(grid.resizing) {	grid.dragEnd(); return false;}
			return true;
		});
		// 自定义分页条事件
		this._off($(".coral-paginator-page"));
		this._on({
			"click.coral-paginator-page" : function(e) {
				var cp = that._intNum($(e.target).html(),1);
				that.options.page= cp;
				if(!that._clearVals(this.id)) { return false; }
				that._populate();
				return false;
			}
		});
	},
	restoreAll: function(){
		if ( this.options.editableRows ) {
			this.restoreRow( this.options.editrow );
			if ( this.rowEditButtons ) {
				this.rowEditButtons.remove();
			}
		}
		if ( this.options.savedRow.length > 0 ) {
			// save the cell
			// TODO: 遍历还原
			if( !$(this.element).grid("saveCell",this.options.savedRow[0].id,this.options.savedRow[0].ic) ){
				return;
			}
		}
	},
	_setMultiselect: function(){
		var that = this;
		if(this.options.multiselect) {
			var emp=[], chk;
			$('#cb_'+$.grid.coralID(that.options.id),this.grid.columnsView).bind('click',function(e){
				that.options.selarrrow = [];
				// 冻结列
				var froz = that.options.frozenColumns === true ? that.options.id + "_frozen" : "";
				if (this.checked) {
					$(that.rows).each(function(i) {
						if (i>0) {
							if(!$(this).hasClass("coral-subgrid") && !$(this).hasClass("jqgroup") && !$(this).hasClass('coral-state-disabled')){
								$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(this.id) )[that.options.useProp ? 'prop': 'attr']("checked",true);
								$(this).addClass("coral-state-highlight").attr("aria-selected","true");  
								that.options.selarrrow.push(this.id);
								that.options.selrow = this.id;
								if(froz) {
									$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv )[that.options.useProp ? 'prop': 'attr']("checked",true);
									$("#"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv).addClass("coral-state-highlight");
									if (that.grid.fhDiv) {
										$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv )[that.options.useProp ? 'prop': 'attr']("checked",true);
										$("#"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv).addClass("coral-state-highlight");
									} else if (that.grid.rightfhDiv) {
										$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv )[that.options.useProp ? 'prop': 'attr']("checked",true);
										$("#"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv).addClass("coral-state-highlight");
									}								}
							}
						}
					});
					chk=true;
					emp=[];
				}
				else {
					$(that.rows).each(function(i) {
						if(i>0) {
							if(!$(this).hasClass("coral-subgrid") && !$(this).hasClass('coral-state-disabled')){
								$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(this.id) )[that.options.useProp ? 'prop': 'attr']("checked", false);
								$(this).removeClass("coral-state-highlight").attr("aria-selected","false");
								emp.push(this.id);
								if(froz) {
									if (that.grid.fhDiv) {
										$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv )[that.options.useProp ? 'prop': 'attr']("checked",false);
										$("#"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv).removeClass("coral-state-highlight");
									} else if (that.grid.rightfhDiv) {
										$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv )[that.options.useProp ? 'prop': 'attr']("checked",false);
										$("#"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv).removeClass("coral-state-highlight");
									}
								}
							}
						}
					});
					that.options.selrow = null;
					chk=false;
				}
				that._trigger("onSelectAll",null,[{'aRowIds':chk ? that.options.selarrrow :emp, 'status':chk}]);
				//$(that).triggerHandler("gridSelectAll", [chk ? that.options.selarrrow : emp, chk]);
				//if($.isFunction(that.options.onSelectAll)) {that.options.onSelectAll.call(that, chk ? that.options.selarrrow : emp,chk);}
			});
		}
	},
	_refresh: function( key, value ){
		
	},
	reload: function(opts){
		var that = this,
			grid = this.grid;
		if(that.options.treeGrid ===true) {	that.options.datatype = that.options.treedatatype;}
		if (opts && opts.current) {
			that.grid.selectionPreserver(that);
		}
		if(that.options.datatype=="local"){
			$(that.element).grid("resetSelection");  
			if(that.options.data.length) { 
				that.normalizeData();
				that.refreshIndex();
			} 
		} else if(!that.options.treeGrid) {
			that.options.selrow=null;
			if(that.options.multiselect) {that.options.selarrrow =[];that._setHeadCheckBox(false);}
			that.options.savedRow = [];
		}
		if(that.options.scroll) {emptyRows(that.grid.rowsView,true, false);}
		
		if (opts && opts.page) {
			var page = opts.page;
			if (page > that.options.lastpage) { page = that.options.lastpage; }
			if (page < 1) { page = 1; }
			that.options.page = page;
			if (that.grid.prevRowHeight) {
				that.grid.rowsView.scrollTop = (page - 1) * that.grid.prevRowHeight * that.options.rowNum;
			} else {
				that.grid.rowsView.scrollTop = 0;
			}
		}
		if (that.grid.prevRowHeight && that.options.scroll) {
			delete that.options.lastpage;
			that._populateVisible();
		} else {
			if(that.options.localonce == true){
				that.options.search = true;
			} else {
				that.options.search = false;//后台排序的时候不进行filter过滤
			}
			that._populate();
			that.options.localonce = false;
		}
		return false;
	},
	/**
	 * 如果有右浮动列，重置窗体或者重置表格宽度的时候都需要调用此方法来判断是否需要显示右浮动
	 */
	resetFrozen: function(){
		if ( !this._hasHorizontalScrollBar() ) {
			$(this.grid.rightfbDiv).hide();
			$(this.grid.rightfhDiv).hide();
		} else {
			$(this.grid.rightfbDiv).show();
			$(this.grid.rightfhDiv).show();
		}
	},
	refresh: function(opts){	
		var maxHeight,
			that = this,
			options = this.options,
			fitStyle = options.fitStyle,
			parent = this.element.parent();
			maxHeight = parent.height();
		
		that.resetFrozen();
		this.element.siblings( ":visible" ).each(function() {
			var elem = $( this ),
				position = elem.css( "position" );

			if ( position === "absolute" || position === "fixed" ) {
				return;
			}
			maxHeight -= elem.outerHeight( true );
		});
		//setTimeout(function(){
		// 某些动画情况下，grid可能已经被销毁，
		// 但是还是调用了grid的refresh方法，或者去掉延时解决问题；
		// 不能直接用element，因为内存中有此对象，但是dom中没有，所以需要根据id去重新查找；
		if ( !$("#"+that.element[0].id).length ) return;
		if ( fitStyle === "fill" ) {
			$.coral.fitParent(this.component(), true);
			$(that.element).grid("option", "height", maxHeight);
			$(that.element).grid("option", "width", that.element.innerWidth()>0?that.element.innerWidth(): 0);
		} else if ( fitStyle === "width" ) {
			$(that.element).grid("option", "width", that.element.innerWidth()>0?that.element.innerWidth(): 0);
			$(that.element).grid("option", "height", that.options.height);
		} else if ( fitStyle === "height" ) {
			$.coral.fitParent(this.component(), true);
			$(that.element).grid("option", "height", maxHeight);
		} else if ( fitStyle === "auto" ) {
			//TODO: so far no extension
			$(that.element).grid("option", "height", that.options.height);
		}
		that.refreshPager();
		that._noRecordsTipsPositon();
		if ( that.options.frozenColumns === true ) {
			that.resizeFrozen();
		}
		if ( this.element.find(".loading-overlay").length ) {
			switch(this.options.loadui) {
			case "disable":
				break;
			case "enable":
			case "block":
				$(this.element).loading("refresh");
				break;
			}
		}
		$.coral.refreshAllComponent(this.element);
	},
	refreshPager: function(){
		var that = this;
		if(this.pagers){
			this.pagers.each(function(i){
				var pagerleftwidth = $( ".paginator-left", that.element ).outerWidth() + 5;//padding 5px;
				var pagerwidth = $("#"+that.pagers[i].id ).width();
				$( ".toolbarpanel", that.element ).css({
					left: pagerleftwidth+"px",
					position: "absolute",
					top: 0,
					width: ( pagerwidth - pagerleftwidth ) + "px"
				});
			});
			that.options.pager = "."+that.id;
			if ( $( ".ctrl-init-toolbar", that.element ).length ) {
				$( ".ctrl-init-toolbar", that.element ).toolbar("refresh");
			}
		}
	},
	setSelectionAll: function() {
		if ( !$( "#cb_"+this.options.id ).prop("checked") ) {
			$( "#cb_"+this.options.id ).trigger('click');
		}
	},
	setSelection: function(selection,onsr, e) {
		var that = this, stat,//行选中状态值 true 或 false
			isPicgrid = (this.options.model === "card"),
			pt, ner, ia, tpsr, fid;
		if(selection === undefined) { return; }
		onsr = onsr === false ? false : true;
		if(isPicgrid){
			pt = this.element.find(".coral-pic #" + selection)[0];
		}else{
			pt = this.rows.namedItem(selection + "");
		}
		if(!pt || !pt.className || pt.className.indexOf( 'coral-state-disabled' ) > -1 ) { return; }
		// scroll grid
		function scrGrid(iR){
			var ch = $(that.grid.rowsView)[0].clientHeight,
				st = $(that.grid.rowsView)[0].scrollTop,
				rpos = that.rows[iR].offsetTop,
				rh = that.rows[iR].clientHeight;
			if(rpos+rh >= ch+st) { $(that.grid.rowsView)[0].scrollTop = rpos-(ch+st)+rh+st; }
			else if(rpos < ch+st) {
				if(rpos < st) {
					$(that.grid.rowsView)[0].scrollTop = rpos;
				}
			}
		}
		if(this.options.scrollrows === true) {//处理滚动刷新
			ner = this.rows.namedItem(selection).rowIndex;
			if(ner >= 0 ){
				scrGrid(ner);
			}
		}
		if(this.options.frozenColumns === true ) {
			fid = this.options.id+"_frozen";
		}
		if(!this.options.multiselect) {	
			if(pt.className !== "coral-subgrid") {
				if( this.options.selrow != pt.id) {//是否二次点击
					if(isPicgrid){
						this.element.find("#"+this.options.selrow+">ul").removeClass("coral-state-highlight").attr({"aria-selected":"false", "tabindex" : "-1"});
						$(pt).find(".rowgrid").addClass("coral-state-highlight").attr({"aria-selected":"true", "tabindex" : "0"});//.focus();
						if(fid) {
							$("#"+$.grid.coralID(this.options.selrow), "#"+$.grid.coralID(fid)).find(".rowgrid").removeClass("coral-state-highlight");
							$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).find(".rowgrid").addClass("coral-state-highlight");
						}
					}else{
						$(this.rows.namedItem(this.options.selrow)).removeClass("coral-state-highlight").attr({"aria-selected":"false", "tabindex" : "-1"});
						$(pt).addClass("coral-state-highlight").attr({"aria-selected":"true", "tabindex" : "0"});//.focus();
						if(fid) {
							$("#"+$.grid.coralID(this.options.selrow), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight");
							$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).addClass("coral-state-highlight");
						}
					}
					
					stat = true;
					$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(pt.id),$(pt))[this.options.useProp ? 'prop': 'attr']("checked",stat);
					if(fid) {
						$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(selection), "#"+$.grid.coralID(fid))[this.options.useProp ? 'prop': 'attr']("checked",stat);
					}
				} else {
					stat = false;
				}
				this.options.selrow = pt.id;

				//如果onsr为true则触发回调函数
				if(onsr)this._trigger("onSelectRow", e, [{'rowId':pt.id, 'status':stat}]);
				/*$(that).triggerHandler("gridSelectRow", [pt.id, stat, e]);
				if( that.options.onselectrow && onsr) { that.options.onselectrow.call(that, pt.id, stat, e); }*/
			}
		} else {
			//unselect selectall checkbox when deselecting a specific row
			this._setHeadCheckBox( false );
			this.options.selrow = pt.id;
			ia = $.inArray(this.options.selrow,this.options.selarrrow);
			if (  ia === -1 ){
				if(isPicgrid){
					if(pt.className !== "coral-subgrid") { $(pt).find(".rowgrid").addClass("coral-state-highlight").attr("aria-selected","true");}
				}else{
					if(pt.className !== "coral-subgrid") { $(pt).addClass("coral-state-highlight").attr("aria-selected","true");}
				}
				stat = true;
				this.options.selarrrow.push(this.options.selrow);
			} else {
				if(isPicgrid){
					if(pt.className !== "coral-subgrid") { $(pt).find(".rowgrid").removeClass("coral-state-highlight").attr("aria-selected","false");}
				}else{
					if(pt.className !== "coral-subgrid") { $(pt).removeClass("coral-state-highlight").attr("aria-selected","false");}
				}
				stat = false;
				this.options.selarrrow.splice(ia,1);
				tpsr = this.options.selarrrow[0];
				this.options.selrow = (tpsr === undefined) ? null : tpsr;
			}
			// 如果选中所有行，则设置head checkbox 选中。
			if ( this.rows.length - 1 === this.options.selarrrow.length ) {
				this._setHeadCheckBox( true );
			}
			//此处修改 在$(pt)下寻找checkbox，因为大图列表和table列表中checkbox的id相同
			$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(pt.id),$(pt))[this.options.useProp ? 'prop': 'attr']("checked",stat);
			if(fid) {
				if(isPicgrid){
					if(ia === -1) {
						$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).find(".rowgrid").addClass("coral-state-highlight");
					} else {
						$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).find(".rowgrid").removeClass("coral-state-highlight");
					}
				}else{
					if(ia === -1) {
						$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).addClass("coral-state-highlight");
					} else {
						$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight");
					}
				}
				
				$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(selection), "#"+$.grid.coralID(fid))[this.options.useProp ? 'prop': 'attr']("checked",stat);
			}			
			if( onsr) { 
				this._trigger("onSelectRow", e, [{'rowId':pt.id, 'status':stat}]);
			}
		}
	},
	_setHeadCheckBox: function ( checked ) {
		var that = this;
		$('#cb_'+$.grid.coralID(that.options.id),that.grid.columnsView)[that.options.useProp ? 'prop': 'attr']("checked", checked);
		var fid = that.options.frozenColumns ? that.options.id+"_frozen" : "";
		if(fid) {
			$('#cb_'+$.grid.coralID(that.options.id),that.grid.fcolumnsView)[that.options.useProp ? 'prop': 'attr']("checked", checked);
		}
	},
	setFrozenRows: function(rowNum){
		var that = this,
			grid = that.grid;
		that.destroyFrozenRows();
		that.rowsView2=$(grid.rowsView);
		if(!that.rowsView2.children("table.coral-grid-btable-frozen").length){
			//that.rowsView1.add(that.rowsView2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
			$(that.rowsView2).prepend("<table class=\"coral-grid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
			that.rowsView2.children("table.coral-grid-btable-frozen").css({
				position: "absolute",
				left: 0,
				top: $(grid.columnsView).height()+"px"
			});
		}
		var vh = that.element.find(".coral-grid-rows-view").height();
		//doWithFrozen(true);
		doWithFirstRow(false);
		doWithFrozen(false);
		var fh = that.rowsView2.find("table.coral-grid-btable-frozen").outerHeight();
		that.rowsView2.css({
			"margin-top": fh+"px",
			"height": (vh - fh)+"px"
		});
		//初始化横向
		that.rowsView2.find(".coral-grid-btable-frozen").css({
			'left':-$(grid.rowsView)[0].scrollLeft+"px",
			'width':that.rowsView2.find(".coral-grid-btable").width()+"px",
			'table-layout':'fixed'//处理safari and chrome浏览器的bug问题
		});
		function doWithFirstRow(isFirst){
			var tr=that.rowsView2.find(".coral-grid-btable")[0].rows[0];
			(isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen").append($(tr).clone());
		}
		function doWithFrozen(isFirst){
			var trs=that.rowsView2.find(".coral-grid-btable tr").filter(function(i){
				if(i==0){
					return false;
				}
				if(i<=rowNum) return true;
			});
			var tr=that.rowsView2.find(".coral-grid-btable")[0].rows[1];
			(isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen").append(trs);
		}
	},
	destroyFrozenRows: function(){
		var that = this,
			grid = that.grid;
		
		that.rowsView2=$(grid.rowsView);
		if(!that.rowsView2.children("table.coral-grid-btable-frozen").length){
			//that.rowsView1.add(that.rowsView2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
			$(that.rowsView2).prepend("<table class=\"coral-grid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
			that.rowsView2.children("table.coral-grid-btable-frozen").css({
				position: "absolute",
				left: 0,
				top: 0
			});
		}
		var vh = that.element.find(".coral-grid-rows-view").height();
		var fh = that.rowsView2.find("table.coral-grid-btable-frozen").outerHeight();
		//doWidthFrozen(true);
		doWidthFrozen(false);
		doWidthFirstRow(false);
		that.rowsView2.css({
			"margin-top": 0,
			"height": (vh+fh)+"px"
		});
		//_21(_43);
		function doWidthFrozen(isFirst){
			var rows = that.rowsView2.find("table.coral-grid-btable-frozen tr").filter(function(i){
				if(i==0){
					return false;
				}
				return true;
			});
			var row1 = (isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen")[0].rows[1];
			$(that.rowsView2.find(".coral-grid-btable tbody:first tr:first")[0]).after(rows);
		}
		function doWidthFirstRow(isFirst){
			(isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen").remove();
		}
		
	},
	showHideCol : function(colname,show) {
		var that = this, fndh=false, brd=$.support.boxSizing? 0: this._intNum(this.options.cellLayout,0), cw;
		if (!that.grid ) {return;}
		if( typeof colname === 'string') {colname=[colname];}
		show = show != "none" ? "" : "none";
		var sw = show === "" ? true :false,
		gh = that.options.groupHeader && (typeof that.options.groupHeader === 'object' || $.isFunction(that.options.groupHeader) );
		if(gh) { $(that.element).grid('destroyGroupHeader', false); }
		$(this.options.colModel).each(function(i) {
			if ($.inArray(this.name,colname) !== -1 && this.hidden === sw) {
				if(that.options.frozenColumns === true && this.frozen === true) {
					//return true;
				}
				$("tr",that.grid.columnsView).each(function(){
					$(this.cells[i]).css("display", show);
				});
				$(that.rows).each(function(){
					if (!$(this).hasClass("jqgroup")) {
						$(this.cells[i]).css("display", show);
					}
				});
				if(that.options.footerrow) { $("tr.footrow td:eq("+i+")", that.grid.sDiv).css("display", show); }
				cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
				if ( show === "none" ) {
					that.options.tblwidth -= cw+brd;
				} else {
					that.options.tblwidth += cw+brd;
				}
				this.hidden = !sw;
				fndh=true;
				that._trigger("onShowHideCol", null,[{"show":sw,"name":this.name,"index":i}]);
			}
		});
		if(fndh===true) {
			if ( that.options.shrinkToFit === true && !isNaN( that.options.height ) ) { 
				that.options.tblwidth += parseInt( that.options.scrollOffset, 10 );
			}
			that._setGridWidth(that.options.shrinkToFit === true ? that.options.tblwidth : that.options.width );
		}
		if( gh )  {
			$(that.element).grid('setGroupHeaders',that.options.groupHeader);
		}
	},
	hideCol : function (colname) {
		return $(this.element).grid("showHideCol",colname,"none");
	},
	showCol : function(colname) {
		return $(this.element).grid("showHideCol",colname,"");
	},
	remapColumns : function(permutation, updateCells, keepHeader){
		function resortArray(a) {
			var ac;
			if (a.length) {
				ac = $.makeArray(a);
			} else {
				ac = $.extend({}, a);
			}
			$.each(permutation, function(i) {
				a[i] = ac[this];
			});
		}
		var that = this;
		function resortRows(parent, clobj) {
			$(">tr"+(clobj||""), parent).each(function() {
				var row = this;
				var elems = $.makeArray(row.cells);
				$.each(permutation, function() {
					var e = elems[this];
					if (e) {
						row.appendChild(e);
					}
				});
			});
		}
		resortArray(that.options.colModel);
		resortArray(that.options.colNames);
		resortArray(that.grid.headers);
		resortRows($("thead:first", that.grid.columnsView), keepHeader && ":not(.coral-grid-labels)");
		if (updateCells) {
			resortRows($("#"+$.grid.coralID(that.options.id)+" tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot");
		}
		if (that.options.footerrow) {
			resortRows($("tbody:first", that.grid.sDiv));
		}
		if (that.options.remapColumns) {
			if (!that.options.remapColumns.length){
				that.options.remapColumns = $.makeArray(permutation);
			} else {
				resortArray(that.options.remapColumns);
			}
		}
		that.options.lastsort = $.inArray(that.options.lastsort, permutation);
		if(that.options.treeGrid) { that.options.expColInd = $.inArray(that.options.expColInd, permutation); }
		$(that).triggerHandler("gridRemapColumns", [permutation, updateCells, keepHeader]);
	},
	sortableColumns : function (tblrow){

		var that = this, tid= $.grid.coralID( that.options.id );
		function start() {that.options.disableClick = true;}
		var sortable_opts = {
			"tolerance" : "pointer",
			"axis" : "x",
			"cancel" : ".coral-columnSortable-disabled",
			"scrollSensitivity": "1",
			/*"helper":"clone",*/
			helper: function(event, currentItem) {
                return currentItem.clone();
            },
			"items": '>th:not(:has(#jqgh_'+tid+'_cb'+',#jqgh_'+tid+'_rn'+',#jqgh_'+tid+'_subgrid),:hidden, .coral-columnSortable-disabled)',
			"placeholder": {
				element: function(item) {
					var rowspan = typeof(item.attr("rowspan"))=="undefined"?"1":"2",
						colspan = typeof(item.attr("colspan"))=="undefined"?"1":"2";
					var el = $(document.createElement(item[0].nodeName))
					.addClass(item[0].className+" coral-sortable-placeholder coral-state-highlight")
					.removeClass("coral-sortable-helper").attr("rowspan",rowspan).attr("colspan",colspan)[0];
					return el;
				},
				update: function(self, options) {
					options.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop')||0, 10) - parseInt(self.currentItem.css('paddingBottom')||0, 10));
					//options.height($(self.currentItem).outerHeight());
					options.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft')||0, 10) - parseInt(self.currentItem.css('paddingRight')||0, 10));
				}
			},
			"update": function(event, ui) {
				var p = $(ui.item).parent(),
				th = $(">th", p),
				colModel = that.options.colModel,
				cmMap = {}, tid= that.options.id+"_";
				ui.itemId = [];
				$.each(colModel, function(i) { cmMap[this.name]=i; });
				var permutation = [];//需要置换的数组
				var permutationId = [];
				// 分组之后暂时无法处理
				th.each(function() {
					var id = $(">div", this).get(0).id.replace(/^jqgh_/, "").replace(tid,"");
						if (id in cmMap) {
							permutation.push(cmMap[id]);
							permutationId.push(id);
						}
				});
				$.each(ui.item, function(i){
					ui.itemId.push(ui.item[i].id.replace(/^jqgh_/, "").replace(tid,""));
				});
				ui.prevItemId = $(ui.item[0]).prev("th").attr("id").replace(/^jqgh_/, "").replace(tid,"");
				ui.nextItemId = $(ui.item[0]).next("th").attr("id").replace(/^jqgh_/, "").replace(tid,"");
				ui.targetId = ui.position.left>ui.originalPosition.left?ui.prevItemId:ui.nextItemId;
				
				$(that.element).grid("remapColumns",permutation, true, true);
				ui.permutation = permutation;
				ui.permutationOfId = permutationId;
				that._trigger("onSortableColumns",event,[ui]);
				setTimeout(function(){that.options.disableClick=false;}, 50);
			}
		};
		/*if (that.options.sortableColumns.options) {
			$.extend(sortable_opts, that.options.sortableColumns.options);
		} else if ($.isFunction(that.options.sortableColumns)) {
			that.options.sortableColumns = { "update" : that.options.sortableColumns };
		}*/
		$.extend(sortable_opts, that.options.sortableColumnsOptions);
		if (sortable_opts.beforesortablecolumns) {
			var s = sortable_opts.beforesortablecolumns;
			sortable_opts.start = function(e,ui) {
				start();
				s.call(this,e,ui);
			};
		} else {
			sortable_opts.start = start;
		}
		if (that.options.sortableColumnsOptions.exclude) {
			sortable_opts.items += ":not("+that.options.sortableColumnsOptions.exclude+")";
		}
		tblrow.sortable(sortable_opts).data("sortable").floating = true;
		/*});*/
	},
	setCaption : function (newcap){
		this.options.caption=newcap;
		$("span.coral-grid-title, span.coral-grid-title-rtl",this.grid.caption).html(newcap);
		$(this.grid.cDiv).show();
	},
	setLabel : function(colname, nData, prop, attrp ){
		var that = this, pos=-1;
		if(!that.grid) {return;}
		if(typeof(colname) != "undefined") {
			$(that.options.colModel).each(function(i){
				if (this.name == colname) {
					pos = i;return false;
				}
			});
		} else { return; }
		if(pos>=0) {
			var thecol = $("tr.coral-grid-labels th:eq("+pos+")",that.grid.columnsViews);
			if (nData){
				var ico = $(".s-ico",thecol);
				$("[id^=jqgh_]",thecol).empty().html(nData).append(ico);
				that.options.colNames[pos] = nData;
			}
			if (prop) {
				if(typeof prop === 'string') {$(thecol).addClass(prop);} else {$(thecol).css(prop);}
			}
			if(typeof attrp === 'object') {$(thecol).attr(attrp);}
		}
	},
	setCell: function(rowid,colname,nData,cssp,attrp, forceupd) {
		var that = this, pos =-1,v, title;
		if(!that.grid) {return;}
		if(isNaN(colname)) {
			$(that.options.colModel).each(function(i){
				if (this.name == colname) {
					pos = i;return false;
				}
			});
		} else {pos = parseInt(colname,10);}
		if (pos >= 0) {
			var ind = that.rows.namedItem(rowid);
			var rwd = $(that.element).grid("getRowData",rowid);
			if (ind){
				var tcell = $("td:eq("+pos+")",ind);
				if(nData !== "" || forceupd === true) {
					v = that._formatter(rowid, nData, pos,rwd,'edit');
					title = that.options.colModel[pos].title ? {"title":$.grid.stripHtml(v)} : {};
					if(that.options.treeGrid && $(".tree-wrap",$(tcell)).length>0) {
						$("span",$(tcell)).html(v).attr(title);
					} else {
						$(tcell).html(v).attr(title);
					}
					$.fn.afterFmatter.call(that);
					if(that.options.datatype == "local") {
						var cm = that.options.colModel[pos], index;
						var _fn = $.coral.toFunction(cm.formatter);
						if($.isFunction(_fn)){
							nData = _fn.apply( this.element[0]);
						}else{
							nData = cm.formatter && typeof(cm.formatter) === 'string' && cm.formatter == 'date' ? $.unformat.date.call(that,nData,cm) : nData;
						}
						index = that.options._index[rowid];
						if(typeof index  != "undefined") {
							that.options.data[index][cm.name] = nData;
						}
					}
				}
				if(typeof cssp === 'string'){
					$(tcell).addClass(cssp);
				} else if(cssp) {
					$(tcell).css(cssp);
				}
				if(typeof attrp === 'object') {$(tcell).attr(attrp);}
			}
		}
	},
	getCell : function(rowid,col) {
		var ret = false;
		var $t=this, pos=-1;
		if(!$t.grid) {return;}
		if(isNaN(col)) {
			$($t.options.colModel).each(function(i){
				if (this.name === col) {
					pos = i;return false;
				}
			});
		} else {pos = parseInt(col,10);}
		if(pos>=0) {
			var ind = $t.rows.namedItem(rowid);
			if(ind) {
				try {
					ret = $.unformat.call($t,$("td:eq("+pos+")",ind),{rowId:ind.id, colModel:$t.options.colModel[pos]},pos);
				} catch (e){
					ret = $.grid.htmlDecode($("td:eq("+pos+")",ind).html());
				}
			}
		}
		return ret;
	},
	getCol : function (col, obj, mathopr) {
		var ret = [], val, sum=0, min, max, v;
		obj = typeof (obj) != 'boolean' ? false : obj;
		if(typeof mathopr == 'undefined') { mathopr = false; }
		var $t=this, pos=-1;
		if(!$t.grid) {return;}
		if(isNaN(col)) {
			$($t.options.colModel).each(function(i){
				if (this.name === col) {
					pos = i;return false;
				}
			});
		} else {pos = parseInt(col,10);}
		if(pos>=0) {
			var ln = $t.rows.length, i =0;
			if (ln && ln>0){
				while(i<ln){
					if($($t.rows[i]).hasClass('jqgrow')) {
						try {
							val = $.unformat.call($t,$($t.rows[i].cells[pos]),{rowId:$t.rows[i].id, colModel:$t.options.colModel[pos]},pos);
						} catch (e) {
							val = $.grid.htmlDecode($t.rows[i].cells[pos].innerHTML);
						}
						if(mathopr) {
							v = parseFloat(val);
							sum += v;
							if(i===0) {
								min = v;
								max = v;
							} else {
								min = Math.min(min, v);
								max = Math.max(max, v);
							}
						}
						else if(obj) { ret.push( {id:$t.rows[i].id,value:val} ); }
						else { ret.push( val ); }
					}
					i++;
				}
				if(mathopr) {
					switch(mathopr.toLowerCase()){
						case 'sum': ret =sum; break;
						case 'avg': ret = sum/ln; break;
						case 'count': ret = ln; break;
						case 'min': ret = min; break;
						case 'max': ret = max; break;
					}
				}
			}
		}
		return ret;
	},
	getCellComponent : function(rowid,colname,nData,cssp,attrp, forceupd) {
		var that = this, pos =-1,v, title;
		if(!that.grid) {return;}
		/*if(isNaN(colname)) {
			$(that.options.colModel).each(function(i){
				if (this.name == colname) {
					pos = i;return false;
				}
			});
		} else {pos = parseInt(colname,10);}
		if(pos>=0) {
			var ind = that.rows.namedItem(rowid);
			if (ind){
				var tcell = $("td:eq("+pos+")",ind);
				return tcell.find(".ctrl-init");
			}
		}*/
		return $("#"+rowid).find('[aria-describedby$='+colname+']').find('.ctrl-init');
	},
	_formatter: function (rowId, _cellVal , colpos, rwdat, _act){
		var cm = this.options.colModel[colpos],v;
		if(typeof cm.formatter !== 'undefined') {
			var opts= {rowId: rowId, colModel:cm, gid:this.options.id, pos:colpos ,model:this.options.model};
			var _fn = $.coral.toFunction(cm.formatter);
			if($.isFunction(_fn)){
				v = _fn.apply( this.element[0], [_cellVal,opts,rwdat,_act]);
			} else if($.fmatter){
				v = $.fn.fmatter.call(this,cm.formatter,_cellVal,opts,rwdat,_act);
			} else {
				v = this._cellVal(_cellVal);
			}
		} else {
			v = this._cellVal(_cellVal);
		}
		return v;
	},
	_getOffset: function (iCol) {
		var that = this;
	//	var i, ret = {}, brd1 = isSafari ? 0 : that.options.cellLayout;
		var i, ret = {}, brd1 = $.support.boxSizing ? 0 : that.options.cellLayout;
		ret[0] =  ret[1] = ret[2] = 0;
		for(i=0;i<=iCol;i++){
			if(that.options.colModel[i].hidden === false||typeof(that.options.colModel[i].hidden)== 'undefined' ) {
				ret[0] += that.options.colModel[i].width+brd1;
			}
		}
		//if(that.options.direction=="rtl") { ret[0] = that.options.width - ret[0]; }
		ret[0] = ret[0] - that.grid.rowsView.scrollLeft;
		//if($(that.grid.cDiv).is(":visible")) {ret[1] += $(that.grid.cDiv).height() +parseInt($(that.grid.cDiv).css("padding-top"),10)+parseInt($(that.grid.cDiv).css("padding-bottom"),10);}
		//if(that.options.toolbar[0]===true && (that.options.toolbar[1]=='top' || that.options.toolbar[1]=='both')) {ret[1] += $(that.grid.uDiv).height()+parseInt($(that.grid.uDiv).css("border-top-width"),10)+parseInt($(that.grid.uDiv).css("border-bottom-width"),10);}
		//if(that.options.toppager) {ret[1] += $(that.grid.topDiv).height()+parseInt($(that.grid.topDiv).css("border-bottom-width"),10);}
		ret[2] += $(that.grid.rowsView).height() + $(that.grid.columnsView).height();
		return ret;
	},
	_sortData: function (index, idxcol,reload,sor,obj){
		var that = this;
		if(!this.options.colModel[idxcol].sortable) { return; }
		that.options.b_sortdata = true; // modify for custom sort
		var so;
		if(this.options.savedRow.length > 0) {return;}
		if(!reload) {
			if( this.options.lastsort == idxcol ) {
				if( this.options.sortorder == 'asc') {
					this.options.sortorder = 'desc';
				} else if(this.options.sortorder == 'desc') { this.options.sortorder = 'asc';}
			} else { this.options.sortorder = this.options.colModel[idxcol].firstsortorder || 'asc'; }
			this.options.page = 1;
		}
		if(sor) {
			if(this.options.lastsort == idxcol && this.options.sortorder == sor && !reload) { return; }
			else { that.options.sortorder = sor; }
		}
		var previousSelectedTh = this.grid.headers[this.options.lastsort].el, newSelectedTh = this.options.frozenColumns ? obj : this.grid.headers[idxcol].el;

		$("span.coral-grid-ico-sort",previousSelectedTh).addClass('coral-state-disabled');
		$(previousSelectedTh).attr("aria-selected","false");
		if(this.options.frozenColumns) {
			if (this.grid.fhDiv) {
				this.grid.fhDiv.find("span.coral-grid-ico-sort").addClass('coral-state-disabled');
				this.grid.fhDiv.find("th").attr("aria-selected","false");
			} else if (this.grid.rightfhDiv) {
				this.grid.rightfhDiv.find("span.coral-grid-ico-sort").addClass('coral-state-disabled');
				this.grid.rightfhDiv.find("th").attr("aria-selected","false");
			}
		}
		$("span.coral-icon-"+this.options.sortorder,newSelectedTh).removeClass('coral-state-disabled');
		$(newSelectedTh).attr("aria-selected","true");
		if(!this.options.viewsortcols[0]) {
			if(this.options.lastsort != idxcol) {
				if(this.options.frozenColumns){
					if (this.grid.fhDiv) {
						this.grid.fhDiv.find("span.s-ico").hide();
					} else if (this.grid.rightfhDiv) {
						this.grid.rightfhDiv.find("span.s-ico").hide();
					}
				}
				$("span.s-ico",previousSelectedTh).hide();
				$("span.s-ico",newSelectedTh).show();
			}else if (this.options.sortname === "") { // if this.options.lastsort === idxcol but this.options.sortname === ""
				$("span.s-ico",newSelectedTh).show();
			}
		}
		index = index.substring(5 + this.options.id.length + 1); // bad to be changed!?!
		this.options.sortname = this.options.colModel[idxcol].index || index;
		so = this.options.sortorder;
		/*if ($(this).triggerHandler("gridSortCol", [index, idxcol, so]) === 'stop') {
			this.options.lastsort = idxcol;
			return;
		}*/
		if (that._trigger("onSortCol", null, [{"id": index, "colIndex":idxcol, "sortorder":so}]) === 'stop') {
			this.options.lastsort = idxcol;
			return;
		}
		//if($.isFunction(this.options.onSortCol)) {if (this.options.onSortCol.call(this,index,idxcol,so)=='stop') {this.options.lastsort = idxcol; return;}}
		if(this.options.datatype == "local") {
			if(this.options.deselectAfterSort) {$(this.element).grid("resetSelection");}
		} else {
			this.options.selrow = null;
			if(this.options.multiselect){that._setHeadCheckBox( false );}
			this.options.selarrrow =[];
			this.options.savedRow =[];
		}
		if(this.options.scroll) {
			var sscroll = this.grid.rowsView.scrollLeft;
			emptyRows(this.grid.rowsView,true, false);
			this.grid.columnsView.scrollLeft = sscroll;
		}
		if(this.options.subGrid && this.options.datatype=='local') {
			$("td.sgexpanded","#"+$.grid.coralID(this.options.id)).each(function(){
				$(this).trigger("click");
			});
		}
		this._populate();
		this.options.lastsort = idxcol;
		if(this.options.sortname != index && idxcol) {this.options.lastsort = idxcol;}
		that.options.b_sortdata = false; // modify for custom sort
	},
	
	_intNum: function(val,defval) {
		val = parseInt(val,10);
		if (isNaN(val)) { return defval ? defval : 0;}
		else {return val;}
	},
	_beginReq: function() {
		// before load or request url 
		var tipsDom = $("#noRecordsTips_"+$.grid.coralID(this.options.id));
		if ( tipsDom.is(":visible") ) {
			tipsDom.hide();
		}
		this.refresh();
		this.grid.columnsView.loading = true;
		if(this.options.hiddengrid) { return;}
		switch(this.options.loadui) {
			case "disable":
				break;
			case "enable":
				$(this.element).loading({
					position:   "overlay",
					text:       this.options.loadtext
				});
				break;
			case "block":
				$("#lui_"+$.grid.coralID(this.options.id)).show();
				$(this.element).loading({
					position:   "overlay",
					text:       this.options.loadtext
				});
				break;
		}
	},
	_endReq: function() {
		var that = this;
		this._delay(function(){
			that.refreshPager();
		},300);
		this.grid.columnsView.loading = false;
		switch(this.options.loadui) {
			case "disable":
				break;
			case "enable":
				$(this.element).loading("hide");
				break;
			case "block":
				$("#lui_"+$.grid.coralID(this.options.id)).hide();
				$(this.element).loading("hide");
				break;
		}
		//this.element.find(".coral-grid-htable,.coral-grid-btable").css("table-layout","fixed");
		// grid 初始化时，如果列太多，而行数据的单元格太长，则列头挤在一起的问题，与下面的单元格错位的问题。
		this.element.find(".coral-grid-htable,.coral-grid-btable").css({
			"table-layout":"fixed"
		});
		if ( $(that.grid.rowsView).find(".jqgrow").length == 0 ){
			that._noRecordsTipsPositon();
			$("#noRecordsTips_"+$.grid.coralID(that.options.id)).css("display","inline-block");
		} else {
			$("#noRecordsTips_"+$.grid.coralID(that.options.id)).css("display","none");
		}
	},
	_noRecordsTipsPositon:function(){
		var that = this;
		var gridWidth = this.element.width(), // 无数据显示时，计算其定位，居中。
		gridHeight = this.gridRows.height(),
		tipsWidth = $("#noRecordsTips_"+$.grid.coralID(that.options.id)).width(),
		tipsHeight = $("#noRecordsTips_"+$.grid.coralID(that.options.id)).height();
		$("#noRecordsTips_"+$.grid.coralID(that.options.id)).css({
			"margin-top": (gridHeight-tipsHeight)/2 +"px",
			"margin-left": gridWidth/2 + "px"
		});
	},
	_setColWidth: function () {
		var that = this;
		var grid = this.grid;
		
		//var initwidth = 0, brd=isSafari? 0: _intNum(this.options.cellLayout,0), vc=0, lvc, scw=_intNum(this.options.scrollOffset,0),cw,hs=false,aw,gw=0,
		var initwidth = 0, brd=$.support.boxSizing? 0: this._intNum(this.options.cellLayout,0), 
			vc=0, // the number of visible column 
			lvc, // the last number of visible column
			scw=this._intNum(this.options.scrollOffset,0), // scrollbar width
			cw, // column width
			hs=false, // height is scroll
			aw,// actual width
			gw=0,// grid width
			cl = 0, // the length of column (include the checkbox column and rownumber column)
			cr;
		$.each(this.options.colModel, function() {
			//if(typeof this.hidden === 'undefined') {this.hidden=false;}
			if(that.options.grouping && that.options.autowidth) {
				var ind = $.inArray(this.name, that.options.groupingView.groupField);
				if(ind >= 0 && that.options.groupingView.groupColumnShow.length > ind) {
					this.hidden = !that.options.groupingView.groupColumnShow[ind];
				}
			}
			this.widthOrg = cw = that._intNum(this.width,0);
			if((this.hidden === false||typeof(this.hidden) == 'undefined')){
				initwidth += cw+brd;
				if(this.fixed) {
					gw += cw+brd;
				} else {
					vc++;
				}
				cl++;
			}
		});
		if(isNaN(that.options.width)) {that.options.width = grid.width = initwidth;}
		else { grid.width = that.options.width;}
		that.options.tblwidth = initwidth;
		if(that.options.shrinkToFit ===false && that.options.forceFit === true) {that.options.forceFit=false;}
		if(that.options.shrinkToFit===true && vc > 0) {
			aw = grid.width-brd*vc-gw;
			if(!isNaN(this.options.height)) {//如果grid设置高度，则减去滚动条宽度
				aw -= scw;
				hs = true;
			}
			initwidth =0;
			$.each(that.options.colModel, function(i) {
				if((this.hidden === false||typeof(this.hidden)== 'undefined') && !this.fixed){
					cw = Math.round(aw*this.width/(that.options.tblwidth-brd*vc-gw));
					this.width =cw;
					initwidth += cw;
					lvc = i;
				}
			});
			cr =0;//如果grid实际宽度和算出来宽度有差别则将这个差加到最后一列
			if (hs) {
				if(grid.width-gw-(initwidth+brd*vc) !== scw){
					cr = grid.width-gw-(initwidth+brd*vc)-scw;
				}
			} else if(!hs && Math.abs(grid.width-gw-(initwidth+brd*vc)) !== 1) {
				cr = grid.width-gw-(initwidth+brd*vc) -1;//add for chrome
			}
			that.options.colModel[lvc].width += cr;
			that.options.tblwidth = initwidth+cr+brd*vc+gw;
			if(that.options.tblwidth > that.options.width) {
				that.options.colModel[lvc].width -= (that.options.tblwidth - parseInt(that.options.width,10));
				that.options.tblwidth = that.options.width;
			}
			that.options.tblwidth;
		}
	},
	_nextVisible: function(iCol) {
		var ret = iCol, j=iCol, i;
		for (i = iCol+1;i<this.options.colModel.length;i++){
			if(this.options.colModel[i].hidden !== true ) {
				j=i; break;
			}
		}
		return j-ret;
	},
	_formatCol: function (pos, rowInd, tv, rawObject, rowId, rdata){
		var that = this;
		if(that.options.model == "card")return "";
		var grid = that.grid;
		var cm = that.options.colModel[pos],
		ral = cm.align, result="style=\"", clas = cm.cls, nm = cm.name, celp, acp=[], dataOrg = "";
		if(ral) { result += "text-align:"+ral+";"; }
		if(cm.hidden===true) { result += "display:none;"; }
		var _fn = $.coral.toFunction(cm.cellattr);
		if(rowInd===0) {
			result += "width: "+grid.headers[pos].width+"px;";
		} else if ($.isFunction(_fn))
		{
			celp = _fn.apply( that.element[0], [{"rowId":rowId,"value":tv,"rawObject":rawObject,"colModel":cm,"rowData":rdata}]);
			//celp = cm.cellattr.call(that, rowId, tv, rawObject, cm, rdata);
			if(celp && typeof(celp) === "string") {
				celp = celp.replace(/style/i,'style').replace(/title/i,'title');
				if(celp.indexOf('title') > -1) { cm.title=false;}
				if(celp.indexOf('class') > -1) { clas = undefined;}
				acp = celp.split("style");
				if(acp.length === 2 ) {
					acp[1] =  $.trim(acp[1].replace("=",""));
					if(acp[1].indexOf("'") === 0 || acp[1].indexOf('"') === 0) {
						acp[1] = acp[1].substring(1);
					}
					result += acp[1].replace(/'/gi,'"');
				} else {
					result += "\"";
				}
			}
		}
		// 将original value存储在td上，注意动态维护此属性
		if ( rawObject ){
			var rawObjectV = rawObject[nm] || "";
			rawObjectV = $.grid.htmlEncode(rawObjectV);//需要编码，，不然列上面的属性解析错误
			/*if ( cm.edittype == "combobox" ) { 
				var v = that.findTextByValue(rawObjectV, {"colModel":cm});
				v = $.grid.htmlEncode(v);
				dataOrg += "data-org='"+v+"'"; 
			} else {
				dataOrg += "data-org='"+rawObjectV+"'"; 
			}*/
			
			dataOrg += "data-org='"+rawObjectV+"'"; 
		}
		if ( !acp.length ) { 
			acp[0] = ""; result += "\"";
		} 
		result += (clas !== undefined ? (" class=\""+clas+"\"") :"") + ((cm.title && tv) ? (" title=\""+$.grid.stripHtml(tv)+"\"") :"");
		result += " aria-describedby=\""+that.options.id+"_"+nm+"\"";
		return result + acp[0] + dataOrg;
	},
	/** 根据text找到value*/
	findTextByValue: function(cval, opts) {
		var code = opts.colModel.editoptions.data;
		if ( !code ) return cval;
		for ( var i=0; i<code.length; i++ ){
			if ( code[i].text == cval) {
				return code[i].value;
			} else {
			}
		}
		return cval;
	},
	_cellVal:  function (val) {
		return val === undefined || val === null || val === "" ? "&#160;" : (this.options.autoencode ? $.grid.htmlEncode(val) : val+"");
	},
	/* rowId: 行号
	 * cell: 单元格内容
	 * pos: 位置
	 * irow: 当前行
	 * srvr: 当前行数据
	 * */
	_addCell: function(rowId,cell,pos,irow, srvr, rdata) {
		if(this.options.model == "card"){
			var v,prp;
			v = this._formatter(rowId,cell,pos,srvr,'add');
			prp = this._formatCol( pos,irow, v, srvr, rowId, rdata);
			return "<div role=\"gridcell\" "+prp+">"+v+"</div>";
		}
		var v,prp;
		v = this._formatter(rowId,cell,pos,srvr,'add');
		prp = this._formatCol( pos,irow, v, srvr, rowId, rdata);
		return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
	},
	_orderedCols: function (offset) {
		var that = this;
		var order = that.options.remapColumns;
		if (!order || !order.length) {
			order = $.map(that.options.colModel, function(v,i) { return i; });
		}
		if (offset) {
			order = $.map(order, function(v) { return v<offset?null:v-offset; });
		}
		return order;
	},
	emptyRows: function (parent, scroll, locdata) {
		var that = this,
			isPicgrid = !!(that.options.model == "card");
		if(isPicgrid){
			$("#"+$.grid.coralID(that.options.id)+" .coral-pic").children().remove();
		}else{
			if(that.options.deepempty) {$("#"+$.grid.coralID(that.options.id)+" tbody:first tr:gt(0)").remove();}
			else {
				var trf = $("#"+$.grid.coralID(that.options.id)+" tbody:first tr:first")[0];
				$("#"+$.grid.coralID(that.options.id)+" tbody:first").empty().append(trf);
			}
			if (scroll && that.options.scroll) {
				$(">div:first", parent).css({height:"auto"}).children("div:first").css({height:0,display:"none"});
				parent.scrollTop = 0;
			}
			if(locdata === true) {
				if(that.options.treeGrid === true ) {
					that.options.data = []; that.options._index = {};
				}
			}
		}
	},
	normalizeData : function() {
		var p = this.options, data = p.data, dataLength = data.length, i, j, cur, idn, idr, ccur, v, rd,
		localReader = p.localReader,
		colModel = p.colModel,
		cellName = localReader.cell,
		iOffset = (p.multiselect === true ? 1 : 0) + (p.subGrid === true ? 1 : 0) + (p.rownumbers === true ? 1 : 0),
		br = p.scroll ? $.jgrid.randId() : 1,
		arrayReader, objectReader, rowReader;

		if (p.datatype !== "local" || localReader.repeatitems !== true) {
			return; // nothing to do
		}

		arrayReader = this._orderedCols(iOffset);
		objectReader = this._reader("local");
		// read ALL input items and convert items to be read by
		// $.jgrid.getAccessor with column name as the second parameter
		idn = p.keyName === false ?
			($.isFunction(localReader.id) ? localReader.id.call(ts, data) : localReader.id) :
			p.keyName;
		for (i = 0; i < dataLength; i++) {
			cur = data[i];
			// read id in the same way like addJSONData do
			// probably it would be better to start with "if (cellName) {...}"
			// but the goal of the current implementation was just have THE SAME
			// id values like in addJSONData ...
			idr = $.grid.getAccessor(cur, idn);
			if (idr === undefined) {
				if (typeof idn === "number" && colModel[idn + iOffset] != null) {
					// reread id by name
					idr = $.grid.getAccessor(cur, colModel[idn + iOffset].name);
				}
				if (idr === undefined) {
					idr = br + i;
					if (cellName) {
						ccur = $.grid.getAccessor(cur, cellName) || cur;
						idr = ccur != null && ccur[idn] !== undefined ? ccur[idn] : idr;
						ccur = null;
					}
				}
			}
			rd = { };
			rd[localReader.id] = idr;
			if (cellName) {
				cur = $.grid.getAccessor(cur, cellName) || cur;
			}
			rowReader = $.isArray(cur) ? arrayReader : objectReader;
			for (j = 0; j < rowReader.length; j++) {
				v = $.grid.getAccessor(cur, rowReader[j]);
				rd[colModel[j + iOffset].name] = v;
			}
			$.extend(true, data[i], rd);
		}
	},
	refreshIndex: function() {
		var that = this;
		var datalen = that.options.data.length, idname, i, val;

		if(that.options.keyName === false || that.options.loadonce === true) {
			idname = that.options.localReader.id;
		} else {
			idname = that.options.keyName;
		}
		for(i =0;i < datalen; i++) {
			val = $.grid.getAccessor(that.options.data[i],idname);
			that.options._index[val] = i;
		}
	},
	constructPanel: function(id, hide, altClass, rd, cur) {
		var tabindex = '-1', restAttr = '', attrName, style = hide ? 'display:none;' : '',
			classes = 'gridPanel coral-row-' + this.options.direction + altClass;
		//	rowAttrObj = $.isFunction(this.options.rowattr) ? this.options.rowattr.call(that, rd, cur) : {};
		/*if(!$.isEmptyObject( rowAttrObj )) {
			if (rowAttrObj.hasOwnProperty("id")) {
				id = rowAttrObj.id;
				delete rowAttrObj.id;
			}
			if (rowAttrObj.hasOwnProperty("tabindex")) {
				tabindex = rowAttrObj.tabindex;
				delete rowAttrObj.tabindex;
			}
			if (rowAttrObj.hasOwnProperty("style")) {
				style += rowAttrObj.style;
				delete rowAttrObj.style;
			}
			if (rowAttrObj.hasOwnProperty("class")) {
				classes += ' ' + rowAttrObj['class'];
				delete rowAttrObj['class'];
			}
			// dot't allow to change role attribute
			try { delete rowAttrObj.role; } catch(ra){}
			for (attrName in rowAttrObj) {
				if (rowAttrObj.hasOwnProperty(attrName)) {
					restAttr += ' ' + attrName + '=' + rowAttrObj[attrName];
				}
			}
		}*/
		return '<li role="row" id="' + id + '" tabindex="' + tabindex + '" class="' + classes + '"' +
			(style === '' ? '' : ' style="' + style + '"') + restAttr + '>';
	},
	constructTr: function(id, hide, altClass, rd, cur, selected) {
		var tabindex = '-1', restAttr = '', attrName, style = hide ? 'display:none;' : '',
			rowAttrObj,
			classes = 'coral-component-content jqgrow coral-row-' + this.options.direction + altClass+ (selected ? ' coral-state-highlight' : '');
		if(this.options.treeGrid){
			var parent_id = this.options.treeReader.parent_id_field;
			if(cur[parent_id] !== null && String(cur[parent_id]).toLowerCase() != "null"){
				classes += ' treeGridRow ';
			}
		}
		var rowattrFun = $.coral.toFunction(this.options.rowattr);
	//	rowAttrObj = $.isFunction(rowattrFun) ? this.options.rowattr.call(that, rd, cur) : {};
		rowAttrObj = $.isFunction(rowattrFun) ? rowattrFun.apply( this.element[0], [{
			"rowId":id, "rowData":rd, "currentObj":cur
			}]) : {};
		if(!$.isEmptyObject( rowAttrObj )) {
			if (rowAttrObj.hasOwnProperty("id")) {
				id = rowAttrObj.id;
				delete rowAttrObj.id;
			}
			if (rowAttrObj.hasOwnProperty("tabindex")) {
				tabindex = rowAttrObj.tabindex;
				delete rowAttrObj.tabindex;
			}
			if (rowAttrObj.hasOwnProperty("style")) {
				style += rowAttrObj.style;
				delete rowAttrObj.style;
			}
			if (rowAttrObj.hasOwnProperty("class")) {
				classes += ' ' + rowAttrObj['class'];
				delete rowAttrObj['class'];
			}
			// dot't allow to change role attribute
			try { delete rowAttrObj.role; } catch(ra){}
			for (attrName in rowAttrObj) {
				if (rowAttrObj.hasOwnProperty(attrName)) {
					restAttr += ' ' + attrName + '=' + rowAttrObj[attrName];
				}
			}
		}
		return '<tr role="row" id="' + id + '" tabindex="' + tabindex + '" class="' + classes + '"' +
			(style === '' ? '' : ' style="' + style + '"') + restAttr + '>';
	},
	_clearVals: function(onPaging){
		var that = this, ret;
		//if ($.isFunction(that.options.onPaging) ) { ret = that.options.onPaging.call(that,onPaging); }
		ret = that._trigger("onPaging",null,[{pgButton: onPaging}]);
		if (!ret) {return false;}
		that.options.selrow = null;
		that.options.editrow = null;
		if(that.options.multiselect) {that.options.selarrrow =[]; that._setHeadCheckBox( false );}
		that.options.savedRow = [];
		return true;
	},
	_getPagination: function(){
		
	},
	/**
	 * 通过模板模式进行渲染自定义分页条，同时组件库提供两种默认的模板。
	 * TODO: 模板渲染，自定义分页条上面的各个位置
	 */
	_setPager: function (pgid, tp){
		var that = this,
			pagerTemplate1 = "<span class='paginator-left'>{viewrecords}</span><span class='paginator-center'>{prev}{links}{next}{pginput}{navbar}{description}</span><span class='paginator-right'><em>每页</em>{rninput}<em>条</em></span>",
			pagerTemplate2 = "<div class='paginator-left'>{viewrecords}{rowlist}{first}{prev}{pginput}{next}{last}{navbar}{description}</div><div class='toolbarpanel'>{toolbar}</div>";
		tp += "_" + pgid;
	var pagerTemplate = false;
		if ($.isFunction(that.options.pagerTemplate)) { 
			pagerTemplate = that.options.pagerTemplate.call(that);
		}

		var dir= this.options.direction;
		// TBD - consider escaping pgid with pgid = $.grid.coralID(pgid);
		var po=["first"+tp,"prev"+tp, "next"+tp,"last"+tp]; if(dir=="rtl") { po.reverse(); }
		var pginp = "", 
			str="", 
			rninput="", 
			rowlist="",
			viewrecords="", 
			totalPage = "",
			pagers = "",
			pagination="", 
			links = "<span class='coral-paginator-pages'></span>",
			pginput = "<em>第</em><input type='text' class='coral-pg-input'/><em>页</em>",
			reload = "<button class='reload-button' id='_reloadGrid' type='button' " +
					"data-options='customData:{gridId:\""+that.options.id+"\"}," +
					"label:\"刷新\",text: false,icons: \"cui-icon-loop3\",onClick: function( e, ui ){" +
					"$( \"#"+that.options.id+"\" ).grid( \"reload\" );" +
				"}'>reload</button>",
			first = "<span id='"+po[0]+"' class='coral-paginator-first coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-first2' title='第一页'></span></span>",
			last = "<span id='"+po[3]+"' class='coral-paginator-last coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-last2' title='最后一页'></span></span>",
			//next = "<span id='"+po[2]+"' class='coral-paginator-next coral-corner-all' tabindex='0'><span class='coral-icon coral-icon-seek-next'>p</span></span>",
			next = "<span id='"+po[2]+"' class='coral-paginator-next coral-corner-all' tabindex='0'><span class='cui-icon-arrow-right3' title='下一页'></span></span>",
			//prev = "<span id='"+po[1]+"' class='coral-paginator-prev coral-corner-all' tabindex='0'><span class='coral-icon coral-icon-seek-prev'>p</span></span>",
			prev = "<span id='"+po[1]+"' class='coral-paginator-prev coral-corner-all' tabindex='0'><span class='cui-icon-arrow-left3' title='前一页'></span></span>",
			sep = "<span>|</span>",
			navbar = "<span class='pager-navbar'></span>",
			toolbar = "<span class='pager-toolbar'></span>",
			description="<span class='pager-description'></span>", paginator, lft, cent, rgt, twd, tdw, i;
		paginator = "pg_"+pgid;
		
		lft = pgid+"_left"; cent = pgid+"_center"; rgt = pgid+"_right";

		rninput +="<input type='text' class='coral-rn-input' val=''/>";
		if( !that.options.rninput ){
		} else if( that.options.rowList.length > 0 ){
			//rowlist = rninput;
		}
		rowlist +="<span class='coral-paginator-combobox'><select class='coral-pg-selbox' role='listbox'>";
		for(i=0;i<that.options.rowList.length;i++){
			rowlist +="<option role=\"option\" value=\""+that.options.rowList[i]+"\""+((that.options.rowNum == that.options.rowList[i])?" selected=\"selected\"":"")+">"+that.options.rowList[i]+"</option>";
		}
		rowlist +="</select></span>";
		if(that.options.viewrecords){
			viewrecords +="<span class='coral-paging-info'></span>";
			totalPage +="<span class='coral-paging-totalpage'></span>";
		}
		
		if(that.options.pginput===true) { pginp= "<td dir='"+dir+"'>"+$.grid.format(that.options.pgtext || "","<input class='coral-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>","<span id='sp_1_"+$.grid.coralID(pgid)+"'></span>")+"</td>";}
		if ( that.options.pagerStyle == "flex" ){
			if ( pagerTemplate ) {
				pagerTemplate1 = pagerTemplate;
			}
			pagination = "<span id='"+po[1]+"' class='coral-paginator-prev coral-corner-all' tabindex='0'><span class='cui-icon-arrow-left3'>p</span></span>" +
				"<span class='coral-paginator-pages'></span>" +
				"<span id='"+po[2]+"' class='coral-paginator-next coral-corner-all' tabindex='0'><span class='cui-icon-arrow-right3'>p</span></span>" +
				"<em>第</em><input type='text' class='coral-pg-input'/><em>页</em>" ;
			pagers = pagerTemplate1.replace( /\{viewrecords\}/g, viewrecords)
				//.replace( /\{pagination\}/g, pagination)
				.replace( /\{navbar\}/g, navbar)
				.replace( /\{reload\}/g, reload)
				.replace( /\{-\}/g, sep)
				.replace( /\{first\}/g, first)
				.replace( /\{last\}/g, last)
				.replace( /\{next\}/g, next)
				.replace( /\{totalPage\}/g, totalPage)
				.replace( /\{prev\}/g, prev)
				.replace( /\{links\}/g, links)
				.replace( /\{pginput\}/g, pginput)
				.replace( /\{toolbar\}/g, toolbar)
				.replace( /\{description\}/g, description)
				.replace( /\{rowlist\}/g, rowlist)
				.replace( /\{rninput\}/g, rninput);
			 
			$("#"+$.grid.coralID(pgid) ).addClass("coral-pager-flex");
			$("#"+$.grid.coralID(pgid) )
			.append("<div id='" + paginator + "' class='coral-paginator' role='group'>" +
						pagers +
					"</div>");
			that._bindpager( pgid, tp );
		} else if ( that.options.pagerStyle == "tradition" ){
			if ( pagerTemplate ) {
				pagerTemplate2 = pagerTemplate;
			}
			pagination = "<span id='"+po[0]+"' class='coral-paginator-first coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-first2'></span></span>" +
				"<span id='"+po[1]+"' class='coral-paginator-prev coral-corner-all' tabindex='0'><span class='cui-icon-arrow-left3'></span></span>" +
				"<em>第</em><input type='text' class='coral-pg-input'/><em>页</em>" +
				"<span id='"+po[2]+"' class='coral-paginator-next coral-corner-all' tabindex='0'><span class='cui-icon-arrow-right3'></span></span>" +
				"<span id='"+po[3]+"' class='coral-paginator-last coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-last2'></span></span>" ;
			pagers = pagerTemplate2.replace( /\{viewrecords\}/g, viewrecords)
				//.replace( /\{pagination\}/g, pagination)
				.replace( /\{navbar\}/g, navbar)
				.replace( /\{reload\}/g, reload)
				.replace( /\{-\}/g, sep)
				.replace( /\{first\}/g, first)
				.replace( /\{last\}/g, last)
				.replace( /\{next\}/g, next)
				.replace( /\{prev\}/g, prev)
				.replace( /\{links\}/g, links)
				.replace( /\{totalPage\}/g, totalPage)
				.replace( /\{pginput\}/g, pginput)
				.replace( /\{toolbar\}/g, toolbar)
				.replace( /\{description\}/g, description)
				.replace( /\{rowlist\}/g, rowlist)
				.replace( /\{rninput\}/g, rninput);
			
			$("#"+$.grid.coralID(pgid) ).addClass("coral-pager-tradition");
			$("#"+$.grid.coralID(pgid) )
			.append("<div id='" + paginator + "' class='coral-paginator' role='group'>" +
						pagers +
					"</div>");
			that._bindpagerTradition( pgid, tp );
		} else {
			//TODO: 自定义pager，自定义事件绑定
		}
		
		var pagerOpts = $.parser.parseOptions( $( "#"+$.grid.coralID(pgid) )[0], null);
		that.options.toolbarOptions = pagerOpts.toolbarOptions;
		that.options.description = pagerOpts.description;
		var navbarOptions = that.options.navbarOptions || {};
		pagerOpts.toolbarOptions = pagerOpts.toolbarOptions || {};
		$(".reload-button", that.element ).button();
		if ( $( ".pager-toolbar", that.element ).length ) {
			$( ".pager-toolbar", that.element ).toolbar( pagerOpts.toolbarOptions );
		}
		if( that.options.description ){
			$( ".pager-description", that.element ).html( that.options.description );
		}
		
	},
	_bindpagerTradition: function( pgid, tp ){
		var that = this;
		// init page input icon
		$( "input.coral-pg-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
			componentCls: "pg",
			onKeyPress: function(e,ui){
				var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
				if (key == 13) {
					that.options.page = (ui.text > 0) ? ui.text:that.options.page;
					if(!that._clearVals('user')) { return false; }
					that._populate();
					return false;
				}
				return this;
			}
		});
		//if( !that.options.rninput ){
			// init rownum input icon
			$( "input.coral-rn-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
				componentCls: "rn",
				onKeyPress: function(e,ui){
					var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
					if(key == 13) {
						that.options.rowNum = (ui.text>0) ? (ui.text < that.options.rowNumMax? ui.text:that.options.rowNumMax):that.options.rowNum;
						if(!that._clearVals('records')) { return false; }
						that._populate();
						return false;
					}
					return this;
				}/*,
				texticons: [{
					icon: "条",
					click: function (e,ui) { 
						that.options.rowNum = (ui.value>0) ? (ui.value<that.options.rowNumMax? ui.value:that.options.rowNumMax):that.options.rowNum;
						if(!that._clearVals('user')) { return false; }
						that._populate();
						return false;
					}
				}]*/
			});
		//} else if ( that.options.rowList.length > 0 ) {
			// init rowlist
			$( ".coral-pg-selbox", $( "#"+$.grid.coralID(pgid) ) ).combobox({
				componentCls: "rn",
				panelHeight:'auto',
				onChange:function(event,ui){
					that.options.page = Math.round(that.options.rowNum*(that.options.page-1)/ui.value-0.5)+1;
					that.options.rowNum = ui.value;
					//if(that.options.pager) { $('.coral-pg-selbox',that.options.pager).val(ui.newValue); }
					//if(that.options.toppager) { $('.coral-pg-selbox',that.options.toppager).val(ui.newValue); }
					if(!that._clearVals('records')) { return false; }
					that._populate();
					return false;
				}
			});
		//}
		
		$("#first"+$.grid.coralID(tp)+", #prev"+$.grid.coralID(tp)+", #next"+$.grid.coralID(tp)+", #last"+$.grid.coralID(tp)).click( function() {
			var cp = that._intNum(that.options.page,1),
			last = that._intNum(that.options.lastpage,1), selclick = false,
			fp=true, pp=true, np=true,lp=true;
			if(last ===0 || last===1) {fp=false;pp=false;np=false;lp=false; }
			else if( last>1 && cp >=1) {
				if( cp === 1) { fp=false; pp=false; }
				//else if( cp>1 && cp <last){ }
				else if( cp===last){ np=false;lp=false; }
			} else if( last>1 && cp===0 ) { np=false;lp=false; cp=last-1;}
			if( this.id === 'first'+tp && fp ) { that.options.page=1; selclick=true;}
			if( this.id === 'prev'+tp && pp) { that.options.page=(cp-1); selclick=true;}
			if( this.id === 'next'+tp && np) { that.options.page=(cp+1); selclick=true;}
			if( this.id === 'last'+tp && lp) { that.options.page=last; selclick=true;}
			if(selclick) {
				if(!that._clearVals(this.id)) { return false; }
				that._populate();
			}
			return false;
		});
	},
	_bindpager: function( pgid, tp ){
		var that = this;
		// init page input icon
		$( "input.coral-pg-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
			componentCls: "pg",
			onKeyPress: function(e,ui){
				var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
				if(key == 13) {
					// 如果输入页数大于总页数，则返回 @lhb @20150507
					var last = that._intNum(that.options.lastpage,1);
					var cp = that._intNum(ui.text,1);					
					if (cp > last) return;
					//
					that.options.page = (ui.text > 0) ? ui.text : that.options.page;
					if(!that._clearVals('user')) { return false; }
					that._populate();
					return false;
				}
				return this;
			}/*,
			icons: [{
				icon: "icon-enter4",
				click: function (e,ui) { 
					// 如果输入页数大于总页数，则返回 @lhb @20150507
					var last = that._intNum(that.options.lastpage,1);
					var cp = that._intNum(ui.value,1);					
					if (cp > last) return;
					//
					that.options.page = (ui.value>0) ? ui.value:that.options.page;
					if(!that._clearVals('user')) { return false; }
					that._populate();
					return false;
				}
			}]*/
		});
		//if( !that.options.rninput ){
			// init rownum input icon
			$( "input.coral-rn-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
				componentCls: "rn",
				onKeyPress: function(e,ui){
					var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
					if(key == 13) {
						that.options.rowNum = (ui.text >0) ? (ui.text < that.options.rowNumMax? ui.text:that.options.rowNumMax):that.options.rowNum;
						if(!that._clearVals('records')) { return false; }
						that._populate();
						return false;
					}
					return this;
				}/*,
				texticons: [{
					icon: "条",
					click: function (e,ui) { 
						that.options.rowNum = (ui.value>0) ? ui.value:that.options.rowNum;
						if(!that._clearVals('user')) { return false; }
						that._populate();
						return false;
					}
				}]*/
			});
		//} else if ( that.options.rowList.length > 0 ) {
			// init rowlist
			$( ".coral-pg-selbox", $( "#"+$.grid.coralID(pgid) ) ).combobox({
				componentCls: "rn",
				panelHeight:'auto',
				onChange:function(event,ui){
					that.options.page = Math.round(that.options.rowNum*(that.options.page-1)/ui.newValue-0.5)+1;
					that.options.rowNum = ui.newValue;
					//if(that.options.pager) { $('.coral-pg-selbox',that.options.pager).val(ui.newValue); }
					//if(that.options.toppager) { $('.coral-pg-selbox',that.options.toppager).val(ui.newValue); }
					if(!that._clearVals('records')) { return false; }
					that._populate();
					return false;
				}
			});
		//}
		
		// init page input keypress
		$( ".coral-textbox-btn-ico-search", $("#"+$.grid.coralID(pgid)) ).click( function(e) {
			that.options.page = ($(this).prev().val()>0) ? $(this).prev().val():that.options.page;
			if(!that._clearVals('user')) { return false; }
			that._populate();
			return false;
		});
		
		this._off($(".coral-paginator-page"));
		this._on({
			"click.coral-paginator-page" : function(e) {
				var _this = e.target;
				if($(_this).hasClass('coral-state-disabled')) {
					_this.style.cursor='default';
				} else {
					$(_this).addClass('coral-state-hover');
					_this.style.cursor='pointer';
				}
			}
		});
		//this._off($(".coral-paginator-page"));
		this._on({
			"mouseenter.coral-paginator-page" : function(e) {
				var _this = e.target;
				if($(_this).hasClass('coral-state-disabled')) {
					_this.style.cursor='default';
				} else {
					$(_this).addClass('coral-state-hover');
					_this.style.cursor='pointer';
				}
			},
			"mouseleave.coral-paginator-page" : function(e) {
				var _this = e.target;
				if(!$(_this).hasClass('coral-state-disabled')) {
					$(_this).removeClass('coral-state-hover');
					_this.style.cursor= "default";
				}
			}
		});
		
		$("#first"+$.grid.coralID(tp)+", #prev"+$.grid.coralID(tp)+", #next"+$.grid.coralID(tp)+", #last"+$.grid.coralID(tp)).click( function() {
			var cp = that._intNum(that.options.page,1),
			last = that._intNum(that.options.lastpage,1), selclick = false,
			fp=true, pp=true, np=true,lp=true;
			if(last ===0 || last===1) {fp=false;pp=false;np=false;lp=false; }
			else if( last>1 && cp >=1) {
				if( cp === 1) { fp=false; pp=false; }
				//else if( cp>1 && cp <last){ }
				else if( cp===last){ np=false;lp=false; }
			} else if( last>1 && cp===0 ) { np=false;lp=false; cp=last-1;}
			if( this.id === 'first'+tp && fp ) { that.options.page=1; selclick=true;}
			if( this.id === 'prev'+tp && pp) { that.options.page=(cp-1); selclick=true;}
			if( this.id === 'next'+tp && np) { that.options.page=(cp+1); selclick=true;}
			if( this.id === 'last'+tp && lp) { that.options.page=last; selclick=true;}
			if(selclick) {
				if(!that._clearVals(this.id)) { return false; }
				that._populate();
			}
			return false;
		});
	},
	_updatepager: function(rn, dnd) {
		var that = this;
		var cp, last, base, from,to,tot,fmt, pgboxes = "", sppg, topa, totalp,
		tspg = that.options.pager ? "_"+$.grid.coralID(that.options.pager.substr(1)) : "",
		tspg_t = that.options.toppager ? "_"+that.options.toppager.substr(1) : "";
		base = parseInt(that.options.page,10)-1;
		if(base < 0) { base = 0; }
		base = base*parseInt(that.options.rowNum,10);
		to = base + that.options.reccount;
		if ( that.options.scroll ) {
			var rows = $("tbody:first > tr:gt(0)", that.grid.rowsView);
			base = to - rows.length;
			that.options.reccount = rows.length;
			var rh = rows.outerHeight() || that.grid.prevRowHeight;
			if (rh) {
				var top = base * rh;
				var height = parseInt(that.options.records,10) * rh;
				$(">div:first",that.grid.rowsView).css({height : height}).children("div:first").css({height:top,display:top?"":"none"});
			}
			that.grid.rowsView.scrollLeft = that.grid.columnsView.scrollLeft;
		}
		if (that.options.treeGrid) {
			var rows = $("tbody:first > tr:not(.treeGridRow,.jqgfirstrow)", that.grid.rowsView);
			that.options.reccount = rows.length;
			to = base + that.options.reccount;
		}
		//pgboxes = that.options.pager ? that.options.pager : "";
		//pgboxes += that.options.toppager ?  (pgboxes ? "," + that.options.toppager : that.options.toppager) : "";
		pgboxes = $(that.element).find(".coral-grid-pager");
		if( pgboxes.length > 0 ) {
			fmt = $.grid.formatter.integer || {};
			cp = that._intNum(that.options.page);
			last = that._intNum(that.options.lastpage);
			$(".selbox",pgboxes)[ this.options.useProp ? 'prop' : 'attr' ]("disabled",false);
			if ( $('.coral-pg-input',pgboxes).length>0 ) {
				$( '.coral-pg-input',pgboxes ).val(that.options.page);
				sppg = that.options.toppager ? '#sp_1'+tspg+",#sp_1"+tspg_t : '#sp_1'+tspg;
				$(sppg).html($.fmatter ? $.fmatter.util.NumberFormat(that.options.lastpage,fmt):that.options.lastpage);
			}
			if(that.options.rninput===true) {
				$('.coral-rn-input',pgboxes).val(that.options.rowNum);
			}
			/*
			//
			if(that.options.reccount === 0) {
				$(".coral-grid-noRecordsTips").show();
			}			
			//
*/			if (that.options.viewrecords){
				if(that.options.reccount === 0) {
					$(".coral-paging-info",pgboxes).html("");
					$(".coral-paging-totalpage",pgboxes).html("");
				} else {
					from = base+1;
					tot = that.options.records;
					topa = that.options.reccount;
					if (tot % topa == 0){
						totalp = parseInt(tot/topa);
					} else {
						totalp = parseInt(tot/topa) + 1;
					}
					if ($.fmatter) {
						from = $.fmatter.util.NumberFormat(from,fmt);
						to = $.fmatter.util.NumberFormat(to,fmt);
						tot = $.fmatter.util.NumberFormat(tot,fmt);// 总记录数
						topa = $.fmatter.util.NumberFormat(topa,fmt);// 每页条数
						totalp = $.fmatter.util.NumberFormat(totalp,fmt);
					}
					$(".coral-paging-info",pgboxes).html($.grid.format(that.options.recordtext,from,to,tot));
					$(".coral-paging-totalpage",pgboxes).html($.grid.format(that.options.pagetext));
				}
			}
			if(that.options.pgbuttons===true) {
				var pre = [], next = [];
				that.pagers.each(function(){
					pre.push("#first_"+this.id);
					pre.push("#prev_"+this.id);
					next.push("#next_"+this.id);
					next.push("#last_"+this.id);
				});
				if(cp<=0) {cp = last = 0;}
				if(cp==1 || cp === 0) {
					//$("#first"+tspg+", #prev"+tspg).addClass('coral-state-disabled').removeClass('coral-state-hover');
					$(pre.join(",")).addClass('coral-state-disabled').removeClass('coral-state-hover');
					if(that.options.toppager) { $("#first_t"+tspg_t+", #prev_t"+tspg_t).addClass('coral-state-disabled').removeClass('coral-state-hover'); }
				} else {
					$(pre.join(",")).removeClass('coral-state-disabled');
					if(that.options.toppager) { $("#first_t"+tspg_t+", #prev_t"+tspg_t).removeClass('coral-state-disabled'); }
				}
				if(cp==last || cp === 0) {
					$(next.join(",")).addClass('coral-state-disabled').removeClass('coral-state-hover');
					if(that.options.toppager) { $("#next_t"+tspg_t+", #last_t"+tspg_t).addClass('coral-state-disabled').removeClass('coral-state-hover'); }
				} else {
					$(next.join(",")).removeClass('coral-state-disabled');
					if(that.options.toppager) { $("#next_t"+tspg_t+", #last_t"+tspg_t).removeClass('coral-state-disabled'); }
				}
				// 如果无数据，则将分页条向右的箭头也禁用
				if (0 == last) {
					$(next.join(",")).addClass('coral-state-disabled').removeClass('coral-state-hover');
				}
			}
			that._paginators();
		}
		if(rn===true && that.options.rownumbers === true) {
			$("td.grid-rownum",that.rows).each(function(i){
				$(this).html(base+1+i);
			});
		}
		if(dnd && that.options.jqgdnd) { $(that.element).grid('gridDnD','updateDnD');}
	//	$( ".pager-toolbar", that.element ).toolbar( "option", "disabled", false );
		that._trigger("onComplete", null, []);
		that._trigger("afterComplete", null, []);
	},
	_paginators: function(){
		var that = this;
		var cp = that._intNum(that.options.page,1), last = that._intNum(that.options.lastpage,1), selclick = false;
		var le = 3, begin = cp>2?cp+2-le:1, end, pages="";
		
		end = le+begin>last?last+1:le+begin;
		if(begin>3&&end<=last+2)begin = end -le;
		
		if(cp>2&&last>le){
			if(begin>=2)
				pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'  tabindex='0'>1</span>";
			if(begin>=3)
				pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'  tabindex='0'>2</span>";
			if(begin!=3&&begin!=1&&begin!=2)
				pages += "<span class='coral-page-pointer'>...</span>";
		}
		
		for(var i=begin;i<end;i++){
			if(cp==i)
				pages += "<span class='coral-paginator-page coral-state-default coral-state-active coral-corner-all'  tabindex='0'>"+i+"</span>";
			else
				pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'  tabindex='0'>"+i+"</span>";
		}
		if(end==last)
			pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'>"+last+"</span>";
		else if(end<=last)
			pages += "<span class='coral-page-pointer'>...</span><span class='coral-paginator-page coral-state-default coral-corner-all'>"+last+"</span>";
		$( ".coral-paginator-pages", that.element ).html( pages );
	},
	_populate: function (npage) {
		var that = this,
			isPicgrid = !!(that.options.model == "card");
		var grid = that.grid;
		if(true) {//上次请求未完成则不能继续
			var pvis = that.options.scroll && npage === false,
			prm = {}, dt, dstr, pN=that.options.prmNames;
			if(that.options.page <=0) { that.options.page = 1; }
			if(pN.search !== null) {prm[pN.search] = that.options.search;} if(pN.nd !== null) {prm[pN.nd] = new Date().getTime();}
			if(pN.rows !== null) {prm[pN.rows]= that.options.rowNum;} if(pN.page !== null) {prm[pN.page]= that.options.page;}
			if(pN.sort !== null) {prm[pN.sort]= that.options.sortname;} if(pN.order !== null) {prm[pN.order]= that.options.sortorder;}
			if(that.options.rowTotal !== null && pN.totalrows !== null) { prm[pN.totalrows]= that.options.rowTotal; }
			//var lcf = $.isFunction(that.options.onload), lc = lcf ? that.options.onload : null;
			var lc = function(req){
				that._trigger("onLoad", null, [ req ]);
				if (that.options.afterSortableRows && $.fn.sortable) {
					try {
						$(that.element).grid("sortableRows");
					} catch (e){}
				}
			};
			var adjust = 0;
			npage = npage || 1;
			if (npage > 1) {
				if(pN.npage !== null) {
					prm[pN.npage] = npage;
					adjust = npage - 1;
					npage = 1;
				} else {
					lc = function(req) {
						that.options.page++;
						grid.columnsView.loading = false;
						/*if (lcf) {
							that.options.onload.call(that,req);
						}*/
						that._trigger("onLoad", null, [ req ]);
						that._populate(npage-1);
					};
				}
			} else if (pN.npage !== null) {
				delete that.options.postData[pN.npage];
			}
			if(that.options.grouping) {
				this.groupingSetup();
				var grp = that.options.groupingView, gi, gs="";
				for(gi=0;gi<grp.groupField.length;gi++) {
					var index = grp.groupField[gi];
					$.each(that.options.colModel, function(cmIndex, cmValue) {
						if (cmValue.name === index && cmValue.index){
							index = cmValue.index;
						}
					} );
					gs += index +" "+grp.groupOrder[gi]+", ";
				}
				prm[pN.sort] = gs + prm[pN.sort];
			}
			// TODO: 如果是多列的时候，需要把sortSeparator拓展进去。
			if ( that.options.containSortOrder && prm[pN.sort] && prm[pN.order]) {
				prm[pN.sort] = prm[pN.sort] + that.options.sortSeparator + prm[pN.order]
			}
			$.extend(that.options.postData,prm);
			var rcnt = !that.options.scroll ? 1 : that.rows.length-1;
			var bfr = that._trigger("beforeRequest", null, [ ]);
			if (bfr === false || bfr === 'stop') { return; }
			if ($.isFunction(that.options.datatype)) { that.options.datatype.call(that,that.options.postData,"load_"+that.options.id); return;}
			/*else if($.isFunction(that.options.beforeRequest)) {
				bfr = that.options.beforeRequest.call(that);
				if(bfr === undefined) { bfr = true; }
				if ( bfr === false ) { return; }
			}*/
			dt = that.options.datatype.toLowerCase();
			if (!(that.options.b_sortdata && that.options.b_sortdata === true) && that.options.orgdatatype) {//modify for custom sort
				dt = that.options.orgdatatype;
				that.options.datatype = dt;
			}
			if(that.options.localonce){
				dt = "local";
			}
			if ( this.options.initData ) {
				dt = "initinlocal";
			}
			var success = function ( content, st, xhr ){
				if( that.options.loadonce) {that.options.orgdatatype = dt;}// modify for custom sort
				// when initInLocal then st and xhr are undefined
				if ( !that._trigger("beforeProcessing", null, [{content: content, state: st, xhr: xhr}]) ) {
					that._endReq();
					return;
				} else {
					that._addJSONData(content,grid.rowsView,rcnt,npage>1,adjust);
				}
				
				//$(that.element).loading("refresh");
				if( !isPicgrid ) { that._hasScrollOffset(); }
				if( lc ) { lc.call( that,content ); }
				that._trigger("afterLoad", null, [{content:content}]);
				if ( pvis ) { grid.populateVisible(); }
				if( that.options.loadonce || that.options.treeGrid) {
					that.options.datatype = "local";
					that.options.orgpage = that.options.page; // modify for custom sort
				}
				if (npage === 1) { that._endReq(); }
				// 如果当前页没有数据，则刷新到前一页
				var dReader, drows;
				if(that.options.orgdatatype == "local") {
					dReader =  that.options.localReader;
				} else {
					dReader =  that.options.jsonReader;
				}
				drows = $.grid.getAccessor(content,dReader.root);
				if ( drows.length == 0 && 
					parseInt(that.options.page) != 1 &&
					parseInt(that.options.lastpage) < parseInt(that.options.page) ) {
					$(that.element).grid("reload",{page:that.options.lastpage});
				}
				content=null;
				that.refresh();
			}
			/*if ( $( ".pager-toolbar", that.element ).length > 0 ) {
				$( ".pager-toolbar", that.element ).toolbar( "option", "disabled", true );
			}*/
			switch(dt)
			{
			case "initinlocal":
				dt = "json";
				success( that.options.initData, null, null );
				this.options.initData = false;
				break;
			case "json":
			case "jsonp":
				if ( this.xhr ){
					this.xhr.abort();
				}
				this.xhr = $.ajax(this._ajaxSettings( ));
				this.xhr
					.success(function(content, st, xhr) {
						success( content, st, xhr );
					}).error(function(xhr,st,err) {						
						that._trigger ("onLoadError", null, [{xhr:xhr,st:st,err:err}]);
						if (npage === 1) { that._endReq(); }
						xhr=null;
						that.refresh();
					}).complete(function( jqXHR, status ) {
						if ( jqXHR === that.xhr ) {
						    that.xhr = null;
						}
					});
			break;
			case "local":
			case "clientside":
				that._beginReq();
				that.options.datatype = "local";
				var req = that._addLocalData();
				this._addJSONData(req,grid.rowsView,rcnt,npage>1,adjust);
				if(!that.options.b_sortdata){
					that.refresh();
					if(lc) { lc.call(that,req); }
					that._trigger("AfterLoad", null,[req]);
					if (pvis) { grid.populateVisible(); }
				}
				that._endReq();
				if (that.options.frozenColumns) {
					that._setFrozenHeight();
				}
			break;
			}
		}
	},
	_setFrozenHeight : function () {
		var that = this,
		    rowId = "",
		    headHeight = 0,
		    frozenHeight = 0,
		    normalHeight = 0;
		if (this.grid.fhDiv){
			headHeight = this.grid.fhDiv.height();
			this.grid.fbDiv.css("top",headHeight);
			$("tr",that.grid.fbDiv).slice(1).each(function(){
				rowId = $(this).attr("id");
				frozenHeight = parseFloat($('td:first', this).height());
				normalHeight = parseFloat($("#"+rowId,that.gridRows).find('td:first').height());
				if (frozenHeight < normalHeight) {
					$("td",this).each(function(){
						$(this).height(normalHeight);
					})
				}else if (frozenHeight > normalHeight) {
					$("td",$("#"+rowId,that.gridRows)).each(function(){
						$(this).height(frozenHeight);
					})
				}
			})  
		}
		if (this.grid.rightfhDiv){
			headHeight = this.grid.rightfhDiv.height();
			this.grid.rightfbDiv.css("top",headHeight);
			$("tr",that.grid.rightfbDiv).slice(1).each(function(){
				rowId = $(this).attr("id");
				frozenHeight = parseFloat($('td:first', this).height());
				normalHeight = parseFloat($("#"+rowId,that.gridRows).find('td:first').height());
				if (frozenHeight < normalHeight) {
					$("td",this).each(function(){
						$(this).height(normalHeight);
					})
				}else if (frozenHeight > normalHeight) {
					$("td",$("#"+rowId,that.gridRows)).each(function(){
						$(this).height(frozenHeight);
					})
				}
			})
		}
	},
	_ajaxSettings :function(){
		var that = this,
			opts = this.options;
		return $.extend({
			url: opts.url,
			type: opts.asyncType,
			beforeSend: function(xhr, settings ){
				var gotoreq = true;
				gotoreq = that._trigger("beforeSend", null, {xhr:xhr, settings:settings});
				if(gotoreq === undefined) { gotoreq = true; }
				if(gotoreq === false) {
					return false;
				} else {
					that._beginReq();
				}
			},
			data: $.isFunction(opts.serializeGridData)? opts.serializeGridData.call(this,opts.postData) : opts.postData,
			dataType: opts.datatype
		}, $.grid.ajaxOptions, opts.ajaxGridOptions);
	},
	_reader: function (datatype) {
		var that = this;
		var field, f=[], j=0, i;
		for(i =0; i<this.options.colModel.length; i++){
			field = this.options.colModel[i];
			if (field.name !== 'cb' && field.name !=='subgrid' && field.name !=='rn') {
				f[j]= datatype == "local" ?
				field.name :
				( (datatype=="xml" || datatype === "xmlstring") ? field.xmlmap || field.name : field.jsonmap || field.name );
				if(that.options.keyName !== false && field.key===true ) {
					that.options.keyName = f[j];
				}
				j++;
			}
		}
		return f;
	},
	_addMulti: function(rowid,pos,irow,checked){
		var that = this,
			isPicgrid = !!(that.options.model == "card"),
			v = "<input role=\"checkbox\" type=\"checkbox\""+" id=\"jqg_"+that.options.id+"_"+rowid+"\" class=\"cbox\" name=\"jqg_"+that.options.id+"_"+rowid+"\"" + (checked ? "checked=\"checked\"" : "")+"/>",
			prp = that._formatCol( pos,irow,'',null, rowid, true);
		if(isPicgrid)return v;
		return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
	},
	_addSingle: function(rowid,pos,irow){
		var that = this,
			isPicgrid = !!(that.options.model == "card"),
			v = "<input role=\"radio\" type=\"radio\""+" id=\"jqg_"+that.options.id+"_"+rowid+"\" class=\"cbox\" name=\"jqg_"+that.options.id+"\"/>",
			prp = that._formatCol( pos,irow,'',null, rowid, true);
		if(isPicgrid)return v;
		return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
	},
	_addRowNum: function (pos,irow,pG,rN) {
		var v =  (parseInt(pG,10)-1)*parseInt(rN,10)+1+irow,
		prp = this._formatCol( pos,irow,v, null, irow, true);
		return "<td role=\"gridcell\" class=\"coral-state-default grid-rownum\" "+prp+">"+v+"</td>";
	},
	_customPanel: function(rd,ni,muti){
		var that = this,
			itemJson = {},
			coreData = "",
			itemData = "",
			toolbarsData = "",
			buttonsData = "";
		
//		if ( typeof( that.options.gridItem ) === "string" ) {
//			that.options.gridItem = window[that.options.gridItem];
//		}
//		if($.isFunction( that.options.gridItem )) {
//			itemJson = that.options.gridItem.call(this, rd);
//		}
		var fun = $.coral.toFunction( that.options.picTemplate );
		if($.isFunction(fun)){
			itemJson = fun.apply("picTemplate",[{"rowData":rd,"ni":ni,"muti":muti,"getData":true}]);
		}
		if(typeof(itemJson)=='undefined')return "";
		
		var src = itemJson['src'];
		if(!src)src = "src";
		coreData = itemJson['coreData']||"<img src='"+rd['src']+"'/>";
		itemData = itemJson['itemData']||"";
		toolbarsData = itemJson['toolbarsData']||"";
		buttonsData = itemJson['buttonsData']||"";
		var ui = []; 
		//ui.push("<div class='rowgridWraper'>");
		ui.push("<ul class='rowgrid coral-component-content coral-corner-all'>");
			ui.push("<li class='gridModel1 gridModel'>");
				if(coreData.length>0){
				ui.push(coreData);
				}
				ui.push("<div class='valigh-fix'></div>");
				if(toolbarsData.length>0){
				ui.push("<div class='gridtoolbars'><div class='bgopacity'>&#160;</div>"+toolbarsData+"</div>");
				}
			ui.push("</li>");
			if(itemData.length>0){
			ui.push("<li class='gridModel2 gridModel'>");
				ui.push("<div class='griditem'>"+itemData+"</div>");
			ui.push("</li>");
			}
			if(muti.length>0||buttonsData.length>0){
			ui.push("<li class='gridModel3 gridModel'>");
				if(itemData.length>0||buttonsData.length>0){
				ui.push("<ul class='griditem'>");
					if(muti.length>0){
					ui.push("<li class='gridCheckbox'>"+muti+"</li>");
					}
					if(buttonsData.length>0){
					ui.push("<li class='gridbuttons'>"+buttonsData+"</li>");
					}
				ui.push("</ul>");
				}
			ui.push("</li>");
			}
		ui.push("</ul>");
		//ui.push("</div>");
		
		return ui.join("");
		
	},
	_addJSONData: function(data,t, rcnt, more, adjust) {
		var that = this,
			isPicgrid = !!(that.options.model == "card");
		var startReq = new Date();
		if(data) {
			if(that.options.treeANode === -1 && !that.options.scroll) {
				that.emptyRows(t,false, true);
				rcnt=1;
			} else { rcnt = rcnt > 1 ? rcnt :1; }
		} else { return; }

		var dReader, locid = "_id_", frd,
		locdata = (that.options.datatype != "local" && that.options.loadonce) || that.options.datatype == "jsonstring";
		if(locdata) { that.options.data = []; that.options._index = {}; that.options.localReader.id = locid;}
		that.options.reccount = 0;
		if(that.options.datatype == "local") {
			dReader =  that.options.localReader;
			frd= 'local';
		} else {
			dReader =  that.options.jsonReader;
			frd='json';
		}
		var self = this,ir=0,v,i,j,f=[],F,cur,gi=that.options.multiselect?1:0,si=that.options.subGrid?1:0,
			ni=that.options.rownumbers===true?1:0,len,drows,idn,rd={}, fpos, idr,
			rowData=[],orgRowData=[],buttonsData=[],
			cn=(that.options.altRows === true) ? " "+that.options.altclass:"",cn1,lp;
		if(gi==0){//multi 优先
			gi=that.options.singleselect?1:0;
		}
		that.options.page = $.grid.getAccessor(data,dReader.page) || 0;
		lp = $.grid.getAccessor(data,dReader.total);
		that.options.lastpage = lp === undefined ? 1 : lp;
		that.options.records = $.grid.getAccessor(data,dReader.records) || 0;
		that.options.total = $.grid.getAccessor(data,dReader.total) || 0;
		that.options.userData = $.grid.getAccessor(data,dReader.userData) || {};
		if(!dReader.repeatitems) {
			F = f = that._reader(frd);
		}
		if( that.options.keyName===false ) {
			idn = $.isFunction(dReader.id) ? dReader.id.call(that, data) : dReader.id; 
		} else {
			idn = that.options.keyName;
		}
		if(f.length>0 && !isNaN(idn)) {
			if (that.options.remapColumns && that.options.remapColumns.length) {
				idn = $.inArray(idn, that.options.remapColumns);
			}
			idn=f[idn];
		}
		drows = $.grid.getAccessor(data,dReader.root);
		if (!drows) { drows = []; }
		len = drows.length; i=0;
		if (len > 0 && that.options.page <= 0) { that.options.page = 1; }
		var rn = parseInt(that.options.rowNum,10),br=that.options.scroll?$.grid.randId():1, altr, selected=false, selr;
		if (adjust) { rn *= adjust+1; }
		if(that.options.datatype === "local" && !that.options.deselectAfterSort) {
			selected = true;
		}
		var afterInsRow = $.isFunction(that.options.afterInsertRow), grpdata=[], hiderow=false,groupingPrepare;
		if(that.options.grouping)  {
			hiderow = that.options.groupingView.groupCollapse === true;
			//groupingPrepare = $.grid.getMethod("groupingPrepare");
			groupingPrepare = this.groupingPrepare;
		}
		while (i<len) {
			cur = drows[i];
			idr = $.grid.getAccessor(cur,idn);// 行id
			if(idr === undefined) {
				idr = br+i;
				if(f.length===0){
					if(dReader.cell){
						var ccur = $.grid.getAccessor(cur,dReader.cell);
						idr = ccur !== undefined ? ccur[idn] || idr : idr;
						ccur=null;
					}
				}
			}
			idr  = that.options.idPrefix + idr;
			altr = rcnt === 1 ? 0 : rcnt;
			cn1 = (altr+i)%2 == 1 ? cn : '';
			if (selected) {
				if (that.options.multiselect) {
					selr = ($.inArray(idr, that.options.selarrrow) !== -1);
				} else {
					selr = (idr === that.options.selrow);
				}
			}
			var iStartTrTag = rowData.length;
			var iStartPicTag = orgRowData.length;
			
			rowData.push("");
			if( ni ) {// ni为行号
				rowData.push( that._addRowNum(0,i,that.options.page,that.options.rowNum) );
			//	orgRowData.push("rowNum");
			}
			if( gi ){//如果是多选
				if(that.options.singleselect){
					rowData.push( that._addSingle(idr,ni,i,selr) );
					buttonsData.push( that._addSingle(idr,ni,i,selr) );
				}else{
					rowData.push( that._addMulti(idr,ni,i,selr) );
					buttonsData.push( that._addMulti(idr,ni,i,selr) );
				}
			}
			if( si ) {
				rowData.push( $(that.element).grid("addSubGridCell",gi+ni,i+rcnt) );
				//orgRowData.push("SubGrid");
			}
			if (dReader.repeatitems) {
				if(dReader.cell) {cur = $.grid.getAccessor(cur,dReader.cell);}
				if (!F) { F=this._orderedCols(gi+si+ni); }
			}
			for (j=0;j<F.length;j++) {
				v = $.grid.getAccessor(cur,F[j]);
				rd[that.options.colModel[j+gi+si+ni].name] = v;
				rowData.push( this._addCell(idr,v,j+gi+si+ni,i+rcnt,cur, rd) );
			}
			if(that.options.model == "card"){
				orgRowData[iStartTrTag] = that.constructPanel(idr, hiderow, cn1, rd, cur);
				orgRowData.push(that._customPanel(rd,ni,buttonsData));
				orgRowData.push( "</li>" );
			}else{
				rowData[iStartTrTag] = that.constructTr(idr, hiderow, cn1, rd, cur, selr);
				rowData.push( "</tr>" );
			}
			
			if(that.options.grouping) {
				grpdata.push( rowData );
				if(!that.options.groupingView._locgr) {
					groupingPrepare.call(self, rd, i);
				}
				rowData = [];
			}
			if(locdata || that.options.treeGrid===true) {
				rd[locid] = idr;
				that.options.data.push(rd);
				that.options._index[idr] = that.options.data.length-1;
			}
			if(that.options.gridview === false ) {//一次构造一行
				//var customRowData = [];
				if(isPicgrid){
				//	$("#"+$.grid.coralID(that.options.id)+" .coral-pic").append(rowData.join(''));
					$("#"+$.grid.coralID(that.options.id)+" .coral-pic").append(orgRowData.join(''));
				}else{
					$("#"+$.grid.coralID(that.options.id)+" .coral-grid-btable tbody:first").append(rowData.join(''));
				}
				$(that).triggerHandler("gridAfterInsertRow", [idr, rd, cur]);
				if(afterInsRow) {that.options.afterInsertRow.call(that,idr,rd,cur);}
				rowData=[];//ari=0;
				orgRowData=[];
				buttonsData=[];
			}
			$.fn.afterFmatter.call(that);
			rd={};
			ir++;
			i++;
			if(ir==rn) { break; }
		}
		if(that.options.gridview === true ) {//一次全部构造
			fpos = that.options.treeANode > -1 ? that.options.treeANode: 0;
			if(that.options.grouping) {
				if(!locdata) {
					this.groupingRender(grpdata, that.options.colModel.length, that.options.page, rn);
					grpdata = null;
				}
			} else if(that.options.treeGrid === true && fpos > 0) {
				$(that.rows[fpos]).after(rowData.join(''));
			} else {
				$("#"+$.grid.coralID(that.options.id)+" tbody:first").append(rowData.join(''));
			}
		}
		if(that.options.subGrid === true ) {
			try { $(that.element).grid("addSubGrid",gi+ni);} catch (_){}
		}
		that.options.totaltime = new Date() - startReq;
		if(ir>0) {
			if(that.options.records===0) { that.options.records=len; }
		}
		rowData = null;
		if( that.options.treeGrid === true) {
			try {$(that.element).grid("setTreeNode", fpos+1, ir+fpos+1);} catch (e) {}
		}
		if(!that.options.treeGrid && !that.options.scroll&&!isPicgrid) {that.grid.rowsView.scrollTop = 0;}
		that.options.reccount=ir;
		that.options.treeANode = -1;
		if(that.options.userDataOnFooter) { $(that).grid("footerData","set",that.options.userData,true); }
		if(locdata && !that.options.orgdatatype){//modify for custom sort
			that.options.records = len;
			that.options.lastpage = Math.ceil(len/ rn);
		}
		if (!more) { that._updatepager(false,true); }
		if(locdata) {
			while (ir<len && drows[ir]) {
				cur = drows[ir];
				idr = $.grid.getAccessor(cur,idn);
				if(idr === undefined) {
					idr = br+ir;
					if(f.length===0){
						if(dReader.cell){
							var ccur2 = $.grid.getAccessor(cur,dReader.cell);
							idr = ccur2[idn] || idr;
							ccur2=null;
						}
					}
				}
				if(cur) {
					idr  = that.options.idPrefix + idr;
					if (dReader.repeatitems) {
						if(dReader.cell) {cur = $.grid.getAccessor(cur,dReader.cell);}
						if (!F) { F=that._orderedCols(gi+si+ni); }
					}

					for (j=0;j<F.length;j++) {
						v = $.grid.getAccessor(cur,F[j]);
						rd[that.options.colModel[j+gi+si+ni].name] = v;
					}
					rd[locid] = idr;
					if(that.options.grouping) {
						groupingPrepare.call(self, rd, ir );
					}
					that.options.data.push(rd);
					that.options._index[idr] = that.options.data.length-1;
					rd = {};
				}
				ir++;
			}
			if(that.options.grouping) {
				that.options.groupingView._locgr = true;
				this.groupingRender(grpdata, that.options.colModel.length, that.options.page, rn);
				grpdata = null;
			}
		}
	},
	_addLocalData: function() {
		var that = this;
		var st, fndsort=false, cmtypes={}, grtypes=[], grindexes=[], srcformat, sorttype, newformat;
		if(!$.isArray(that.options.data)) {
			return;
		}
		var grpview = that.options.grouping ? that.options.groupingView : false,lengrp, gin;
		$.each(that.options.colModel,function(){
			sorttype = this.sorttype || "text";
			if(sorttype == "date" || sorttype == "datetime") {
				if(this.formatter && typeof(this.formatter) === 'string' && this.formatter == 'date') {
					if(this.formatoptions && this.formatoptions.srcformat) {
						srcformat = this.formatoptions.srcformat;
					} else {
						srcformat = $.grid.formatter.date.srcformat;
					}
					if(this.formatoptions && this.formatoptions.newformat) {
						newformat = this.formatoptions.newformat;
					} else {
						newformat = $.grid.formatter.date.newformat;
					}
				} else {
					srcformat = newformat = this.datefmt || "Y-m-d";
				}
				cmtypes[this.name] = {"stype": sorttype, "srcfmt": srcformat,"newfmt":newformat};
			} else {
				cmtypes[this.name] = {"stype": sorttype, "srcfmt":'',"newfmt":''};
			}
			if(that.options.grouping) {
				for(gin =0, lengrp = grpview.groupField.length; gin< lengrp; gin++) {
					if( this.name === grpview.groupField[gin]) {
						var grindex = this.name;
						if (this.index) {
							grindex = this.index;
						}
						grtypes[gin] = cmtypes[grindex];
						grindexes[gin]= grindex;
					}
				}
			}
			if(!fndsort && (this.index == that.options.sortname || this.name == that.options.sortname)){
				st = this.name; // ???
				fndsort = true;
			}
		});
		if(that.options.treeGrid) {
			$(that.element).grid("sortTree", st, that.options.sortorder, cmtypes[st].stype, cmtypes[st].srcfmt);
			return;
		}
		var compareFnMap = {
			'eq':function(queryObj) {return queryObj.equals;},
			'ne':function(queryObj) {return queryObj.notEquals;},
			'lt':function(queryObj) {return queryObj.less;},
			'le':function(queryObj) {return queryObj.lessOrEquals;},
			'gt':function(queryObj) {return queryObj.greater;},
			'ge':function(queryObj) {return queryObj.greaterOrEquals;},
			'cn':function(queryObj) {return queryObj.contains;},
			'nc':function(queryObj,op) {return op === "OR" ? queryObj.orNot().contains : queryObj.andNot().contains;},
			'bw':function(queryObj) {return queryObj.startsWith;},
			'bn':function(queryObj,op) {return op === "OR" ? queryObj.orNot().startsWith : queryObj.andNot().startsWith;},
			'en':function(queryObj,op) {return op === "OR" ? queryObj.orNot().endsWith : queryObj.andNot().endsWith;},
			'ew':function(queryObj) {return queryObj.endsWith;},
			'ni':function(queryObj,op) {return op === "OR" ? queryObj.orNot().equals : queryObj.andNot().equals;},
			'in':function(queryObj) {return queryObj.equals;},
			'nu':function(queryObj) {return queryObj.isNull;},
			'nn':function(queryObj,op) {return op === "OR" ? queryObj.orNot().isNull : queryObj.andNot().isNull;}

		},
		query = $.grid.from(that.options.data);
		if (that.options.ignoreCase) { query = query.ignoreCase(); }
		function tojLinq ( group ) {
			var s = 0, index, gor, ror, opr, rule;
			if (group.groups !== undefined) {
				gor = group.groups.length && group.groupOp.toString().toUpperCase() === "OR";
				if (gor) {
					query.orBegin();
				}
				for (index = 0; index < group.groups.length; index++) {
					if (s > 0 && gor) {
						query.or();
					}
					try {
						tojLinq(group.groups[index]);
					} catch (e) {alert(e);}
					s++;
				}
				if (gor) {
					query.orEnd();
				}
			}
			if (group.rules !== undefined) {
				if(s>0) {
					var result = query.select();
					query = $.grid.from( result);
					if (that.options.ignoreCase) { query = query.ignoreCase(); } 
				}
				try{
					ror = group.rules.length && group.groupOp.toString().toUpperCase() === "OR";
					if (ror) {
						query.orBegin();
					}
					for (index = 0; index < group.rules.length; index++) {
						rule = group.rules[index];
						opr = group.groupOp.toString().toUpperCase();
						if (compareFnMap[rule.op] && rule.field ) {
							if(s > 0 && opr && opr === "OR") {
								query = query.or();
							}
							query = compareFnMap[rule.op](query, opr)(rule.field, rule.data, cmtypes[rule.field]);
						}
						s++;
					}
					if (ror) {
						query.orEnd();
					}
				} catch (g) {alert(g);}
			}
		}

		if (that.options.search === true) {
			var srules = that.options.postData.filters;
			if(srules) {
				if(typeof srules == "string") { srules = $.grid.parse(srules);}
				tojLinq( srules );
			} else {
				try {
					query = compareFnMap[that.options.postData.searchOper](query)(that.options.postData.searchField, that.options.postData.searchString,cmtypes[that.options.postData.searchField]);
				} catch (se){}
			}
		}
		if(that.options.grouping) {
			for(gin=0; gin<lengrp;gin++) {
				query.orderBy(grindexes[gin],grpview.groupOrder[gin],grtypes[gin].stype, grtypes[gin].srcfmt);
			}
		}
		if (st && that.options.sortorder && fndsort) {
			if(that.options.sortorder.toUpperCase() == "DESC") {
				query.orderBy(that.options.sortname, "d", cmtypes[st].stype, cmtypes[st].srcfmt);
			} else {
				query.orderBy(that.options.sortname, "a", cmtypes[st].stype, cmtypes[st].srcfmt);
			}
		}
		
		var queryResults = query.select(), 
			ret = that._trigger("afterFilter",null,[{"queryResults":query.select(),"getData":true}])['result'];
		
		
		if(ret)queryResults = ret;
		var recordsperpage = parseInt(that.options.rowNum,10),
		total = queryResults.length,
		page = parseInt(that.options.page,10),
		totalpages = Math.ceil(total / recordsperpage),
		retresult = {};
		if((that.options.search || that.options.resetsearch) && that.options.grouping && that.options.groupingView._locgr) {
			that.options.groupingView.groups =[];
			var j, grPrepare = that.groupingPrepare, key, udc;
			if(that.options.footerrow && that.options.userDataOnFooter) {
				for (key in that.options.userData) {
					if(that.options.userData.hasOwnProperty(key)) {
						that.options.userData[key] = 0;
					}
				}
				udc = true;
			}
			for(j=0; j<total; j++) {
				if(udc) {
					for(key in that.options.userData){
						that.options.userData[key] += parseFloat(queryResults[j][key] || 0);
					}
				}
				grPrepare.call($(this),queryResults[j],j, recordsperpage );
			}
		}
		queryResults = queryResults.slice( (page-1)*recordsperpage , page*recordsperpage );
		query = null;
		cmtypes = null;
		if (that.options.orgdatatype) {//modify for custom sort
			retresult[that.options.localReader.total] = that.options.lastpage;
			retresult[that.options.localReader.page] = that.options.orgpage;
			retresult[that.options.localReader.records] = that.options.records;
		} else {
			retresult[that.options.localReader.total] = totalpages;
			retresult[that.options.localReader.page] = page;
			retresult[that.options.localReader.records] = total;
		}
		retresult[that.options.localReader.root] = queryResults;
		retresult[that.options.localReader.userData] = that.options.userData;
		queryResults = null;
		return  retresult;
	},
	getColProp : function(colname){
		var ret ={}, that = this;
		if ( !that.grid ) { return false; }
		var cM = that.options.colModel;
		for ( var i =0;i<cM.length;i++ ) {
			if ( cM[i].name == colname ) {
				ret = cM[i];
				break;
			}
		}
		return ret;
	},
	setColProp : function(colname, obj){
		//do not set width will not work
		if ( this.grid ) {
			if ( obj ) {
				var cM = this.options.colModel;
				for ( var i =0;i<cM.length;i++ ) {
					if ( cM[i].name == colname ) {
						$.extend(this.options.colModel[i],obj);
						break;
					}
				}
			}
		}
	},
	destroyGroupHeader: function(nullHeader){
		if(typeof(nullHeader) == 'undefined') {
			nullHeader = true;
		}
		var that = this, $tr, i, l, headers, $th, $resizing, grid = that.grid,
		thead = $("table.coral-grid-htable thead", grid.columnsView), cm = that.options.colModel, hc;
		if(!grid) { return; }

		$(this.element).unbind('.setGroupHeaders');
		$tr = $("<tr>", {role: "rowheader"}).addClass("coral-grid-labels");
		headers = grid.headers;
		for (i = 0, l = headers.length; i < l; i++) {
			hc = cm[i].hidden ? "none" : "";
			$th = $(headers[i].el)
				.width(headers[i].width)
				.css('display',hc);
			try {
				$th.removeAttr("rowSpan");
			} catch (rs) {
				//IE 6/7
				$th.attr("rowSpan",1);
			}
			$tr.append($th);
			$resizing = $th.children("span.coral-grid-resize");
			if ($resizing.length>0) {// resizable column
				$resizing[0].style.height = "";
			}
			$th.children("div")[0].style.top = "";
		}
		$(thead).children('tr.coral-grid-labels').remove();
		$(thead).prepend($tr);

		if(nullHeader === true) {
			$(that.element).grid('option',{ 'groupHeader': null});
		}
	},
	setGroupHeaders: function ( o ) {
		o = $.extend({
			useColSpanStyle :  false,
			groupHeaders: []
		},o  || {});
		/*return this.each(function(){*/
		this.options.groupHeader = o;
		var that = this,
		i, cmi, skip = 0, $tr, $colHeader, th, $th, thStyle,
		iCol,
		cghi,
		//startColumnName,
		numberOfColumns,
		titleText,
		cVisibleColumns,
		colModel = that.options.colModel,
		cml = colModel.length,
		ths = that.grid.headers,
		$htable = $("table.coral-grid-htable", that.grid.columnsView),
		$trLabels = $htable.children("thead").children("tr.coral-grid-labels:last").addClass("jqg-second-row-header"),
		$thead = $htable.children("thead"),
		$theadInTable,
		$firstHeaderRow = $htable.find(".jqg-first-row-header");
		if($firstHeaderRow[0] === undefined) {
			$firstHeaderRow = $('<tr>', {role: "row", "aria-hidden": "true"}).addClass("jqg-first-row-header").css("height", "auto");
		} else {
			$firstHeaderRow.empty();
		}
		var $firstRow,
		inColumnHeader = function (text, columnHeaders) {
			var i = 0, length = columnHeaders.length;
			for (; i < length; i++) {
				if (columnHeaders[i].startColumnName === text) {
					return i;
				}
			}
			return -1;
		};
		
		that.element.find(".coral-grid-columns-view>table").prepend($thead);
		$tr = $('<tr>', {role: "rowheader"}).addClass("coral-gird-labels jqg-third-row-header");
		for (i = 0; i < cml; i++) {
			th = ths[i].el;
			$th = $(th);
			cmi = colModel[i];
			// build the next cell for the first header row
			thStyle = { height: '0px', width: ths[i].width + 'px', display: (cmi.hidden ? 'none' : '')};
			$("<th>", {role: 'gridcell'}).css(thStyle).addClass("coral-first-th-"+that.options.direction).appendTo($firstHeaderRow);

			th.style.width = ""; // remove unneeded style
			iCol = inColumnHeader(cmi.name, o.groupHeaders);
			if (iCol >= 0) {
				cghi = o.groupHeaders[iCol];
				numberOfColumns = cghi.numberOfColumns;
				titleText = cghi.titleText;

				// caclulate the number of visible columns from the next numberOfColumns columns
				for (cVisibleColumns = 0, iCol = 0; iCol < numberOfColumns && (i + iCol < cml); iCol++) {
					if (!colModel[i + iCol].hidden) {
						cVisibleColumns++;
					}
				}

				// The next numberOfColumns headers will be moved in the next row
				// in the current row will be placed the new column header with the titleText.
				// The text will be over the cVisibleColumns columns
				$colHeader = $('<th>').attr({role: "columnheader"})
					.addClass("coral-state-default coral-th-column-header coral-th-"+that.options.direction)
					.css({/*'height':'22px', */'border-top': '0px none'})
					.html(titleText);
				if(cVisibleColumns > 0) {
					$colHeader.attr("colspan", String(cVisibleColumns));
				}
				if (that.options.headertitles) {
					$colHeader.attr("title", $colHeader.text());
				}
				// hide if not a visible cols
				if( cVisibleColumns === 0) {
					$colHeader.hide();
				}

				$th.before($colHeader); // insert new column header before the current
				$tr.append(th);         // move the current header in the next row

				// set the coumter of headers which will be moved in the next row
				skip = numberOfColumns - 1;
			} else {
				if (skip === 0) {
					if (o.useColSpanStyle) {
						// expand the header height to two rows
						$th.attr("rowspan", "2");
					} else {
						$('<th>', {role: "columnheader"})
							.addClass("coral-state-default coral-th-column-header coral-th-"+that.options.direction)
							.css({"display": cmi.hidden ? 'none' : '', 'border-top': '0px none'})
							.insertBefore($th);
						$tr.append(th);
					}
				} else {
					// move the header to the next row
					//$th.css({"padding-top": "2px", height: "19px"});
					$tr.append(th);
					skip--;
				}
			}
		}
		$theadInTable = $(that.element).find(".coral-grid-htable").children("thead");
		$theadInTable.prepend($firstHeaderRow);
		$tr.insertAfter($trLabels);
		$htable.append($theadInTable);

		if (o.useColSpanStyle) {
			// Increase the height of resizing span of visible headers
			$htable.find("span.coral-gird-resize").each(function () {
				var $parent = $(this).parent();
				if ($parent.is(":visible")) {
					this.style.cssText = 'height: ' + $parent.height() + 'px !important; cursor: col-resize;';
				}
			});

			// Set position of the sortable div (the main lable)
			// with the column header text to the middle of the cell.
			// One should not do this for hidden headers.
			$htable.find("div.coral-gird-sortable").each(function () {
				var $that = $(this), $parent = $that.parent();
				if ($parent.is(":visible") && $parent.is(":has(span.coral-gird-resize)")) {
					$that.css('top', ($parent.height() - $that.outerHeight()) / 2 + 'px');
				}
			});
		}

		$firstRow = $theadInTable.find("tr.jqg-first-row-header");
		$(that.element).bind('gridonresizestop.setGroupHeaders', function (e, nw, idx) {
			$firstRow.find('th').eq(idx).width(nw);
		});
		/*});	*/
	},
	getGridParam : function(pName) {
		var that = this;
		if (!that || !that.grid) {return;}
		if (!pName) { return that.p; }
		else {return typeof(that.options[pName]) != "undefined" ? that.options[pName] : null;}
	},
	setGridParam : function (newParams){
		//return this.each(function(){
			if (this.grid && typeof(newParams) === 'object') {$.extend(true,this.options,newParams);}
		//});
	},
	_setOption: function(key, value) {
		var that = this,
			options = this.options;
		if (this.grid) {$.extend(true,options[key],value);}
		if(key=="height"){
			that._setGridHeight(value);
			that._hasScrollOffset();
		}
		
		if(key=="width"){
			that._setGridWidth(value);
			that._hasScrollOffset();
		}
		if(key=="model"){
			if(value == "grid"){
				that.pic.hide();
				that.gridRows.show();
				that.gridColumns.show();
			}else if(value == "card"){
				that.gridRows.hide();
				that.gridColumns.hide();
				that.pic.show();
			}
		}
		
		this._super(key, value );
	},
	// 改变列表高度的时候判断是否应该为滚动条留出位置
	_hasScrollOffset: function(){
		var that = this,
			grid = this.grid;
		if(grid.rowsView.style.overflow!="hidden"&&grid.rowsView.scroll!="no"&&
				grid.rowsView.scrollHeight>grid.rowsView.offsetHeight){
			$(grid.columnsView).css("padding-right", that.options.scrollOffset+"px");
			return true;
		}else { 
			$(grid.columnsView).css("padding-right","");
			$(grid.rowsView).css("padding-right","");
			return false;
		}
	},
	_hasHorizontalScrollBar: function(){
		var that = this,
			grid = this.grid;
		var fw = that.rightFrozenWidth;
		if(grid.rowsView.style.overflow!="hidden"&&grid.rowsView.scroll!="no"&&
				(grid.rowsView.scrollWidth - grid.rowsView.clientWidth)>0){
			return true;
		}else { 
			return false;
		}
	},
	_setGridWidth : function(nwidth, shrink) {
		// 如果在beforePopulate里面设置了显示隐藏列，那么this.rows还没有生成，宽度统一由grid初始化后去处理。
		if ( !this.grid || nwidth == 0 || !this.rows ) {return;}
		var that = this, 
			grid = this.grid,
			cw,// column width
			initwidth = 0, 
			brd=$.support.boxSizing? 0: that.options.cellLayout, 
			//brd=$.browser.webkit||$.browser.safari? 0: that.options.cellLayout, 
			lvc, // the last number of visible column
			vc=0, // the number of visible column
			hs=false, // has scroll
			scw=that.options.scrollOffset,  // scrollbar width
			aw, // actual width
			gw=0,// grid width
			cl = 0,// the length of column (include the checkbox column and rownumber column)
			cr;
		if(typeof shrink != 'boolean') {
			shrink=that.options.shrinkToFit;
		}
		if(isNaN(nwidth)) {return;}
		else { nwidth = parseInt(nwidth,10); that.grid.width = that.options.width = nwidth;}
		/*if(that.options.pager ) {$(that.options.pager).css("width",nwidth+"px");}
		if(that.options.toppager ) {$(that.options.toppager).css("width",nwidth+"px");}
		if(that.options.toolbar[0] === true){
			$(that.grid.uDiv).css("width",nwidth+"px");
			if(that.options.toolbar[1]=="both") {$(that.grid.ubDiv).css("width",nwidth+"px");}
		}*/
		//if(that.options.footerrow) { $(that.grid.sDiv).css("width",nwidth+"px"); }
		if(shrink ===false && that.options.forceFit === true) {that.options.forceFit=false;}
		$.each(that.options.colModel, function() {
			if((this.hidden === false||typeof(this.hidden)=='undefined')){
				cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
				initwidth += cw+brd;
				if(this.fixed) {
					gw += cw+brd;
				} else {
					vc++;
				}
				cl++;
			}
		});
		var useMinWidth = false;
		if ( that.options.minWidth && initwidth > $(that.element).width() ) {
			useMinWidth = true;
		}
		if(shrink===true || useMinWidth) {
			//if ( useMinWidth ) {
				if(vc  === 0) { return; }
				that.options.tblwidth = initwidth;
				aw = nwidth-brd*vc-gw;
				if(!isNaN(that.options.height)) {
					if($(that.grid.rowsView)[0].clientHeight < $(that.grid.rowsView)[0].scrollHeight || that.rows.length === 1){
						hs = true;
						aw -= scw;
					}
				}
				initwidth =0;
				var cle = that.grid.cols.length >0;
				$.each(that.options.colModel, function(i) {
					if((this.hidden === false||typeof(this.hidden)=='undefined') && !this.fixed){
						cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
						// 如果设置了最小宽度后，则不进行缩放，cw 按照widthOrg来计算
						if ( !useMinWidth ) {
							// 缩放计算公式
							cw = Math.round(aw*cw/(that.options.tblwidth-brd*vc-gw));
						}
						if (cw < 0) { return; }
						this.width =cw;
						initwidth += cw;
						that.grid.headers[i].width=cw;
						that.grid.headers[i].el.style.width=cw+"px";
						//处理分组的时候列头的宽度
						var groupHeader = $("tr.jqg-first-row-header>th:eq("+i+")", $('table:first',that.grid.columnsView));
						if(groupHeader.length>0){groupHeader[0].style.width = cw+"px";}
						
						if(that.options.footerrow) { that.grid.footers[i].style.width = cw+"px"; }
						if(cle) { that.grid.cols[i].style.width = (cw)+"px"; }
						lvc = i;
					}
				});
				
				if (!lvc) { return; }
				
				cr =0;
				// 设置最后一列的列模型宽度
				if ( !useMinWidth ) {
					if (hs) {
						if(nwidth-gw-(initwidth+brd*vc) !== scw){
							cr = nwidth-gw-(initwidth+brd*vc)-scw;
						}
					} else if( Math.abs(nwidth-gw-(initwidth+brd*vc)) !== 1) {
						cr = nwidth-gw-(initwidth+brd*vc);
					}
					that.options.colModel[lvc].width += (cr - 1);//add for chrome
				} else {
					cr = that.options.colModel[lvc].width;
				}
				that.options.tblwidth = initwidth+cr+brd*vc+gw;
				if(that.options.tblwidth > nwidth) {
					var delta = that.options.tblwidth - parseInt(nwidth,10);
					that.options.tblwidth = nwidth;
					cw = that.options.colModel[lvc].width = that.options.colModel[lvc].width-delta;
				} else {
					cw= that.options.colModel[lvc].width;
				}
				that.grid.headers[lvc].width = cw;
				that.grid.headers[lvc].el.style.width=cw+"px";
				if(cle) { that.grid.cols[lvc].style.width = cw+"px"; }
				/*if(that.options.footerrow) {
				that.grid.footers[lvc].style.width = cw+"px";
			}*/
			//}
		}
		$(grid.rowsView).width(nwidth);
		$(grid.columnsView).width(nwidth);
		if(that.options.tblwidth) {
			$('table:first',grid.rowsView).css("width",that.options.tblwidth+"px");//设置表格行宽度
			$('table:first',grid.columnsView).css("width",that.options.tblwidth+"px");//设置表格列宽度
			that.grid.columnsView.scrollLeft = that.grid.rowsView.scrollLeft;
			if(that.options.footerrow) {
				$('table:first',that.grid.sDiv).css("width",that.options.tblwidth+"px");
			}
		}
	},
	_setGridHeight : function (nh) {
		var that = this,
			grid= that.grid,
			isPicgrid = !!(that.options.model == "card");
		if(!that.grid) {return;}
		var rowsView = $(that.grid.rowsView);
		//rowsView.css({height: nh+(isNaN(nh)?"":"px")});
		if(that.options.frozenColumns === true){
			//follow the original set height to use 16, better scrollbar width detection
			$('#'+$.grid.coralID(that.options.id)+"_frozen").parent().height(rowsView.height() - 16);
		}
		// 设置表格高度
		var tblHeight = "auto";
		if(String(nh).toLowerCase() === "auto") { 
			nh = "auto";
			tblHeight = "auto";
			
			that.pic.css({ height: "auto"});//设置大图列表行高度
			rowsView.css({ height: "auto"});//设置表格行高度
		}else{//$(grid.columnsView).height() 隐藏的时候为0
			tblHeight = nh - that.element.find(".coral-grid-pager").height() 
				- $(grid.caption).height();
			that.pic.css({ height: tblHeight+(isNaN(tblHeight)?"":"px")});//设置大图列表行高度
			tblHeight = nh - $(grid.columnsView).outerHeight(true) 
				- that.element.find(".coral-grid-pager").outerHeight(true)
				- $(grid.caption).height();
			rowsView.css({ height: tblHeight+(isNaN(tblHeight)?"":"px")});//设置表格行高度
		}
		
		that.options.height = nh;
		if (that.options.scroll) { that.grid.populateVisible(); }
	},
	getDataIDs : function () {
		var ids=[], i=0, len, j=0;
		//this.each(function(){
			len = this.rows.length;
			if(len && len>0){
				while(i<len) {
					if($(this.rows[i]).hasClass('jqgrow')) {
						ids[j] = this.rows[i].id;
						j++;
					}
					i++;
				}
			}
		//});
		return ids;
	},
	setRowData : function(rowid, data, cssp) {
		var that = this, nm, success=true, title;
		
		if(!this.grid) {return false;}
		var t = this, vl, ind, cp = typeof cssp, lcdata={};
		ind = t.rows.namedItem(rowid);
		if(!ind) { return false; }
		if( data ) {
			try {
				$(this.options.colModel).each(function(i){
					nm = this.name;
					if( data[nm] !== undefined) {
						/*var _fn = $.coral.toFunction(this.formatter);
						if($.isFunction(_fn)){
							lcdata[nm] = _fn.apply( that.element[0]);
						}else{
						}*/
						lcdata[nm] = this.formatter && typeof(this.formatter) === 'string' && this.formatter == 'date' ? $.unformat.date.call(t,data[nm],this) : data[nm];
						vl = t._formatter( rowid, data[nm], i, data, 'edit');
						title = this.title ? {"title":$.grid.stripHtml(vl)} : {};
						if(t.options.treeGrid===true && nm == t.options.ExpandColumn) {
							$("td:eq("+i+") > span:first",ind).html(vl).attr(title);
						} else {
							$("td:eq("+i+")",ind).html(vl).attr(title);
						}
						$.fn.afterFmatter.call(that);
					}
				});
				if(t.options.datatype == 'local') {
					var id = $.grid.stripPref(t.options.idPrefix, rowid),
					pos = t.options._index[id];
					if(t.options.treeGrid) {
						for(var key in t.options.treeReader ){
							if(lcdata.hasOwnProperty(t.options.treeReader[key])) {
								delete lcdata[t.options.treeReader[key]];
							}
						}
					}
					if(typeof(pos) != 'undefined') {
						t.options.data[pos] = $.extend(true, t.options.data[pos], lcdata);
					}
					lcdata = null;
				}
			} catch (e) {
				success = false;
			}
		}
		if(success) {
			if(cp === 'string') {$(ind).addClass(cssp);} else if(cp === 'object') {$(ind).css(cssp);}
			t._trigger("aftercomplete");
		}
		
		return success;
	},
	delRowData : function(rowid) {
		var success = false, rowInd, ia, ri;
		var that = this;
		var isPicgrid = !!(that.options.model == "card");
		if ( isPicgrid ) {
			rowInd = that.pic.children("#"+ rowid)[0];
			if(!rowInd) {return false;}
			else {
				//ri = rowInd.rowIndex;
				$(rowInd).remove();
				that.options.records--;
				that.options.reccount--;
				that._updatepager(true,false);
				success=true;
				if(that.options.multiselect) {
					ia = $.inArray(rowid,that.options.selarrrow);
					if(ia != -1) { that.options.selarrrow.splice(ia,1);}
				}
				if(rowid == that.options.selrow) {that.options.selrow=null;}
			}
			if(that.options.datatype == 'local') {
				var id = $.grid.stripPref(that.options.idPrefix, rowid),
				pos = that.options._index[id];
				if(typeof(pos) != 'undefined') {
					that.options.data.splice(pos,1);
					that.refreshIndex();
				}
			}
		} else {
			rowInd = that.rows.namedItem(rowid);
			if(!rowInd) {return false;}
			else {
				ri = rowInd.rowIndex;
				$(rowInd).remove();
				that.options.records--;
				that.options.reccount--;
				that._updatepager(true,false);
				success=true;
				if(that.options.multiselect) {
					ia = $.inArray(rowid,that.options.selarrrow);
					if(ia != -1) { that.options.selarrrow.splice(ia,1);}
				}
				if(rowid == that.options.selrow) {that.options.selrow=null;}
				if(rowid == that.options.editrow) {
					that.options.editrow=null;
					that.rowEditButtons.remove();
				}
				var sRowArr = $.each( that.options.savedRow, function( i, sRow ) {
					// TODO: 是否有错误？本地和远程数据的判断
					if( sRow.id == rowid ) {
						ia = i;
						return true;
					}
				});
				if(sRowArr.length) {
					if(ia != -1) { that.options.savedRow.splice(ia,1);}
				}
			}
			if(that.options.datatype == 'local') {
				var id = $.grid.stripPref(that.options.idPrefix, rowid),
				pos = that.options._index[id];
				if(typeof(pos) != 'undefined') {
					that.options.data.splice(pos,1);
					that.refreshIndex();
				}
			}
			if( that.options.altRows === true && success ) {
				var cn = that.options.altclass;
				$(that.rows).each(function(i){
					if(i % 2 ==1) { $(this).addClass(cn); }
					else { $(this).removeClass(cn); }
				});
			}
			// 如果已经删除完则取消全选框
			if (!that.getDataIDs().length) {
				that._cancelCheckAll();
			}
			if (this.options.frozenColumns) {
				this._setFrozenHeight();
			}
			return success;
		}		
	},
	/**
	 * 若存在选框，则将之取消选中
	 */
	_cancelCheckAll: function() {
		var that = this;
		
		if (that.options.multiselect) {
			$('#cb_'+$.grid.coralID(that.options.id),that.grid.columnsView)[that.options.useProp ? 'prop' : 'attr']("checked", false);
		}
	},
	resetSelection : function( rowid ){
		var t = this, ind, sr, fid;
		if( t.options.frozenColumns === true ) {
			fid = t.options.id+"_frozen";
		}
		if(typeof(rowid) !== "undefined" ) {
			sr = rowid === t.options.selrow ? t.options.selrow : rowid;
			$("#"+$.grid.coralID(t.options.id)+" tbody:first tr#"+$.grid.coralID(sr)).removeClass("coral-state-highlight").attr("aria-selected","false");
			if (fid) { $("#"+$.grid.coralID(sr), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight"); }
			if(t.options.multiselect) {
				$("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(sr), "#"+$.grid.coralID(t.options.id))[t.options.useProp ? 'prop': 'attr']("checked",false);
				if(fid) { $("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(sr), "#"+$.grid.coralID(fid))[t.options.useProp ? 'prop': 'attr']("checked",false); }
				t._setHeadCheckBox( false);
			}
			sr = null;
		} else if(!t.options.multiselect) {
			if(t.options.selrow) {
				$("#"+$.grid.coralID(t.options.id)+" tbody:first tr#"+$.grid.coralID(t.options.selrow)).removeClass("coral-state-highlight").attr("aria-selected","false");
				if(fid) { $("#"+$.grid.coralID(t.options.selrow), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight"); }
				t.options.selrow = null;
			}
		} else {
			$(t.options.selarrrow).each(function(i,n){
				ind = t.rows.namedItem(n);
				$(ind).removeClass("coral-state-highlight").attr("aria-selected","false");
				$("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(n))[t.options.useProp ? 'prop': 'attr']("checked",false);
				if(fid) { 
					$("#"+$.grid.coralID(n), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight"); 
					$("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(n), "#"+$.grid.coralID(fid))[t.options.useProp ? 'prop': 'attr']("checked",false);
				}
			});
			t._setHeadCheckBox( false );
			t.options.selarrrow = [];
		}
		if(t.options.cellEdit === true) {
			if(parseInt(t.options.iCol,10)>=0  && parseInt(t.options.iRow,10)>=0) {
				$("td:eq("+t.options.iCol+")",t.rows[t.options.iRow]).removeClass("edit-cell coral-state-highlight");
				$(t.rows[t.options.iRow]).removeClass("selected-row coral-state-hover");
			}
		}
		t.options.savedRow = [];
	},
	getRowData : function( rowid ) {
		var res = {}, resall, getall=false, len, j=0;
		var that = this,nm,ind;
		var isPicgrid = !!(that.options.model == "card");
		if( isPicgrid ) {
			if(typeof(rowid) == 'undefined') {
				getall = true;
				resall = [];
				len = that.pic.children("li").length;
			} else {
				ind = that.pic.children("#"+ rowid)[0];
				if(!ind) { return res; }
				len = 2;
			}
			var localKey = "_id_";
			while(j<len){
				if(getall) { ind = that.pic.children("li")[j]; }
				if( $(ind).hasClass('gridPanel') ) {
					for ( var k = 0; k < that.options.data.length; k++ ){
						if ( that.options.data[k][localKey] == ind.id ) {
							res = that.options.data[k];
						}
					}
					if(getall) { resall.push(res); res={}; }
				}
				j++;
			}
		} else {
			if(typeof(rowid) == 'undefined') {
				getall = true;
				resall = [];
				len = that.rows.length;
			} else {
				ind = that.rows.namedItem(rowid);
				if(!ind) { return res; }
				len = 2;
			}
			while(j<len){
				if(getall) { ind = that.rows[j]; }
				if( $(ind).hasClass('jqgrow') ) {
					$('td[role="gridcell"]',ind).each( function(i) {
						nm = that.options.colModel[i].name;
						if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
							if(that.options.treeGrid===true && nm == that.options.ExpandColumn) {
								res[nm] = $.grid.htmlDecode($("span:first",this).html());
							} else {
								try {
									res[nm] = $.unformat.call(that,this,{rowId:ind.id, colModel:that.options.colModel[i]},i,"get");								
								} catch (e){
									res[nm] = $.grid.htmlDecode($(this).html());
								}
							}
						}
					});
					if(getall) { resall.push(res); res={}; }
				}
				j++;
			}
		}
		return resall ? resall: res;
	},
	/**
	 * rowid: 行号
	 * rdata: 行数据
	 * pos: 插入数据的位置
	 * src: pos为after的目标行id
	 * */
	addRowData : function(rowid,rdata,pos,src) {
		if(!pos) {pos = "last";}
		var success = false, nm, row, picRow, buttonsData, gi, si, ni,sind, i, v, prp="", aradd, cnm, cn, data, cm, id;
		if(rdata) {
			if($.isArray(rdata)) {
				aradd=true;
				//pos = "last";
				cnm = rowid;
			} else {
				rdata = [rdata];
				aradd = false;
			}
			//this.each(function() {
			var t = this, datalen = rdata.length;
			var isPicgrid = !!(t.options.model == "card");
			ni = t.options.rownumbers===true ? 1 :0;
			gi = t.options.multiselect ===true ? 1 :(t.options.singleselect === true ? 1 :0);
			si = t.options.subGrid===true ? 1 :0;
			/*if(gi == 0){
				gi = t.options.singleselect === true ? 1 :0;
			}*/
			if(!aradd) {
				if(typeof(rowid) != 'undefined') { rowid = rowid+"";}
				else {
					rowid = $.grid.randId();
					if(t.options.keyName !== false) {
						cnm = t.options.keyName;
						if(typeof rdata[0][cnm] != "undefined") { rowid = rdata[0][cnm]; }
					}
				}
			}
			cn = t.options.altclass;
			var k = 0, cna ="", lcdata = {},
			air = $.isFunction(t.options.afterInsertRow) ? true : false;
			while(k < datalen) {
				data = rdata[k];
				row=[];
				buttonsData = [];
				picRow = [];
				if(aradd) {
					try {rowid = data[cnm];}
					catch (e) {rowid = $.grid.randId();}
					cna = t.options.altRows === true ?  (t.rows.length-1)%2 === 0 ? cn : "" : "";
				}
				cna += " new-row ";
				id = rowid;
				rowid  = t.options.idPrefix + rowid;
				if(ni){
					prp = t._formatCol(0,1,'',null,rowid, true);
					row[row.length] = "<td role=\"gridcell\" aria-describedby=\""+t.options.id+"_rn\" class=\"coral-state-default grid-rownum\" "+prp+">0</td>";
				}
				if(gi) {
					if(this.options.singleselect){
						v = "<input role=\"radio\" type=\"radio\""+" id=\"jqg_"+t.options.id+"_"+rowid+"\" name=\"jqg_"+t.options.id+"\" class=\"cbox\"/>";
					}else{
						v = "<input role=\"checkbox\" type=\"checkbox\""+" id=\"jqg_"+t.options.id+"_"+rowid+"\" name=\"jqg_"+t.options.id+"_"+rowid+"\" class=\"cbox\"/>";
					}
					prp = t._formatCol(ni,1,'', null, rowid, true);
					row[row.length] = "<td role=\"gridcell\" aria-describedby=\""+t.options.id+"_cb\" "+prp+">"+v+"</td>";
					buttonsData.push(v);
				}
				if(si) {
					row[row.length] = $(t).grid("addSubGridCell",gi+ni,1);
				}
				
				for(i = gi+si+ni; i < t.options.colModel.length;i++){
					cm = t.options.colModel[i];
					nm = cm.name;
					lcdata[nm] = cm.formatter && typeof(cm.formatter) === 'string' && cm.formatter == 'date' ? $.unformat.date.call(t,data[nm],cm) : data[nm];
					v = t._formatter( rowid, $.grid.getAccessor(data,nm), i, data, 'edit');
					prp = t._formatCol(i,1,v, data, rowid, true);
					row[row.length] = "<td role=\"gridcell\" aria-describedby=\""+t.options.id+"_"+nm+"\" "+prp+">"+v+"</td>";
				}
				if(isPicgrid){
					picRow.unshift( t.constructPanel( rowid, false, cna, lcdata, lcdata ) );
					picRow.push(t._customPanel(lcdata,ni,buttonsData));
					picRow.push( "</li>" );
				}else{
					row.unshift( t.constructTr( rowid, false, cna, lcdata, lcdata ,false) );
					row[row.length] = "</tr>";
				}
				if(isPicgrid){
					$("#"+$.grid.coralID(t.options.id)+" .coral-pic").append(picRow.join(''));
				}else{
					if(t.rows.length === 0){
						$("table:first",t.grid.rowsView).append(row.join(''));
					} else {
						switch (pos) {
						case 'last':
							$(t.rows[t.rows.length-1]).after(row.join(''));
							sind = t.rows.length-1;
							break;
						case 'first':
							$(t.rows[0]).after(row.join(''));
							sind = 1;
							break;
						case 'after':
							sind = t.rows.namedItem(src);
							if (sind) {
								if($(t.rows[sind.rowIndex+1]).hasClass("coral-subgrid")) { $(t.rows[sind.rowIndex+1]).after(row); }
								else { $(sind).after(row.join('')); }
							}
							sind++;
							break;
						case 'before':
							sind = t.rows.namedItem(src);
							if(sind) {$(sind).before(row.join(''));sind=sind.rowIndex;}
							sind--;
							break;
						}
					}
				}
				if(t.options.subGrid===true) {
					$(t).grid("addSubGrid",gi+ni, sind);
				}
				t.options.records++;
				t.options.reccount++;
				$(t).triggerHandler("gridAfterInsertRow", [rowid,data,data]);
				if(air) { t.options.afterInsertRow.call(t,rowid,data,data); }
				k++;
				if(t.options.datatype == 'local') {
					lcdata[t.options.localReader.id] = id;
					t.options._index[id] = t.options.data.length;
					t.options.data.push(lcdata);
					lcdata = {};
				}
			}
			if( t.options.altRows === true && !aradd) {
				if (pos == "last") {
					if ((t.rows.length-1)%2 == 1)  {$(t.rows[t.rows.length-1]).addClass(cn);}
				} else {
					$(t.rows).each(function(i){
						if(i % 2 ==1) { $(this).addClass(cn); }
						else { $(this).removeClass(cn); }
					});
				}
			}
			t._updatepager(true,true);
			success = true;
			$("#noRecordsTips_"+$.grid.coralID(t.options.id)).hide();
			$.fn.afterFmatter.call(t);
			//});
		}
		if (this.options.frozenColumns) {
			this._setFrozenHeight();
		}
		return success;
	},
	clearGridData : function(clearfooter) {
		var that = this;
		var isPicgrid = !!(that.options.model == "card");
		if(!that.grid) {return;}
		if(typeof clearfooter != 'boolean') { clearfooter = false; }
		if(isPicgrid){
			$("#"+$.grid.coralID(that.options.id)+" .coral-pic").empty();
		}else{
			if(that.options.deepempty) {$("#"+$.grid.coralID(that.options.id)+" tbody:first tr:gt(0)").remove();}
			else {
				var trf = $(" tbody:first tr:first",that.element)[0];
				$(" tbody:first",that.element).empty().append(trf);
			}
		}
		
		if(that.options.footerrow && clearfooter) { $(".coral-grid-ftable td",that.grid.sDiv).html("&#160;"); }
		that.options.selrow = null; that.options.selarrrow= []; that.options.savedRow = [];
		that.options.records = 0;that.options.page=1;that.options.lastpage=0;that.options.reccount=0;
		that.options.data = []; that.options._index = {};
		that._updatepager(true,false);
		
		that._cancelCheckAll();
	},
	sortableRows : function () {
		var opts = {}, t = 0;
		if (opts.sortableRowsOptions) {
			$.extend(opts, opts.sortableRowsOptions);
		}
		// Can accept all sortable options and events
		var that = this;
		if(!that.grid) { return; }
		// Currently we disable a treeGrid sortable
		if(that.options.treeGrid) { return; }
		if($.fn.sortable) {
			opts = $.extend({
				"cursor":"move",
				"axis" : "y",
				"items": ".jqgrow"
				},
			opts || {});
			opts.change = function( e, ui ){
				ui.prevItemId = $(ui.placeholder[0]).prev("tr").attr("id");
				ui.nextItemId = $(ui.placeholder[0]).next("tr").attr("id");
				ui.targetId = ui.position.top>ui.originalPosition.top?ui.prevItemId:ui.nextItemId;
				$( "#"+that.id+" #"+ui.targetId ).siblings().removeClass( "coral-state-target" );
				$( "#"+that.id+" #"+ui.targetId ).addClass( "coral-state-target" );
				that._trigger("onSortableRows", e, [ui]);
			};
			opts.start = function(e,ui) {
				$(ui.item).css("border-width","0px");
				ui.originalPermutation = [];
				if ( ui.item.is("tr" )){
					$("td",ui.item).each(function(i){
						this.style.width = that.grid.cols[i].style.width;
					});
				} else {
					$("td",ui.item.find("tr:first")).each(function(i){
						this.style.width = that.grid.cols[i].style.width;
					});
				}
				if( that.options.subGrid ) {
					var subgid = $(ui.item).attr("id");
					try {
						$(that).grid('collapseSubGridRow',subgid);
					} catch (e) {}
				}	
				$("tr.jqgrow",that.element.find(".coral-grid-btable")).each(function(){
					this.id!==""&& ui.originalPermutation.push(this.id);
				});	
				that.sortableRowOriginalPermutation = ui.originalPermutation;
				that._trigger("beforeSortableRows", e, [ui]);
			};
			
			opts.update = function ( e, ui ) {
				$(ui.item).css("border-width","");
				ui.itemId = [];
				ui.permutation = [];
				ui.originalPermutation = that.sortableRowOriginalPermutation||[];

				if(that.options.rownumbers === true) {
					$("td.grid-rownum",that.rows).each(function(i){
						$(this).html( i+1+(parseInt(that.options.page,10)-1)*parseInt(that.options.rowNum,10) );
						ui.permutation.push(that.rows[i+1].id);
					});	
				}else{
					$("tr.jqgrow", that.grid.rowsView).each(function( i ){
						ui.permutation.push(this.id);
					});
				}
				$.each(ui.item, function(i){
					ui.itemId.push(ui.item[i].id);
				});
				ui.prevItemId = $(ui.item[0]).prev("tr").attr("id");
				ui.nextItemId = $(ui.item[0]).next("tr").attr("id");
				ui.targetId = ui.position.top>ui.originalPosition.top?ui.prevItemId:ui.nextItemId;
				var dr = $.data(that.element[0], "dns-ref");
				if ( dr ){
					var opts = $.data( dr,"dns" );
					if(opts.dragToSort){
						ui.item.remove();
						opts.dragToSort = false;
						var i=0;
						if(ui.targetId){
							for(;i<opts.dataItems.length;i++){
								$(dr).grid("delRowData", opts.dataItems[i].id);
							}
							that.element.grid("addRowData", opts.rowid, opts.dataItems, "after", ui.targetId);
							//$.message("添加到条目: "+ui.targetId)
						} 
					}
				}
				
				that._trigger("afterSortableRows", e, [ui]);
			};
			$("tbody:first",that.grid.rowsView).sortable(opts);
			//$("tbody:first",that.grid.rowsView).disableSelection();
		}
	},
	destroySortableRows : function (opts) {
		var that = this;
		if(!that.grid) { return; }
		if($.fn.sortable)
			$("tbody:first",that.grid.rowsView).sortable( 'destroy' );
	},
	gridDnS : function(opts) {
		var that = this,
			t = 0,
			items = [];
		if(!that.grid) { return; }
		// Currently we disable a treeGrid drag and drop
		if(that.options.treeGrid) { return; }
		if(!$.fn.draggable || !$.fn.droppable) { return; }
		var appender = "<table id='grid_dns' class='coral-grid-dns'></table>";
		if($("#grid_dns")[0] === undefined) {
			$('body').append(appender);
		}
		if(!opts.connectWith) { return; }
		opts.connectWith = opts.connectWith.split(",");
		opts.connectWith = $.map(opts.connectWith,function(n){return $.trim(n);});
		var connectToSortableOpts = opts.connectWith.join(" .coral-grid-btable>tbody, ")+" .coral-grid-btable>tbody";
		
		opts = $.extend({
			"onstart" : null,
			"onstop" : null,
			"beforedrop": null,
			"ondrop" : null,
			"dragcopy": false,
			"dropbyname" : false,
			"droppos" : "first",
			"autoid" : true,
			"rowid" : "id",
			"dataItems" : [],
			"autoidprefix" : "dns_"
		}, opts || {});
		
		$.data(that.element[0],"dns",opts);
		
		if(that.options.reccount != "0" && !that.options.jqgdns) {
			var datadns = $.data(that.element,"dns");
		    $("tr.jqgrow:not(.coral-draggable)",that.element).draggable({
		    	"revert": "invalid",
				"helper": function( e, ui ){
					 var tId = $(e.target).parent("tr")[0].id,
					 	 i = 0,
					 	 html = $("<div></div>"),
					 	 sel = that.element.grid("option", "selarrrow").concat();
					 $.data(that.element[0],"dns").dataItems = [];
					 if($.inArray(tId, sel)>-1){
						 for( i;i<sel.length;i++ ){
							 $.data(that.element[0],"dns").dataItems.push($( that.element ).grid("getRowData", sel[i]));
							 html.append($( ".coral-grid-btable>tbody #"+sel[i], that.element ).clone());
						 }
						 return html;
					 }else{
						 $.data(that.element[0],"dns").dataItems.push( that.element.grid("getRowData", tId) );
						 html.append($(e.target).parent("tr").clone());
						 return html;
					 }
				 },
				"connectToSortable": connectToSortableOpts,
				"cursor": "move",
				"appendTo" : "#grid_dns",
				"zIndex": 5000,
		    	"start" : function (ev, ui) {
					// if we are in subgrid mode try to collapse the node
					if(that.options.subGrid) {
						var subgid = $(ui.helper).attr("id");
						try {
							$(that.element).grid('collapseSubGridRow',subgid);
						} catch (e) {}
					}
					$.data(that.element[0],"dns").dragToSort = true;
					// hack
					// drag and drop does not insert tr in table, when the table has no rows
					// we try to insert new empty row on the target(s)
					for (var i=0;i<$.data(that.element[0],"dns").connectWith.length;i++){
						if($($.data(that.element[0],"dns").connectWith[i]).grid('option','reccount') == "0" ){
							$($.data(that.element[0],"dns").connectWith[i]).grid('addRowData','jqg_empty_row',{});
						}
					}
					ui.helper.addClass("coral-state-highlight");
					$("td",ui.helper.find("tr:first")).each(function(i) {
						this.style.width = that.grid.headers[i].width+"px";
					});
					if(opts.onstart && $.isFunction(opts.onstart) ) { opts.onstart.call($($t),ev,ui); }
				},
				"stop" :function(ev,ui) {
					if(ui.helper.dropped && !opts.dragcopy) {
						var ids = $(ui.helper).attr("id");
						if(ids === undefined) { ids = $(this).attr("id"); }
						$(that.element).grid('delRowData',ids );
					}
					// if we have a empty row inserted from start event try to delete it
					for (var i=0;i<$.data(that.element[0],"dns").connectWith.length;i++){
						$($.data(that.element[0],"dns").connectWith[i]).grid('delRowData','jqg_empty_row');
					}
					if(opts.onstop && $.isFunction(opts.onstop) ) { opts.onstop.call($($t),ev,ui); }
				}
		    });
		}
		that.options.jqgdns = true;
		for (var i=0;i<opts.connectWith.length;i++){
			var cn =opts.connectWith[i];
			$.data( $(cn)[0],"dns-ref", that.element[0] );
		}
	},
	gridDnD : function(opts) {
		var that = this;
		if(!that.grid) { return; }
		// Currently we disable a treeGrid drag and drop
		if(that.options.treeGrid) { return; }
		if(!$.fn.draggable || !$.fn.droppable) { return; }
		function updateDnD ()
		{
			var datadnd = $.data(that.element,"dnd");
		    $("tr.jqgrow:not(.coral-draggable)",that.element).draggable($.isFunction(datadnd.drag) ? datadnd.drag.call($(that.element),datadnd) : datadnd.drag);
		}
		var appender = "<table id='jqgrid_dnd' class='coral-grid-dnd'></table>";
		if($("#jqgrid_dnd")[0] === undefined) {
			$('body').append(appender);
		}

		if(typeof opts == 'string' && opts == 'updateDnD' && that.options.jqgdnd===true) {
			updateDnD();
			return;
		}
		if(!opts.connectWith) { return; }
		opts.connectWith = opts.connectWith.split(",");
		opts.connectWith = $.map(opts.connectWith,function(n){return $.trim(n);});
		var connectToSortableOpts = opts.connectWith.join(" .coral-grid-btable>tbody, ")+" .coral-grid-btable>tbody";
		
		opts = $.extend({
			"drag" : function (opts) {
				return $.extend({
					start : function (ev, ui) {
						// if we are in subgrid mode try to collapse the node
						if(that.options.subGrid) {
							var subgid = $(ui.helper).attr("id");
							try {
								$(that.element).grid('collapseSubGridRow',subgid);
							} catch (e) {}
						}
						// hack
						// drag and drop does not insert tr in table, when the table has no rows
						// we try to insert new empty row on the target(s)
						for (var i=0;i<$.data(that.element,"dnd").connectWith.length;i++){
							if($($.data(that.element,"dnd").connectWith[i]).grid('option','reccount') == "0" ){
								$($.data(that.element,"dnd").connectWith[i]).grid('addRowData','jqg_empty_row',{});
							}
						}
						ui.helper.addClass("coral-state-highlight");
						$("td",ui.helper).each(function(i) {
							this.style.width = that.grid.headers[i].width+"px";
						});
						if(opts.onstart && $.isFunction(opts.onstart) ) { opts.onstart.call($($t),ev,ui); }
					},
					stop :function(ev,ui) {
						if(ui.helper.dropped && !opts.dragcopy) {
							var ids = $(ui.helper).attr("id");
							if(ids === undefined) { ids = $(this).attr("id"); }
							$(that.element).grid('delRowData',ids );
						}
						// if we have a empty row inserted from start event try to delete it
						for (var i=0;i<$.data(that.element,"dnd").connectWith.length;i++){
							$($.data(that.element,"dnd").connectWith[i]).grid('delRowData','jqg_empty_row');
						}
						if(opts.onstop && $.isFunction(opts.onstop) ) { opts.onstop.call($($t),ev,ui); }
					}
				},opts.drag_opts || {});
			},
			"drop" : function (opts) {
				return $.extend({
					accept: function(d) {
						if (!$(d).hasClass('jqgrow')) { return d;}
						var tid = $(d).closest("table.coral-grid-btable");
						if(tid.length > 0 && $.data(that.element,"dnd") !== undefined) {
						    var cn = $.data(that.element,"dnd").connectWith;
						    return $.inArray('#'+$.grid.coralID(this.id),cn) != -1 ? true : false;
						}
						return false;
					},
					drop: function(ev, ui) {
						if (!$(ui.draggable).hasClass('jqgrow')) { return; }
						var accept = $(ui.draggable).attr("id");
						var getdata = ui.draggable.parents(".coral-grid").grid('getRowData',accept);
						if(!opts.dropbyname) {
							var j =0, tmpdata = {}, nm;
							var dropmodel = $("#"+$.grid.coralID(this.id)).grid('option','colModel');
							try {
								for (var key in getdata) {
									if (getdata.hasOwnProperty(key)) {
										nm = dropmodel[j].name;
										if( !(nm == 'cb' || nm =='rn' || nm == 'subgrid' )) {
											if(getdata.hasOwnProperty(key) && dropmodel[j]) {
												tmpdata[nm] = getdata[key];
											}
										}else{
											j++;
										}
										j++;
									}
								}
								getdata = tmpdata;
							} catch (e) {}
						}
						ui.helper.dropped = true;
						if(opts.beforedrop && $.isFunction(opts.beforedrop) ) {
							//parameters to this callback - event, element, data to be inserted, sender, reciever
							// should return object which will be inserted into the reciever
							var datatoinsert = opts.beforedrop.call(this,ev,ui,getdata,$('#'+$.grid.coralID(that.options.id)),$(this));
							if (typeof datatoinsert != "undefined" && datatoinsert !== null && typeof datatoinsert == "object") { getdata = datatoinsert; }
						}
						if(ui.helper.dropped) {
							var grid;
							if(opts.autoid) {
								if($.isFunction(opts.autoid)) {
									grid = opts.autoid.call(this,getdata);
								} else {
									grid = Math.ceil(Math.random()*1000);
									grid = opts.autoidprefix+grid;
								}
							}
							// NULL is interpreted as undefined while null as object
							$("#"+$.grid.coralID(this.id)).grid('addRowData',grid,getdata,opts.droppos);
						}
						if(opts.ondrop && $.isFunction(opts.ondrop) ) { opts.ondrop.call(this,ev,ui, getdata); }
					}}, opts.drop_opts || {});
			},
			"onstart" : null,
			"onstop" : null,
			"beforedrop": null,
			"ondrop" : null,
			"drop_opts" : {
				"activeClass": "coral-state-active",
				"hoverClass": "coral-state-hover"
			},
			"drag_opts" : {
				"revert": "invalid",
				"helper": "clone",
				"connectToSortable": connectToSortableOpts,
				"cursor": "move",
				"appendTo" : "#jqgrid_dnd",
				"zIndex": 5000
			},
			"dragcopy": false,
			"dropbyname" : false,
			"droppos" : "first",
			"autoid" : true,
			"autoidprefix" : "dnd_"
		}, opts || {});
		
		$.data(that.element,"dnd",opts);
		
		if(that.options.reccount != "0" && !that.options.jqgdnd) {
			updateDnD();
		}
		that.options.jqgdnd = true;
		for (var i=0;i<opts.connectWith.length;i++){
			var cn =opts.connectWith[i];
			$(cn).droppable($.isFunction(opts.drop) ? opts.drop.call($(that),opts) : opts.drop);
		}
	},
	getInd : function(rowid,rc){
		var ret =false,rw;
		/*this.each(function(){*/
			rw = this.rows.namedItem(rowid);
			if(rw) {
				ret = rc===true ? rw: rw.rowIndex;
			}
		/*});*/
		return ret;
	}
});

/*grid的所有的通用方法，与对象无关*/
$.extend($.grid,{
	htmlDecode : function(value){
		if(value && (value=='&nbsp;' || value=='&#160;' || (value.length===1 && value.charCodeAt(0)===160))) { return "";}
		return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&").replace(/\'/g, "&acute;");		
	},
	htmlEncode : function (value){
		return !value ? value : String(value).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\'/g, "&acute;");
	},
	format : function(format){ //jqgformat
		var args = $.makeArray(arguments).slice(1);
		if(format===undefined) { format = ""; }
		return format.replace(/\{(\d+)\}/g, function(m, i){
			return args[i];
		});
	},
	getCellIndex : function (cell) {
		var c = $(cell);
		if (c.is('tr')) { return -1; }
		c = (!c.is('td') && !c.is('th') ? c.closest("td,th") : c)[0];
		/*暂时注释，到时候再ie6、7下测试，找到解决办法*/
		//if ($.browser.msie) { return $.inArray(c, c.parentNode.cells); }
		return c.cellIndex;
	},
	stripHtml : function(v) {
		v = v+"";
		var regexp = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
		if (v) {
			v = v.replace(regexp,"");
			return (v && v !== '&nbsp;' && v !== '&#160;') ? v.replace(/\"/g,"'") : "";
		} else {
			return v;
		}
	},
	stripPref : function (pref, id) {
		var obj = $.type( pref );
		if( obj == "string" || obj =="number") {
			pref =  String(pref);
			id = pref !== "" ? String(id).replace(String(pref), "") : id;
		}
		return id;
	},
	stringToDoc : function (xmlString) {
		var xmlDoc;
		if(typeof xmlString !== 'string') { return xmlString; }
		try	{
			var parser = new DOMParser();
			xmlDoc = parser.parseFromString(xmlString,"text/xml");
		}
		catch(e) {
			xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
			xmlDoc.async=false;
			xmlDoc.loadXML(xmlString);
		}
		return (xmlDoc && xmlDoc.documentElement && xmlDoc.documentElement.tagName != 'parsererror') ? xmlDoc : null;
	},
	parse : function(jsonString) {
		var js = jsonString;
		if (js.substr(0,9) == "while(1);") { js = js.substr(9); }
		if (js.substr(0,2) == "/*") { js = js.substr(2,js.length-4); }
		if(!js) { js = "{}"; }
		return ($.grid.useJSON===true && typeof (JSON) === 'object' && typeof (JSON.parse) === 'function') ?
			JSON.parse(js) :
			eval('(' + js + ')');
	},
	parseDate : function(format, date) {
		var tsp = {m : 1, d : 1, y : 1970, h : 0, i : 0, s : 0, u:0},k,hl,dM, regdate = /[\\\/:_;.,\t\T\s-]/;
		if(date && date !== null && date !== undefined){
			date = $.trim(date);
			date = date.split(regdate);
			if ($.grid.formatter.date.masks[format] !== undefined) {
				format = $.grid.formatter.date.masks[format];
			}
			format = format.split(regdate);
			var dfmt  = $.grid.formatter.date.monthNames;
			var afmt  = $.grid.formatter.date.AmPm;
			var h12to24 = function(ampm, h){
				if (ampm === 0){ if (h === 12) { h = 0;} }
				else { if (h !== 12) { h += 12; } }
				return h;
			};
			for(k=0,hl=format.length;k<hl;k++){
				if(format[k] == 'M') {
					dM = $.inArray(date[k],dfmt);
					if(dM !== -1 && dM < 12){
						date[k] = dM+1;
						tsp.m = date[k];
					}
				}
				if(format[k] == 'F') {
					dM = $.inArray(date[k],dfmt);
					if(dM !== -1 && dM > 11){
						date[k] = dM+1-12;
						tsp.m = date[k];
					}
				}
				if(format[k] == 'a') {
					dM = $.inArray(date[k],afmt);
					if(dM !== -1 && dM < 2 && date[k] == afmt[dM]){
						date[k] = dM;
						tsp.h = h12to24(date[k], tsp.h);
					}
				}
				if(format[k] == 'A') {
					dM = $.inArray(date[k],afmt);
					if(dM !== -1 && dM > 1 && date[k] == afmt[dM]){
						date[k] = dM-2;
						tsp.h = h12to24(date[k], tsp.h);
					}
				}
				if(date[k] !== undefined) {
					tsp[format[k].toLowerCase()] = parseInt(date[k],10);
				}
			}
			tsp.m = parseInt(tsp.m,10)-1;
			var ty = tsp.y;
			if (ty >= 70 && ty <= 99) {tsp.y = 1900+tsp.y;}
			else if (ty >=0 && ty <=69) {tsp.y= 2000+tsp.y;}
			if(tsp.j !== undefined) { tsp.d = tsp.j; }
			if(tsp.n !== undefined) { tsp.m = parseInt(tsp.n,10)-1; }
		}
		return new Date(tsp.y, tsp.m, tsp.d, tsp.h, tsp.i, tsp.s, tsp.u);
	},
	coralID : function(sid){
		return String(sid).replace(/[!"#$%&'()*+,.\/:;<=>?@\[\\\]\^`{|}~]/g,"\\$&");
	},
	guid : 1,
	uidPref: 'coralg',
	randId : function( prefix )	{
		return (prefix? prefix: $.grid.uidPref) + ($.grid.guid++);
	},
	getAccessor : function(obj, expr) {
		var ret,p,prm = [], i;
		if( typeof expr === 'function') { return expr(obj); }
		ret = obj[expr];
		if(ret===undefined) {
			try {
				if ( typeof expr === 'string' ) {
					prm = expr.split('.');
				}
				i = prm.length;
				if( i ) {
					ret = obj;
					while (ret && i--) {
						p = prm.shift();
						ret = ret[p];
					}
				}
			} catch (e) {}
		}
		return ret;
	},
	ajaxOptions: {},
	from : function(source){
		// Original Author Hugo Bonacci
		// License MIT http://jlinq.codeplex.com/license
		var QueryObject=function(d,q){
		if(typeof(d)=="string"){
			d=$.data(d);
		}
		var self=this,
		_data=d,
		_usecase=true,
		_trim=false,
		_query=q,
		_stripNum = /[\$,%]/g,
		_lastCommand=null,
		_lastField=null,
		_orDepth=0,
		_negate=false,
		_queuedOperator="",
		_sorting=[],
		_useProperties=true,
		_usePinyin=true;
		if(typeof(d)=="object"&&d.push) {
			if(d.length>0){
				if(typeof(d[0])!="object"){
					_useProperties=false;
				}else{
					_useProperties=true;
				}
			}
		}else{
			throw "data provides is not an array";
		}
		this._hasData=function(){
			return _data===null?false:_data.length===0?false:true;
		};
		this._getStr=function(s){
			var phrase=[];
			if(_trim){
				phrase.push("jQuery.trim(");
			}
			phrase.push("String("+s+")");
			if(_trim){
				phrase.push(")");
			}
			if(!_usecase){
				phrase.push(".toLowerCase()");
			}
			return phrase.join("");
		};
		this._strComp=function(val){
			if(typeof(val)=="string"){
				return".toString()";
			}else{
				return"";
			}
		};
		this._group=function(f,u){
			return({field:f.toString(),unique:u,items:[]});
		};
		this._toStr=function(phrase){
			if(_trim){
				phrase=$.trim(phrase);
			}
			phrase=phrase.toString().replace(/\\/g,'\\\\').replace(/\"/g,'\\"');
			return _usecase ? phrase : phrase.toLowerCase();
		};
		this._funcLoop=function(func){
			var results=[];
			$.each(_data,function(i,v){
				results.push(func(v));
			});
			return results;
		};
		this._append=function(s){
			var i;
			if(_query===null){
				_query="";
			} else {
				_query+=_queuedOperator === "" ? " && " :_queuedOperator;
			}
			for (i=0;i<_orDepth;i++){
				_query+="(";
			}
			if(_negate){
				_query+="!";
			}
			_query+="("+s+")";
			_negate=false;
			_queuedOperator="";
			_orDepth=0;
		};
		this._setCommand=function(f,c){
			_lastCommand=f;
			_lastField=c;
		};
		this._resetNegate=function(){
			_negate=false;
		};
		this._repeatCommand=function(f,v){
			if(_lastCommand===null){
				return self;
			}
			if(f!==null&&v!==null){
				return _lastCommand(f,v);
			}
			if(_lastField===null){
				return _lastCommand(f);
			}
			if(!_useProperties){
				return _lastCommand(f);
			}
			return _lastCommand(_lastField,f);
		};
		this._equals=function(a,b){
			return(self._compare(a,b,1)===0);
		};
		this._compare=function(a,b,d){
			var toString = Object.prototype.toString;
			if( d === undefined) { d = 1; }
			if(a===undefined) { a = null; }
			if(b===undefined) { b = null; }
			if(a===null && b===null){
				return 0;
			}
			if(a===null&&b!==null){
				return 1;
			}
			if(a!==null&&b===null){
				return -1;
			}
			if (toString.call(a) === '[object Date]' && toString.call(b) === '[object Date]') {
				if (a < b) { return -d; }
				if (a > b) { return d; }
				return 0;
			}
			if(!_usecase && typeof(a) !== "number" && typeof(b) !== "number" ) {
				a=String(a).toLowerCase();
				b=String(b).toLowerCase();
			}
			if(a<b){return -d;}
			if(a>b){return d;}
			return 0;
		};
		this._performSort=function(){
			if(_sorting.length===0){return;}
			_data=self._doSort(_data,0);
		};
		this._doSort=function(d,q){
			var by=_sorting[q].by,
			dir=_sorting[q].dir,
			type = _sorting[q].type,
			dfmt = _sorting[q].datefmt;
			if(q==_sorting.length-1){
				return self._getOrder(d, by, dir, type, dfmt);
			}
			q++;
			var values=self._getGroup(d,by,dir,type,dfmt);
			var results=[];
			for(var i=0;i<values.length;i++){
				var sorted=self._doSort(values[i].items,q);
				for(var j=0;j<sorted.length;j++){
					results.push(sorted[j]);
				}
			}
			return results;
		};
		this._getOrder=function(data,by,dir,type, dfmt){
			var sortData=[],_sortData=[], newDir = dir=="a" ? 1 : -1, i,ab,j,
			findSortKey;

			if(type === undefined ) { type = "text"; }
			if (type == 'float' || type== 'number' || type== 'currency' || type== 'numeric') {
				findSortKey = function($cell) {
					var key = parseFloat( String($cell).replace(_stripNum, ''));
					return isNaN(key) ? 0.00 : key;
				};
			} else if (type=='int' || type=='integer') {
				findSortKey = function($cell) {
					return $cell ? parseFloat(String($cell).replace(_stripNum, '')) : 0;
				};
			} else if(type == 'date' || type == 'datetime') {
				findSortKey = function($cell) {
					return $.grid.parseDate(dfmt,$cell).getTime();
				};
			} else if($.isFunction(type)) {
				findSortKey = type;
			} else {
				findSortKey = function($cell) {
					if(!$cell) {$cell ="";}
					return $.trim(String($cell).toUpperCase());
				};
			}
			$.each(data,function(i,v){
				ab = by!=="" ? $.grid.getAccessor(v,by) : v;
				if(ab === undefined) { ab = ""; }
				ab = findSortKey(ab, v);
				_sortData.push({ 'vSort': ab,'index':i});
			});

			_sortData.sort(function(a,b){
				a = a.vSort;
				b = b.vSort;
				return self._compare(a,b,newDir);
			});
			j=0;
			var nrec= data.length;
			// overhead, but we do not change the original data.
			while(j<nrec) {
				i = _sortData[j].index;
				sortData.push(data[i]);
				j++;
			}
			return sortData;
		};
		this._getGroup=function(data,by,dir,type, dfmt){
			var results=[],
			group=null,
			last=null, val;
			$.each(self._getOrder(data,by,dir,type, dfmt),function(i,v){
				val = $.grid.getAccessor(v, by);
				if(val === undefined) { val = ""; }
				if(!self._equals(last,val)){
					last=val;
					if(group !== null){
						results.push(group);
					}
					group=self._group(by,val);
				}
				group.items.push(v);
			});
			if(group !== null){
				results.push(group);
			}
			return results;
		};
		this.ignoreCase=function(){
			_usecase=false;
			return self;
		};
		this.useCase=function(){
			_usecase=true;
			return self;
		};
		this.trim=function(){
			_trim=true;
			return self;
		};
		this.noTrim=function(){
			_trim=false;
			return self;
		};
		this.execute=function(){
			var match=_query, results=[];
			if(match === null){
				return self;
			}
			$.each(_data,function(){
				if(eval(match)){
					results.push(this);
				}
			});
			_data=results;
			return self;
		};
		this.data=function(){
			return _data;
		};
		this.select=function(f){
			self._performSort();
			if(!self._hasData()){ return[]; }
			self.execute();
			if($.isFunction(f)){
				var results=[];
				$.each(_data,function(i,v){
					results.push(f(v));
				});
				return results;
			}
			return _data;
		};
		this.hasMatch=function(){
			if(!self._hasData()) { return false; }
			self.execute();
			return _data.length>0;
		};
		this.andNot=function(f,v,x){
			_negate=!_negate;
			return self.and(f,v,x);
		};
		this.orNot=function(f,v,x){
			_negate=!_negate;
			return self.or(f,v,x);
		};
		this.not=function(f,v,x){
			return self.andNot(f,v,x);
		};
		this.and=function(f,v,x){
			_queuedOperator=" && ";
			if(f===undefined){
				return self;
			}
			return self._repeatCommand(f,v,x);
		};
		this.or=function(f,v,x){
			_queuedOperator=" || ";
			if(f===undefined) { return self; }
			return self._repeatCommand(f,v,x);
		};
		this.orBegin=function(){
			_orDepth++;
			return self;
		};
		this.orEnd=function(){
			if (_query !== null){
				_query+=")";
			}
			return self;
		};
		this.isNot=function(f){
			_negate=!_negate;
			return self.is(f);
		};
		this.is=function(f){
			self._append('this.'+f);
			self._resetNegate();
			return self;
		};
		this._compareValues=function(func,f,v,how,t){
			var fld;
			if(_useProperties){
				fld='jQuery.grid.getAccessor(this,\''+f+'\')';
			}else{
				fld='this';
			}
			if(v===undefined) { v = null; }
			//var val=v===null?f:v,
			var val =v,
			swst = t.stype === undefined ? "text" : t.stype;
			if(v !== null) {
			switch(swst) {
				case 'int':
				case 'integer':
					val = (isNaN(Number(val)) || val==="") ? '0' : val; // To be fixed with more inteligent code
					fld = 'parseInt('+fld+',10)';
					val = 'parseInt('+val+',10)';
					break;
				case 'float':
				case 'number':
				case 'numeric':
					val = String(val).replace(_stripNum, '');
					val = (isNaN(Number(val)) || val==="") ? '0' : val; // To be fixed with more inteligent code
					fld = 'parseFloat('+fld+')';
					val = 'parseFloat('+val+')';
					break;
				case 'date':
				case 'datetime':
					val = String($.grid.parseDate(t.newfmt || 'Y-m-d',val).getTime());
					fld = 'jQuery.grid.parseDate("'+t.srcfmt+'",'+fld+').getTime()';
					break;
				default :
					fld=self._getStr(fld);
					val=self._getStr('"'+self._toStr(val)+'"');
			}
			}
			self._append(fld+' '+how+' '+val + ' || pinyinEngine.toPinyin('+fld+', false, "")' +' '+how+' '+val);
			//self._append(fld+' '+how+' '+val);
			self._setCommand(func,f);
			self._resetNegate();
			return self;
		};
		this.equals=function(f,v,t){
			return self._compareValues(self.equals,f,v,"==",t);
		};
		this.notEquals=function(f,v,t){
			return self._compareValues(self.equals,f,v,"!==",t);
		};
		this.isNull = function(f,v,t){
			return self._compareValues(self.equals,f,null,"===",t);
		};
		this.greater=function(f,v,t){
			return self._compareValues(self.greater,f,v,">",t);
		};
		this.less=function(f,v,t){
			return self._compareValues(self.less,f,v,"<",t);
		};
		this.greaterOrEquals=function(f,v,t){
			return self._compareValues(self.greaterOrEquals,f,v,">=",t);
		};
		this.lessOrEquals=function(f,v,t){
			return self._compareValues(self.lessOrEquals,f,v,"<=",t);
		};
		this.startsWith=function(f,v){
			var val = (v===undefined || v===null) ? f: v,
			length=_trim ? $.trim(val.toString()).length : val.toString().length;
			if(_useProperties){
				self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.substr(0,'+length+') == '+self._getStr('"'+self._toStr(v)+'"'));
			}else{
				length=_trim?$.trim(v.toString()).length:v.toString().length;
				self._append(self._getStr('this')+'.substr(0,'+length+') == '+self._getStr('"'+self._toStr(f)+'"'));
			}
			self._setCommand(self.startsWith,f);
			self._resetNegate();
			return self;
		};
		this.endsWith=function(f,v){
			var val = (v===undefined || v===null) ? f: v,
			length=_trim ? $.trim(val.toString()).length:val.toString().length;
			if(_useProperties){
				self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.substr('+self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.length-'+length+','+length+') == "'+self._toStr(v)+'"');
			} else {
				self._append(self._getStr('this')+'.substr('+self._getStr('this')+'.length-"'+self._toStr(f)+'".length,"'+self._toStr(f)+'".length) == "'+self._toStr(f)+'"');
			}
			self._setCommand(self.endsWith,f);self._resetNegate();
			return self;
		};
		this.contains=function(f,v){
			if(_useProperties){
				if(_usePinyin){
					self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.indexOf("'+self._toStr(v)+'",0) > -1'
							+ ' || ' + self._getStr('pinyinEngine.toPinyin(jQuery.grid.getAccessor(this,\''+f+'\'), false, "")')+'.indexOf("'+self._toStr(v)+'",0) > -1');
				}else{
					self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.indexOf("'+self._toStr(v)+'",0) > -1');
				}
				
			}else{
				if(_usePinyin){
					self._append(self._getStr('this')+'.indexOf("'+self._toStr(f)+'",0) > -1'
							+ ' || ' + pinyinEngine.toPinyin(self._getStr('this'), false, "")+'.indexOf("'+self._toStr(v)+'",0) > -1');
				}else{
					self._append(self._getStr('this')+'.indexOf("'+self._toStr(f)+'",0) > -1');
				}
			}
			self._setCommand(self.contains,f);
			self._resetNegate();
			return self;
		};
		this.groupBy=function(by,dir,type, datefmt){
			if(!self._hasData()){
				return null;
			}
			return self._getGroup(_data,by,dir,type, datefmt);
		};
		this.orderBy=function(by,dir,stype, dfmt){
			dir =  dir === undefined || dir === null ? "a" :$.trim(dir.toString().toLowerCase());
			if(stype === null || stype === undefined) { stype = "text"; }
			if(dfmt === null || dfmt === undefined) { dfmt = "Y-m-d"; }
			if(dir=="desc"||dir=="descending"){dir="d";}
			if(dir=="asc"||dir=="ascending"){dir="a";}
			_sorting.push({by:by,dir:dir,type:stype, datefmt: dfmt});
			return self;
		};
		return self;
		};
	return new QueryObject(source,null);
	},
	getMethod: function (name) {
        return this.getAccessor($.fn.grid, name);
	},
	extend : function(methods) {
		$.extend($.fn.grid,methods);
		if (!this.no_legacy_api) {
			$.fn.extend(methods);
		}
	}
});
$.component( "coral.grid", $.coral.grid, {
	setTreeNode : function(i, len){
		var that = this;
		if( !that.grid || !that.options.treeGrid ) {return;}
		var expCol = that.options.expColInd,
		expanded = that.options.treeReader.expanded_field,
		isLeaf = that.options.treeReader.leaf_field,
		level = that.options.treeReader.level_field,
		icon = that.options.treeReader.icon_field,
		loaded = that.options.treeReader.loaded,  lft, rgt, curLevel, ident,lftpos, twrap,
		ldat, lf;
		while(i<len) {
			var ind = that.rows[i].id, dind = that.options._index[ind], expan;
			ldat = that.options.data[dind];
			//that.rows[i].level = ldat[level];
			if(that.options.treeGridModel == 'nested') {
				if(!ldat[isLeaf]) {
				lft = parseInt(ldat[that.options.treeReader.left_field],10);
				rgt = parseInt(ldat[that.options.treeReader.right_field],10);
				// NS Model
					ldat[isLeaf] = (rgt === lft+1) ? 'true' : 'false';
					that.rows[i].cells[that.options._treeleafpos].innerHTML = ldat[isLeaf];
				}
			}
			//else {
				//row.parent_id = rd[that.options.treeReader.parent_id_field];
			//}
			curLevel = parseInt(ldat[level],10);
			if(that.options.tree_root_level === 0) {
				ident = curLevel+1;
				lftpos = curLevel;
			} else {
				ident = curLevel;
				lftpos = curLevel -1;
			}
			twrap = "<div class='tree-wrap tree-wrap-"+that.options.direction+"' style='width:"+(ident*18)+"px;'>";
			twrap += "<div style='"+(that.options.direction=="rtl" ? "right:" : "left:")+(lftpos*18)+"px;' class=' ";


			if(ldat[loaded] !== undefined) {
				if(ldat[loaded]=="true" || ldat[loaded]===true) {
					ldat[loaded] = true;
				} else {
					ldat[loaded] = false;
				}
			}
			if(ldat[isLeaf] == "true" || ldat[isLeaf] === true) {
				twrap += ((ldat[icon] !== undefined && ldat[icon] !== "") ? ldat[icon] : that.options.treeIcons.leaf)+" tree-leaf treeclick";
				ldat[isLeaf] = true;
				lf="leaf";
			} else {
				ldat[isLeaf] = false;
				lf="";
			}
			ldat[expanded] = ((ldat[expanded] == "true" || ldat[expanded] === true) ? true : false) && ldat[loaded];
			if(ldat[expanded] === false) {
				twrap += ((ldat[isLeaf] === true) ? "'" : that.options.treeIcons.plus+" tree-plus treeclick'");
			} else {
				twrap += ((ldat[isLeaf] === true) ? "'" : that.options.treeIcons.minus+" tree-minus treeclick'");
			}
			
			twrap += "></div></div>";
			$(that.rows[i].cells[expCol]).wrapInner("<span class='cell-wrapper"+lf+"'></span>").prepend(twrap);

			if(curLevel !== parseInt(that.options.tree_root_level,10)) {
				var pn = $(that.element).grid('getNodeParent',ldat);
				expan = pn && pn.hasOwnProperty(expanded) ? pn[expanded] : true;
				if( !expan ){
					$(that.rows[i]).css("display","none");
				}
			}
			$(that.rows[i].cells[expCol])
				.find("div.treeclick")
				.bind("click",function(e){
					var target = e.target || e.srcElement,
					ind2 =$(target,that.rows).closest("tr.jqgrow")[0].id,
					pos = that.options._index[ind2];
					if(!that.options.data[pos][isLeaf]){
						if(that.options.data[pos][expanded]){
							$(that.element).grid("collapseRow",that.options.data[pos]);
							$(that.element).grid("collapseNode",that.options.data[pos]);
						} else {
							$(that.element).grid("expandRow",that.options.data[pos]);
							$(that.element).grid("expandNode",that.options.data[pos]);
						}
					}
					return false;
				});
			if(that.options.ExpandColClick === true) {
				$(that.rows[i].cells[expCol])
					.find("span.cell-wrapper")
					.css("cursor","pointer")
					.bind("click",function(e) {
						var target = e.target || e.srcElement,
						ind2 =$(target,that.rows).closest("tr.jqgrow")[0].id,
						pos = that.options._index[ind2];
						if(!that.options.data[pos][isLeaf]){
							if(that.options.data[pos][expanded]){
								$(that.element).grid("collapseRow",that.options.data[pos]);
								$(that.element).grid("collapseNode",that.options.data[pos]);
							} else {
								$(that.element).grid("expandRow",that.options.data[pos]);
								$(that.element).grid("expandNode",that.options.data[pos]);
							}
						}
						$(that.element).grid("setSelection",ind2);
						return false;
					});
			}
			i++;
		}
	},
	setTreeGrid : function() {
		var that = this, i=0, pico, ecol = false, nm, key, dupcols=[];
		if(!that.options.treeGrid) {return;}
		if(!that.options.treedatatype ) {$.extend(that.options,{treedatatype: that.options.datatype});}
		that.options.subGrid = false;that.options.altRows =false;
		//that.options.pgbuttons = false;that.options.pginput = false;
		that.options.gridview =  true;
		if(that.options.rowTotal === null ) { that.options.rowNum = 10000; }
		that.options.multiselect = false;that.options.rowList = [];
		that.options.expColInd = 0;
		pico = 'coral-icon-triangle-1-' + (that.options.direction=="rtl" ? 'w' : 'e');
		that.options.treeIcons = $.extend({plus:"cui-icon-arrow-right3",minus:'cui-icon-arrow-down3',leaf:'cui-icon-file-empty2'},that.options.treeIcons || {});
		if(that.options.treeGridModel == 'nested') {
			that.options.treeReader = $.extend({
				level_field: "level",
				left_field:"lft",
				right_field: "rgt",
				leaf_field: "isLeaf",
				expanded_field: "expanded",
				loaded: "loaded",
				icon_field: "icon"
			},that.options.treeReader);
		} else if(that.options.treeGridModel == 'adjacency') {
			that.options.treeReader = $.extend({
					level_field: "level",
					parent_id_field: "parent",
					leaf_field: "isLeaf",
					expanded_field: "expanded",
					loaded: "loaded",
					icon_field: "icon"
			},that.options.treeReader );
		}
		for ( key in that.options.colModel){
			if(that.options.colModel.hasOwnProperty(key)) {
				nm = that.options.colModel[key].name;
				if( nm == that.options.ExpandColumn && !ecol ) {
					ecol = true;
					that.options.expColInd = i;
				}
				i++;
				//
				for(var tkey in that.options.treeReader) {
					if(that.options.treeReader[tkey] == nm) {
						dupcols.push(nm);
					}
				}
			}
		}
		$.each(that.options.treeReader,function(j,n){
			if(n && $.inArray(n, dupcols) === -1){
				if(j==='leaf_field') { that.options._treeleafpos= i; }
			i++;
				that.options.colNames.push(n);
				that.options.colModel.push({name:n,width:1,hidden:true,sortable:false,resizable:false,hidedlg:true,editable:true,search:false});
			}
		});			
	},
	expandRow: function (record){
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		var childern = $(that.element).grid("getNodeChildren",record),
		//if ($(that.element).grid("isVisibleNode",record)) {
		expanded = that.options.treeReader.expanded_field,
		rows = that.rows;
		$(childern).each(function(){
			var id  = $.grid.getAccessor(this,that.options.localReader.id);
			$(rows.namedItem(id)).css("display","");
			if(this[expanded]) {
				$(that.element).grid("expandRow",this);
			}
		});
		//}
	},
	collapseRow : function (record) {
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		var childern = $(that.element).grid("getNodeChildren",record),
		expanded = that.options.treeReader.expanded_field,
		rows = that.rows;
		$(childern).each(function(){
			var id  = $.grid.getAccessor(this,that.options.localReader.id);
			$(rows.namedItem(id)).css("display","none");
			if(this[expanded]){
				$(that.element).grid("collapseRow",this);
			}
		});
	},
	// NS ,adjacency models
	getRootNodes : function() {
		var result = [];
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		switch (that.options.treeGridModel) {
			case 'nested' :
				var level = that.options.treeReader.level_field;
				$(that.options.data).each(function(){
					if(parseInt(this[level],10) === parseInt(that.options.tree_root_level,10)) {
						result.push(this);
					}
				});
				break;
			case 'adjacency' :
				var parent_id = that.options.treeReader.parent_id_field;
				$(that.options.data).each(function(){
					if(this[parent_id] === null || String(this[parent_id]).toLowerCase() == "null") {
						result.push(this);
					}
				});
				break;
		}
		return result;
	},
	getNodeDepth : function(rc) {
		var ret = null;
		this.each(function(){
			if(!this.grid || !this.options.treeGrid) {return;}
			var $t = this;
			switch (that.options.treeGridModel) {
				case 'nested' :
					var level = that.options.treeReader.level_field;
					ret = parseInt(rc[level],10) - parseInt(that.options.tree_root_level,10);
					break;
				case 'adjacency' :
					ret = $($t).grid("getNodeAncestors",rc).length;
					break;
			}
		});
		return ret;
	},
	getNodeParent : function(rc) {
		var result = null;
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		switch (that.options.treeGridModel) {
			case 'nested' :
				var lftc = that.options.treeReader.left_field,
				rgtc = that.options.treeReader.right_field,
				levelc = that.options.treeReader.level_field,
				lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
				$(that.options.data).each(function(){
					if(parseInt(this[levelc],10) === level-1 && parseInt(this[lftc],10) < lft && parseInt(this[rgtc],10) > rgt) {
						result = this;
						return false;
					}
				});
				break;
			case 'adjacency' :
				var parent_id = that.options.treeReader.parent_id_field,
				dtid = that.options.localReader.id;
				$(that.options.data).each(function(){
					if(this[dtid] == rc[parent_id] ) {
						result = this;
						return false;
					}
				});
				break;
		}
		return result;
	},
	getNodeChildren : function(rc) {
		var result = [];
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		switch (that.options.treeGridModel) {
			case 'nested' :
				var lftc = that.options.treeReader.left_field,
				rgtc = that.options.treeReader.right_field,
				levelc = that.options.treeReader.level_field,
				lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
				$(this.options.data).each(function(){
					if(parseInt(this[levelc],10) === level+1 && parseInt(this[lftc],10) > lft && parseInt(this[rgtc],10) < rgt) {
						result.push(this);
					}
				});
				break;
			case 'adjacency' :
				var parent_id = that.options.treeReader.parent_id_field,
				dtid = that.options.localReader.id;
				$(this.options.data).each(function(){
					if(this[parent_id] == rc[dtid]) {
						result.push(this);
					}
				});
				break;
		}
		return result;
	},
	getFullTreeNode : function(rc) {
		var result = [];
		this.each(function(){
			var $t = this, len;
			if(!$t.grid || !that.options.treeGrid) {return;}
			switch (that.options.treeGridModel) {
				case 'nested' :
					var lftc = that.options.treeReader.left_field,
					rgtc = that.options.treeReader.right_field,
					levelc = that.options.treeReader.level_field,
					lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
					$(this.options.data).each(function(){
						if(parseInt(this[levelc],10) >= level && parseInt(this[lftc],10) >= lft && parseInt(this[lftc],10) <= rgt) {
							result.push(this);
						}
					});
					break;
				case 'adjacency' :
					if(rc) {
					result.push(rc);
					var parent_id = that.options.treeReader.parent_id_field,
					dtid = that.options.localReader.id;
					$(this.options.data).each(function(i){
						len = result.length;
						for (i = 0; i < len; i++) {
							if (result[i][dtid] == this[parent_id]) {
								result.push(this);
								break;
							}
						}
					});
					}
					break;
			}
		});
		return result;
	},	
	// End NS, adjacency Model
	getNodeAncestors : function(rc) {
		var ancestors = [];
		this.each(function(){
			if(!this.grid || !this.options.treeGrid) {return;}
			var parent = $(this).grid("getNodeParent",rc);
			while (parent) {
				ancestors.push(parent);
				parent = $(this).grid("getNodeParent",parent);	
			}
		});
		return ancestors;
	},
	isVisibleNode : function(rc) {
		var result = true;
		this.each(function(){
			var $t = this;
			if(!$t.grid || !that.options.treeGrid) {return;}
			var ancestors = $($t).grid("getNodeAncestors",rc),
			expanded = that.options.treeReader.expanded_field;
			$(ancestors).each(function(){
				result = result && this[expanded];
				if(!result) {return false;}
			});
		});
		return result;
	},
	isNodeLoaded : function(rc) {
		var result;
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		var isLeaf = that.options.treeReader.leaf_field;
		if(rc !== undefined ) {
			if(rc.loaded !== undefined) {
				result = rc.loaded;
			} else if( rc[isLeaf] || $(that.element).grid("getNodeChildren",rc).length > 0){
				result = true;
			} else {
				result = false;
			}
		} else {
			result = false;
		}
		return result;
	},
	expandNode : function(rc) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var expanded = this.options.treeReader.expanded_field,
		parent = this.options.treeReader.parent_id_field,
		loaded = this.options.treeReader.loaded,
		level = this.options.treeReader.level_field,
		lft = this.options.treeReader.left_field,
		rgt = this.options.treeReader.right_field;

		if(!rc[expanded]) {
			var id = $.grid.getAccessor(rc,this.options.localReader.id);
			var rc1 = $("#"+$.grid.coralID(id),this.grid.rowsView)[0];
			var position = this.options._index[id];
			if( $(this.element).grid("isNodeLoaded",this.options.data[position]) ) {
				rc[expanded] = true;
				$("div.treeclick",rc1).removeClass(this.options.treeIcons.plus+" tree-plus").addClass(this.options.treeIcons.minus+" tree-minus");
			} else if (!this.grid.columnsView.loading) {
				rc[expanded] = true;
				$("div.treeclick",rc1).removeClass(this.options.treeIcons.plus+" tree-plus").addClass(this.options.treeIcons.minus+" tree-minus");
				this.options.treeANode = rc1.rowIndex;
				this.options.datatype = this.options.treedatatype;
				if(this.options.treeGridModel == 'nested') {
					$(this.element).grid("option",{postData:{nodeid:id,n_left:rc[lft],n_right:rc[rgt],n_level:rc[level]}});
				} else {
					$(this.element).grid("option",{postData:{nodeid:id,parentid:rc[parent],n_level:rc[level]}} );
				}
				$(this.element).grid("reload");
				rc[loaded] = true;
				if(this.options.treeGridModel == 'nested') {
					$(this.element).grid("option",{postData:{nodeid:'',n_left:'',n_right:'',n_level:''}});
				} else {
					$(this.element).grid("option",{postData:{nodeid:'',parentid:'',n_level:''}}); 
				}
			}
		}
	},
	collapseNode : function(rc) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var expanded = this.options.treeReader.expanded_field;
		if(rc[expanded]) {
			rc[expanded] = false;
			var id = $.grid.getAccessor(rc,this.options.localReader.id);
			var rc1 = $("#"+$.grid.coralID(id),this.grid.rowsView)[0];
			$("div.treeclick",rc1).removeClass(this.options.treeIcons.minus+" tree-minus").addClass(this.options.treeIcons.plus+" tree-plus");
		}
	},
	sortTree : function( sortname, newDir, st, datefmt) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var i, len,
		rec, records = [], that = this, query, roots,
		rt = $(that.element).grid("getRootNodes");
		// Sorting roots
		query = $.grid.from(rt);
		query.orderBy(sortname,newDir,st, datefmt);
		roots = query.select();

		// Sorting children
		for (i = 0, len = roots.length; i < len; i++) {
			rec = roots[i];
			records.push(rec);
			$(that.element).grid("collectChildrenSortTree",records, rec, sortname, newDir,st, datefmt);
		}
		$.each(records, function(index) {
			var id  = $.grid.getAccessor(this,that.options.localReader.id);
			$('#'+$.grid.coralID(that.options.id)+ ' tbody tr:eq('+index+')').after($('tr#'+$.grid.coralID(id),that.grid.rowsView));
		});
		query = null;roots=null;records=null;
	},
	collectChildrenSortTree : function(records, rec, sortname, newDir,st, datefmt) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var i, len,
		child, ch, query, children;
		ch = $(this.element).grid("getNodeChildren",rec);
		query = $.grid.from(ch);
		query.orderBy(sortname, newDir, st, datefmt);
		children = query.select();
		for (i = 0, len = children.length; i < len; i++) {
			child = children[i];
			records.push(child);
			$(this.element).grid("collectChildrenSortTree",records, child, sortname, newDir, st, datefmt); 
		}
	},
	// experimental 
	setTreeRow : function(rowid, data) {
		var success=false;
		this.each(function(){
			var t = this;
			if(!t.grid || !t.options.treeGrid) {return;}
			success = $(t).grid("setRowData",rowid,data);
		});
		return success;
	},
	delTreeNode : function (rowid) {
		return this.each(function () {
			var $t = this, rid = that.options.localReader.id,
			left = that.options.treeReader.left_field,
			right = that.options.treeReader.right_field, myright, width, res, key;
			if(!$t.grid || !that.options.treeGrid) {return;}
			var rc = that.options._index[rowid];
			if (rc !== undefined) {
				// nested
				myright = parseInt(that.options.data[rc][right],10);
				width = myright -  parseInt(that.options.data[rc][left],10) + 1;
				var dr = $($t).grid("getFullTreeNode",that.options.data[rc]);
				if(dr.length>0){
					for (var i=0;i<dr.length;i++){
						$($t).grid("delRowData",dr[i][rid]);
					}
				}
				if( that.options.treeGridModel === "nested") {
					// ToDo - update grid data
					res = $.grid.from(that.options.data)
						.greater(left,myright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = parseInt(res[key][left],10) - width ;
							}
						}
					}
					res = $.grid.from(that.options.data)
						.greater(right,myright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][right] = parseInt(res[key][right],10) - width ;
							}
						}
					}
				}
			}
		});
	},
	addChildNode : function( nodeid, parentid, data ) {
		//return this.each(function(){
		var $t = this[0];
		if(data) {
			// we suppose tha the id is autoincremet and
			var expanded = that.options.treeReader.expanded_field,
			isLeaf = that.options.treeReader.leaf_field,
			level = that.options.treeReader.level_field,
			//icon = that.options.treeReader.icon_field,
			parent = that.options.treeReader.parent_id_field,
			left = that.options.treeReader.left_field,
			right = that.options.treeReader.right_field,
			loaded = that.options.treeReader.loaded,
			method, parentindex, parentdata, parentlevel, i, len, max=0, rowind = parentid, leaf, maxright;

			if ( typeof nodeid === 'undefined' || nodeid === null ) {
				i = that.options.data.length-1;
				if(	i>= 0 ) {
					while(i>=0){max = Math.max(max, parseInt(that.options.data[i][that.options.localReader.id],10)); i--;}
				}
				nodeid = max+1;
			}
			var prow = $($t).grid('getInd', parentid);
				leaf = false;
				// if not a parent we assume root
				if ( parentid === undefined  || parentid === null || parentid==="") {
					parentid = null;
					rowind = null;
					method = 'last';
					parentlevel = that.options.tree_root_level;
					i = that.options.data.length+1;
				} else {
					method = 'after';
					parentindex = that.options._index[parentid];
					parentdata = that.options.data[parentindex];
					parentid = parentdata[that.options.localReader.id];
					parentlevel = parseInt(parentdata[level],10)+1;
					var childs = $($t).grid('getFullTreeNode', parentdata);
					// if there are child nodes get the last index of it
					if(childs.length) {
						i = childs[childs.length-1][that.options.localReader.id];
						rowind = i;
						i = $($t).grid('getInd',rowind)+1;
					} else {
						i = $($t).grid('getInd', parentid)+1;
					}
					// if the node is leaf
					if(parentdata[isLeaf]) {
						leaf = true;
						parentdata[expanded] = true;
						//var prow = $($t).grid('getInd', parentid);
						$($t.rows[prow])
							.find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper")
							.end()
							.find("div.tree-leaf").removeClass(that.options.treeIcons.leaf+" tree-leaf").addClass(that.options.treeIcons.minus+" tree-minus");
						that.options.data[parentindex][isLeaf] = false;
						parentdata[loaded] = true;
					}
				}
				len = i+1;

			data[expanded] = false;
			data[loaded] = true;
			data[level] = parentlevel;
			data[isLeaf] = true;
			if( that.options.treeGridModel === "adjacency") {
				data[parent] = parentid;
			}
			if( that.options.treeGridModel === "nested") {
				// this method requiere more attention
				var query, res, key;
				//maxright = parseInt(maxright,10);
				// ToDo - update grid data
				if(parentid !== null) {
					maxright = parseInt(parentdata[right],10);
					query = $.grid.from(that.options.data);
					query = query.greaterOrEquals(right,maxright,{stype:'integer'});
					res = query.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = res[key][left] > maxright ? parseInt(res[key][left],10) +2 : res[key][left];
								res[key][right] = res[key][right] >= maxright ? parseInt(res[key][right],10) +2 : res[key][right];
							}
						}
					}
					data[left] = maxright;
					data[right]= maxright+1;
				} else {
					maxright = parseInt( $($t).grid('getCol', right, false, 'max'), 10);
					res = $.grid.from(that.options.data)
						.greater(left,maxright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = parseInt(res[key][left],10) +2 ;
							}
						}
					}
					res = $.grid.from(that.options.data)
						.greater(right,maxright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][right] = parseInt(res[key][right],10) +2 ;
							}
						}
					}
					data[left] = maxright+1;
					data[right] = maxright + 2;
				}
			}
			if( parentid === null || $($t).grid("isNodeLoaded",parentdata) || leaf ) {
					$($t).grid('addRowData', nodeid, data, method, rowind);
					$($t).grid('setTreeNode', i, len);
			}
			if(parentdata && !parentdata[expanded]) {
				$($t.rows[prow])
					.find("div.treeclick")
					.click();
			}
		}
		//});
	},
	refreshDescription: function( html ){
		if ( this.options.toolbarOptions ) {
			if( this.options.description ){
				$( ".pager-description", this.element ).html(html);
			}
		}
	},
	hideGridHeader: function(){
		this.element.find(".coral-grid-columns").hide();
	},
	showGridHeader: function(){
		this.element.find(".coral-grid-columns").show();
	},
	//grid校验模块
	// 校验模块 校验单元格内容，如果是编辑状态，则先要保存这一行。
	valid: function( rowid, colname ) {
		var res = {}, resall, getall=false, len, j=0;
		var that = this,nm,editable,ind;
		that.errorResults = [];
		var state;
		if(typeof(rowid) == 'undefined' || !rowid) {
			getall = true;
			resall = [];
			len = that.rows.length;
		} else {
			ind = that.rows.namedItem(rowid);
			if(!ind) { return res; }
			len = 2;//TODO: getRowData方法一直设置为2，，
		}
		while(j<len){
			if(getall) { ind = that.rows[j]; }
			if( $(ind).hasClass('jqgrow') ) {
				$('td[role="gridcell"]',ind).each( function(i) {
					nm = that.options.colModel[i].name;
					editable = that.options.colModel[i].editable;
					if ( !colname || ( colname && nm == colname ) ) {
						if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
							if(that.options.treeGrid===true && nm == that.options.ExpandColumn) {
								res[nm] = $.grid.htmlDecode($("span:first",this).html());
							} else {
								try {
									var sRowArr = $.grep( that.options.savedRow, function( sRow ) {
										// TODO: 是否有错误？本地和远程数据的判断
										return sRow.id == ind.id || that.rows[sRow.id].id == ind.id;
									});
									if ( that.options.savedRow.length && sRowArr.length && editable ) {
										state = "edittype";
									} else {
										state = null;
									}
									res[nm] = $.unformat.call(that,this,{rowId:ind.id, colModel:that.options.colModel[i]},i,"get",state);								
								} catch (e){
									res[nm] = $.grid.htmlDecode($(this).html());
								}
							}
							var validateopitons = $.extend( that.options.colModel[i].formatoptions||{},
								that.options.colModel[i].editoptions||{} );
							var event = $.Event();
							event.target = this;
							var data = {
								validoptions: validateopitons,
								notComponent: !( state == "edittype" ),
								showRequiredMark: $.noop,
								hasTips: false,
								component: ( state == "edittype" )?that.getCellComponent( ind.id, nm ):$(this),
								element: $(this).find(".ctrl-init").length>0?$(this).find(".ctrl-init"):$(this),
								value: res[nm]
							};
							var error = $.validate.validateField( event, data );
							if ( error.length ) {
								if ( that.options.allowSaveOnError ) {
									$(this).addClass( "coral-gridcell-error" ).attr("data-errors", error);
								} else {
									$(this).addClass( "coral-gridcell-error" );
								}
								// 会有添加两遍的bug
								that.errorResults.push({"rowId":ind.id,"rowIndex":j,"cellIndex":i,"errors": error});
							} else {
								$(this).removeClass( "coral-gridcell-error" )
								.removeAttr("data-errors");
							}
						}
					}
				});
				if(getall) { resall.push(res); res={}; }
			}
			j++;
		}
		this.options.isValid = !(this.errorResults.length>0);
		return this.options.isValid;
	},
	clearErrors: function( rowid, colname ) {
		var res = {}, resall, getall=false, len, j=0;
		var that = this,nm,editable,ind;
		this.errorResults = this.errorResults || [];
		if(typeof(rowid) == 'undefined' || !rowid) {
			getall = true;
			resall = [];
			len = that.rows.length;
			that.errorResults = [];
		} else {
			ind = that.rows.namedItem(rowid);
			if(!ind) { return res; }
			len = 2;
			var k = that.errorResults.length;
			for(k ; k>0; k--) {
				if ( that.errorResults[k-1].rowId == ind.id ) {
					that.errorResults.splice(k-1, 1);
				}
			}
		}
		while(j<len){
			if(getall) { ind = that.rows[j]; }
			if( $(ind).hasClass('jqgrow') ) {
				$('td[role="gridcell"]',ind).each( function(i) {
					$(this).removeClass( "coral-gridcell-error coral-validate-error" )
					.removeAttr("data-errors");
				});
			}
			j++;
		}
		this.options.isValid = !(this.errorResults.length>0);
	},
	getCellErrors: function(){
		return that.errorResults;
	},
	resizeFrozen: function(){
		var top = this.options.caption ? $(this.grid.cDiv).outerHeight() : 0,
			hth = $(".coral-grid-htable","#"+$.grid.coralID(this.options.id)).outerHeight();
			//headers
			if(this.options.toppager) {
				top = top + $($t.grid.topDiv).outerHeight();
			}
			if(this.options.toolbar[0] === true) {
				if(this.options.toolbar[1] != "bottom") {
					top = top + $(this.grid.uDiv).outerHeight();
				}
			}
			if( this.grid.fhDiv ) {
				var columsHeight = $("th",this.grid.columnsView).height();
				$(this.grid.fhDiv).css({"top": top}); 
				$("th",this.grid.fhDiv).each(function(){
					$(this).height(columsHeight);
				});
				$(this.grid.fbDiv).css({"top": (parseInt(top,10)+parseInt(hth,10))}); 
				$(this.grid.fbDiv).height( $(this.grid.rowsView).height()-this.getScrollBarWidth()+2);
			}
			if( this.grid.rightfhDiv ) {
				var columsHeight = $("th",this.grid.columnsView).height();
				$("th",this.grid.rightfhDiv).each(function(){
					$(this).height(columsHeight);
				});
				$(this.grid.rightfhDiv).css({"top": top}); 
				$(this.grid.rightfbDiv).css({"top": (parseInt(top,10)+parseInt(hth,10))}); 
				$(this.grid.rightfbDiv).height( $(this.grid.rowsView).height()-this.getScrollBarWidth()+2);
			}
	},
	setFrozenColumns : function () {
		if ( !this.grid ) {return;}
		var $t = this, cm = $t.options.colModel,i=0, len = cm.length, j = len - 1, rightmaxfrozen = -1, maxfrozen = -1, frozen= false;
		// TODO treeGrid and grouping  Support
		if($t.options.subGrid === true || $t.options.treeGrid === true || $t.options.cellEdit === true || $t.options.sortable || $t.options.scroll || $t.options.grouping )
		{
			return;
		}
		if($t.options.rownumbers) { i++; }
		if($t.options.multiselect||$t.options.singleselect) { i++; }
		
		// get the max index of frozen col
		while(i<len)
		{
			// from left, no breaking frozen
			if(cm[i].frozen === true)
			{
				frozen = true;
				maxfrozen = i;
			} else {
				break;
			}
			i++;
		}
		while( j > 0 )
		{
			// from left, no breaking frozen
			if(cm[j].frozen === true)
			{
				frozen = true;
				rightmaxfrozen = j;
			} else {
				break;
			}
			j--;
		}
		
		if (rightmaxfrozen>0){
			maxfrozen = -1;
		}
		if( frozen) {
			var top = $t.options.caption ? $($t.grid.cDiv).outerHeight() : 0,
			hth = $(".coral-grid-htable","#"+$.grid.coralID($t.options.id)).outerHeight();
			//headers
			if($t.options.toppager) {
				top = top + $($t.grid.topDiv).outerHeight();
			}
			if($t.options.toolbar[0] === true) {
				if($t.options.toolbar[1] != "bottom") {
					top = top + $($t.grid.uDiv).outerHeight();
				}
			}
			if( maxfrozen>=0 ) {
				$t.grid.fhDiv = $('<div style="position:absolute;left:0px;top:'+top+'px;" class="frozen-div coral-state-default coral-grid-columns coral-grid-columns-view"></div>');
				$t.grid.fbDiv = $('<div style="position:absolute;left:0px;top:'+(parseInt(top,10)+parseInt(hth,10))+'px;overflow-y:hidden" class="frozen-bdiv coral-grid-rows coral-grid-rows-view"></div>');
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.fhDiv);
			}
			if( rightmaxfrozen>=0 ) {
				$t.grid.rightfhDiv = $('<div style="position:absolute;right:0;top:'+top+'px;" class="frozen-div coral-state-default coral-grid-columns coral-grid-columns-view"></div>');
				$t.grid.rightfbDiv = $('<div style="position:absolute;right:0;top:'+(parseInt(top,10)+parseInt(hth,10))+'px;overflow-y:hidden" class="frozen-bdiv coral-grid-rows coral-grid-rows-view"></div>');
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.rightfhDiv);
			}
			var htbl = $(".coral-grid-htable","#"+$.grid.coralID($t.options.id)).clone(true);
			var righthtbl = $(".coral-grid-htable","#"+$.grid.coralID($t.options.id)).clone(true);
			// groupheader support - only if useColSpanstyle is false
			$t.rightFrozenWidth = 0;
			if($t.options.groupHeader) {
				//TODO: group frozen on right col
				if( maxfrozen>=0 ) {
					$("tr.jqg-first-row-header, tr.jqg-third-row-header", htbl).each(function(){
						$("th:gt("+maxfrozen+")",this).remove();
					});
				}
				if( rightmaxfrozen>=0 ) {
					$("tr.jqg-first-row-header, tr.jqg-third-row-header", righthtbl).each(function(){
						/*$("th:gt("+ (rightmaxfrozen-1) +")",this).each(function(){
							$t.rightFrozenWidth = $t.rightFrozenWidth + $(this).width();
						});*/
						$("th:lt("+ rightmaxfrozen +")",this).remove();
					});
				}
				var swapfroz = -1, fdel = -1;
				$("tr.jqg-second-row-header th", htbl).each(function(){
					var cs= parseInt($(this).attr("colspan"),10);
					if(cs) {
						swapfroz = swapfroz+cs;
						fdel++;
					}
					if(swapfroz === maxfrozen) {
						return false;
					}
				});
				if(swapfroz !== maxfrozen) {
					fdel = maxfrozen;
				}
				$("tr.jqg-second-row-header", htbl).each(function(){
					$("th:gt("+fdel+")",this).remove();
				});
			} else {
				if( maxfrozen>=0 ) {
					$("tr",htbl).each(function(){
						$("th:gt("+maxfrozen+")",this).remove();
					});
				}
				if( rightmaxfrozen>=0 ) {
					$("tr",righthtbl).each(function(){
						/*$("th:gt("+ (rightmaxfrozen-1) +")",this).each(function(){
							$t.rightFrozenWidth = $t.rightFrozenWidth + $(this).width();
						});*/
						$("th:lt("+ rightmaxfrozen +")",this).remove();
					});
				}
			}
			$(htbl).width(1);
			$(righthtbl).width(1);
			// resizing stuff
			if( maxfrozen>=0 ) {
				$($t.grid.fhDiv).append(htbl).mousemove(function (e) {
					if($t.grid.resizing){ $t.grid.dragMove(e);return false; }
				});
			}
			if( rightmaxfrozen>=0 ) {
				$($t.grid.rightfhDiv).append(righthtbl).mousemove(function (e) {
					if($t.grid.resizing){ $t.grid.dragMove(e);return false; }
				});
			}
			$($t.element).bind('gridonresizestop.setFrozenColumns', function (e, ui) {
				var index = ui.index,
					w = ui.newWidth;
				if( maxfrozen>=0 ) {
					var rhth = $(".coral-grid-htable",$t.grid.fhDiv);
					$("th:eq("+index+")",rhth).width( w ); 
					var btd = $(".coral-grid-btable",$t.grid.fbDiv);
					$("tr:first td:eq("+index+")",btd).width( w ); 
				}
				if( rightmaxfrozen>=0 ) {
					var rhth = $(".coral-grid-htable",$t.grid.rightfhDiv);
					$("th:eq("+(len-index - 1)+")",rhth).width( w ); 
					var btd = $(".coral-grid-btable",$t.grid.rightfbDiv);
					$("tr:first td:eq("+(len-index - 1)+")",btd).width( w ); 
					$t.resetFrozen();
				}
			});
			// sorting stuff
			$($t.element).bind('gridonsortcol.setFrozenColumns', function (event, ui) {
				var index = ui.id, idxcol = ui.colIndex;
				if( maxfrozen>=0 ) {
					var previousSelectedTh = $("tr.coral-grid-labels:last th:eq("+$t.options.lastsort+")",$t.grid.fhDiv), newSelectedTh = $("tr.coral-grid-labels:last th:eq("+idxcol+")",$t.grid.fhDiv); 
					$("span.coral-grid-ico-sort",previousSelectedTh).addClass('coral-state-disabled');
					$(previousSelectedTh).attr("aria-selected","false");
					$("span.coral-icon-"+$t.options.sortorder,newSelectedTh).removeClass('coral-state-disabled');
					$(newSelectedTh).attr("aria-selected","true");
					if(!$t.options.viewsortcols[0]) {
						if($t.options.lastsort != idxcol) {
							$("span.s-ico",previousSelectedTh).hide();
							$("span.s-ico",newSelectedTh).show();
						}
					}
				}
				if( rightmaxfrozen>=0 ) {
					idxcol =  $t.grid.headers.length - idxcol - 1;
					var previousSelectedTh = $("tr.coral-grid-labels:last th:eq("+$t.options.lastsort+")",$t.grid.rightfhDiv), newSelectedTh = $("tr.coral-grid-labels:last th:eq("+idxcol+")",$t.grid.rightfhDiv);

					$("span.coral-grid-ico-sort",previousSelectedTh).addClass('coral-state-disabled');
					$(previousSelectedTh).attr("aria-selected","false");
					$("span.coral-icon-"+$t.options.sortorder,newSelectedTh).removeClass('coral-state-disabled');
					$(newSelectedTh).attr("aria-selected","true");
					if(!$t.options.viewsortcols[0]) {
						if($t.options.lastsort != idxcol) {
							$("span.s-ico",previousSelectedTh).hide();
							$("span.s-ico",newSelectedTh).show();
						}
					}
				}
				
			});
			
			// data stuff
			// TODO support for setRowData
			if( maxfrozen>=0 ) {
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.fbDiv);
			}
			if( rightmaxfrozen>=0 ) {
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.rightfbDiv);
			}
			
			jQuery($t.grid.rowsView).scroll(function () {
				if( maxfrozen>=0 ) {
					jQuery($t.grid.fbDiv).scrollTop(jQuery(this).scrollTop());
				}
				if( rightmaxfrozen>=0 ) {
					jQuery($t.grid.rightfbDiv).scrollTop(jQuery(this).scrollTop());
				}
			});
			if($t.options.hoverrows === true) {
				$("#"+$.grid.coralID($t.options.id)).unbind('mouseover').unbind('mouseout');
			}
			$($t.element).bind('gridaftercomplete.setFrozenColumns', function () {
				$("#"+$.grid.coralID($t.options.id)+"_frozen").remove();
				var btbl, rightbtbl;
				if( maxfrozen>=0 ) {
					btbl = $("#"+$.grid.coralID($t.options.id)+"_table").clone(true);
					jQuery($t.grid.fbDiv).height( jQuery($t.grid.rowsView).height()-$t.getScrollBarWidth()+2);
					$("tr",btbl).each(function(){
						$("td:gt("+maxfrozen+")",this).remove();
						// when singleselect, the name of radio in frozen table can not be same as the original radio
						!$t.options.singleselect||$("td:eq(0)>input",this).attr("name",$("td:eq(0)>input",this).attr("name")+"_forzen");
					});
					$(btbl).width(1).attr("id",$t.options.id+"_frozen");
					$($t.grid.fbDiv).append(btbl);
					if($t.options.hoverrows === true) {
						$("tr.jqgrow", btbl).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).addClass("coral-state-hover"); },
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).removeClass("coral-state-hover"); }
						);
						$("tr.jqgrow", "#"+$.grid.coralID($t.options.id)).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").addClass("coral-state-hover");},
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").removeClass("coral-state-hover"); }
						);
					}
					btbl=null;
				}
				
				if( rightmaxfrozen>=0 ) {
					if( ( $($t.grid.rowsView)[0].scrollHeight - $($t.grid.rowsView)[0].clientHeight ) > 0 ) {
						$t.grid.rightfhDiv.css({"right": ($t.getScrollBarWidth() -2) + "px"});
						$t.grid.rightfbDiv.css({"right": ($t.getScrollBarWidth() -2) + "px"});
					}
					rightbtbl = $("#"+$.grid.coralID($t.options.id)+"_table").clone(true);
					jQuery($t.grid.rightfbDiv).height( jQuery($t.grid.rowsView).height()-$t.getScrollBarWidth()+2);
					$("tr",rightbtbl).each(function(){
						$("td:lt("+ rightmaxfrozen +")",this).remove();
						// when singleselect, the name of radio in frozen table can not be same as the original radio
						!$t.options.singleselect||$("td:eq(0)>input",this).attr("name",$("td:eq(0)>input",this).attr("name")+"_forzen");
					});
					$(rightbtbl).width(1).attr("id",$t.options.id+"_frozen");
					$($t.grid.rightfbDiv).append(rightbtbl);
					if($t.options.hoverrows === true) {
						$("tr.jqgrow", rightbtbl).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).addClass("coral-state-hover"); },
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).removeClass("coral-state-hover"); }
						);
						$("tr.jqgrow", "#"+$.grid.coralID($t.options.id)).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").addClass("coral-state-hover");},
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").removeClass("coral-state-hover"); }
						);
					}
					rightbtbl=null;
				}
				
				
			});
			$t.options.frozenColumns = true;
		}
	},
	destroyFrozenColumns :  function() {
		if ( !this.grid ) {return;}
		if(this.options.frozenColumns === true) {
			var $t = this;
			$($t.grid.fhDiv).remove();
			$($t.grid.fbDiv).remove();
			$($t.grid.rightfhDiv).remove();
			$($t.grid.rightfbDiv).remove();
			$t.grid.fhDiv = null; $t.grid.fbDiv=null;
			$t.grid.rightfhDiv = null; $t.grid.rightfbDiv=null;
			$(this.element).unbind('.setFrozenColumns');
			if($t.options.hoverrows === true) {
				var ptr;
				$("#"+$.grid.coralID($t.options.id)).bind('mouseover',function(e) {
					ptr = $(e.target).closest("tr.jqgrow");
					if($(ptr).attr("class") !== "coral-subgrid") {
					$(ptr).addClass("coral-state-hover");
				}
				}).bind('mouseout',function(e) {
					ptr = $(e.target).closest("tr.jqgrow");
					$(ptr).removeClass("coral-state-hover");
				});
			}
			this.options.frozenColumns = false;
		}
	}
});
})(jQuery);

/**
 * jquery.coral.grouping.js
 */
$.extend($.grid,{
	template : function(format){ //jqgformat
		var args = $.makeArray(arguments).slice(1), j, al = args.length;
		if(format==null) { format = ""; }
		return format.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function(m,i){
			if(!isNaN(parseInt(i,10))) {
				return args[parseInt(i,10)];
			}
			for(j=0; j < al;j++) {
				if($.isArray(args[j])) {
					var nmarr = args[ j ],
					k = nmarr.length;
					while(k--) {
						if(i===nmarr[k].nm) {
							return nmarr[k].v;
						}
					}
				}
			}
		});
	}
});
(function($){
"use strict";
$.component( "coral.grid", $.coral.grid, {
	groupingSetup : function () {
		var that = this, i, j, cml, cm = that.options.colModel, grp = that.options.groupingView;
		if(grp !== null && ( (typeof grp === 'object') || $.isFunction(grp) ) ) {
			if(!grp.groupField.length) {
				that.options.grouping = false;
			} else {
				if (grp.visibiltyOnNextGrouping === undefined) {
					grp.visibiltyOnNextGrouping = [];
				}

				grp.lastvalues=[];
				if(!grp._locgr) {
					grp.groups =[];
				}
				grp.counters =[];
				for(i=0;i<grp.groupField.length;i++) {
					if(!grp.groupOrder[i]) {
						grp.groupOrder[i] = 'asc';
					}
					if(!grp.groupText[i]) {
						grp.groupText[i] = '{0}';
					}
					if( typeof grp.groupColumnShow[i] !== 'boolean') {
						grp.groupColumnShow[i] = true;
					}
					if( typeof grp.groupSummary[i] !== 'boolean') {
						grp.groupSummary[i] = false;
					}
					if( !grp.groupSummaryPos[i]) {
						grp.groupSummaryPos[i] = 'footer';
					}
					if(grp.groupColumnShow[i] === true) {
						grp.visibiltyOnNextGrouping[i] = true;
						$(this.element).grid('showCol',grp.groupField[i]);
					} else {
						grp.visibiltyOnNextGrouping[i] = $("#"+$.grid.coralID(that.options.id+"_"+grp.groupField[i])).is(":visible");
						$(this.element).grid('hideCol',grp.groupField[i]);
					}
				}
				grp.summary =[];
				if(grp.hideFirstGroupCol) {
					grp.formatDisplayField[0] = function (v) { return v;};
				}
				for(j=0, cml = cm.length; j < cml; j++) {
					if(grp.hideFirstGroupCol) {
						if(!cm[j].hidden && grp.groupField[0] === cm[j].name) {
							cm[j].formatter = function(){return '';};
						}
					}
					if(cm[j].summaryType ) {
						if(cm[j].summaryDivider) {
							grp.summary.push({nm:cm[j].name,st:cm[j].summaryType, v: '', sd:cm[j].summaryDivider, vd:'', sr: cm[j].summaryRound, srt: cm[j].summaryRoundType || 'round'});
						} else {
							grp.summary.push({nm:cm[j].name,st:cm[j].summaryType, v: '', sr: cm[j].summaryRound, srt: cm[j].summaryRoundType || 'round'});
						}
					}
				}
			}
		} else {
			this.options.grouping = false;
		}
	},
	groupingPrepare : function ( record, irow ) {
		var grp = this.options.groupingView, i,
		grlen = grp.groupField.length, 
		fieldName,
		v,
		displayName,
		displayValue,
		changed = 0;
		for(i=0;i<grlen;i++) {
			fieldName = grp.groupField[i];
			displayName = grp.displayField[i];
			v = record[fieldName];
			displayValue = displayName == null ? null : record[displayName];

			if( displayValue == null ) {
				displayValue = v;
			}
			if( v !== undefined ) {
				if(irow === 0 ) {
					// First record always starts a new group
					grp.groups.push({idx:i,dataIndex:fieldName,value:v, displayValue: displayValue, startRow: irow, cnt:1, summary : [] } );
					grp.lastvalues[i] = v;
					grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
					$.each(grp.counters[i].summary,function() {
						if ($.isFunction(this.st)) {
							this.v = this.st.call(this, this.v, this.nm, record);
						} else {
							this.v = $(this.element).grid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
							if(this.st.toLowerCase() === 'avg' && this.sd) {
								this.vd = $(this.element).grid('groupingCalculations.handler',this.st, this.vd, this.sd, this.sr, this.srt, record);
							}
						}
					});
					grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
				} else {
					if (typeof v !== "object" && ($.isArray(grp.isInTheSameGroup) && $.isFunction(grp.isInTheSameGroup[i]) ? ! grp.isInTheSameGroup[i].call(this, grp.lastvalues[i], v, i, grp): grp.lastvalues[i] !== v)) {
						// This record is not in same group as previous one
						grp.groups.push({idx:i,dataIndex:fieldName,value:v, displayValue: displayValue, startRow: irow, cnt:1, summary : [] } );
						grp.lastvalues[i] = v;
						changed = 1;
						grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
						$.each(grp.counters[i].summary,function() {
							if ($.isFunction(this.st)) {
								this.v = this.st.call(this, this.v, this.nm, record);
							} else {
								this.v = $(this.element).grid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
								if(this.st.toLowerCase() === 'avg' && this.sd) {
									this.vd = $(this.element).grid('groupingCalculations.handler',this.st, this.vd, this.sd, this.sr, this.srt, record);
								}
							}
						});
						grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
					} else {
						if (changed === 1) {
							// This group has changed because an earlier group changed.
							grp.groups.push({idx:i,dataIndex:fieldName,value:v, displayValue: displayValue, startRow: irow, cnt:1, summary : [] } );
							grp.lastvalues[i] = v;
							grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
							$.each(grp.counters[i].summary,function() {
								if ($.isFunction(this.st)) {
									this.v = this.st.call(this, this.v, this.nm, record);
								} else {
									this.v = $(this.element).grid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
									if(this.st.toLowerCase() === 'avg' && this.sd) {
										this.vd = $(this.element).grid('groupingCalculations.handler',this.st, this.vd, this.sd, this.sr, this.srt, record);
									}
								}
							});
							grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
						} else {
							grp.counters[i].cnt += 1;
							grp.groups[grp.counters[i].pos].cnt = grp.counters[i].cnt;
							$.each(grp.counters[i].summary,function() {
								if ($.isFunction(this.st)) {
									this.v = this.st.call(this, this.v, this.nm, record);
								} else {
									this.v = $(this.element).grid('groupingCalculations.handler',this.st, this.v, this.nm, this.sr, this.srt, record);
									if(this.st.toLowerCase() === 'avg' && this.sd) {
										this.vd = $(this.element).grid('groupingCalculations.handler',this.st, this.vd, this.sd, this.sr, this.srt, record);
									}
								}
							});
							grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
						}
					}
				}
			}
		}
		//gdata.push( rData );
		return this;
	},
	groupingToggle : function(hid){
		var that = this,
		grp = that.options.groupingView,
		strpos = hid.split('_'),
		num = parseInt(strpos[strpos.length-2], 10);
		strpos.splice(strpos.length-2,2);
		var uid = strpos.join("_"),
		minus = grp.minusicon,
		plus = grp.plusicon,
		tar = $("#"+$.grid.coralID(hid)),
		r = tar.length ? tar[0].nextSibling : null,
		tarspan = $("#"+$.grid.coralID(hid)+" span."+"tree-wrap-"+that.options.direction),
		getGroupingLevelFromClass = function (className) {
			var nums = $.map(className.split(" "), function (item) {
				if (item.substring(0, uid.length + 1) === uid + "_") {
					return parseInt(item.substring(uid.length + 1), 10);
				}
			});
			return nums.length > 0 ? nums[0] : undefined;
		},
		itemGroupingLevel,
		showData,
		collapsed = false,
		frz = that.options.frozenColumns ? that.options.id+"_frozen" : false,
		tar2 = frz ? $("#"+$.grid.coralID(hid), "#"+$.grid.coralID(frz) ) : false,
		r2 = (tar2 && tar2.length) ? tar2[0].nextSibling : null;
		if( tarspan.hasClass(minus) ) {
			if(grp.showSummaryOnHide) {
				if(r){
					while(r) {
						itemGroupingLevel = getGroupingLevelFromClass(r.className);
						if (itemGroupingLevel !== undefined && itemGroupingLevel <= num) {
							break;
						}
						$(r).hide();
						r = r.nextSibling;
						if(frz) {
							$(r2).hide();
							r2 = r2.nextSibling;
						}
					}
				}
			} else  {
				if(r){
					while(r) {
						itemGroupingLevel = getGroupingLevelFromClass(r.className);
						if (itemGroupingLevel !== undefined && itemGroupingLevel <= num) {
							break;
						}
						$(r).hide();
						r = r.nextSibling;
						if(frz) {
							$(r2).hide();
							r2 = r2.nextSibling;
						}
					}
				}
			}
			tarspan.removeClass(minus).addClass(plus);
			collapsed = true;
		} else {
			if(r){
				showData = undefined;
				while(r) {
					itemGroupingLevel = getGroupingLevelFromClass(r.className);
					if (showData === undefined) {
						showData = itemGroupingLevel === undefined; // if the first row after the opening group is data row then show the data rows
					}
					if (itemGroupingLevel !== undefined) {
						if (itemGroupingLevel <= num) {
							break;// next item of the same lever are found
						}
						if (itemGroupingLevel === num + 1) {
							$(r).show().find(">td>span."+"tree-wrap-"+ that.options.direction).removeClass(minus).addClass(plus);
							if(frz) {
								$(r2).show().find(">td>span."+"tree-wrap-"+ that.options.direction).removeClass(minus).addClass(plus);
							}
						}
					} else if (showData) {
						$(r).show();
						if(frz) {
							$(r2).show();
						}
					}
					r = r.nextSibling;
					if(frz) {
						r2 = r2.nextSibling;
					}
				}
			}
			tarspan.removeClass(plus).addClass(minus);
		}
		this._trigger("onClickGroup", null, [{"headId":hid , "collapsed":collapsed}]);
		return false;
	},
	groupingRender : function (grdata, colspans, page, rn ) {
		var that = this,
		grp = that.options.groupingView,
		str = "", icon = "", hid, clid, pmrtl = grp.groupCollapse ? grp.plusicon : grp.minusicon, gv, cp=[], len =grp.groupField.length;
		pmrtl += " tree-wrap-"+that.options.direction; 
		$.each(that.options.colModel, function (i,n){
			var ii;
			for(ii=0;ii<len;ii++) {
				if(grp.groupField[ii] === n.name ) {
					cp[ii] = i;
					break;
				}
			}
		});
		var toEnd = 0;
		function findGroupIdx( ind , offset, grp) {
			var ret = false, i;
			if(offset===0) {
				ret = grp[ind];
			} else {
				var id = grp[ind].idx;
				if(id===0) { 
					ret = grp[ind]; 
				}  else {
					for(i=ind;i >= 0; i--) {
						if(grp[i].idx === id-offset) {
							ret = grp[i];
							break;
						}
					}
				}
			}
			return ret;
		}
		function buildSummaryTd(i, ik, grp, foffset) {
			var fdata = findGroupIdx(i, ik, grp),
			cm = that.options.colModel,
			vv, grlen = fdata.cnt, str="", k;
			for(k=foffset; k<colspans;k++) {
				var tmpdata = "<td "+ this.formatCol(k,1,'')+">&#160;</td>",
				tplfld = "{0}";
				$.each(fdata.summary,function(){
					if(this.nm === cm[k].name) {
						if(cm[k].summaryTpl)  {
							tplfld = cm[k].summaryTpl;
						}
						if(typeof this.st === 'string' && this.st.toLowerCase() === 'avg') {
							if(this.sd && this.vd) { 
								this.v = (this.v/this.vd);
							} else if(this.v && grlen > 0) {
								this.v = (this.v/grlen);
							}
						}
						try {
							this.groupCount = fdata.cnt;
							this.groupIndex = fdata.dataIndex;
							this.groupValue = fdata.value;
							vv = this.formatter('', this.v, k, this);
						} catch (ef) {
							vv = this.v;
						}
						tmpdata= "<td "+ this.formatCol(k,1,'')+">"+$.grid.format(tplfld,vv)+ "</td>";
						return false;
					}
				});
				str += tmpdata;
			}
			return str;
		}
		var sumreverse = $.makeArray(grp.groupSummary), mul;
		sumreverse.reverse();
		mul = that.options.multiselect ? " colspan=\"2\"" : "";
		$.each(grp.groups,function(i,n){
			if(grp._locgr) {
				if( !(n.startRow +n.cnt > (page-1)*rn && n.startRow < page*rn)) {
					return true;
				}
			}
			toEnd++;
			clid = that.options.id+"ghead_"+n.idx;
			hid = clid+"_"+i;
			icon = "<span style='cursor:pointer;' class='icon "+pmrtl+"' onclick=\"jQuery('#"+$.grid.coralID(that.options.id)+"').grid('groupingToggle','"+hid+"');return false;\"></span>";
			try {
				if ($.isArray(grp.formatDisplayField) && $.isFunction(grp.formatDisplayField[n.idx])) {
					n.displayValue = grp.formatDisplayField[n.idx].call(this, n.displayValue, n.value, that.options.colModel[cp[n.idx]], n.idx, grp);
					gv = n.displayValue;
				} else {
					gv = this.formatter(hid, n.displayValue, cp[n.idx], n.value );
				}
			} catch (egv) {
				gv = n.displayValue;
			}
			if(grp.groupSummaryPos[n.idx] === 'header')  {
				str += "<tr id=\""+hid+"\"" +(grp.groupCollapse && n.idx>0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"coral-component-content jqgroup coral-row-"+that.options.direction+" "+clid+"\"><td style=\"padding-left:"+(n.idx * 12) + "px;"+"\"" + mul +">"+icon+$.grid.template(grp.groupText[n.idx], gv, n.cnt, n.summary)+"</td>";
				str += buildSummaryTd(i, 0, grp.groups, grp.groupColumnShow[n.idx] === false ? (mul ==="" ? 2 : 3) : ((mul ==="") ? 1 : 2) );
				str += "</tr>";
			} else {
				str += "<tr id=\""+hid+"\"" +(grp.groupCollapse && n.idx>0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"coral-component-content jqgroup coral-row-"+that.options.direction+" "+clid+"\"><td style=\"padding-left:"+(n.idx * 12) + "px;"+"\" colspan=\""+(grp.groupColumnShow[n.idx] === false ? colspans-1 : colspans)+"\">"+icon+$.grid.template(grp.groupText[n.idx], gv, n.cnt, n.summary)+"</td></tr>";
			}
			var leaf = len-1 === n.idx; 
			if( leaf ) {
				var gg = grp.groups[i+1], kk, ik, offset = 0, sgr = n.startRow,
				end = gg !== undefined ?  gg.startRow : grp.groups[i].startRow + grp.groups[i].cnt;
				if(grp._locgr) {
					offset = (page-1)*rn;
					if(offset > n.startRow) {
						sgr = offset;
					}
				}
				for(kk=sgr;kk<end;kk++) {
					if(!grdata[kk - offset]) { break; }
					str += grdata[kk - offset].join('');
				}
				if(grp.groupSummaryPos[n.idx] !== 'header') {
					var jj;
					if (gg !== undefined) {
						for (jj = 0; jj < grp.groupField.length; jj++) {
							if (gg.dataIndex === grp.groupField[jj]) {
								break;
							}
						}
						toEnd = grp.groupField.length - jj;
					}
					for (ik = 0; ik < toEnd; ik++) {
						if(!sumreverse[ik]) { continue; }
						var hhdr = "";
						if(grp.groupCollapse && !grp.showSummaryOnHide) {
							hhdr = " style=\"display:none;\"";
						}
						str += "<tr"+hhdr+" jqfootlevel=\""+(n.idx-ik)+"\" role=\"row\" class=\"coral-component-content jqfoot coral-row-"+that.options.direction+"\">";
						str += buildSummaryTd(i, ik, grp.groups, 0);
						str += "</tr>";
					}
					toEnd = jj;
				}
			}
		});
		$("#"+$.grid.coralID(that.options.id)+" tbody:first").append(str);
		// free up memory
		str = null;
	},
	groupingGroupBy : function (name, options ) {
			var that = this;
			if(typeof name === "string") {
				name = [name];
			}
			var grp = that.options.groupingView;
			that.options.grouping = true;

			//Set default, in case visibilityOnNextGrouping is undefined 
			if (grp.visibiltyOnNextGrouping === undefined) {
				grp.visibiltyOnNextGrouping = [];
			}
			var i;
			// show previous hidden groups if they are hidden and weren't removed yet
			for(i=0;i<grp.groupField.length;i++) {
				if(!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
				$(this).grid('showCol',grp.groupField[i]);
				}
			}
			// set visibility status of current group columns on next grouping
			for(i=0;i<name.length;i++) {
				grp.visibiltyOnNextGrouping[i] = $("#"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(name[i])).is(":visible");
			}
			that.options.groupingView = $.extend(that.options.groupingView, options || {});
			grp.groupField = name;
			$(this).trigger("reloadGrid");
		},
	groupingRemove : function (current) {
			var that = this;
			if(current === undefined) {
				current = true;
			}
			that.options.grouping = false;
			if(current===true) {
				var grp = that.options.groupingView, i;
				// show previous hidden groups if they are hidden and weren't removed yet
				for(i=0;i<grp.groupField.length;i++) {
				if (!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
						$(this).grid('showCol', grp.groupField);
					}
				}
				$("tr.jqgroup, tr.jqfoot","#"+$.grid.coralID(that.options.id)+" tbody:first").remove();
				$("tr.jqgrow:hidden","#"+$.grid.coralID(that.options.id)+" tbody:first").show();
			} else {
				$(this).trigger("reloadGrid");
			}
		},
	groupingCalculations : {
		handler: function(fn, v, field, round, roundType, rc) {
			var funcs = {
				sum: function() {
					return parseFloat(v||0) + parseFloat((rc[field]||0));
				},
				min: function() {
					if(v==="") {
						return parseFloat(rc[field]||0);
					}
					return Math.min(parseFloat(v),parseFloat(rc[field]||0));
				},
				max: function() {
					if(v==="") {
						return parseFloat(rc[field]||0);
					}
					return Math.max(parseFloat(v),parseFloat(rc[field]||0));
				},

				count: function() {
					if(v==="") {v=0;}
					if(rc.hasOwnProperty(field)) {
						return v+1;
					}
					return 0;
				},
				avg: function() {
					// the same as sum, but at end we divide it
					// so use sum instead of duplicating the code (?)
					return funcs.sum();
				}
			};
			if(!funcs[fn]) {
				throw ("jqGrid Grouping No such method: " + fn);
			}
			var res = funcs[fn]();
			if (round != null) {
				if (roundType === 'fixed') {
					res = res.toFixed(round);
				} else {
					var mul = Math.pow(10, round);
					res = Math.round(res * mul) / mul;
				}
			}
			return res;
		}	
	}
});
})(jQuery);

(function($){
"use strict";
$.component( "coral.grid", $.coral.grid, {
	editCell: function (iRow,iCol, ed){		
		var that = this, nm, tmp,cc, cm;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		iCol = parseInt(iCol,10);

		// select the row that can be used for other methods
	//	that.options.selrow = that.rows[iRow].id;
		if (!that.options.knv) {$(that.element).grid("GridNav");}
		// check to see if we have already edited cell
		if (that.options.savedRow.length>0) {
			// prevent second click on that field and enable selects
			if (ed===true ) {
				if(iRow == that.options.iRow && iCol == that.options.iCol){
					return;
				}
			}
			// save the cell
			if ( that.rows[that.options.savedRow[0].id] ) {
				if( !$(that.element).grid("saveCell",that.options.savedRow[0].id,that.options.savedRow[0].ic) ){
					return;
				}
			}
		} else {
			window.setTimeout(function () { $("#"+$.grid.coralID(that.options.knv)).attr("tabindex","-1").focus();},0);
		}
		cm = that.options.colModel[iCol];
		nm = cm.name;
		if (nm=='subgrid' || nm=='cb' || nm=='rn') {return;}
		cc = $("td:eq("+iCol+")",that.rows[iRow]);
		if (cm.editable===true && ed===true && !cc.hasClass("not-editable-cell")) {
			if(parseInt(that.options.iCol,10)>=0  && parseInt(that.options.iRow,10)>=0) {
				$("td:eq("+that.options.iCol+")",that.rows[that.options.iRow]).removeClass("edit-cell coral-state-highlight");
				$(that.rows[that.options.iRow]).removeClass("selected-row coral-state-hover");
			}
			$(cc).addClass("edit-cell coral-state-highlight");
			$(that.rows[iRow]).addClass("selected-row coral-state-hover");
			try {
				tmp =  $.unformat.call(that,cc,{rowId: that.rows[iRow].id, colModel:cm},iCol);
			} catch (_) {
				tmp = ( cm.edittype && cm.edittype == 'textarea' ) ? $(cc).text() : $(cc).html();
			}
			if(that.options.autoencode) { tmp = $.grid.htmlDecode(tmp); }
			if( !that._trigger("beforeEditCell",null,[{"rowId":that.rows[iRow].id,"name":nm,"cellValue":tmp,"rowIndex":iRow,"cellIndex":iCol}]) ) return;
			//if (!cm.edittype) {cm.edittype = "text";}
			that.options.savedRow.push({id:iRow,ic:iCol,name:nm,value:tmp});
			if(tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length===1 && tmp.charCodeAt(0)===160) ) {tmp='';}
			if($.isFunction(that.options.formatCell)) {
				var tmp2 = that.options.formatCell.call(that, that.rows[iRow].id,nm,tmp,iRow,iCol);
				if(tmp2 !== undefined ) {tmp = tmp2;}
			}
			var editoptions = cm.editoptions,
				attr = {
					id:iRow+"_"+nm,
					name:nm
				};
			//editoptions = $.extend({}, editoptions || {} ,{id:iRow+"_"+nm,name:nm});
			editoptions = $.extend({}, editoptions || {},attr);
			var elc = $.grid.createEl.call(that,cm.edittype,editoptions,tmp,true,$.extend({},$.grid.ajaxOptions,that.options.ajaxSelectOptions || {}));


			$(cc).html("").append(elc).attr("tabindex","0");
			var _keydown = function(e){
				if (e.keyCode === 27) {
					if($("input.hasDatepicker",cc).length >0) {
						if( $(".coral-datepicker").is(":hidden") )  { $(that.element).grid("restoreCell",iRow,iCol); }
						else { $("input.hasDatepicker",cc).datepicker('hide'); }
					} else {
						$(that.element).grid("restoreCell",iRow,iCol);
					}
				} //ESC
				if (e.keyCode === 13) {
					$(that.element).grid("saveCell",iRow,iCol);
					// Prevent default action
					return false;
				} //Enter
				if (e.keyCode === 9) {
					if(!that.grid.columnsView.loading ) {
						if (e.shiftKey) {$(that.element).grid("prevCell",iRow,iCol);} //Shift TAb
						else {$(that.element).grid("nextCell",iRow,iCol);} //Tab
					} else {
						return false;
					}
				}
				e.stopPropagation();
			};
			/*var _onValidSuccess = editoptions.onValidSuccess;
			editoptions = $.extend({}, editoptions, {"onValidSuccess":function(e, ui){
				$(e.target).parent("td").removeClass( "coral-gridcell-error" );
				_onValidSuccess&&_onValidSuccess.apply( $( this ), [e, ui] );
				e.stopPropagation();
			}});
			var _onValidError = editoptions.onValidError;
			editoptions = $.extend({}, editoptions, {"onValidError":function(e, ui){
				$(e.target).parent("td").removeClass( "coral-gridcell-error" );
				_onValidError&&_onValidError.apply( $( this ), [e, ui] );
				e.stopPropagation();
			}});*/
		//	var coralOption = {"onValidSuccess":_onValidSuccess,"onValidError":_onValidError,"onKeyDown":_keydown, "value":$(elc).val()};
			var coralOption = {"onKeyDown":_keydown, "value":$(elc).val()},
				type = cm.edittype,
				rwd = $(that.element).grid("getRowData",that.rows[iRow].id);
			switch ( cm.edittype ) {
				case "text":
				case "textarea":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).textbox(editoptions);					
					break;					
				case "datepicker":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).datepicker(editoptions);
					break;
				case "radio":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).radio(editoptions);
					if ( $(elc).val() == "Yes" ) {
						$(elc).radio("check");
					} else {
						$(elc).radio("uncheck");
					}
					break;
				case "checkbox":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).checkbox(editoptions);	
					if ( $(elc).val() == "Yes" ) {
						$(elc).checkbox("check");
					} else {
						$(elc).checkbox("uncheck");
					}
					break;
				case "autocomplete":
					var value = $(elc).val();
					var isUrl = typeof ( editoptions.source ) == "string";
					editoptions = $.extend({}, editoptions, coralOption);
					var postMode = editoptions.postMode || "value";
					/*var _onChange = editoptions.onChange;
					editoptions = $.extend({}, editoptions, {"onChange":function(e, ui){
						$(elc).closest("td").attr( "data-org", isUrl?ui.value:ui.text );
						_onChange&&_onChange.apply(elc, [e, ui]);
					}});*/
					editoptions.postMode = postMode;
					editoptions = $.extend({}, editoptions, {"onKeyDown":_keydown});
					$(elc).autocomplete(editoptions);
					if ( isUrl ) {
						editoptions.postMode = "text";
						$(elc).autocomplete(editoptions);
						$( elc ).autocomplete( "setValue", value );
					} else {//data模式
						if ( postMode == "value" ) {
							$( elc ).autocomplete( "setValue", value );
						} else {
							/*var grepArr = $.grep( editoptions.source, function( _value ) {
								return _value[editoptions.textField||"text"] == value;
							});
							if ( grepArr.length ){
								//$( elc ).autocomplete( "setValue", grepArr[0][editoptions.valueField||"value"] );
							}*/
							$( elc ).autocomplete( "setValue", value );
							$( elc ).autocomplete( "setText", value );
						}
					}

					break;
				case "combobox":
				case "combotree":
				case "combogrid":
					editoptions = $.extend({}, editoptions, coralOption);
					if(cm.cellEditoptions){
						var cellOpt = that.getCellEditOptions(cm,$(elc).val(),editoptions,rwd,attr,coralOption);
					}
					type = cellOpt && cellOpt.type ? cellOpt.type : cm.edittype;
					editoptions = cellOpt && cellOpt.cOpts ? cellOpt.cOpts : editoptions ;
					type = type =="text"? "textbox" : type;
					$(elc)[type](editoptions);
					break;
			
			}
			window.setTimeout( function () { $(elc).focus();},0 );
			/*$("input, select, textarea",cc).bind("keydown",function(e) {
				if (e.keyCode === 27) {
					if($("input.hasDatepicker",cc).length >0) {
						if( $(".coral-datepicker").is(":hidden") )  { $(that.element).grid("restoreCell",iRow,iCol); }
						else { $("input.hasDatepicker",cc).datepicker('hide'); }
					} else {
						$(that.element).grid("restoreCell",iRow,iCol);
					}
				} //ESC
				if (e.keyCode === 13) {
					$(that.element).grid("saveCell",iRow,iCol);
					// Prevent default action
					return false;
				} //Enter
				if (e.keyCode === 9)  {
					if(!that.grid.columnsView.loading ) {
						if (e.shiftKey) {$(that.element).grid("prevCell",iRow,iCol);} //Shift TAb
						else {$(that.element).grid("nextCell",iRow,iCol);} //Tab
					} else {
						return false;
					}
				}
				e.stopPropagation();
			});*/
			/*$(that.element).triggerHandler("aftereditcell", [that.rows[iRow].id, nm, tmp, iRow, iCol]);
			if ($.isFunction(that.options.afterEditCell)) {
				that.options.afterEditCell.call(that, that.rows[iRow].id,nm,tmp,iRow,iCol);
			}*/
			that._trigger("afterEditCell",null,[{"rowId":that.rows[iRow].id,"name":nm,"cellValue":tmp,"rowIndex":iRow,"celIndex":iCol}]);
		} else {
			if (parseInt(that.options.iCol,10)>=0  && parseInt(that.options.iRow,10)>=0) {
				$("td:eq("+that.options.iCol+")",that.rows[that.options.iRow]).removeClass("edit-cell coral-state-highlight");
				$(that.rows[that.options.iRow]).removeClass("selected-row coral-state-hover");
			}
			cc.addClass("edit-cell coral-state-highlight");
			$(that.rows[iRow]).addClass("selected-row coral-state-hover");
			tmp = cc.html().replace(/\&#160\;/ig,'');
			$(that.element).triggerHandler("jqGridSelectCell", [that.rows[iRow].id, nm, tmp, iRow, iCol]);
			if ($.isFunction(that.options.onSelectCell)) {
				that.options.onSelectCell.call(that, that.rows[iRow].id,nm,tmp,iRow,iCol);
			}
		}
		//$(cc).validate();
		that.options.iCol = iCol; that.options.iRow = iRow;
	},
	getCellEditOptions: function(cm,value,editoptions,rwd,attr,coralOption){
		var cOpts = $.coral.toFunction(cm.cellEditoptions).call(this, value, editoptions, rwd);
		var type = cOpts && cOpts.type ? cOpts.type : cm.edittype;
		cOpts = cOpts && cOpts.cellEditoptions ? $.extend({}, cOpts.cellEditoptions, attr, coralOption):editoptions;
		editoptions = cOpts || editoptions;
		return {
			cOpts:cOpts,
			type : type
		}
	},
	GridNav : function() {
		var  that = this;
		if (!that.grid || that.options.cellEdit !== true ) {return;}
		// trick to process keydown on non input elements
		that.options.knv = that.options.id + "_kn";
		var selection = $("<span style='width:0px;height:0px;background-color:black;' tabindex='0'><span tabindex='-1' style='width:0px;height:0px;background-color:grey' id='"+that.options.knv+"'></span></span>"),
		i, kdir;
		function scrollGrid(iR, iC, tp){
			if (tp.substr(0,1)=='v') {
				var ch = $(that.grid.rowsView)[0].clientHeight,
				st = $(that.grid.rowsView)[0].scrollTop,
				nROT = that.rows[iR].offsetTop+that.rows[iR].clientHeight,
				pROT = that.rows[iR].offsetTop;
				if(tp == 'vd') {
					if(nROT >= ch) {
						$(that.grid.rowsView)[0].scrollTop = $(that.grid.rowsView)[0].scrollTop + that.rows[iR].clientHeight;
					}
				}
				if(tp == 'vu'){
					if (pROT < st ) {
						$(that.grid.rowsView)[0].scrollTop = $(that.grid.rowsView)[0].scrollTop - that.rows[iR].clientHeight;
					}
				}
			}
			if(tp=='h') {
				var cw = $(that.grid.rowsView)[0].clientWidth,
				sl = $(that.grid.rowsView)[0].scrollLeft,
				nCOL = that.rows[iR].cells[iC].offsetLeft+that.rows[iR].cells[iC].clientWidth,
				pCOL = that.rows[iR].cells[iC].offsetLeft;
				if(nCOL >= cw+parseInt(sl,10)) {
					$(that.grid.rowsView)[0].scrollLeft = $(that.grid.rowsView)[0].scrollLeft + that.rows[iR].cells[iC].clientWidth;
				} else if (pCOL < sl) {
					$(that.grid.rowsView)[0].scrollLeft = $(that.grid.rowsView)[0].scrollLeft - that.rows[iR].cells[iC].clientWidth;
				}
			}
		}
		function findNextVisible(iC,act){
			var ind, i;
			if(act == 'lft') {
				ind = iC+1;
				for (i=iC;i>=0;i--){
					if (that.options.colModel[i].hidden !== true) {
						ind = i;
						break;
					}
				}
			}
			if(act == 'rgt') {
				ind = iC-1;
				for (i=iC; i<that.options.colModel.length;i++){
					if (that.options.colModel[i].hidden !== true) {
						ind = i;
						break;
					}						
				}
			}
			return ind;
		}

		//$(selection).insertBefore(that.grid.cDiv);//mark 暂时不考虑添加caption，先添加到columnsView前
		$(selection).insertBefore(that.grid.columnsView);
		$("#"+that.options.knv)
		.focus()
		.keydown(function (e){
			kdir = e.keyCode;
			if(that.options.direction == "rtl") {
				if(kdir===37) { kdir = 39;}
				else if (kdir===39) { kdir = 37; }
			}
			switch (kdir) {
				case 38:
					if (that.options.iRow-1 >0 ) {
						scrollGrid(that.options.iRow-1,that.options.iCol,'vu');
						$(that.element).grid("editCell",that.options.iRow-1,that.options.iCol,false);
					}
				break;
				case 40 :
					if (that.options.iRow+1 <=  that.rows.length-1) {
						scrollGrid(that.options.iRow+1,that.options.iCol,'vd');
						$(that.element).grid("editCell",that.options.iRow+1,that.options.iCol,false);
					}
				break;
				case 37 :
					if (that.options.iCol -1 >=  0) {
						i = findNextVisible(that.options.iCol-1,'lft');
						scrollGrid(that.options.iRow, i,'h');
						$(that.element).grid("editCell",that.options.iRow, i,false);
					}
				break;
				case 39 :
					if (that.options.iCol +1 <=  that.options.colModel.length-1) {
						i = findNextVisible(that.options.iCol+1,'rgt');
						scrollGrid(that.options.iRow,i,'h');
						$(that.element).grid("editCell",that.options.iRow,i,false);
					}
				break;
				case 13:
					if (parseInt(that.options.iCol,10)>=0 && parseInt(that.options.iRow,10)>=0) {
						$(that.element).grid("editCell",that.options.iRow,that.options.iCol,true);
					}
				break;
				default :
					return true;
			}
			return false;
		});
	},
	saveCell : function (iRow, iCol){
		var that= this, fr;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		if ( that.options.savedRow.length >= 1) {fr = 0;} else {fr=null;} 
		if(fr !== null) {
			var cc = $("td:eq("+iCol+")",that.rows[iRow]),v,v2,
			cm = that.options.colModel[iCol], nm = cm.name, nmjq = $.grid.coralID(nm) ;
			if ( this.options.autoValid ) {
				var isValid = this.valid( that.rows[iRow].id, cm.name );
				if ( !this.options.allowSaveOnError && !isValid ) {
					$.message("请确认是否输入正确！");return isValid;
				}
			}
			var edittype = cm.edittype;
			if (cm.cellEditoptions) {
				var rwd = $(that.element).grid("getRowData",that.rows[iRow].id),
					sel = $("#"+iRow+"_"+nmjq,that.rows[iRow]),
					cOpts = $.coral.toFunction(cm.cellEditoptions).call(this,$(sel).val(),cm.editoptions,rwd);
				edittype = cOpts && cOpts.type ? cOpts.type: edittype;
			}
			switch (edittype) {
				case "select":
					if(!cm.editoptions.multiple) {
						v = $("#"+iRow+"_"+nmjq+" option:selected",that.rows[iRow]).val();
						v2 = $("#"+iRow+"_"+nmjq+" option:selected",that.rows[iRow]).text();
					} else {
						var sel = $("#"+iRow+"_"+nmjq,that.rows[iRow]), selectedText = [];
						v = $(sel).val();
						if(v) { v.join(",");} else { v=""; }
						$("option:selected",sel).each(
							function(i,selected){
								selectedText[i] = $(selected).text();
							}
						);
						v2 = selectedText.join(",");
					}
					if(cm.formatter) { v2 = v; }
					break;
				case "checkbox":
					var cbv  = ["Yes","No"];
					if(cm.editoptions){
						cbv = cm.editoptions.value.split(":");
					}
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).is(":checked") ? cbv[0] : cbv[1];
					v2=v;
					break;
				case "password":
				case "text":
				case "textarea":
					//lihaibo add begin
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).val();
					v2=v;
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					break;
					//lihaibo add end
				case "button" :
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).val();
					v2=v;
					break;
				case 'custom' :
					try {
						if(cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
							v = cm.editoptions.custom_value.call(that, $(".customelement",cc),'get');
							if (v===undefined) { throw "e2";} else { v2=v; }
						} else { throw "e1"; }
					} catch (e) {
						if (e=="e1") { $.grid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.nodefined,jQuery.jgrid.edit.bClose); }
						if (e=="e2") { $.grid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.novalue,jQuery.jgrid.edit.bClose); }
						else {$.grid.info_dialog(jQuery.jgrid.errors.errcap,e.message,jQuery.jgrid.edit.bClose); }
					}
					break;
				case "datepicker":
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).val();
					v2 = v;
					var $el = $("#"+iRow+"_"+nmjq,that.rows[iRow]);
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					break;
				case "combobox":
				case "combogrid":
				case "combotree":
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getValues").toString();
					v2 = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getText");
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					if(cm.formatter) { v2 = v; }
					break;
				case "autocomplete":
					v2 = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getText");
					if ( typeof ( cm.editoptions.source ) == "string" ) {
						v = v2;
					} else {
						v = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getValue");
					}
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					if(cm.formatter&&cm.postMode=="value") { v2 = v; }
					break;
			}
			// The common approach is if nothing changed do not do anything
			if (v2 !== that.options.savedRow[fr].value){
				//that._trigger("beforeSaveCell", null, [{"rowId":that.rows[iRow].id,"name":nm,"cellValue":v,"rowIndex":iRow,"celIndex":iCol}]);
				var vvv = $(that).triggerHandler("jqGridBeforeSaveCell", [that.rows[iRow].id, nm, v, iRow, iCol]);
				if (vvv) {v = vvv; v2=vvv;}
				if ($.isFunction(that.options.beforeSaveCell)) {
					var vv = that.options.beforeSaveCell.call(that, that.rows[iRow].id,nm, v, iRow,iCol);
					if (vv) {v = vv; v2=vv;}
				}
				var cv = $.grid.checkValues(v,iCol,that);
				if(cv[0] === true) {
					var addpost = $(that).triggerHandler("jqGridBeforeSubmitCell", [that.rows[iRow].id, nm, v, iRow, iCol]) || {};
					if ($.isFunction(that.options.beforeSubmitCell)) {
						addpost = that.options.beforeSubmitCell.call(that, that.rows[iRow].id,nm, v, iRow,iCol);
						if (!addpost) {addpost={};}
					}
					if( $("input.hasDatepicker",cc).length >0) { $("input.hasDatepicker",cc).datepicker('hide'); }
					if (that.options.cellsubmit == 'remote') {
						if (that.options.cellurl) {
							var postdata = {};
							if(that.options.autoencode) { v = $.grid.htmlEncode(v); }
							postdata[nm] = v;
							var idname,oper, opers;
							opers = that.options.prmNames;
							idname = opers.id;
							oper = opers.oper;
							postdata[idname] = $.grid.stripPref(that.options.idPrefix, that.rows[iRow].id);
							postdata[oper] = opers.editoper;
							postdata = $.extend(addpost,postdata);
							$("#lui_"+$.grid.coralID(that.options.id)).show();
							that.grid.columnsView.loading = true;
							$.ajax( $.extend( {
								url: that.options.cellurl,
								data :$.isFunction(that.options.serializeCellData) ? that.options.serializeCellData.call(that, postdata) : postdata,
								type: "POST",
								complete: function (result, stat) {
									$("#lui_"+that.options.id).hide();
									that.grid.columnsView.loading = false;
									if (stat == 'success') {
										var ret = $(that).triggerHandler("jqGridAfterSubmitCell", [that, result, postdata.id, nm, v, iRow, iCol]) || [true, ''];
										if (ret[0] === true && $.isFunction(that.options.afterSubmitCell)) {
											ret = that.options.afterSubmitCell.call(that, result,postdata.id,nm,v,iRow,iCol);
										}
										if(ret[0] === true){
											$(cc).empty();
											$(that.element).grid("setCell",that.rows[iRow].id, iCol, v2, false, false, true);
											$(cc).addClass("dirty-cell");
											$(that.rows[iRow]).addClass("edited");
											$(that).triggerHandler("jqGridAfterSaveCell", [that.rows[iRow].id, nm, v, iRow, iCol]);
											if ($.isFunction(that.options.afterSaveCell)) {
												that.options.afterSaveCell.call(that, that.rows[iRow].id,nm, v, iRow,iCol);
											}
											that.options.savedRow.splice(0,1);
										} else {
											$.grid.info_dialog($.grid.errors.errcap,ret[1],$.grid.edit.bClose);
											$(that.element).grid("restoreCell",iRow,iCol);
										}
									}
								},
								error:function(res,stat,err) {
									$("#lui_"+$.grid.coralID(that.options.id)).hide();
									that.grid.columnsView.loading = false;
									$(that).triggerHandler("jqGridErrorCell", [res, stat, err]);
									if ($.isFunction(that.options.errorCell)) {
										that.options.errorCell.call(that, res,stat,err);
										$(that.element).grid("restoreCell",iRow,iCol);
									} else {
										$.grid.info_dialog($.grid.errors.errcap,res.status+" : "+res.statusText+"<br/>"+stat,$.grid.edit.bClose);
										$(that.element).grid("restoreCell",iRow,iCol);
									}
								}
							}, $.grid.ajaxOptions, that.options.ajaxCellOptions || {}));
						} else {
							try {
								$.grid.info_dialog($.grid.errors.errcap,$.grid.errors.nourl,$.grid.edit.bClose);
								$(that.element).grid("restoreCell",iRow,iCol);
							} catch (e) {}
						}
					}
					if (that.options.cellsubmit == 'clientArray') {
						$(cc).empty();
						$(that.element).grid("setCell",that.rows[iRow].id,iCol, v2, false, false, true);
						$(cc).addClass("dirty-cell");
						$(that.rows[iRow]).addClass("edited");
						that._trigger("afterSaveCell", null, [{"rowId":that.rows[iRow].id,"name":nm,"cellValue":v,"rowIndex":iRow,"celIndex":iCol}]);
						that.options.savedRow.splice(0,1);
					}
				} else {
					try {
						window.setTimeout(function(){$.grid.info_dialog($.grid.errors.errcap,v+" "+cv[1],$.grid.edit.bClose);},100);
						$(that.element).grid("restoreCell",iRow,iCol);
					} catch (e) {}
				}
			} else {
				$(that.element).grid("restoreCell",iRow,iCol);
			}
			/*if ( this.options.autoValid ) {
				this.valid( that.rows[iRow].id, cm.name );
			}*/
		}
		//if ($.browser.opera) {
		if (false) {
			$("#"+$.grid.coralID(that.options.knv)).attr("tabindex","-1").focus();
		} else {
			window.setTimeout(function () { $("#"+$.grid.coralID(that.options.knv)).attr("tabindex","-1").focus();},0);
		}
		//$(cc).validate("destroy");
	},
	restoreCell : function(iRow, iCol) {
		var that= this, fr;
		if (!that.grid || that.options.cellEdit !== true ) {return;}
		if ( that.options.savedRow.length >= 1) {fr = 0;} else {fr=null;}
		if(fr !== null) {
			var cc = $("td:eq("+iCol+")",that.rows[iRow]);
			// datepicker fix
			/*if($.isFunction($.fn.datepicker)) {
				try {
					$("input.hasDatepicker",cc).datepicker('hide');
				} catch (e) {}
			}*/
			$(cc).empty().attr("tabindex","-1");
			$(that.element).grid("setCell",that.rows[iRow].id, iCol, that.options.savedRow[fr].value, false, false, true);
			$(that).triggerHandler("jqGridAfterRestoreCell", [that.rows[iRow].id, that.options.savedRow[fr].value, iRow, iCol]);
			if ($.isFunction(that.options.afterRestoreCell)) {
				that.options.afterRestoreCell.call(that, that.rows[iRow].id, that.options.savedRow[fr].value, iRow, iCol);
			}				
			that.options.savedRow.splice(0,1);
		}
		window.setTimeout(function () { $("#"+that.options.knv).attr("tabindex","-1").focus();},0);
	},
	nextCell : function (iRow,iCol) {
		var that = this, nCol=false;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		// try to find next editable cell
		for (var i=iCol+1; i<that.options.colModel.length; i++) {
			if ( that.options.colModel[i].editable ===true) {
				nCol = i; break;
			}
		}
		if(nCol !== false) {
			$(that.element).grid("editCell",iRow,nCol,true);
		} else {
			if (that.options.savedRow.length >0) {
				$(that.element).grid("saveCell",iRow,iCol);
			}
		}
	},
	prevCell : function (iRow,iCol) {
		var that = this, nCol=false;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		// try to find next editable cell
		for (var i=iCol-1; i>=0; i--) {
			if ( that.options.colModel[i].editable ===true) {
				nCol = i; break;
			}
		}
		if(nCol !== false) {
			$(that.element).grid("editCell",iRow,nCol,true);
		} else {
			if (that.options.savedRow.length >0) {
				$(that.element).grid("saveCell",iRow,iCol);
			}
		}
	},
	getChangedCells : function (mthd) {
		var ret=[];
		if (!mthd) {mthd='all';}
		var that= this, nm, success = true;
		if (!that.grid || that.options.cellEdit !== true ) {return;}
		$(that.rows).each(function(j){
			var res = {};
			if ($(this).hasClass("edited")) {
				$('td',this).each( function(i) {
					nm = that.options.colModel[i].name;
					if ( nm !== 'cb' && nm !== 'subgrid') {
						if ( $(this).hasClass( "coral-gridcell-error" ) ) {
							success = false;
							return false;
						}
						if (mthd=='dirty') {
							if ($(this).hasClass('dirty-cell')) {
								try {
									res[nm] = $.unformat.call(that,this,{rowId:that.rows[j].id, colModel:that.options.colModel[i]},i);
								} catch (e){
									res[nm] = $.jgrid.htmlDecode($(this).html());
								}
							}
						} else {
							try {
								res[nm] = $.unformat.call(that,this,{rowId:that.rows[j].id,colModel:that.options.colModel[i]},i);
							} catch (e) {
								res[nm] = $.jgrid.htmlDecode($(this).html());
							}
						}
					}
				});
				if(!success){
					return false;
				}
				res.id = this.id;
				ret.push(res);
			}
		});
		if(!success){
			ret = [];
		}
		return ret;
	}
});
})(jQuery);

;(function($){
/**
 * grid extension for manipulating Grid Data
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/ 
//jsHint options
/*global alert, $, jQuery */
"use strict";
$.coral.grid.inlineEdit = $.coral.grid.inlineEdit || {};
$.component( "coral.grid", $.coral.grid, {
//Editing
	editButtonsPos: function(rowid,inlineBtn){
		var $t = this,ids,ind,height,gridViewHeight;
		ids = $($t.element).grid("getDataIDs");
		ind = $($t.element).grid("getInd",rowid,true);
		gridViewHeight = $t.element.find(".coral-grid-rows-view").outerHeight();
		height = $t.element.find(".coral-grid-btable").outerHeight();
		if((height + $(ind).outerHeight() > gridViewHeight) && rowid == ids[ids.length-1]){
			inlineBtn.position({
				my: "left-"+(inlineBtn.outerWidth()/2)+" top-2",
				at: "right-"+($(ind).outerWidth()/2)+" top-"+($(inlineBtn).outerHeight()),
				collision: "fit",
				of: $(ind)
			});
		}else{
			inlineBtn.position({
				my: "left-"+(inlineBtn.outerWidth()/2)+" top-2",
				at: "right-"+($(ind).outerWidth()/2)+" top+"+($(ind).outerHeight()),
				collision: "fit",
				of: $(ind)
			});
		}
	},
	editRow : function(rowid,keys,oneditfunc,successfunc, url, extraparam, aftersavefunc,errorfunc, afterrestorefunc) {
		// Compatible mode old versions
		var o={}, args = $.makeArray(arguments).slice(1);

		if( $.type(args[0]) === "object" ) {
			o = args[0];
		} else {
			if (typeof keys !== "undefined") { o.keys = keys; }
			if ($.isFunction(oneditfunc)) { o.oneditfunc = oneditfunc; }
			if ($.isFunction(successfunc)) { o.successfunc = successfunc; }
			if (typeof url !== "undefined") { o.url = url; }
			if (typeof extraparam !== "undefined") { o.extraparam = extraparam; }
			if ($.isFunction(aftersavefunc)) { o.aftersavefunc = aftersavefunc; }
			if ($.isFunction(errorfunc)) { o.errorfunc = errorfunc; }
			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
			// last two not as param, but as object (sorry)
			//if (typeof restoreAfterError !== "undefined") { o.restoreAfterError = restoreAfterError; }
			//if (typeof mtype !== "undefined") { o.mtype = mtype || "POST"; }			
		}
		o = $.extend(true, {
			keys : true,
			oneditfunc: null,
			successfunc: null,
			url: "clientArray",
			extraparam: {},
			aftersavefunc: null,
			errorfunc: null,
			afterrestorefunc: null,
			restoreAfterError: true,
			mtype: "POST"
		}, $.coral.grid.inlineEdit, o );

		// End compatible
		var $t = this, nm, tmp, editable, cnt=0, focus=null, svr={}, ind,cm;
		if (!$t.grid ) { return; }
		ind = $($t.element).grid("getInd",rowid,true);
		$t.options.editrow = rowid;
		$t.editRowIndex = rowid;// for editing
		if( ind === false ) {return;}
		editable = $(ind).attr("editable") || "0";
		if ( $t._trigger("beforeInlineEditRow",null,[{"rowId":rowid, "options":o}]) == false ) return;
		if (editable == "0" && !$(ind).hasClass("not-editable-row")) {
			if ( this.options.rowEditButtons ) {
				var inlineBtn = $("<div class='row-editable coral-grid-rows'><div class='row-editable-btns coral-state-highlight'>" +
						"<div class='grid_edit_toolbar'></div>" +
						"</div></div>");								
				var editBarData = [];

				var updateBtn = {
					"type": "button",
					"id": "update",
					"label": $.grid.edit.bUpdate,
					"name": "update",
					"onClick":function(){
					var status = $t.saveRow(ind.id, null, "clientArray");
					}
				}
				var cancelBtn = {
						"type": "button",
						"id": "cancel",
						"label": $.grid.edit.bCancel,
						"name": "cancel",
						'onClick': function(){
							$t.restoreRow(ind.id);
							inlineBtn.remove();
					        $t._trigger("afterInlineCancelRow", null, [{'rowId': ind.id, 'options': o, 'isUpdated': !$(ind.id).hasClass("new-row")}]);
						}	
				};
				if ( this.options.rowEditButtons.length === 0){
					this.options.rowEditButtons = ["update","cancel"];
				}
				for(var i=0;i<this.options.rowEditButtons.length;i++){
					if ( this.options.rowEditButtons[i]=='update' ) {
						
						editBarData.push(updateBtn);
					} else if (this.options.rowEditButtons[i]=='cancel' ) {
							editBarData.push(cancelBtn);
					} else {
						
						editBarData.push(this.options.rowEditButtons[i]);
					}
				}
				this.rowEditButtons = inlineBtn;

				$t.element.find(".row-editable").remove();
				$t.element.find(".coral-grid-view").prepend(inlineBtn[0]);
				$( '.grid_edit_toolbar', $t.element ).toolbar({
					data : editBarData
				})
				this._delay(function(){
					this.editButtonsPos(rowid,inlineBtn);
				});
			}
			cm = $t.options.colModel;
			$('td[role="gridcell"]',ind).each( function(i) {
				nm = cm[i].name;
				var treeg = $t.options.treeGrid===true && nm == $t.options.ExpandColumn;
				if(treeg) { tmp = $("span:first",this).html();}
				else {
					try {
						tmp = $.unformat.call($t,this,{rowId:rowid, colModel:cm[i]},i);
					} catch (_) {
						tmp =  ( cm[i].edittype && cm[i].edittype == 'textarea' ) ? $(this).text() : $(this).html();
					}
				}
				if ( nm != 'cb' && nm != 'subgrid' && nm != 'rn') {
					if($t.options.autoencode) { tmp = $.grid.htmlDecode(tmp); }
					svr[nm]=tmp;
					if(cm[i].editable===true) {
						if(focus===null) { focus = i; }
						if (treeg) { $("span:first",this).html(""); }
						else { $(this).html(""); }
						var opt = $.extend({},cm[i].editoptions || {},{id:rowid+"_"+nm,name:nm});
						if(!cm[i].edittype) { cm[i].edittype = "text"; }
						if(tmp == "&nbsp;" || tmp == "&#160;" || (tmp.length==1 && tmp.charCodeAt(0)==160) ) {tmp='';}
						var elc = $.grid.createEl.call($t,cm[i].edittype,opt,tmp,false,$.extend({},$.grid.ajaxOptions,$t.options.ajaxSelectOptions || {}));
						$(elc).addClass("editable");
						if(treeg) { $("span:first",this).append(elc); }
						else { $(this).append(elc); }

						var editoptions = cm[i].editoptions || {};
						var postMode = editoptions.postMode || "value";
						$.extend(editoptions,{
							'onValidError': function(e, ui){
								$(elc).parents("td").addClass("coral-gridcell-error");
								e.stopPropagation();
							},
							'onValidSuccess': function(e, ui){
								$(elc).parents("td").removeClass("coral-gridcell-error");
								e.stopPropagation();
							},
							'onKeyDown': function(e, ui){
								//e.stopPropagation();
							},
							'onClick': function(e, ui){
								e.stopPropagation();
							},
							dataCustom: {
								rowId: rowid,
								gridId: $t.options.id
							}
						});
						var edittype = cm[i].edittype;
						switch( edittype ){
							case 'autocomplete': 
								var value = $(elc).val();
								var isUrl = typeof ( editoptions.source ) == "string";
								
								var _onSelect = editoptions.onSelect;
								editoptions = $.extend({}, editoptions, {"onSelect":function(e, ui){
									$(elc).closest("td").attr("data-org", isUrl?ui.value:ui.text);
									_onSelect&&_onSelect.apply(elc, [e, ui]);
								}});
								// url模式
								if ( isUrl ) {
									editoptions.postMode = "text";
									$(elc).autocomplete(editoptions);
									$( elc ).autocomplete( "setValue", value );
								} else {//data模式
									$(elc).autocomplete(editoptions);
									if ( postMode == "value" ) {
										$( elc ).autocomplete( "setValue", value );
									} else {
										$( elc ).autocomplete( "setValue", value );
										$( elc ).autocomplete( "setText", value );
									}
								}
								break;
							case 'checkbox': 
								$(elc).checkbox(editoptions);	
								var cbv = ["Yes","No"];
								if( editoptions && editoptions.value) {
									cbv = editoptions.value.split(":");
								}
								if ( $(elc).val() == cbv[0] ) {
									$(elc).checkbox("check");
								} else {
									$(elc).checkbox("uncheck");
								}
								break;
							case 'combogrid':
							case 'combobox': 
							case 'combotree': 
								$(elc)[ edittype ](editoptions);
/*
								if ( postMode == "value" ) {
									$( elc )[ edittype ]( "setValues", $(elc).val().split(",") );
								} else {
									// TODO: combotree还未实现该方法，可能会报错
									$( elc )[ edittype ]( "setText", $(elc).val() );
								}
								editoptions = null;*/
								$( elc )[ edittype ]( "setValues", $(elc).val().split(",") );
								break;
							case 'text':
							case 'textarea':
								$( elc )[ "textbox" ]( editoptions );
								break;
							default:
								$( elc )[ edittype ]( editoptions );
								break;
						}
						cnt++;
					}
				}
			});
			if(cnt > 0) {
				svr.id = rowid; $t.options.savedRow.push(svr);
				$(ind).attr("editable","1");
				$("td:eq("+focus+") input",ind).focus();
				if(o.keys===true) {
					$(ind).bind("keydown",function(e) {
						if (e.keyCode === 27) {
							$($t.element).grid("restoreRow",rowid, o.afterrestorefunc);
							if($t.options._inlinenav) {
								try {
									$($t.element).grid('showAddEditButtons');
								} catch (eer1) {}
							}
							return false;
						}
						if (e.keyCode === 13) {
							var ta = e.target;
							if(ta.tagName == 'TEXTAREA') { return true; }
							if( $($t.element).grid("saveRow", rowid, o) ) {
								if($t.options._inlinenav) {
									try {
										$($t.element).grid('showAddEditButtons');
									} catch (eer2) {}
								}
							}
							return false;
						}
					});
				}
				/*$($t).triggerHandler("gridInlineEditRow", [rowid, o]);
				if( $.isFunction(o.oneditfunc)) { o.oneditfunc.call($t, rowid); }*/
				$t._trigger("onInlineEditRow",null,[{"rowId":rowid, "options":o}]);
			}
		}
		/*var validateCom = $.coral.findComponent( ".ctrl-init-validate", $( ind ).parent() );
		if( validateCom.length ){
			for( var i=0; i < validateCom.length; i++ ){
				validateCom[i].destroy();
			}
		}
		$( ind ).validate();*/
	},
	saveRow : function(rowid, successfunc, url, extraparam, aftersavefunc,errorfunc, afterrestorefunc) {
		// Compatible mode old versions
		var args = $.makeArray(arguments).slice(1), o = {};

		if( $.type(args[0]) === "object" ) {
			o = args[0];
		} else {
			if ($.isFunction(successfunc)) { o.successfunc = successfunc; }
			if (typeof url !== "undefined") { o.url = url; }
			if (typeof extraparam !== "undefined") { o.extraparam = extraparam; }
			if ($.isFunction(aftersavefunc)) { o.aftersavefunc = aftersavefunc; }
			if ($.isFunction(errorfunc)) { o.errorfunc = errorfunc; }
			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
		}
		o = $.extend(true, {
			successfunc: null,
			url: null,
			extraparam: {},
			aftersavefunc: null,
			errorfunc: null,
			afterrestorefunc: null,
			restoreAfterError: true,
			mtype: "POST"
		}, $.grid.inlineEdit, o );
		// End compatible

		var success = false;
		var $t = this, nm, tmp={}, tmp2={}, tmp3= {}, editable, fr, cv, ind;
		if (!$t.grid ) { return success; }
		ind = $($t.element).grid("getInd",rowid,true);
		// 进行错误校验 有错误则阻止保存
		//success = $.coral.valid( $( ind ), false );
		/*success = $( ind ).validate("valid");
		if( !success ){
			$.message("请确认是否输入正确！");return success;
		}*/
		if(ind === false) {return success;}
		if ( this.options.autoValid ) {
			var isValid = this.valid( ind.id );
			if ( !this.options.allowSaveOnError && !isValid ) {
				$.message("请确认是否输入正确！");return isValid;
			}
		}
		editable = $(ind).attr("editable");
		o.url = o.url ? o.url : $t.options.editurl;
		// 如果url为undefined 则默认设置为clientArray，因为大部分都是用客户端提交的方式
		o.url = o.url ? o.url : "clientArray";
		if (editable==="1") {
			var cm;
			$('td[role="gridcell"]',ind).each(function(i) {
				cm = $t.options.colModel[i];
				nm = cm.name;
				if ( nm != 'cb' && nm != 'subgrid' && cm.editable===true && nm != 'rn' && !$(this).hasClass('not-editable-cell')) {
					var edittype = cm.edittype;
					switch (edittype) {
						case "checkbox":
							var cbv = ["Yes","No"];
							if(cm.editoptions ) {
								cbv = cm.editoptions.value.split(":");
							}
							tmp[nm]=  $("input",this).is(":checked") ? cbv[0] : cbv[1]; 
							break;
						case 'datepicker':
							tmp[nm]=$("input[type='hidden']",this).val();
							break;
						case 'autocomplete':
							if ( typeof ( cm.editoptions.source ) == "string" ) {
								tmp[nm]=$(".ctrl-init-"+edittype,this)[ edittype ]( "getText" );
							} else {
								tmp[nm]=$(".ctrl-init-"+edittype,this)[ edittype ]( "getValue" );
							}
							break;
						case 'text':
						case 'password':
						case 'textarea':
						case "button" :
							tmp[nm]=$("input, textarea",this).val();
							break;
						case 'combogrid':
						case 'combobox':
						case 'combotree':
							/*if(!cm.editoptions) {
								tmp[nm] = $(".ctrl-init:first", this)[ edittype ]( "getValues" ).toString();
								tmp2[nm] = $(".ctrl-init:first", this)[ edittype ]( "getText" );
							} else {
								tmp[nm] = $(".ctrl-init:first", this)[ edittype ]( "getValues" ).toString();
								tmp2[nm] = $(".ctrl-init:first", this)[ edittype ]( "getText" );
							}*/
							tmp[nm] = $(".ctrl-init-"+edittype, this)[ edittype ]( "getValues" ).toString();
							tmp2[nm] = $(".ctrl-init-"+edittype, this)[ edittype ]( "getText" )
							if(cm.formatter && cm.formatter == edittype ) { tmp2={}; }
							break;
						case 'custom' :
							try {
								if(cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
									tmp[nm] = cm.editoptions.custom_value.call($t, $(".customelement",this),'get');
									if (tmp[nm] === undefined) { throw "e2"; }
								} else { throw "e1"; }
							} catch (e) {
								if (e=="e1") { $.grid.info_dialog($.grid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.nodefined,$.grid.edit.bClose); }
								if (e=="e2") { $.grid.info_dialog($.grid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.novalue,$.grid.edit.bClose); }
								else { $.grid.info_dialog($.grid.errors.errcap,e.message,$.grid.edit.bClose); }
							}
							break;
					}
					cv = $.grid.checkValues(tmp[nm],i,$t);
					if(cv[0] === false) {
						cv[1] = tmp[nm] + " " + cv[1];
						return false;
					}
					if($t.options.autoencode) { tmp[nm] = $.grid.htmlEncode(tmp[nm]); }
					if(o.url !== 'clientArray' && cm.editoptions /*&& cm.editoptions.NullIfEmpty === true*/) {
						if(tmp[nm] === "") {
							tmp3[nm] = 'null';
						}
					}
				}
			});
			if (cv[0] === false){
				try {
					var positions = $.grid.findPos($("#"+$.grid.coralID(rowid), $t.grid.bDiv)[0]);
					$.grid.info_dialog($.grid.errors.errcap,cv[1],$.grid.edit.bClose,{left:positions[0],top:positions[1]});
				} catch (e) {
					alert(cv[1]);
				}
				return success;
			}
			var idname, opers, oper;
			opers = $t.options.prmNames;
			oper = opers.oper;
			if ($t.options.keyName === false) {
				idname = opers.id;
			} else {
				idname = $t.options.keyName;
			}
			if(tmp) {
				tmp[oper] = opers.editoper;
				tmp[idname] = rowid;
				if(typeof($t.options.inlineData) == 'undefined') { $t.options.inlineData ={}; }
				tmp = $.extend({},tmp,$t.options.inlineData,o.extraparam);
			}
			if (o.url == 'clientArray') {
				//tmp = $.extend({},tmp, tmp2);
				if($t.options.autoencode) {
					$.each(tmp,function(n,v){
						tmp[n] = $.grid.htmlDecode(v);
					});
				}
				var resp = $($t.element).grid("setRowData",rowid,tmp);
				$(ind).attr("editable","0");
				for( var k=0;k<$t.options.savedRow.length;k++) {
					if( $t.options.savedRow[k].id == rowid) {fr = k; break;}
				}
				if(fr >= 0) { $t.options.savedRow.splice(fr,1); }
				success = resp;
				if(success)$t.options.editrow = null;//成功后删除
				if ( $t.options.rowEditButtons  ) {
					$t.rowEditButtons.hide();
				}
				$t._trigger("afterInlineSaveRow", null, [{'rowId': rowid, 'options': o, 'status': resp}]);
				//$($t).triggerHandler("gridInlineAfterSaveRow", [rowid, resp, tmp, o]);
				if( $.isFunction(o.aftersavefunc) ) { o.aftersavefunc.call($t, rowid,resp); }
				$(ind).unbind("keydown");
			} else {
				$("#lui_"+$.grid.coralID($t.options.id)).show();
				tmp3 = $.extend({},tmp,tmp3);
				tmp3[idname] = $.grid.stripPref($t.options.idPrefix, tmp3[idname]);
				$.ajax($.extend({
					url:o.url,
					data: $.isFunction($t.options.serializeRowData) ? $t.options.serializeRowData.call($t, tmp3) : tmp3,
					type: o.mtype,
					async : false, //?!?
					complete: function(res,stat){
						$("#lui_"+$.grid.coralID($t.options.id)).hide();
						if (stat === "success"){
							var ret = true, sucret;
							sucret = $t._trigger("inlineSuccessSaveRow", null, [{'res':res, 'rowId': rowid, 'options': o}]);
							if (!$.isArray(sucret)) {sucret = [true, tmp];}
							if (sucret[0] && $.isFunction(o.successfunc)) {sucret = o.successfunc.call($t, res);}							
							if($.isArray(sucret)) {
								// expect array - status, data, rowid
								ret = sucret[0];
								tmp = sucret[1] ? sucret[1] : tmp;
							} else {
								ret = sucret;
							}
							if (ret===true) {
								if($t.options.autoencode) {
									$.each(tmp,function(n,v){
										tmp[n] = $.grid.htmlDecode(v);
									});
								}
								tmp = $.extend({},tmp, tmp2);
								$($t.element).grid("setRowData",rowid,tmp);
								$(ind).attr("editable","0");
								for( var k=0;k<$t.options.savedRow.length;k++) {
									if( $t.options.savedRow[k].id == rowid) {fr = k; break;}
								}
								if(fr >= 0) { $t.options.savedRow.splice(fr,1); }
								$($t).triggerHandler("gridInlineAfterSaveRow", [rowid, res, tmp, o]);
								if( $.isFunction(o.aftersavefunc) ) { o.aftersavefunc.call($t, rowid,res); }
								success = true;
								$t.options.editrow = null;//成功后删除
								if ( $t.rowEditButtons  ) {
									$t.rowEditButtons.hide();
								}
								$t._trigger("afterInlineSaveRow", null, [{'rowId': rowid, 'options': o, 'status': resp}]);
								$(ind).unbind("keydown");
							} else {
								$($t).triggerHandler("gridInlineErrorSaveRow", [rowid, res, stat, null, o]);
								if($.isFunction(o.errorfunc) ) {
									o.errorfunc.call($t, rowid, res, stat, null);
								}
								if(o.restoreAfterError === true) {
									$($t.element).grid("restoreRow",rowid, o.afterrestorefunc);
								}
							}
						}
					},
					error:function(res,stat,err){
						$("#lui_"+$.grid.coralID($t.options.id)).hide();
						$($t).triggerHandler("gridInlineErrorSaveRow", [rowid, res, stat, err, o]);
						if($.isFunction(o.errorfunc) ) {
							o.errorfunc.call($t, rowid, res, stat, err);
						} else {
							try {
								$.grid.info_dialog($.grid.errors.errcap,'<div class="coral-state-error">'+ res.responseText +'</div>', $.grid.edit.bClose,{buttonalign:'right'});
							} catch(e) {
								alert(res.responseText);
							}
						}
						if(o.restoreAfterError === true) {
							$($t.element).grid("restoreRow",rowid, o.afterrestorefunc);
						}
					}
				}, $.grid.ajaxOptions, $t.options.ajaxRowOptions || {}));
			}
		}
		if(success){
			//$( ind ).validate("destroy");
			$(ind).removeClass("new-row");
		}
		return success;
	},
	restoreRow : function(rowid, afterrestorefunc) {
		// Compatible mode old versions
		var args = $.makeArray(arguments).slice(1), o={};

		if( $.type(args[0]) === "object" ) {
			o = args[0];
		} else {
			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
		}
		o = $.extend(true, $.grid.inlineEdit, o );

		// End compatible

		//return this.each(function(){
		var $t= this, fr, ind, ares={};
		if (!$t.grid ) { return; }
		ind = $($t.element).grid("getInd",rowid,true);
		if( $t.options.editrow && rowid == $t.options.editrow ){
			$t.options.editrow = null;//如果重置的是当前编辑的id则删除
			$t.clearErrors(rowid);
		}
		//$(ind).children("td.coral-gridcell-error").removeClass("coral-gridcell-error");
		if(ind === false) {return;}
		for( var k=0;k<$t.options.savedRow.length;k++) {
			if( $t.options.savedRow[k].id == rowid) {fr = k; break;}
		}
		if(fr >= 0) {
			if($.isFunction($.fn.datepicker)) {
				try {
					$("input.hasDatepicker","#"+$.grid.coralID(ind.id)).datepicker('hide');
				} catch (e) {}
			}
			$.each($t.options.colModel, function(){
				if(this.editable === true && this.name in $t.options.savedRow[fr] ) {
					ares[this.name] = $t.options.savedRow[fr][this.name];
				}
			});
			$($t.element).grid("setRowData",rowid,ares);
			$(ind).attr("editable","0").unbind("keydown");
			$t.options.savedRow.splice(fr,1);
			if($("#"+$.grid.coralID(rowid), "#"+$.grid.coralID($t.options.id)).hasClass("grid-new-row")){
				setTimeout(function(){$($t.element).grid("delRowData",rowid);},0);
			}
		}
		$($t).triggerHandler("gridInlineAfterRestoreRow", [rowid]);
		if ($.isFunction(o.afterrestorefunc))
		{
			o.afterrestorefunc.call($t, rowid);
		}
		if ($t.options.rowEditButtons) {
			$t.rowEditButtons.hide();
		}
		//});
	},
	addRow : function ( p ) {
		p = $.extend(true, {
			rowID : "new_row",
			initdata : {},
			position :"first",
			useDefValues : true,
			useFormatter : false,
			addRowParams : {extraparam:{}}
		},p  || {});
		if (!this.grid ) { return; }
		var $t = this;
		if(p.useDefValues === true) {
			$($t.options.colModel).each(function(){
				if( this.editoptions && this.editoptions.defaultValue ) {
					var opt = this.editoptions.defaultValue,
					tmp = $.isFunction(opt) ? opt.call($t) : opt;
					p.initdata[this.name] = tmp;
				}
			});
		}
		$($t.element).grid('addRowData', p.rowID, p.initdata, p.position);
		$("#"+$.grid.coralID(p.rowID), "#"+$.grid.coralID($t.options.id)).addClass("grid-new-row");
		if(p.useFormatter) {
			$("#"+$.grid.coralID(p.rowID)+" .coral-inline-edit", "#"+$.grid.coralID($t.options.id)).click();
		} else {
			var opers = $t.options.prmNames,
			oper = opers.oper;
			p.addRowParams.extraparam[oper] = opers.addoper;
			$($t.element).grid('editRow', p.rowID, p.addRowParams);
			$($t.element).grid('setSelection', p.rowID);
		}
	},
	clearEdited: function(rowId){
		var $tr = $( this.getInd(rowId, true) );
		$tr.removeClass("edited");
		$tr.children("td").removeClass("dirty-cell");
	},
	inlineNav : function (elem, o) {
		o = $.extend({
			edit: true,
			editicon: "coral-icon-pencil",
			add: true,
			addicon:"coral-icon-plus",
			save: true,
			saveicon:"coral-icon-disk",
			cancel: true,
			cancelicon:"coral-icon-cancel",
			addParams : {useFormatter : false,rowID : "new_row"},
			editParams : {},
			restoreAfterSelect : true
		}, $.grid.nav, o ||{});
		return this.each(function(){
			if (!this.grid ) { return; }
			var $t = this, onSelect, gID = $.grid.coralID($t.options.id);
			$t.options._inlinenav = true;
			// detect the formatactions column
			if(o.addParams.useFormatter === true) {
				var cm = $t.options.colModel,i;
				for (i = 0; i<cm.length; i++) {
					if(cm[i].formatter && cm[i].formatter === "actions" ) {
						if(cm[i].formatoptions) {
							var defaults =  {
								keys:false,
								onEdit : null,
								onSuccess: null,
								afterSave:null,
								onError: null,
								afterRestore: null,
								extraparam: {},
								url: null
							},
							ap = $.extend( defaults, cm[i].formatoptions );
							o.addParams.addRowParams = {
								"keys" : ap.keys,
								"oneditfunc" : ap.onEdit,
								"successfunc" : ap.onSuccess,
								"url" : ap.url,
								"extraparam" : ap.extraparam,
								"aftersavefunc" : ap.afterSavef,
								"errorfunc": ap.onError,
								"afterrestorefunc" : ap.afterRestore
							};
						}
						break;
					}
				}
			}
			if(o.add) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.addtext,
					title : o.addtitle,
					buttonicon : o.addicon,
					id : $t.options.id+"_iladd",
					onClickButton : function () {
						$($t.element).grid('addRow', o.addParams);
						if(!o.addParams.useFormatter) {
							$("#"+gID+"_ilsave").removeClass('coral-state-disabled');
							$("#"+gID+"_ilcancel").removeClass('coral-state-disabled');
							$("#"+gID+"_iladd").addClass('coral-state-disabled');
							$("#"+gID+"_iledit").addClass('coral-state-disabled');
						}
					}
				});
			}
			if(o.edit) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.edittext,
					title : o.edittitle,
					buttonicon : o.editicon,
					id : $t.options.id+"_iledit",
					onClickButton : function () {
						var sr = $($t.element).grid('getGridParam','selrow');
						if(sr) {
							$($t.element).grid('editRow', sr, o.editParams);
							$("#"+gID+"_ilsave").removeClass('coral-state-disabled');
							$("#"+gID+"_ilcancel").removeClass('coral-state-disabled');
							$("#"+gID+"_iladd").addClass('coral-state-disabled');
							$("#"+gID+"_iledit").addClass('coral-state-disabled');
						} else {
							$.grid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();							
						}
					}
				});
			}
			if(o.save) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.savetext || '',
					title : o.savetitle || 'Save row',
					buttonicon : o.saveicon,
					id : $t.options.id+"_ilsave",
					onClickButton : function () {
						var sr = $t.options.savedRow[0].id;
						if(sr) {
							var opers = $t.options.prmNames,
							oper = opers.oper;
							if(!o.editParams.extraparam) {
								o.editParams.extraparam = {};
							}
							if($("#"+$.grid.coralID(sr), "#"+gID ).hasClass("grid-new-row")) {
								o.editParams.extraparam[oper] = opers.addoper;
							} else {
								o.editParams.extraparam[oper] = opers.editoper;
							}
							if( $($t.element).grid('saveRow', sr, o.editParams) ) {
								$($t.element).grid('showAddEditButtons');
							}
						} else {
							$.grid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();							
						}
					}
				});
				$("#"+gID+"_ilsave").addClass('coral-state-disabled');
			}
			if(o.cancel) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.canceltext || '',
					title : o.canceltitle || 'Cancel row editing',
					buttonicon : o.cancelicon,
					id : $t.options.id+"_ilcancel",
					onClickButton : function () {
						var sr = $t.options.savedRow[0].id;
						if(sr) {
							$($t.element).grid('restoreRow', sr, o.editParams);
							$($t.element).grid('showAddEditButtons');
						} else {
							$.grid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();							
						}
					}
				});
				$("#"+gID+"_ilcancel").addClass('coral-state-disabled');
			}
			if(o.restoreAfterSelect === true) {
				if($.isFunction($t.options.beforeSelectRow)) {
					onSelect = $t.options.beforeSelectRow;
				} else {
					onSelect =  false;
				}
				$t.options.beforeSelectRow = function(id, stat) {
					var ret = true;
					if($t.options.savedRow.length > 0 && $t.options._inlinenav===true && ( id !== $t.options.selrow && $t.options.selrow !==null) ) {
						if($t.options.selrow == o.addParams.rowID ) {
							$($t.element).grid('delRowData', $t.options.selrow);
						} else {
							$($t.element).grid('restoreRow', $t.options.selrow, o.editParams);
						}
						$($t.element).grid('showAddEditButtons');
					}
					if(onSelect) {
						ret = onSelect.call($t, id, stat);
					}
					return ret;
				};
			}

		});
	},
	showAddEditButtons : function()  {
		return this.each(function(){
			if (!this.grid ) { return; }
			var gID = $.grid.coralID(this.options.id);
			$("#"+gID+"_ilsave").addClass('coral-state-disabled');
			$("#"+gID+"_ilcancel").addClass('coral-state-disabled');
			$("#"+gID+"_iladd").removeClass('coral-state-disabled');
			$("#"+gID+"_iledit").removeClass('coral-state-disabled');
		});
	}
//end inline edit
});
})(jQuery);

/*
**
 * formatter for values but most of the values if for grid
 * Some of this was inspired and based on how YUI does the table datagrid but in jQuery fashion
 * we are trying to keep it as light as possible
 * Joshua Burnett josh@9ci.com	
 * http://www.greenbill.com
 *
 * Changes from Tony Tomov tony@trirand.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * 
**/

;(function($) {
"use strict";	
	$.fmatter = {};
	//opts can be id:row id for the row, rowdata:the data for the row, colmodel:the column model for this column
	//example {id:1234,}
	$.extend($.fmatter,{
		isBoolean : function(o) {
			return typeof o === 'boolean';
		},
		isObject : function(o) {
			return (o && (typeof o === 'object' || $.isFunction(o))) || false;
		},
		isString : function(o) {
			return typeof o === 'string';
		},
		isNumber : function(o) {
			return typeof o === 'number' && isFinite(o);
		},
		isNull : function(o) {
			return o === null;
		},
		isUndefined : function(o) {
			return typeof o === 'undefined';
		},
		isValue : function (o) {
			return (this.isObject(o) || this.isString(o) || this.isNumber(o) || this.isBoolean(o));
		},
		isEmpty : function(o) {
			if(!this.isString(o) && this.isValue(o)) {
				return false;
			}else if (!this.isValue(o)){
				return true;
			}
			o = $.trim(o).replace(/\&nbsp\;/ig,'').replace(/\&#160\;/ig,'');
			return o==="";	
		}
	});
	/**
	 * 为单元格设置值的时候会调用此方法，包括编辑和添加数据
	 * 如果是带隐藏域的组件，在编辑的情况下会将隐藏值传过来
	 * 转码功能：如果是revertCode为false，只有编辑的时候才需要转码
	 * 如果revertCode为true，则需要formatter里面进行转码
	 */
	$.fn.fmatter = function(formatType, cellval, opts, rwd, act) {
		// build main options before element iteration
		var v=cellval;
		opts = $.extend({}, $.grid.formatter, opts);
		if(act === "edit" && opts.colModel.cellEditoptions){
			var cOpts = $.coral.toFunction(opts.colModel.cellEditoptions).call(this,v,opts,rwd);
			formatType = cOpts && cOpts.type ? cOpts.type : formatType;
			if(formatType === "combobox" || formatType === "combogrid" || formatType === "combotree"){
				formatType = "convertCode";
			}
		} 
		if (act === "edit" && formatType !== "convertCode") {
			$("#"+opts.rowId, this.element).children("td[aria-describedby$='"+opts.colModel.name+"']").attr("data-org",v); 
			return v;
		}
		try {
			v = $.fn.fmatter[formatType].call(this, cellval, opts, rwd, act);
		} catch(fe){}
		return v;
	};
	$.fmatter.util = {
		// Taken from YAHOO utils
		NumberFormat : function(nData,opts) {
			if(!$.fmatter.isNumber(nData)) {
				nData *= 1;
			}
			if($.fmatter.isNumber(nData)) {
				var bNegative = (nData < 0);
				var sOutput = nData + "";
				var sDecimalSeparator = (opts.decimalSeparator) ? opts.decimalSeparator : ".";
				var nDotIndex;
				if($.fmatter.isNumber(opts.decimalPlaces)) {
					// Round to the correct decimal place
					var nDecimalPlaces = opts.decimalPlaces;
					var nDecimal = Math.pow(10, nDecimalPlaces);
					sOutput = Math.round(nData*nDecimal)/nDecimal + "";
					nDotIndex = sOutput.lastIndexOf(".");
					if(nDecimalPlaces > 0) {
					// Add the decimal separator
						if(nDotIndex < 0) {
							sOutput += sDecimalSeparator;
							nDotIndex = sOutput.length-1;
						}
						// Replace the "."
						else if(sDecimalSeparator !== "."){
							sOutput = sOutput.replace(".",sDecimalSeparator);
						}
					// Add missing zeros
						while((sOutput.length - 1 - nDotIndex) < nDecimalPlaces) {
							sOutput += "0";
						}
					}
				}
				if(opts.thousandsSeparator) {
					var sThousandsSeparator = opts.thousandsSeparator;
					nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);
					nDotIndex = (nDotIndex > -1) ? nDotIndex : sOutput.length;
					var sNewOutput = sOutput.substring(nDotIndex);
					var nCount = -1;
					for (var i=nDotIndex; i>0; i--) {
						nCount++;
						if ((nCount%3 === 0) && (i !== nDotIndex) && (!bNegative || (i > 1))) {
							sNewOutput = sThousandsSeparator + sNewOutput;
						}
						sNewOutput = sOutput.charAt(i-1) + sNewOutput;
					}
					sOutput = sNewOutput;
				}
				// Prepend prefix
				sOutput = (opts.prefix) ? opts.prefix + sOutput : sOutput;
				// Append suffix
				sOutput = (opts.suffix) ? sOutput + opts.suffix : sOutput;
				return sOutput;
				
			} else {
				return nData;
			}
		},
		// Tony Tomov
		// PHP implementation. Sorry not all options are supported.
		// Feel free to add them if you want
		DateFormat : function (format, date, newformat, opts)  {
			var	token = /\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,
			timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
			timezoneClip = /[^-+\dA-Z]/g,
			msDateRegExp = new RegExp("^\/Date\\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\\)\/$"),
			msMatch = ((typeof date === 'string') ? date.match(msDateRegExp): null),
			pad = function (value, length) {
				value = String(value);
				length = parseInt(length,10) || 2;
				while (value.length < length)  { value = '0' + value; }
				return value;
			},
			ts = {m : 1, d : 1, y : 1970, h : 0, i : 0, s : 0, u:0},
			timestamp=0, dM, k,hl,
			dateFormat=["i18n"];
			// Internationalization strings
			dateFormat.i18n = {
				dayNames: opts.dayNames,
				monthNames: opts.monthNames
			};
			if( format in opts.masks ) { format = opts.masks[format]; }
			if( !isNaN( date - 0 ) && String(format).toLowerCase() == "u") {
				//Unix timestamp
				timestamp = new Date( parseFloat(date)*1000 );
			} else if(date.constructor === Date) {
				timestamp = date;
				// Microsoft date format support
			} else if( msMatch !== null ) {
				timestamp = new Date(parseInt(msMatch[1], 10));
				if (msMatch[3]) {
					var offset = Number(msMatch[5]) * 60 + Number(msMatch[6]);
					offset *= ((msMatch[4] == '-') ? 1 : -1);
					offset -= timestamp.getTimezoneOffset();
					timestamp.setTime(Number(Number(timestamp) + (offset * 60 * 1000)));
				}
			} else {
				date = String(date).split(/[\\\/:_;.,\t\T\s-]/);
				format = format.split(/[\\\/:_;.,\t\T\s-]/);
				// parsing for month names
				for(k=0,hl=format.length;k<hl;k++){
					if(format[k] == 'M') {
						dM = $.inArray(date[k],dateFormat.i18n.monthNames);
						if(dM !== -1 && dM < 12){date[k] = dM+1;}
					}
					if(format[k] == 'F') {
						dM = $.inArray(date[k],dateFormat.i18n.monthNames);
						if(dM !== -1 && dM > 11){date[k] = dM+1-12;}
					}
					if(date[k]) {
						ts[format[k].toLowerCase()] = parseInt(date[k],10);
					}
				}
				if(ts.f) {ts.m = ts.f;}
				if( ts.m === 0 && ts.y === 0 && ts.d === 0) {
					return "&#160;" ;
				}
				ts.m = parseInt(ts.m,10)-1;
				var ty = ts.y;
				if (ty >= 70 && ty <= 99) {ts.y = 1900+ts.y;}
				else if (ty >=0 && ty <=69) {ts.y= 2000+ts.y;}
				timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u);
			}
			
			if( newformat in opts.masks )  {
				newformat = opts.masks[newformat];
			} else if ( !newformat ) {
				newformat = 'Y-m-d';
			}
			var 
				G = timestamp.getHours(),
				i = timestamp.getMinutes(),
				j = timestamp.getDate(),
				n = timestamp.getMonth() + 1,
				o = timestamp.getTimezoneOffset(),
				s = timestamp.getSeconds(),
				u = timestamp.getMilliseconds(),
				w = timestamp.getDay(),
				Y = timestamp.getFullYear(),
				N = (w + 6) % 7 + 1,
				z = (new Date(Y, n - 1, j) - new Date(Y, 0, 1)) / 86400000,
				flags = {
					// Day
					d: pad(j),
					D: dateFormat.i18n.dayNames[w],
					j: j,
					l: dateFormat.i18n.dayNames[w + 7],
					N: N,
					S: opts.S(j),
					//j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th',
					w: w,
					z: z,
					// Week
					W: N < 5 ? Math.floor((z + N - 1) / 7) + 1 : Math.floor((z + N - 1) / 7) || ((new Date(Y - 1, 0, 1).getDay() + 6) % 7 < 4 ? 53 : 52),
					// Month
					F: dateFormat.i18n.monthNames[n - 1 + 12],
					m: pad(n),
					M: dateFormat.i18n.monthNames[n - 1],
					n: n,
					t: '?',
					// Year
					L: '?',
					o: '?',
					Y: Y,
					y: String(Y).substring(2),
					// Time
					a: G < 12 ? opts.AmPm[0] : opts.AmPm[1],
					A: G < 12 ? opts.AmPm[2] : opts.AmPm[3],
					B: '?',
					g: G % 12 || 12,
					G: G,
					h: pad(G % 12 || 12),
					H: pad(G),
					i: pad(i),
					s: pad(s),
					u: u,
					// Timezone
					e: '?',
					I: '?',
					O: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
					P: '?',
					T: (String(timestamp).match(timezone) || [""]).pop().replace(timezoneClip, ""),
					Z: '?',
					// Full Date/Time
					c: '?',
					r: '?',
					U: Math.floor(timestamp / 1000)
				};	
			return newformat.replace(token, function ($0) {
				return $0 in flags ? flags[$0] : $0.substring(1);
			});			
		}
	};
	$.fn.fmatter.defaultFormat = function(cellval, opts, rwd, act) {
		return ($.fmatter.isValue(cellval) && cellval!=="" ) ?  cellval : opts.defaultValue ? opts.defaultValue : "&#160;";
	};
	$.fn.fmatter.email = function(cellval, opts, rwd, act) {
		if(!$.fmatter.isEmpty(cellval)) {
			return "<a href=\"mailto:" + cellval + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts );
		}
	};
	/*$.fn.fmatter.checkbox =function(cval, opts) {
		var op = $.extend({},opts.checkbox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = $.fn.fmatter.defaultFormat(cval,op);}
		cval=cval+"";cval=cval.toLowerCase();
		var bchk = cval.search(/(false|0|no|off)/i)<0 ? " checked='checked' " : "";
		return "<input type=\"checkbox\" " + bchk  + " value=\""+ cval+"\" offval=\"no\" "+ds+ "/>";
	};*/
	
	$.fn.fmatter.combobox =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.combobox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		return "<input class=\"parseformatter\" data-formatter=\"combobox\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.combotree =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.combotree), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"combotree\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.combogrid =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.combogrid), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"combogrid\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.autocomplete =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.autocomplete), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		return "<input class=\"parseformatter\" data-formatter=\"autocomplete\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.toolbar =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.toolbar), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<div class=\"parseformatter\" data-formatter=\"toolbar\" data-pos=\""+opts.pos+"\" "+ds+ "/>";
	};
	$.fn.fmatter.text =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.textbox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"textbox\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.datepicker =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.datepicker), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"datepicker\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.textarea =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.textbox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<textarea class=\"parseformatter\" data-formatter=\"textbox\" data-pos=\""+opts.pos+"\" "+ds+ "/>"+ cval+"</textarea>";
	};
	$.fn.fmatter.progressbar =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.progressbar), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<div class=\"parseformatter\" data-formatter=\"progressbar\" data-pos=\""+opts.pos+"\" "+ds+ "/>";
	};
	/**
	 * 默认会去code里面取编码，如果没有code将data作为编码进行取值赋值的转换
	 */
	$.fn.fmatter.convertCode =function(cval, opts, rwd, act) {
		var options = opts.colModel.formatoptions || opts.colModel.editoptions || {},
		postMode = options.postMode || "value";
		var type = "convertCode";
		if(opts.colModel.cellEditoptions){
			var cOpts = $.coral.toFunction(opts.colModel.cellEditoptions).call(this,cval,options,rwd);
			options = cOpts && cOpts.cellEditoptions ? cOpts.cellEditoptions : options;
			type = cOpts && cOpts.type? cOpts.type:"convertCode";
		}
		// setRowData的时候处理，addRowData和初始化的时候是找不到元素，不会影响
		$("#"+opts.rowId, this.element).children("td[aria-describedby$='"+opts.colModel.name+"']").attr("data-org",cval); 
		if (type !=="convertCode" && type !=="combobox"&& type !=="combogrid" ) return cval;
		var code = options.data,
			dataStructure = options.dataStructure || "list",
			valueField = options.valueField || "value",
			textField = options.textField || "text",
			separator = options.separator || ",";
		//formatter的时候，如果cellValue是空值，页面上可能会出现undefined
		if ( typeof ( cval ) === "undefined" || cval === null) return "";
		/**
		 * postMode为value的情况下才考虑转码
		 */
		if ( postMode != "value" ) {
			return cval;
		}
		// setCell会有问题，，此时有code了
		if ( opts.colModel.edittype == "combobox" && options.code ){
			code = options.code;
		}
		if ( opts.colModel.edittype == "combotree" && options.code ){
			code = options.code;
		}
		if ( opts.colModel.edittype == "combogrid" && options.code ){
			code = options.code;
		}
		if ( opts.colModel.edittype == "combotree" ){
			dataStructure = "tree";
		}
		if ( opts.colModel.edittype == "autocomplete" && typeof( options.code ) == "string" ) {
			code = options.code;
		}
		if ( opts.colModel.edittype == "autocomplete" && options.source ) {
			code = options.source;
		}
		var valArr = [],
			has = false,
			cArr = cval.toString().split( separator );
		if ( dataStructure == "tree" ) {
			//code可能是tree或者普通array
			for( var i=0; i<cArr.length; i++) {
				convtree(code, cArr[i],valArr);
			}
			
		} else {// default dataStructure is list
			for ( var i=0; i<cArr.length; i++ ) {
				for ( var j=0; j<code.length; j++ ){
					if ( code[j][valueField] == cArr[i] ) {
						valArr.push( code[j][textField] );
						has = true;
					} 
				}
				if ( !has && !options.forceSelection ) {
					valArr.push( cArr[i] );
				}
				has = false;
			}
		}
		return valArr.join( separator );
		
	};
	function convtree(node,v,push){
		for ( var j=0; j<node.length; j++ ) {
			if ( node[j].id == v) {
				push.push(node[j].name);
			} else if ( node[j].children ) {
				convtree(node[j].children,v,push);
			} 
		}
	}
	$.fn.fmatter.checkbox =function(cval, opts) {
		var op = $.extend({},opts.checkbox), ds;
		var cbv = ["Yes","No"];
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
			if( opts.colModel.formatoptions && opts.colModel.formatoptions.value) {
				cbv = opts.colModel.formatoptions.value.split(":");
			}
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"checkbox\" value='"+cval+"' data-pos=\""+opts.pos+"\" type=\"checkbox\" "+ds+ "/>";
	};
	
	$.fn.afterFmatter =function( colModel ) {
		var that = this;
		$(".parseformatter", that.element).each(function(){
			$(this).removeClass("parseformatter");
			var pos = $(this).attr("data-pos"),
				dataFormatter = $(this).attr("data-formatter"),
				//value是空格的话取""否则取value本身
				value = $.trim($( this ).val())===""?"":$( this ).val(),
				formatoptions = $.extend(
					{}, 
					that.options.colModel[pos].formatoptions, 
					{
						dataCustom: {
							rowId: $(this).closest("tr")[0].id,
							gridId: that.options.id
						}
					}
				);
			switch (dataFormatter) {
			case "combobox":
		    case "combotree":
		    case "combogrid":
		    case "textbox":	
		    	formatoptions.value = value;
		    	break;
		    case "toolbar":
		    case "progressbar":
		    	break;
		    case "checkbox":
		    	var cbv = ["Yes","No"];
				if( dataFormatter && that.options.colModel[pos].formatoptions.value) {
					cbv = that.options.colModel[pos].formatoptions.value.split(":");
				}
				if ( $(this).val() == cbv[0] ) {
					formatoptions.checked = true;
					//$(this)[dataFormatter]("check");
				} else {
					formatoptions.checked = false;
					//$(this)[dataFormatter]("uncheck");
				}
				break;
			}
			$(this)[dataFormatter](formatoptions);
		});
	};
	$.fn.fmatter.link = function(cellval, opts) {
		var op = {target:opts.target};
		var target = "";
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.target) {target = 'target=' + op.target;}
		if(!$.fmatter.isEmpty(cellval)) {
			return "<a "+target+" href=\"" + cellval + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts);
		}
	};
	$.fn.fmatter.showlink = function(cellval, opts) {
		var op = {baseLinkUrl: opts.baseLinkUrl,showAction:opts.showAction, addParam: opts.addParam || "", target: opts.target, idName: opts.idName},
		target = "", idUrl;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.target) {target = 'target=' + op.target;}
		idUrl = op.baseLinkUrl+op.showAction + '?'+ op.idName+'='+opts.rowId+op.addParam;
		if($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval)) {	//add this one even if its blank string
			return "<a "+target+" href=\"" + idUrl + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts);
		}
	};
	$.fn.fmatter.integer = function(cellval, opts) {
		var op = $.extend({},opts.integer);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.number = function (cellval, opts) {
		var op = $.extend({},opts.number);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.currency = function (cellval, opts) {
		var op = $.extend({},opts.currency);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.date = function (cellval, opts, rwd, act) {
		var op = $.extend({},opts.date);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		var srcDateFormat = op.srcDateFormat || op.dateFormat;
		var date = $.datepicker.parseDate(srcDateFormat, cellval||"");
		//if null retrun empty string
		return $.datepicker.formatDate(op.dateFormat, date)||"";
		/*if(!op.reformatAfterEdit && act=='edit'){
			return $.fn.fmatter.defaultFormat(cellval, opts);
		} else if(!$.fmatter.isEmpty(cellval)) {
			return  $.fmatter.util.DateFormat(op.srcformat,cellval,op.newformat,op);
		} else {
			return $.fn.fmatter.defaultFormat(cellval, opts);
		}*/
	};
	$.fn.fmatter.select = function (cellval,opts) {
		// grid specific
		cellval = cellval + "";
		var oSelect = false, ret=[], sep, delim;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)){
			oSelect= opts.colModel.formatoptions.value;
			sep = opts.colModel.formatoptions.separator === undefined ? ":" : opts.colModel.formatoptions.separator;
			delim = opts.colModel.formatoptions.delimiter === undefined ? ";" : opts.colModel.formatoptions.delimiter;
		} else if(!$.fmatter.isUndefined(opts.colModel.editoptions)){
			oSelect= opts.colModel.editoptions.value;
			sep = opts.colModel.editoptions.separator === undefined ? ":" : opts.colModel.editoptions.separator;
			delim = opts.colModel.editoptions.delimiter === undefined ? ";" : opts.colModel.editoptions.delimiter;
		}
		if (oSelect) {
			var	msl =  opts.colModel.editoptions.multiple === true ? true : false,
			scell = [], sv;
			if(msl) {scell = cellval.split(",");scell = $.map(scell,function(n){return $.trim(n);});}
			if ($.fmatter.isString(oSelect)) {
				// mybe here we can use some caching with care ????
				var so = oSelect.split(delim), j=0;
				for(var i=0; i<so.length;i++){
					sv = so[i].split(sep);
					if(sv.length > 2 ) {
						sv[1] = $.map(sv,function(n,i){if(i>0) {return n;}}).join(sep);
					}
					if(msl) {
						if($.inArray(sv[0],scell)>-1) {
							ret[j] = sv[1];
							j++;
						}
					} else if($.trim(sv[0])==$.trim(cellval)) {
						ret[0] = sv[1];
						break;
					}
				}
			} else if($.fmatter.isObject(oSelect)) {
				// this is quicker
				if(msl) {
					ret = $.map(scell, function(n){
						return oSelect[n];
					});
				} else {
					ret[0] = oSelect[cellval] || "";
				}
			}
		}
		cellval = ret.join(", ");
		return  cellval === "" ? $.fn.fmatter.defaultFormat(cellval,opts) : cellval;
	};
	$.fn.fmatter.rowactions = function(rid,gid,act,pos) {
		var op ={
			keys:false,
			onEdit : null, 
			onSuccess: null, 
			afterSave:null,
			onError: null,
			afterRestore: null,
			extraparam: {},
			url: null,
			delOptions: {},
			editOptions : {}
		};
		rid = $.grid.coralID( rid );
		gid = $.grid.coralID( gid );
		var cm = $('#'+gid)[0].options.colModel[pos];
		if(!$.fmatter.isUndefined(cm.formatoptions)) {
			op = $.extend(op,cm.formatoptions);
		}
		if( !$.fmatter.isUndefined($('#'+gid)[0].options.editOptions) ) {
			op.editOptions = $('#'+gid)[0].options.editOptions;
		}
		if( !$.fmatter.isUndefined($('#'+gid)[0].options.delOptions) ) {
			op.delOptions = $('#'+gid)[0].options.delOptions;
		}
		var $t = $("#"+gid)[0];
		var saverow = function( rowid, res)	{
			if($.isFunction(op.afterSave)) { op.afterSave.call($t, rowid, res); }
			$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid + ".coral-grid-btable:first").show();
			$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
		},
		restorerow = function( rowid)	{
			if($.isFunction(op.afterRestore) ) { op.afterRestore.call($t, rowid); }
			$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").show();
			$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
		};
		if( $("#"+rid,"#"+gid).hasClass("grid-new-row") ){
			var opers = $t.options.prmNames,
			oper = opers.oper;
			op.extraparam[oper] = opers.addoper;
		}
		switch(act)
		{
			case 'edit':
				$('#'+gid).grid('editRow',rid, op.keys, op.onEdit, op.onSuccess, op.url, op.extraparam, saverow, op.onError,restorerow);
				$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").hide();
				$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").show();
				$($t).triggerHandler("jqGridAfterGridComplete");
				break;
			case 'save':
				if ( $('#'+gid).grid('saveRow',rid,  op.onSuccess,op.url, op.extraparam, saverow, op.onError,restorerow) ) {
				$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").show();
				$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
				$($t).triggerHandler("jqGridAfterGridComplete");
				}
				break;
			case 'cancel' :
				$('#'+gid).grid('restoreRow',rid, restorerow);
				$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").show();
				$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
				$($t).triggerHandler("jqGridAfterGridComplete");
				break;
			case 'del':
				$('#'+gid).grid('delGridRow',rid, op.delOptions);
				break;
			case 'formedit':
				$('#'+gid).grid('setSelection',rid);
				$('#'+gid).grid('editGridRow',rid, op.editOptions);
				break;
		}
	};
	$.fn.fmatter.actions = function(cellval,opts) {
		var op ={keys:false, editbutton:true, delbutton:true, editformbutton: false};
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend(op,opts.colModel.formatoptions);
		}
		var rowid = opts.rowId, str="",ocl;
		if(typeof(rowid) =='undefined' || $.fmatter.isEmpty(rowid)) {return "";}
		if(op.editformbutton){
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','formedit',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
			str =str+ "<div title='"+$.grid.nav.edittitle+"' style='float:left;cursor:pointer;' class='coral-pg-div coral-inline-edit' "+ocl+"><span class='coral-icon coral-icon-pencil'></span></div>";
		} else if(op.editbutton){
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','edit',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover') ";
			str =str+ "<div title='"+$.grid.nav.edittitle+"' style='float:left;cursor:pointer;' class='coral-pg-div coral-inline-edit' "+ocl+"><span class='coral-icon coral-icon-pencil'></span></div>";
		}
		if(op.delbutton) {
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','del',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
			str = str+"<div title='"+$.grid.nav.deltitle+"' style='float:left;margin-left:5px;' class='coral-pg-div coral-inline-del' "+ocl+"><span class='coral-icon coral-icon-trash'></span></div>";
		}
		ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','save',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
		str = str+"<div title='"+$.grid.edit.bSubmit+"' style='float:left;display:none' class='coral-pg-div coral-inline-save' "+ocl+"><span class='coral-icon coral-icon-disk'></span></div>";
		ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','cancel',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
		str = str+"<div title='"+$.grid.edit.bCancel+"' style='float:left;display:none;margin-left:5px;' class='coral-pg-div coral-inline-cancel' "+ocl+"><span class='coral-icon coral-icon-cancel'></span></div>";
		return "<div style='margin-left:8px;'>" + str + "</div>";
	};
	// state: edittype or formatter
	$.unformat = function (cellval,options,pos,cnt,state) {
		// specific for grid only
		var ret, state = state|| "formatter", formatType = options.colModel[state],editType,
		op =options.colModel.formatoptions || {}, sep,
		re = /([\.\*\_\'\(\)\{\}\+\?\\])/g,
		unformatFunc = options.colModel.unformat||($.fn.fmatter[formatType] && $.fn.fmatter[formatType].unformat);
		unformatFunc = $.coral.toFunction(unformatFunc);
		// 如果是编辑模式的下拉框是无法通过
		/*editType =  $.inArray(options.colModel.edittype,
				["combobox", "combotree", "combogrid", "datepicker", "autocomplete"]);
		if(editType > -1 && options.colModel.revertCode || options.colModel.revertCode){
			if($.inArray(formatType, ["autocomplete","datepicker","combobox","combotree","combogrid"]) === -1){
				formatType = "convertCode";
			}
		}*/
		if ( options.colModel.edittype == "combobox" && options.colModel.revertCode
				|| options.colModel.edittype == "combotree" && options.colModel.revertCode
				|| options.colModel.edittype == "combogrid" && options.colModel.revertCode
				|| options.colModel.edittype == "datepicker" && options.colModel.revertCode
				|| options.colModel.edittype == "autocomplete" && options.colModel.revertCode
				|| options.colModel.revertCode) {
			//如果revertCode为true，则必须保证隐藏值能够动态维护，或者这个隐藏值是不变的
			if (formatType == "autocomplete" || formatType == "datepicker" || formatType == "combobox" || formatType == "combotree" || formatType == "combogrid" ){
				//如果是formatter而不是edit，combobox有自己维护隐藏值的方式
			} else {
				formatType = "convertCode";
			}
		}
		if(typeof unformatFunc !== 'undefined' && $.isFunction(unformatFunc) ) {
			ret = unformatFunc.call(this, $(cellval).text(), options, cellval);
		} else if(!$.fmatter.isUndefined(formatType) && $.fmatter.isString(formatType) ) {
			var opts = $.grid.formatter || {}, stripTag;
			switch(formatType) {
				case 'integer' :
					op = $.extend({},opts.integer,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text().replace(stripTag,'');
					break;
				case 'number' :
					op = $.extend({},opts.number,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text().replace(stripTag,"").replace(op.decimalSeparator,'.');
					break;
				case 'currency':
					op = $.extend({},opts.currency,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text();
					if (op.prefix && op.prefix.length) {
						ret = ret.substr(op.prefix.length);
					}
					if (op.suffix && op.suffix.length) {
						ret = ret.substr(0, ret.length - op.suffix.length);
					}
					ret = ret.replace(stripTag,'').replace(op.decimalSeparator,'.');
					break;
				case 'checkbox':
					ret = $.unformat.checkbox(cellval,options,pos,cnt);
					break;
				case 'select' :
					ret = $.unformat.select(cellval,options,pos,cnt);
					break;
				case 'date' :
					ret = $.unformat.date(cellval,options,pos,cnt);
					break;
				case 'combobox' :
				case 'combogrid' :
				case 'combotree' :
					ret = $.unformat[ formatType ](cellval,options,pos,cnt);
					break;
				case 'datepicker' :
					ret = $.unformat.datepicker(cellval,options,pos,cnt);
					break;
				case 'autocomplete' :
					ret = $.unformat.autocomplete(cellval,options,pos,cnt);
					break;
				case 'text' :
				case 'textarea' :
					ret = $.unformat.textbox(cellval,options,pos,cnt);
					break;
				case 'convertCode' :
					if ( cnt == "get" ) {
						if ( options.colModel.revertCode == true ){
							ret = $.unformat.convertCode(cellval,options,pos,cnt);
						} else {
							ret= $(cellval).text();
						}
					} else {
						if ( options.colModel.postMode == "value" ){
							ret = $.unformat.convertCode(cellval,options,pos,cnt);
						} else {
							ret= $(cellval).text();
						}
					}
					
					break;
				case 'actions':
					return "";
				default:
					ret= $(cellval).text();
			}
		}
		return ret !== undefined ? ret : cnt===true ? $(cellval).text() : $.grid.htmlDecode($(cellval).html());
	};
	$.unformat.autocomplete = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").autocomplete("getValue").toString();
		} else {
			return  $(cellval).find(".ctrl-init").autocomplete("getText");
		}
	};
	$.unformat.combobox = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").combobox("getValue");
		} else {
			return  $(cellval).find(".ctrl-init").combobox("getText");
		}
	};
	$.unformat.combotree = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").combotree("getValue").toString();
		} else {
			return  $(cellval).find(".ctrl-init").combotree("getText");
		}
	};
	$.unformat.combogrid = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").combogrid("getValue");
		} else {
			return  $(cellval).find(".ctrl-init").combogrid("getText");
		}
	};
	$.unformat.textbox = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		return  $(cellval).find(".ctrl-init").textbox("getValue");
	};
	$.unformat.datepicker = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		return  $(cellval).find(".ctrl-init").datepicker("getValue");
	};
	$.unformat.convertCode = function (cellval,options,pos,cnt) {
		return $(cellval).attr("data-org");
	};
	$.unformat.select = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		
		if(op.value){
			var oSelect = op.value,
			msl =  op.multiple === true ? true : false,
			scell = [], sv;
			if(msl) {scell = cell.split(",");scell = $.map(scell,function(n){return $.trim(n);});}
			if ($.fmatter.isString(oSelect)) {
				var so = oSelect.split(delim), j=0;
				for(var i=0; i<so.length;i++){
					sv = so[i].split(sep);
					if(sv.length > 2 ) {
						sv[1] = $.map(sv,function(n,i){if(i>0) {return n;}}).join(sep);
					}					
					if(msl) {
						if($.inArray(sv[1],scell)>-1) {
							ret[j] = sv[0];
							j++;
						}
					} else if($.trim(sv[1])==$.trim(cell)) {
						ret[0] = sv[0];
						break;
					}
				}
			} else if($.fmatter.isObject(oSelect) || $.isArray(oSelect) ){
				if(!msl) {scell[0] =  cell;}
				ret = $.map(scell, function(n){
					var rv;
					$.each(oSelect, function(i,val){
						if (val == n) {
							rv = i;
							return false;
						}
					});
					if( typeof(rv) != 'undefined' ) {return rv;}
				});
			}
			return ret.join(", ");
		} else {
			return cell || "";
		}
	};
	$.unformat.date = function (cellval, opts) {
		// TODO: 检查单元格值变化的时候，data-org的值是否跟着改变
		if ( opts.revertCode ){
			return $(cellval).attr("data-org");
		} else {
			return $(cellval).text();
		}
		
		/*var op = $.grid.formatter.date || {};
		if(!$.fmatter.isUndefined(opts.formatoptions)) {
			op = $.extend({},op,opts.formatoptions);
		}		
		if(!$.fmatter.isEmpty(cellval)) {
			return  $.fmatter.util.DateFormat(op.newformat,cellval,op.srcformat,op);
		} else {
			return $.fn.fmatter.defaultFormat(cellval, opts);
		}*/
	};
	$.unformat.checkbox = function (cellval, opts) {
		var op = $.extend({}, !$.fmatter.isUndefined(opts.colModel.formatoptions) ? opts.colModel.formatoptions: opts.colModel.editoptions);

		var cbv = (op.value) ? op.value.split(":") : ["Yes","No"];
		
		return $('input',cellval).is(":checked") ? cbv[0] : cbv[1];
	};
})(jQuery);

/**
 *	Coral 4.0: textbox
 *
 *	Depends:
 *		jquery.coral.core.js
 *		jquery.coral.component.js
 *		jquery.validate.js
 *
 */
( function ( $, undefined ) {
	"use strict";	
	
	$.component ( "coral.textbox", $.coral.inputbase, {
		version: $.coral.version,
		castProperties : ["dataCustom","title","buttons", "buttonOptions","triggers"],
		options: {		
			swfPath: $.coral.contextPath + '/jquery-cui/resource/swfupload.swf',
			hasTips: false,
			showStar: true,
			showClose: false,
			dataCustom: null,
			value: "",
			//formatter: "simple",
			readonly: false,
			readonlyInput: false,
			disabled: false,
			required: false,
			isLabel: false,
			title: null, // title属性
			buttons: [],
			errMsg: null,
			errMsgPosition: "leftBottom",
			placeholder: "",
			type: "text",
			labelField: null,
			starBefore: false,
			valueChangedOnKeyUp: false,
			onClick: null,
			onChange: null,
			onBlur: null,
			onFocus: null,
			onKeyDown: null,
			onKeyUp: null,
			onKeyPress: null,
			onEnter: null, 			// press enter event callback
			onMouseEnter: null,
			onMouseLeave: null,
			onCreate: null,			
			onValidSuccess: null,
			onValidError: null,
			onValidWarn: null,
			onUploadSuccess: null,	// file upload success event callback
			// add sub button options
			buttonOptions: null,
			triggers: null, // 覆盖 validate 里的 triggers
			excluded: false // true 则不单独校验
		},
		/**
		 * 获取textbox的button组件
		 */
		button: function () {
			if (null !== this.options.buttonOptions) {
				return this.$button;
			}
		},
		//获取组件外围元素
		component: function () {
			return this.uiTextbox;
		},
		/**
		 * 获取焦点方法
		 */
		focus: function() {
			if (this.options.disabled || this.options.isLabel || this.options.readonly || this.options.readonlyInput ) return false;
			if ("hidden" == this.element.attr("type")) return ;
			var that = this;			
			this.element.focus();
			return true;
		},
		//创建组件
		_create: function() {
			var that = this;
			if(that.options.hasTips){
				that.options.title = true;
			}
			if ("hidden" !== this.element.attr("type") && 
					"file" !== this.element.attr("type") && 
					"password" !== this.element.attr("type") && 
					"text" !== this.element.attr("type") && 
					"INPUT" == this.element[0].tagName.toUpperCase()) {
				this.element.attr("type", "text");
			}
			this.element.addClass("ctrl-form-element");
			if (this.options.dataCustom) {
				this.element.attr("data-custom",this.options.dataCustom);
			}
			this._initElement();
			this.setValue(this.element.val(), false);
			this.originalValue = this.getValue();
			this._bindEvents();
			// add button code
			if (null !== this.options.buttonOptions) {
				this._outerButtons();
				/*this.$button = this._getButtonEl();
				this.component().append(this.$button).addClass("coral-textbox-hasButton");
				this.$button.button(this.options.buttonOptions);*/
			}
			that._trigger( "onCreate", null, [] );
		},
		_outerButtons: function(){
			this.uiDialogOuterButtonPanel = 
				$("<span class=\"coral-outerbuttonset coral-corner-all \"></span>");
			this.component().append( this.uiDialogOuterButtonPanel );
			this._createButtons( this.options.buttonOptions,null, this.uiDialogOuterButtonPanel );
			this.component().css( 
				"padding-right", 
				this.uiDialogOuterButtonPanel.outerWidth() + 8 
			);
		},
		/**
		 * 返回一个button基础element
		 */
		_getButtonEl: function () {
			return $("<button type='button'></button>").addClass("coral-textbox-button");
		},
		reset : function() {
			this.setValue(this.originalValue);
		},
		_initSimple: function(){
			var that = this,
			id = that.element.uniqueId().attr("id");
		},
		_initUpload: function(){
			var that = this,
				id = that.element.uniqueId().attr("id");
			that.select = [];
			$(this.element).wrap("<span class=\"coral-file-default\"></span>")
				.before("<span class='coral-file'>请选择...</span>")
				.before("<div id='"+id+"_upload'></div>")
				.before("<div id='"+id+"_queue'></div>")
				.hide();
			that.uploader = $("#"+id+"_upload");
			that.uploader.uploadify({
		        'swf'      :  this.options.swfPath,
		        'uploader' : that.options.uploadUrl,
		        'queueID'  : id+'_queue',
		        'height' : '28',
		        width: "800",
		        buttonText: "浏览",
		        'onDialogOpen' : function() {
		        	that.select = [];
		        },
		        'onDialogClose' : function() {
		        	
		        },
		        'onSelect' : function(file) {
		        	that.select.push(file.name);
		        	that.uiTextbox.find(".coral-file").html(that.select.join(","));
		        	that.uiTextbox.find("object").attr("title",that.select.join(","));
		        },
		        'onCancel' : function(file){
		        	//console.log("cancel:"+file.name);
		        },
		        'onQueueComplete' : function(queueData) {
		            //alert(queueData.uploadsSuccessful + ' files were successfully uploaded.');
		        //	$("#"+id+"_queue").html("上传成功！");
		        	setTimeout(function(){
		        		$("#"+id+"_queue").dialog("close");
		        		that.select = [];
		        	},3500);
		        },
		        // lihaibo add begin
		        'onUploadSuccess': function(file, data, response) {
			          that._trigger("onUploadSuccess", null, [{file:file, data:data, response:response}]);
			    },
			    // lihaibo add end
				'auto':false
		        // Put your options here
		    });
			$("#"+id+"_queue").dialog({
				autoOpen: false,
				modal: false,
				resizable: false,
				onOpen: function(){
					that.uploader.uploadify('upload','*');
				}
			});
		},
		upload: function(option){
			var that = this;
			var id = that.element[0].id;
			if(this.select.length === 0)
				return;
			$("#"+id+"_queue").dialog("open");
		},
		cancel: function(option){
			this.uploader.uploadify('cancel');
		},
		clear: function(option){
			this.select = [];
			this.uiTextbox.find(".coral-file").html("请选择...");
			this.uiTextbox.find("object").attr("title","请选择...");
			this.uploader.uploadify('cancel');
		},
		//获取icons的两个class
		_getIcon: function (icons) {
			var iconsJsonArray = []; // [{className: clickHandler}]
			
			if (typeof icons === "undefined" || icons == null || icons == "") {
				return [];
			}
			if (typeof icons == "object" ) {
				for (var i in icons) {
					var data = {};
					data[icons[i].icon] = icons[i].click;
					iconsJsonArray.push(data);
				}
			} else {
				var iconsArray = $.trim( icons).split( "," );
				for ( var i in iconsArray ) {
					var iconArray = iconsArray[i].split(" ");
					
					var data = {};
					data[iconArray[0]] = iconArray[1];					
					iconsJsonArray.push( data );
				}
			}
			return iconsJsonArray;
		},
		//callback click eventHandler
		_triggerClick: function (handler,event,data) {
			var that = this;
			
			var _fn = $.coral.toFunction(handler);
			event = $.Event(event);
			return _fn.apply(that.element[0], [event].concat(data)); 
		},
		/**
		 * update label attribute
		 */
		_updateLabel: function(labelField) {
			this.uiLabel.html(labelField);
		},
		//组件初始化
		_initElement: function () {
			var that = this,
				valuebox = null,
				options = that.options;	
			/*//创建组件外围元素
			this.uiTextbox = $( "<span class=\"coral-textbox\"></span>" );	
			//添加组件外围元素
			that.uiTextbox.insertAfter( that.element );
			that.elementBorder =  $( "<span class=\"coral-textbox-border coral-corner-all\"></span>" );		
			that.uiTextbox.append( that.elementBorder );
			that.element.appendTo( that.elementBorder );*/
			
			this.uiTextbox = $("<span class=\"coral-textbox\"><span class=\"coral-textbox-border coral-corner-all\"></span></span>" )
				.insertAfter(that.element);
			that.elementBorder =  that.uiTextbox.find(".coral-textbox-border");
			that.element.appendTo( that.elementBorder );
			that.element.addClass( "coral-textbox-default coral-validation-textbox" );
			if ( this.options.buttons.length > 0 ) {
				this._createButtonPanel();
			}
			// add label and required star before function @lhb @2015-04-27 add labelField attribute
			if (options.labelField) {
				this.uiLabel = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
				this.elementBorder.before(this.uiLabel);
				this.uiTextbox.addClass("coral-hasLabel");
			}
			this.valuebox = $( "<input type='hidden' class='coral-value-textbox'>" ).appendTo(this.uiTextbox);
			// add label and required star before function @lhb @2015-04-27
			if ( "hidden" == this.element.attr("type") ) {
				that.uiTextbox.hide();
			}
			
			if ( "TEXTAREA" == this.element[0].tagName ) {
				that.component().addClass( "coral-textbox-textarea" );
			} 
			if("file" == that.element.attr("type")){
				if("uploadify"==that.options.formatter)
					that._initUpload();
				if("simple"==that.options.formatter || typeof that.options.formatter == "undefined")
					that._initSimple();
			}
			// 处理 icons || texticons
			var iconsJsonArray = [], isIcons = null;
			
			if ((iconsJsonArray = that._getIcon(that.options.icons)).length != 0) {
				isIcons = true;
			} else if ((iconsJsonArray = that._getIcon( that.options.texticons )).length != 0 ) {
				isIcons = false;
			}
			
			if (isIcons != null) {
				this.uiDialogButtonPanel = $("<span class=\"coral-textbox-btn-icons coral-corner-right\"></span>");
				that.elementBorder.append( this.uiDialogButtonPanel );
				
				for ( var i in iconsJsonArray ) {
					$.each ( iconsJsonArray[i], function ( classText, clickHandler ) {
						var $icon = $("<span class=\"coral-textbox-btn-ico icon\"></span>");
						
						if ( isIcons ) {
							$icon.addClass(classText);/*.height( that.element.outerHeight() ).width( that.element.outerHeight() );*/
							
						} else {
							$icon.addClass("coral-textbox-btn-textico").html(classText);
						}
						
						$icon.bind("click" + that.eventNamespace, function (e) {
							if ( that.options.disabled ) {
								return;
							}
							that._triggerClick(clickHandler,e,[{'value':that.element.val()}]);
							//e.stopPropagation();
						});
						that.uiDialogButtonPanel.append($icon);
					});
				}
				this.rightPos = this.uiDialogButtonPanel.outerWidth();
			}
			
			if (typeof this.element.attr("id") != "undefined") {
	    		this.options.id = this.element.attr("id");
	    	} else if (this.options.id) {
	    		this.element.attr("id", this.options.id);
	    	}
			if (typeof this.element.attr("name") != "undefined") {
	    		this.options.name = this.element.attr("name");
	    	} else if (this.options.name) {
	    		this.element.attr("name", this.options.name);
	    	}
			/*if (typeof this.element.attr("value") != "undefined") {
	    		this.options.value = this.element.attr("value");
	    	}*/
			if ("TEXTAREA" === this.element[0].tagName) {
				if ($.trim(this.element.text()) !== "") {
		    		this.options.value = this.element.text();
		    	} else if (this.options.value){
		    		this.element.text( this.options.value );
		    	}
			} else {
				if ($.trim(this.element.val()) !== "") {
		    		this.options.value = this.element.val();
		    	} else if (this.options.value) {
		    		this.element.val(this.options.value);
		    	}
	    	}
			if (options.width !== "" && options.width !== undefined) {				
				this.uiTextbox.css( "width", options.width );
			}	
			if (options.height !== "" && options.height !== undefined) {				
				this._setOption("height", options.height );
			}
			if (options.readonlyInput) {
				this._setReadonlyInput();
			}
			if (options.readonly) {
				this._setReadonly();
			}

			if ( typeof options.isLabel == "boolean" && options.isLabel ) {
				this._setReadonly();
				this.options.readonly = true;
				this.component().addClass( "coral-isLabel" );
				return ;
			} 
			if ( typeof options.disabled === "boolean" && options.disabled  ) {
				this._setOption( "disabled", options.disabled );
			}
			// clear button
			if ( this.options.showClose ) {
				this.uiClose = $("<span class='coral-textbox-close cui-icon-cross2'></span>");
				this.elementBorder.append(this.uiClose);
				this.uiClose.css( "right", this.rightPos ? this.rightPos: 0 );
			}
			this.element.attr( "placeholder", options.placeholder );
			if ( options.placeholder && "" === this.element.val() ) {
				this._showPlaceholder();
			}
			this._updateTitle();
			this._refresh();
		},
		_setReadonlyInput: function(){
			if(typeof this.element.attr("readonly") != "undefined"){
				this.options.readonlyInput = this.element.prop("readonly");
			} else if (this.options.readonlyInput){
				this.element.prop("readonly", this.options.readonlyInput);
			}
			if (this.element.prop("readonly")) {
				this.component().addClass("coral-readonlyInput");
			}
		},
		_setReadonly: function(){
			this.options.readonlyInput = true;
			this._setReadonlyInput();
			this.component().removeClass("coral-readonlyInput").addClass("coral-readonly");
			var $buttons = this.component().find(".ctrl-init-button");
			$buttons.button("disable");
		},
		_updateTitle: function() {
			var that = this,
				opts = this.options;
			if (opts.title == true) {
				that.element.attr("title", that.element.val( ));
			} else if (opts.title == false) {
				that.element.attr("title", "");
			} else {
				that.element.attr("title", opts.title);
			}
		},
		/**
		 * 显示 placeholder
		 */
		_showPlaceholder: function () {
			if ( $.support.placeholder ) {
				return ;
			}
			var that = this,
				$placeholder = $("<span class='coral-textbox-placeholder-label'>" + that.options.placeholder  + "</span>");
			$(that.element).after( $placeholder );
		},
		/**
		 * 隐藏 placeholder
		 */
		_hidePlaceholder: function () {
			if ( $.support.placeholder ) {
				return ;
			}
			
			var that  = this;

			that.uiTextbox.find( ".coral-textbox-placeholder-label" ).remove();
		},
		//组件绑定事件
		_bindEvents: function () {
			var that = this,
				options = this.options;
			var suppressBlurs;
			this._on( {
				"mouseenter.coral-textbox-border": function( event ) {
					if ( typeof options.isLabel == "boolean" && options.isLabel ) { 
						return;
					}
					if ( typeof options.readonly == "boolean" && options.readonly ) { 
						return;
					}
					/*if ( typeof options.readonlyInput == "boolean" && options.readonlyInput ) { 
						return;
					}*/
					
					that.component().addClass("coral-textbox-hover");
					this._trigger( "onMouseEnter", event, [] );
				},
				"mouseleave.coral-textbox-border": function( event ) {
					if ( typeof options.isLabel == "boolean" && options.isLabel ) { 
						return;
					}
					if ( typeof options.readonly == "boolean" && options.readonly  ) { 
						return;
					}					
					/*if ( typeof options.readonlyInput == "boolean" && options.readonlyInput ) { 
						return;
					}	*/
					that.component().removeClass( "coral-textbox-hover" );	
					this._trigger( "onMouseLeave", event, [] );
				},
				"click": function( event ) {
					that._hidePlaceholder();
					this._trigger( "onClick", event, [] );
				},
				"click.coral-textbox-placeholder-label": function( event ) {
					that._hidePlaceholder();
					that.element.focus();
				},
				"dblclick": function( event ) {
					this._trigger( "onDblClick", event, [] );
				},
				"blur": function( event ) {
					this.component().removeClass( "coral-state-focus" );
					if ( "" === this.element.val() ) {
						this._showPlaceholder();
					}
					if ( suppressBlurs ) {
						suppressBlurs = false;
						return;
					}
					this.setValue( this.element.val(), true );
					this._trigger( "onBlur", event, [] );
				},
				"focusin": function( event ) {
					if ( options.isLabel || options.readonly || options.readonlyInput ) {
						this._trigger( "onFocus", event, [{'value':this.valuebox.val(),'text':this.element.val()}] );
						return;
					}
					this.component().addClass( "coral-state-focus" );
					this._trigger( "onFocus", event, [{'value':this.valuebox.val(),'text':this.element.val()}] );
				},
				"keydown": function( event ) {
					if ( options.isLabel || options.readonly || options.readonlyInput ) { 
						return;
					}
					this._trigger("onKeyDown", event, [{'value':this.valuebox.val(), 'text':this.element.val(), 'id': this.options.id }])
					//key enter and trigger event callback 
					if (event.keyCode == 13) {
						this.setValue(this.element.val(), true);
						this._trigger("onEnter", event, [{'value':this.valuebox.val(), 'text':this.element.val()}]);
					}
					this._hidePlaceholder();
				},
				"keypress": function( event ) {
					if ( options.isLabel || options.readonly || options.readonlyInput ) { 
						return;
					}
					this._trigger("onKeyPress", event, [{'value':this.valuebox.val(), 'text':this.element.val()}]);
				},
				"keyup": function( event ) {
					if ( options.isLabel || options.readonly || options.readonlyInput ) { 
						return;
					}
					if ( this.options.valueChangedOnKeyUp ) {
						this.setValue(this.element.val(), true, false);
					}
					this._trigger("onKeyUp", event, [{
						'value':this.valuebox.val(), 
						'text':this.element.val(), 
						'id': this.options.id 
					}]);
				},
				"click.coral-textbox-close" : function(e) {
					e.preventDefault();
					this.setValue("", true);
					if (this.options.placeholder) {
						this._showPlaceholder();
					}
					this._trigger( "onCloseClick", event, [] );
				},
				"mousedown.coral-textbox-close" : function(e) {
					e.stopPropagation();
					suppressBlurs = true;
				}
			});
		},
		/**
		 * 重新调整大小，以及图标的结构
		 */
		_refresh: function() {
			var that = this,
				opts = this.options;
			
			/*if (opts.icons && !opts.height) {
				var iconHeight = this.uiTextbox.find(".coral-textbox-btn-ico:eq(0)").outerHeight();
				this.element.outerHeight(iconHeight);
			}*/
		},
		//设置属性处理
		_setOption: function ( key, value ) {
			var that = this;
			//默认属性不允许更改
			if  (key === "id" || key === "name" || key === "type" ) {
				return ;
			}
			//TODO: isLabel状态下目前不处理宽度和高度
			if ( key === "height" ) {
				if ( typeof this.options.isLabel === "boolean" && this.options.isLabel ) {
	 				return ;	
	 			}
				if ( value ) {
					this.component().outerHeight( value );	
					//TODO: 如果ie7，则需要给textarea这个元素设置高度和宽度；
					this.uiTextbox.find( ".coral-textbox-btn-textico" ).css({
						"line-height": (value - 6) + "px",
						"height": value + "px"
					});
				}
			}
			if ( key === "width" ) {
				if ( typeof this.options.isLabel === "boolean" && this.options.isLabel ) {
	 				return ;	
	 			}
				if ( value ) {					
					this.uiTextbox.css( "width", this.options.width );
				}	
			}
			// 以上部分如果return后，不对option内部的值进行更改
			this._super( key, value );
			if ( key === "placeholder" ) {
				this.element.attr( "placeholder", this.options.placeholder );	
				if ( this.getValue() === "" ) {
					this._showPlaceholder();					
				}
			}
			// texticons
			if ( key == "texticons" ) {
				var iconsJsonArray = that._getIcon( that.options.texticons );				
				var $icons = $("<span class=\"coral-textbox-btn-icons coral-corner-right\"></span>");
				that.elementBorder.find( ".coral-textbox-btn-icons" ).replaceWith( $icons );
				
				for ( var i in iconsJsonArray ) {
					$.each ( iconsJsonArray[i], function ( classText, clickHandler ) {
						var $icon = $("<span class=\"coral-textbox-btn-ico icon\"></span>")
													.addClass("coral-textbox-btn-textico").html(classText);
						$icon.bind("click" + that.eventNamespace, function (e) {
							if ( that.options.disabled ) {
								return;
							}
							that._triggerClick( clickHandler,e,[{'value':that.element.val()}] );
						});
						$icons.append($icon);
					});
				}
			}
			if ( key === "value" ) {
				that._updateTitle();
				that.setValue(value, false);
			}
			if ( key === "isLabel" ) {
				if ( typeof value == "boolean" && value ) {
					this._setReadonly();
					this.component().removeClass( "coral-readonly" ).addClass( "coral-isLabel" );
				} else if ( typeof value == "boolean" && !value ) {
					this.element.prop( "readonly", false );
					this.options.readonly = false;
					this.component().find(".ctrl-init-button").button("enable");
					this.component().removeClass( "coral-isLabel coral-readonly" );
				}
			}
			if ( key === "readonly" ) {
				if ( typeof value == "boolean" && value ) {		
					this._setReadonly();
					this.component().removeClass( "coral-isLabel" ).addClass("coral-readonly");
				} else if ( typeof value == "boolean" && !value ) {
					this.element.prop( "readonly", false );
					this.options.readonly = false;
					this.options.readonlyInput = false;
					this.component().find(".ctrl-init-button").button("enable");
					this.element.prop( "readonly", false );
					this.component().removeClass("coral-isLabel coral-readonly");
				}
			}
			if ( key === "readonlyInput" ){
				if ( typeof value == "boolean" && value ){
					this._setReadonlyInput();
					this.component().removeClass( "coral-isLabel" ).addClass("coral-readonlyInput");
				}else if ( typeof value == "boolean" && !value ) {
					this.element.prop( "readonly", false );
					this.options.readonlyInput = false;
					this.component().removeClass("coral-isLabel coral-readonlyInput");
				}
			}
	 		if ( key === "disabled" ) {
				if ( value ) {
					this.element.prop( "disabled", true );
					this.component().find(".ctrl-init-button").button("disable");
				} else {
					this.element.prop( "disabled", false );
					this.component().find(".ctrl-init-button").button("enable");
				}
			}	
			if ( key === "labelField" ) {
				that._updateLabel(value);
			}
			if ( key ==="title" ) {
				that._updateTitle();
			}
			if ( key ==="hasTips" ) {
				that._updateTitle();
			}
		},
		_destroy: function() {
			this.uiTextbox.replaceWith( this.element );
			this.element.val("");
		    this.element.removeAttr("value");
			this.element.removeClass("coral-textbox-default")
				.removeClass("coral-validation-textbox")
				.removeClass("coral-textbox-hover")
				.removeClass("coral-textbox-textarea")
				.removeClass("coral-textbox-input")
				.removeAttr("placeholder")
				.removeAttr("title")
				.removeAttr("readonly")
				.removeAttr("disabled");
		},
		disable: function() {
			this._setOption("disabled", true);
		},
		enable: function() {
			this._setOption("disabled", false);
		},
		getHtml: function () {
			return this.element.text();
		},
		setHtml: function () {
			this.element.text( value );
			this._updateTitle();	
		},
		//获取值
		getValue: function () {
			return this.valuebox.val();
		},
		getValidateValue: function () {
			return this.getText();
		},
		getText:function(){
			if( this.component().hasClass("coral-state-focus") ) {
				if ( this.element.is("textarea") ) {
					return this.element.text();
				} else {
					return this.element.val();
				}
			} else {
				return this.valuebox.val();
			}
		},
		//设置值
		setValue: function (value, changeTrigger, changeText) {
			var text = value,
				nData;
			changeText = changeText !== false? true: false;
			var fText = $.coral.toFunction(this.options.formatterText);
			if ($.isFunction(fText)) {
				text = fText.apply(this.options.element,[{'value':value}]);
			}
			if (changeText) {
				this.setText(text);
			}
			this.valuebox.val(value);
			this.options.value = value;
			if (changeTrigger && this.previous != value) {
				this._trigger("onChange", null, [{'value':value, 'text':text}]);
			}
			this.previous = value;

			if ( value !== "" ) {
				this._hidePlaceholder();
			}
		},
		setText: function(text){
			if ( this.element.is("textarea") ) {
				this.element.val( text );
				this.element.text( text );
				//this.element.attr( "placeholder", this.options.placeholder );//在IE下，placeholder不显示
			} else {
				this.element.val( text );
			}
			this._updateTitle();
		},
		/**
		 ** 返回给form要提交的值信息
		 ** return {name: value};
		 **/
		formValue: function() {
			var data = {},
				name = this.element.attr("name");

			if (!name) return null;
			
			data[name] = this.getValue();
			
			return data ;
		}
	});
})(jQuery);

/**
 *	Coral 4.0: 工具条（toolbar）
 *
 * 依赖JS文件:
 *		jquery.coral.core.js
 *		jquery.coral.component.js
 *		jquery.coral.button.js
 *		jquery.coral.textbox.js
 *		jquery.coral.combobox.js
 */

( function ( $, undefined ) {
	"use strict";	

	$.component ( "coral.toolbar", {
		version: "4.0.2",
		castProperties: ["data","dataCustom","dropdownOptions"],
		options: {
			/* default options */
			clickToDisplay : 1,
			id: null,
			name: null,
			dataCustom: {},
			disabled: false,
			cls: null,
			url: null, 
			title : false,
			method: "get",
			data: null,
			width: null,
			height: null,
			isOverflow: true, // 是否自适应
			// 配置自适应时下拉选项
			dropdownOptions: {
				button: {
					text: false, // 默认不显示文字
					label: "更多" // 配置自适应时下拉按钮的文本
				},
				panelPosition: { // 配置下拉按钮的下拉面板相对于下拉按钮的position
					my: "right top",
					at: "right bottom"
				},
				atGroup: 0 //配置自适应时下拉按钮的位置所属的组别（0, 1, 2）
          	},
			align: 0, // 单组的时候，设置水平居左中右（"left", "center", "right"）
			autoDisplay: false, // 显示具有子菜单的按钮时，是否自动显示
			margin: 5, // define item与item之间的距离			
			/* default events */
			onCreate: null,
			onClick: null,
			onLoad: null // 数据加载回调事件
		},	
		/**
		 * 合并两个 $dom 集合
		 * @param: $d1 / $d2 {$dom}
		**/
		_jion: function($d1, $d2) {
			var $d = [];

			$.each($d1, function(i, d) {
				$d.push( $(d) );
			});
			$.each($d2, function(i, d) {
				$d.push( $(d) );
			});

			return $d;
		},
		/**
			hide all tieredmenus
		**/
		_hideMenus: function() {
			$(".coral-tieredmenu").hide();
		},
		/**
		 * create
		 */
		_create: function () {
			var that = this;
			// save sum of groups
			this.groupLength = 1;
			
			this._initElements();
			this._bindEvents();
		},
		//!-- extend api 
		_bindEvents: function () {
			var that = this;

			 // Clicks outside of a grid cancel any edit row
			this._on( this.document, {
				mousedown: function( event ) {
					if ( that.options.clickToDisplay == 1 && that.options.autoDisplay  ) {
						that.uiBox.toggleClass("coral-toolbar-click-active", false);
					}
				}
			});
		},
		/**
		 * initialize elements
		 */
		_initElements: function () {
			var that = this,
				options = this.options;
			
			this.uiBox = $( "<div class=\"coral-toolbar\"></div>" );
			this.uiBorder =  $( "<div class=\"coral-toolbar-border\"></div>" );
			this.uiBox.append( this.uiBorder );
			this.uiBox.insertAfter( this.element );
			this.element.appendTo( this.uiBorder );
			
			if(typeof this.element.attr("id") != "undefined"){
	    		this.options.id = this.element.attr("id");
	    	} else if (this.options.id){
	    		this.element.attr("id", this.options.id);
	    	}
	    	if(typeof this.element.attr("name") != "undefined") {
	    		this.options.name = this.element.attr("name");
	    	} else if (this.options.name){
	    		this.element.attr("name", this.options.name);
	    	}

	    	// 添加自适应时，需要用到的下拉按钮，默认隐藏
	    	//var dropdownLabel = this.options.dropdownOptions.button.label;
	    	//if ( !dropdownLabel ) dropdownLabel = "更多";
	    	this.uiAfter = $("<button type='button' data-frozen='true' class='coral-toolbar-after-element ctrl-toolbar-element'></button>")
	    		/*.appendTo(this.uiBox)	*/    		
	    		.menubutton({
	    			label: this.options.dropdownOptions.button.label,
	    			text: this.options.dropdownOptions.button.text,
	    			renderType: "button",
	    			icons: "cui-icon-arrow-down3 right",
	    			data: [],
	    			position: this.options.dropdownOptions.panelPosition
  	    		});
    		this.uiAfter.menubutton("component").addClass("coral-toolbar-item-component coral-toolbar-after");
			this.uiAfter.menubutton("hide");

			this._loadData();
			if ( this.options.clickToDisplay == 0 ){
				this.uiBox.addClass("coral-toolbar-click-active");				
			}
		},
		/**
		 * load json data from options.url or options.data
		 */
		_loadData: function () {
			var that = this,
				options = this.options;
			if (options.url) {
				$.ajax({
					type: options.method,
					url: options.url,
					data: {},
					dataType: "json",
					success: function (data) {
						that._initData(data);
					},
					error: function () {
				        $.alert( "Json Format Error!" );
					}
				});
			} else if (options.data) {
				this._initData(options.data);
			}
		},
		/**
		 * initialize json data
		 */
		_initData: function (data) {
			var that = this;
			
			if (typeof data === "object") {
				this._addItems(null, data); // index = null 代表尾部直接添加
				this._trigger("onLoad", null, {});
				this.isLoaded = true;
				// 处理冻结项
				this._setFrozenElements();
				// 给元素定位
				this._position();
			}

			if ( this.options.disabled ) {
				this._setDisabled( this.options.disabled );
			}
		},
		/**
		 * 增加子项内部处理方法
		 * @param index{number}：0 ~ length,字符型数字,null代表尾部直接添加
		 * @param data {json object{} or array[]} : 子项数据对象
		 * @return ;
		 */
		_addItems: function (index, data, groupIndex) {
			if (typeof data !== "object") return ;
			
			var that = this,
				items = [],
				len = data.length;
			
			for (var i = 0; i < len; i++) {
				var itemData = data[i];
				
				if ( itemData == "" || !$.isEmptyObject( itemData ) ) {
					items.push( that._createItem(itemData) );
				}
			}

			this._appendItems(index, items, groupIndex);
			this._initItems(items);
			/* 如果没有定义 "more" 则添加到末尾 */
			if ( !this.element.find(".coral-toolbar-after-element").length ) {
				var groupName = this._getGroupNameByIndex( this.options.dropdownOptions.atGroup );
				var $group = this.element.find("[group-role='"+groupName+"']");
				
				if ( $group.length ) {
					$group.after(this.uiAfter.menubutton("component"))
				} else {
					this.element.append(this.uiAfter.menubutton("component"));
				}
			}
		},
		/**
		 * create a toolbar item
		 * @param itemData{json object}:子项数据对象
		 * @return {jquery object{}};
		 */
		_createItem: function (itemData) {
			var that = this,
				data = itemData,
				type = itemData.type || "button",
				opts = null;
			// 分隔符 和 分组符
			if (itemData === "-") {
				type = "seperator";
			} else if (itemData === "->") {
				type = "grouper";
			} else if (itemData === "") {
				type = "blank";
			} else if (itemData === "more") {
				type = "more";
			}
				
			var $el = this._createEl(type);
			
			//delete itemData.type;
			opts = itemData;
			//itemData.type = type;
			// 兼容以前的写法，如果以前写的是icon，而不是icons，则处理成现在的button的icons属性
			if (type === "button" && typeof itemData.icon !== "undefined" && itemData.icon != "") {
				var icons = this._getIcon(itemData.icon);
				delete opts.icon;
				if (null != icons.ico1 && null == icons.ico2) {
					opts["icons"] = icons.ico1;
				} else if (null == icons.ico1 && null != icons.ico2) {
					opts["icons"] = icons.ico2 + " right";
				} else if (null != icons.ico1 && null != icons.ico2) {
					opts["icons"] = icons.ico1 + " left, " + icons.ico2 + " right";
				}
			}
			
			return {
				$el: $el, // item jquery element of coral
				coralType: type, // coral type
				options: opts // coral init options
			}
		},
		/**
		 * 处理 align （单组的情况下）
		 */
		_align: function() {
			// 只有在单组的时候处理水平位置
			if ( this.groupLength != 1 ) return ;
			
			var opts = this.options;
			
			if ( opts.align == "center" ) {
				var $grouperLeft = this._createEl("grouper").attr("grouper-role", "center"),
					$grouperRight = this._createEl("grouper").attr("grouper-role", "right");
				
				this.element.prepend($grouperLeft);
				this.element.find("[group-role='left']")
							.removeClass("group-left")
							.addClass("group-center")
							.attr("group-role", "center");				
				this.element.find(".ctrl-toolbar-element")
							.attr("group", "center");
				this.element.append($grouperRight);
			} else if ( opts.align == "right") {
				var $grouperRight = this._createEl("grouper").attr("grouper-role", "right");
				this.element.find("[group-role='left']")
							.removeClass("group-left")
							.addClass("group-right")
							.attr("group-role", "right");
				this.element.find(".ctrl-toolbar-element")
							.attr("group", "right");
				this.element.prepend($grouperRight);
			}
		},
		/**
		 * 根据索引增加子项到页面
		 * @param index{number}：0 ~ length,字符型数字,null代表尾部直接添加
		 * @param items {json object{}} : 子项数据对象
		 * @return ;
		 */
		_appendItems: function (index, items, groupIndex) {
			var that = this;

			if ( !this.isLoaded ) {
				var grouperIndex = 0;
				var grouper = that._createGrouper(grouperIndex, this.groupLength);
				this.element.append(grouper);
				
				$.each(items, function(i, d) {
					if ( d.coralType == "grouper" ) {
						grouperIndex += 1;
						grouper = that._createGrouper(grouperIndex, that.groupLength);
						that.element.append(d.$el.attr("grouper-role", grouper.attr("group-role")));
						that.element.append(grouper);
					} else {
						// 给项分配组别
						grouper.append(d.$el.attr("group", grouper.attr("group-role")));
						// 如果有冻结项，则标识 data-frozen 为 true
						if ( d.options && d.options.frozen == true) {
							d.$el.attr("data-frozen", true);
						}
					}
				});
				// 水平居位处理
				this._align();
			} else {
				var groupName = this._getGroupNameByIndex(groupIndex);
				var $group = this.element.find("[group-role='"+ groupName +"']");
				var innerLength = $group.find(".ctrl-toolbar-element:not(.coral-toolbar-separator)").length;
				
				if ( null == index || index == innerLength ) {
					for (var i in items) {
						items[i].$el.attr("group", groupName);
						items[i].$el.appendTo($group);
					}
				} else if ( index == 0 ) {
					for (var j in items) {
						items[j].$el.attr("group", groupName);
						items[j].$el.prependTo($group);
					}
				} else {
					for (var k in items) {
						items[k].$el.attr("group", groupName);
						var item = $group.find(".ctrl-toolbar-element:eq(" + index + ")");
						var coralType = item.attr("component-role");
						if ( coralType ) {
							item[coralType]("component").before(items[k].$el);
						} else {
							item.before(items[k].$el);
						}
					}
				}
			}
		},
		/**
		 * 初始化添加的项内部组件
		 * @param items {json object{}} : 子项数据对象
		 * @return ;
		 */
		_initItems: function ( items ) {
			var that = this;
			
			for (var i in items) {
				// 如果是 "-" 分隔符，则跳过，不初始化
				if (items[i].coralType === "seperator" || items[i].coralType === "grouper" || items[i].coralType === "blank" || items[i].coralType === "more") {
					continue ;
				}
				var $el = items[i].$el,
					coralType = items[i].coralType.toLowerCase(),
					opts = items[i].options;
				// 给每一个子项的component做标记
				opts.componentCls = "coral-toolbar-item-component";
				if (items[i].coralType === "html") {
					$el.attr("id", opts.id).append(opts.content);
					continue;
				}
				if( that.options.title ){
					opts.title=true;
				}
				$el[coralType](opts);
				
				// listen item's click event and trigger the default click event
				/*var _opts = {} ;				
				_opts[coralType + "onclick"] = function(e,ui) {
	    			//that._trigger("onClick", e, ui);
	    			//console.log(e);
	    			if ( that.uiAfter.length ) {
	    				
	    				that.uiAfter.menubutton("hidePanel");
	    			}
	    		};*/
				//that._on( $el, _opts);
				$el.off(".toolbaronclick").on( coralType + "onclick.toolbaronclick", function( e, ui ) {
					ui = ui || {};
					ui.id = ui.id || e.currentTarget.id;
					$(e.currentTarget).attr("component-role") == "splitbutton";
					if ( that.uiAfter.length ) {
						var ctr = $(e.currentTarget).attr("component-role");
						if ( ctr == "splitbutton" 
							|| ctr == "button" ) {
							that.uiAfter.menubutton("hidePanel");
						}
	    			}
					// trigger触发一般放在最后，在处理完内部逻辑后调用，因为外部逻辑可能会破坏当前结构；
					that._trigger("onClick", e, ui);
				});
				$el.off(".toolbaronmouseenter").on( coralType + "onmouseenter.toolbaronmouseenter", function( e, ui ) {
					var ctr = $(e.currentTarget).attr("component-role");
					if ( ctr == "splitbutton" 
						|| ctr == "menubutton" ) {
						$(e.currentTarget)[ctr]("hideAllMenus");
						$(e.currentTarget)[ctr]("showMenu");
					}
					
				});
			}
		},
		/**
		 * 根据组件类型，创建一个对应的jQuery element
		 * @param coralType(string):组件类型
		 * @return jQuery object
		 */
		_createEl: function (coralType) {
			var $el;
			
			switch(coralType) {
				case "button":
					$el = $("<button type='button'></button>");
					break;
				case "checkbox":
					$el = $("<input type='checkbox' />");
					break;
				case "textbox":
				case "combobox":
					$el = $("<input type='text' />");
					break;
				case "datepicker":
					$el = $("<input type='text' />");
					break;
				case "splitbutton": 
				case "menubutton":
					$el = $("<button type='button'></button>");
					break;
				case "seperator":
					$el = $("<div class='coral-toolbar-item-component coral-toolbar-separator coral-toolbar-separator-horizontal'></div>");
					break;
				case "grouper":
					this.groupLength += 1;
					$el = $("<div class='coral-toolbar-item-component coral-toolbar-grouper'></div>");
					break;
				case "html":
				 	$el = $("<div class='coral-toolbar-item-component coral-toolbar-html'></div>");
				 	break;
				case "blank":
					$el = $("<span class='coral-toolbar-item-component coral-toolbar-blank'></span>");
					break;
				case "more":
					$el = this.uiAfter.menubutton("component");
					return $el;
					break;
				default:
					$el = $("<span class='coral-toolbar-item-component'></span>");
					break;
			}
			// 标识是toolbar下的element
			return $el.addClass("ctrl-toolbar-element");
		},		
		/**
		 * 生成分组父元素
		 * @param: index {number}(0, 1, 2)，索引
		 * @param: sum {number}，总分组的数目
		**/
		_createGrouper: function(index, sum) {
			var $grouper = $();

			if (sum == 1 || sum == 3) {
				switch(index) {
					case 0:
						$grouper = $("<span class='coral-toolbar-group group-left' group-role='left'></span>");
						break;
					case 1:
						$grouper = $("<span class='coral-toolbar-group group-center' group-role='center'></span>");
						break;
					case 2:
						$grouper = $("<span class='coral-toolbar-group group-right' group-role='right'></span>");
						break;
					default:
						$grouper = $("<span class='coral-toolbar-group' group-role='default'></span>");
						break;
				}	
			} else if (sum == 2) {
				switch(index) {
					case 0:
						$grouper = $("<span class='coral-toolbar-group group-left' group-role='left'></span>");
						break;
					case 1:
						$grouper = $("<span class='coral-toolbar-group group-right' group-role='right'></span>");
						break;
					default:
						$grouper = $("<span class='coral-toolbar-group' group-role='default'></span>");
						break;
				}	
			}

			return $grouper;
		},
		/**
		 * 根据组别索引获取组别名称
		 */
		_getGroupNameByIndex: function(groupIndex) {
			if (typeof groupIndex !== "number") return "left";
			
			if ( this.groupLength == 1 ) {
				return "left";
			} else if ( this.groupLength == 2 ) {
				return groupIndex == 0 ? "left" : "right"; 
			} else if ( this.groupLength == 3 ) {
				switch (groupIndex) {
					case 0:
						return "left";
					case 1:
						return "center";
					case 2:
						return "right";
				}
			}
		},
		/**
		 * 获取分组符元素
		**/
		_getGrouper: function() {
			return this.element.find(".coral-toolbar-grouper");
		},
		/**
		 * 重置分组符宽度为1，便于计算计算totalWidth（不包括分组符）
		**/
		_resetGrouper: function() {
			var $grouper = this._getGrouper();
			
			if ( $grouper.length ) {
				$grouper.width(1);
			}
		},
		/**
		 *	重置 项 （讲收缩到panel的项还原，并清除绝对定位的样式）
		**/
		_resetToolbarItems: function() {
			var that = this,
				$elements = this._getElements(2);

			this._resetGrouper();
			
			$.each( $elements, function(i, el) {
				var $el = $(el),
					$com = that._getComponentByElement( $el );

				$com.css({
					left: ""
				});

				if ($com.hasClass("coral-menubutton-button-item")) {
					var groupRole = $el.attr("group"),
						$group = that.element.find("[group-role='"+groupRole+"']");

					if ( $group.find("[data-frozen='true']").length ) {
						var $frozenEl = $group.find("[data-frozen='true']:eq(0)");
						var $frozenCom = that._getComponentByElement($frozenEl);
						$frozenCom.before($com.removeClass("coral-menubutton-button-item"));
					} else {
						$group.append($com.removeClass("coral-menubutton-button-item"));
					}
				}
			});
			this.uiAfter.menubutton("hidePanel");
			this.uiAfter.menubutton("hide");

			this.uiBorder.css({
				width: "auto"
			});
		},
		/**
		 *	定位
		**/
		_position: function() {
			if ( !this.element.is(":visible") ) {
				// TODO: 清除 left，并把 panel 内的元素移除来。
				this._resetToolbarItems();
				this.component().addClass("coral-toolbar-initHidden");
				return;
			} else {
				this.component().removeClass("coral-toolbar-initHidden");
			}
			var that = this,
				opts = this.options;
			// 详见方法注释
			this._resetGrouper();

			// 缓存下来totalWidth
			this.totalWidth = this._totalWidth();
			
			if (opts.isOverflow && this.uiBox.width() > 0) {
				// 定位前，先设置border宽度跟component一致，后再调整
				this.uiBorder.width(this.uiBox.width());
			} else {
				this.uiBorder.width( Math.max(this.totalWidth, this.uiBox.width()) );
				//this.uiBorder.width(this.totalWidth);
				//this.uiBox.width(this.totalWidth);
			}
			if(this._toolbarWidth() - this.totalWidth < 0) {
				this.uiAfter.menubutton("show");
				/*this.uiAfter.css("margin-left", opts.margin);
				this.uiBorder.width(this.uiBox.width() - this.uiAfter.width() - opts.margin*2);*/
			} else {
				this.uiAfter.menubutton("hide");
			}

			this._positionItems(this.element);
		},
		/**
			根据浮动的方向，计算每组的定位
		**/
		_positionItems: function($el) {
			var that = this,
				opts = this.options,
				margin = this.options.margin,
				isEnd = false,
				left = 0,
				$lastEl = $(),
				cssStyle = {
					/*margin: "0px",*/
					right: "auto"
				};
			
 			this._prePosition();		
			this.element.find(".coral-toolbar-item-component:not(.coral-state-hidden)").each(function(index, itemEl) {
				var $itemEl = $(itemEl);

				if (isEnd) {
					return true;
				}
				if ($lastEl.length) {
					left = left + $lastEl.outerWidth() + margin;
				}
				cssStyle["left"] = left + "px";
				$itemEl.css(cssStyle);
				$lastEl = $itemEl;
			});	
			// 处理 menubutton，splitbutton 弹出方式
			this._handlerDropdownItems();
		},
		_handlerDropdownItems: function() {
			var that = this,
				$elementsParent = this._filter( this._getElements(0), ".ctrl-init-splitbutton,.ctrl-init-menubutton");
			
			that._hideMenus();
			$.each( $elementsParent, function(i, el) {
				var $el = $(el),
					$com = that._getComponentByElement($el);

				try {
					switch( $el.attr("component-role") ) {
						case "splitbutton":
							if ( $com.hasClass("coral-menubutton-button-item") ) {
								$el.splitbutton("menu").tieredmenu("option", {
									my: "left top",
									at: "right top",
									of: $el.splitbutton("uiDropdownButton")
								});
							} else {
								$el.splitbutton("menu").tieredmenu("option", {
									my: "left top",
									at: "left bottom",
									of: $el
								});
							}
							break;
						case "menubutton":
							if ( $com.hasClass("coral-menubutton-button-item") ) {
								$el.menubutton("menu").tieredmenu("option", {
									my: "left top",
									at: "right top"
								});
							} else {
								$el.menubutton("menu").tieredmenu("option", {
									my: "left top",
									at: "left bottom"
								});
							}
							break;
						default:
							break;
					}
				} catch ( exception ) {
					console.log(" There is a error happened.");
				} finally {
					
				}

			});

		},
		/**
		 * 根据组件原始元素，获取外层元素
		**/
		_getComponentByElement: function($el) {
			var $com = $(),
				type = $el.attr("component-role");
			
			if ( type ) {
				$com = $el[type]("component");
			} else {
				$com = $el;
			}

			return $com ;
		},
		/**
		** @param: $elements {$(dom)}
		** @param: selector {string}
		** return [$dom];
		**/
		_filter: function( $elements, selector ) {
			var $elementsRst = [];

			$.each( $elements, function(i, el) {
				var $el = $(el);

				if ( $el.is(selector) ) {
					$elementsRst.push( $el );
				}
			});

			return $elementsRst ;
		},
		/**
		 *	定位前期准备：将 $dom 所属范围归属好，宽度设置好
		**/
		_prePosition: function() {
			var that = this,
				opts = this.options,
				margin = this.options.margin,
				left = 0,
				isEnd = false,
				addMenuButtons = [],
				$lastEl = $(),
				elements = [];

			if (this.uiAfter.is(":visible")) {
				elements = this._getElements(3);
			} else {
				elements = this._getElements(2);
			}


			var elements = this._jion( that._getFrozenElements(),that._filter(elements, ":not([data-frozen='true'])") ) ;
			
			$.each( elements , function(i, el) {
 				var $com = that._getComponentByElement( $(el) );

				var isInner = !$com.hasClass("coral-menubutton-button-item");

				if (isEnd) {
					if (!isInner) return true;
					if ( $com.hasClass("coral-toolbar-grouper") || $(el).attr("data-frozen") == "true" ) return true;
					addMenuButtons.push($com);
					return true;
				}

				if ($lastEl.length && $lastEl.is(":visible")) {
					left = left + $lastEl.outerWidth() + margin;
				}

				if (!isInner) {
					var $group = that.element.find("[group-role='" + $(el).attr("group") + "']");
					if ($group.attr("group-role") == $(el).attr("group") && $group.find("[data-frozen='true']").length) {
						var $frozenEl = $group.find("[data-frozen='true']:eq(0)");
						if ( $frozenEl.attr("component-role") ) {
							$frozenEl[$frozenEl.attr("component-role")]("component").before($com.removeClass("coral-menubutton-button-item"));
						} else {// html元素不是组件，无法调用component方法
							$frozenEl.before($com.removeClass("coral-menubutton-button-item"));
						}
					} else {
						$com.removeClass("coral-menubutton-button-item").appendTo($group);
					}
				}
				if ( left + $com.outerWidth() > that._toolbarWidth() ) {
					isEnd = true;
					if ( $com.hasClass("coral-toolbar-grouper") || $(el).attr("data-frozen") == "true" ) return true;
					if (isInner) {
						addMenuButtons.push($com);
					} else {
						that.uiAfter.menubutton("prepend", $com);
					}
					return true;
				}
				$lastEl = $com;
			});
			// 第一次初始化和刷新时的定位操作不同
			if ( !this.isLoaded ) {
				that.uiAfter.menubutton("append", addMenuButtons);
			} else {
				that.uiAfter.menubutton("prepend", addMenuButtons);
			}
			// 排完所有的元素后，还剩下的宽度给分组符
			this._setGrouperWidth();
		},
		/**
		 * 设置分组符的宽度
		**/
		_setGrouperWidth: function() {
			var $grouper = this._getGrouper();

			var grouperWidth = ( this._toolbarWidth() - this._totalWidth(true, this.uiAfter.is(":visible")) - this.options.margin );
			var leftGroupWidth = this._getWidthByGroupRole("left");
			var rightGroupWidth = this._getWidthByGroupRole("right");
			var leftGrouperWidth = (grouperWidth - leftGroupWidth + rightGroupWidth) / 2;
			var rightGrouperWidth = (grouperWidth - leftGrouperWidth);
			
			if (grouperWidth < 0) {
				$grouper.width(1);
				return ;
			}

			if ( $grouper.length == 1 ) {
				$grouper.width( grouperWidth );
			} else if ( $grouper.length == 2 ) {
				if (leftGrouperWidth > 0 && rightGrouperWidth > 0 && !this.uiAfter.is(":visible")) {
					$( $grouper[0] ).width(leftGrouperWidth + 1);
					$( $grouper[1] ).width(rightGrouperWidth + 1);						
				} else {
					$( $grouper[1] ).width(grouperWidth + 1);
					$( $grouper[0] ).width(1);
				}
			}
		},
		/**
		 * 根据组别，计算内部项宽度之和
		 * @param: groupRole {number}（"left","center","right"）
		**/
		_getWidthByGroupRole: function(groupRole) {
			var opts = this.options,
				width = 0,
				$group = this.element.find("[group-role='" + groupRole + "']"),
				$components = $group.find(".coral-toolbar-item-component");

			if ( !$group.length || !$components.length) return 0;

			$.each($components, function (i, component) {
				var $component = $(component);

				width += $component.outerWidth() + opts.margin;
				
				if (i == $components.length-1) {
					width -= opts.margin;
				}
			});

			return width;
		},				
		/**
		 * 获取 toolbar 实际宽度
		**/
		_toolbarWidth: function() {
			return this.uiBorder.innerWidth();
		},
		_setFrozenElements: function() {
			var $elements = this._getElements(3),
				flag = false;

			$.each( $elements, function(i, el) {
				var $el = $(el);
				
				if ( $el.hasClass("coral-toolbar-after-element") ) {
					flag = true;
				}
				if ( flag && !$el.hasClass("coral-toolbar-grouper") ) {
					$el.attr("data-frozen", true);
				}
			});
		},
		/**
			获取 frozen（冻结项） 元素
		**/
		_getFrozenElements: function() {
			if ( this.uiAfter.is(":visible") ) {
				return this.element.find("[data-frozen='true']");
			} else {
				return this.element.find("[data-frozen='true']:not(.coral-toolbar-after-element)");
			}			
		},
		/**
			获取 toolbar 项（原始元素）
			@param: type {number}（0-只包括有效项，1-包括分隔符，2-包括分组符，3-包括下拉面板按钮）
		**/
		_getElements: function(type) {
			var $itemsAll = $(),
				$itemsInner = this.element.find(".ctrl-toolbar-element"),
				$itemsOuter = this.uiAfter.menubutton("buttons").find(".ctrl-toolbar-element");

			$itemsAll = this._jion( $itemsInner, $itemsOuter );

			switch(type) {
				case 0: 
					$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after-element,.coral-toolbar-grouper,.coral-toolbar-separator)");
					break;
				case 1:
					$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after-element,.coral-toolbar-grouper)");
					break;
				case 2:
					$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after-element)");
					break;
				case 3:
					break;
				default:
					break;
			}

			return $itemsAll;
		},
		/**
			获取 toolbar 项（外层元素）
			@param: type {number}（0-只包括有效项，1-包括分隔符，2-包括分组符，3-包括下拉面板按钮）
		**/
		_getComponents: function(type, containHidden) {
			var $itemsAll = $(),
				$itemsInner = this.element.find(".coral-toolbar-item-component"),
				$itemsOuter = this.uiAfter.menubutton("buttonElements");
			
			$itemsAll = this._jion( $itemsInner, $itemsOuter );

			type = type || 1;
			switch(type) {
				case 0: 
					$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after,.coral-toolbar-grouper,.coral-toolbar-separator)");
					break;
				case 1:
					$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after,.coral-toolbar-grouper)");
					break;
				case 2:
					$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after)");
					break;
				case 3:
					break;
				default:
					break;
			}
			// 如果不包含隐藏元素，则剔除
			if ( !containHidden ) {
				// $itemsAll.filter(".coral-state-hidden");
				$itemAll = this._filter($itemsAll, ".coral-state-hidden");
			}

			return $itemsAll;
		},
		/**
		 * 获取 toolbar 项相加的总宽度
		 * @param: inner {boolean}（true-只计算 border 内的项）
		 */
		getTotalWidth: function(inner) {
			return this._totalWidth(inner);
		},
		/**
		 * 获取 toolbar 项相加的总宽度
		 * @param: inner {boolean}（true-只计算 border 内的项）
		 */
		_totalWidth: function(inner, includeAfter) {
			var that = this,
				opts = this.options,
				totalWidth = 0;
			var $items = $();

			if (includeAfter) {
				$items = this.element.find(".coral-toolbar-item-component:not(.coral-state-hidden)");
			} else {
				$items = this.element.find(".coral-toolbar-item-component:not(.coral-state-hidden,.coral-toolbar-after)");
			}
			var $items_buttons = this.uiAfter.menubutton("buttons").find(".coral-toolbar-item-component:not(.coral-state-hidden)");
			

			$items.each(function(index, item) {
				var $item = $(item);

				totalWidth = totalWidth + $item.outerWidth() + opts.margin;
				if (index == $items.length-1 && !$items_buttons.length) {
					totalWidth = totalWidth - opts.margin;
				}
			});
			if (inner) {
				return totalWidth - opts.margin;
			}

			this.uiAfter.menubutton("showPanel");
			$items_buttons.each(function(index, item) {
				var $item = $(item);

				totalWidth = totalWidth + $item.outerWidth() + opts.margin;
				
				if (index == $items_buttons.length-1) {
					totalWidth = totalWidth - opts.margin;
				}
			});
			this.uiAfter.menubutton("hidePanel");

			return totalWidth;
		},
		//获取icon的两个class
		_getIcon: function ( icoStr ) {
			var ico = { ico1: null, ico2: null },
				icoArray = [],
				icoTrim;
			
			if ( icoStr == null ) {
				return ico;
			}
			
			icoTrim = $.trim( icoStr );
			if ( icoTrim.indexOf( "," ) >= 0 ) {
				icoArray = icoTrim.split( "," );
				
				ico.ico1 = icoArray[0] == "" ? null : icoArray[0];
				ico.ico2 = icoArray[1] == "" ? null : icoArray[1];
			} else {
				ico.ico1 = icoTrim;
			}
			
			return ico;
		},		
		/**
		 * 获取子项长度
		 * @return {number};
		 */
		getLength: function () {
			return this._getElements(0).length;
		},
		/**
		 * 根据id判断是否存在子项
		 * @return {boolean} : true - 存在; false - 不存在
		 */
		isExist: function ( id ) {			
			return this._getSubCoral(id) ? true : false;
		},
		/**
		 *	获取组别的长度
		**/
		_getGroupElementsLength: function(groupIndex) {
			if (typeof groupIndex !== "number" || groupIndex > (this.groupLength-1) ) return ;

			var groupName = this._getGroupNameByIndex(groupIndex);
			var $group = this.element.find("[group-role='"+ groupName +"']");

			return $group.find(".ctrl-toolbar-element:not(.coral-toolbar-separator)").length;
		},
		/**
		 * 增加子项
		 * @param key{number，string}：根按钮索引，或者id
		 * @param data {json object{} or array[]} : 子项数据对象
		 * @return ;
		 */
		add: function ( key, data , groupIndex) {
			if (typeof data !== "object") return;
			// 说明传进的参数是id
			if ( typeof key === "string" ) {
				return this._addByParentId( key, data );
			}

			var groupIndex = groupIndex || 0;
			var that = this,
				idx = parseInt( key );
			
			if ( ((null != key) && isNaN(idx)) || idx < 0 || idx > this._getGroupElementsLength(groupIndex) ) {
				return ;
			}
			if ( !$.isArray(data) ) {
				data = [data];
			}
			// 如果长度为0，则直接添加在尾部
			if ( 0 == this._getGroupElementsLength(groupIndex) ) {
				key = null;
			}
			this._addItems(key, data, groupIndex);
			this._refresh();
		},
		/**
         * 根据父id添加项
         * @param pid { string } : 父id
         * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
         * @return ;
         */
		_addByParentId: function (pid, data) {
			var pNodeObj = this._getSubCoral(pid);
			
			if (pNodeObj) {
				var $el = pNodeObj.$el;
				switch (pNodeObj.type) {
					case "splitbutton":
						$el.splitbutton("menu").tieredmenu("add", null, data);
						break;
					case "menubutton":
						$el.menubutton("menu").tieredmenu("add", null, data);
						break;
					case "tieredmenu":
						$el.tieredmenu("add", pid, data);
						break;
					default:
						break;
				}
			}
		},
		/**
		 * 根据id或index获取组件对象
		 */
		getSubCoral: function (key) {
			var that = this;
			
			if ( typeof key === "string" ) {
				return that._getSubCoral( key );
			} else {
				return that._getSubCoralByIndex( key );
			}
		},
		/**
		 * 根据index获取组件对象
		 */
		_getSubCoralByIndex: function ( index ){
			var that = this,
				idx = parseInt(index);
			
			if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
			
			return that._getSubCoral( idx );
			
		},
		/** 
		 *
		**/
		_findElementsByAttr: function($elements, attrName, attrValue) {
			var that = this,
				$elementsResult = [];

			$.each($elements, function(idx, item){
				var $item = $(item);
				
				if ( attrValue == $item.attr(attrName) ) {
					$elementsResult.push($item);
				} 
			});

			return $elementsResult;
		},
		/**
		 * 根据id获取子组件的信息
		 * @param id { string } : id
		 * @return { object } : {$el:组件元素, type:组件类型}
		 */
		_getSubCoral: function(id) {
			var that = this,
				$el = this._findElementsByAttr(this._getElements(0), "id", id),
				type = null,
				$splitItems = this._findElementsByAttr(this._getElements(0), "component-role", "splitbutton"),
				$menuItems = this._findElementsByAttr(this._getElements(0), "component-role", "menubutton"),
				$menuEl = null,
				returnObj = null,
				$item = null;
			
			if (typeof id === "number") {
				$item = $( this._getElements(0)[id] );
				returnObj = {
					$el: $item,
					type: $item.attr("component-role")
				};
				return returnObj;
			}
			if ($el.length) {
				returnObj = {
					$el: $el[0],
					type: $el[0].attr("component-role")
				};
				return returnObj;
			} 
			
			$menuEl = this._findSubCoralInMenuItems( $splitItems, id );
			if ($splitItems.length && $menuEl) {
				returnObj = {
					$el: $menuEl,
					type: "tieredmenu"
				};
				return returnObj;
			} 
			
			$menuEl = this._findSubCoralInMenuItems( $menuItems, id );
			if ($menuItems.length && $menuEl) {
				returnObj = {
					$el: $menuEl,
					type: "tieredmenu"
				};
				return returnObj;
			}
			
			return returnObj;
		},
		/**
		 * 在splitbutton 或者 menubutton 下的menuItems里面找
		 * @param $buttonEls { jquery{} } : 工具条下 splitbuttons 或 menubuttons
		 * @param id { string } : id
		 * @return { jquery{} } : 找到含有id的tieredmenu元素
		 */
		_findSubCoralInMenuItems: function($buttonEls, id) {
			if( !$buttonEls.length ) return;
			var returnObj = null;
			
			$.each($buttonEls, function(index, item) {
				var $item = $(item),
					type = $item.attr("component-role"),
					$menu =  $(item)[type]("menu");
				
				if ($menu.find("[data-id='"+id+"']").length) {
					returnObj = $menu;
				}
			});
			
			return returnObj;
		},
		/**
		 * remove all items
		 * @return ;
		 */
		removeAll: function() {
			var that = this;
			
			$.each(this._getElements(1), function(index, el) {
				var $el = $(el),
					coralType= $el.attr("component-role");
				
				if ( coralType ) {
					$el[coralType]("destroy");
				}		
				
				$el.remove();
			});

			this._refresh();
		},
		/**
         * 根据id或者根子项索引删除项
         * @param key { string,number } : id，根子项索引
         * @return ;
         */
		remove: function ( key ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				this._removeById( key );
			} else {
				this._removeByIndex( key );
			}

			this._refresh();
			
		}, 
		/**
		 * 根据id删除项
		 * @param id { string } : id
         * @return ;
		 */
		_removeById: function(id) {			
			var that = this,
				pNodeObj = this._getSubCoral(id);
			
			if (pNodeObj) {
				var $el = pNodeObj.$el;
				if ( $el.hasClass("coral-toolbar-html") ) {
					$el.remove();
					return ;
				}					
				switch (pNodeObj.type) {
					case "tieredmenu":
						$el.tieredmenu("removeItem", id);
						break;
					default:
						var coralType= $el.attr("component-role");
						
						$el[coralType]("destroy");
						$el.remove();
						break;
				}
			}
		},
		/**
		 * 根据根子项index删除项
		 * @param index { number } :根子项索引
         * @return ;
		 */
		_removeByIndex: function(index) {
			var idx = parseInt(index);
			
			if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
			
			var $el = $( this._getElements(0)[idx] );
			var coralType= $el.attr("component-role");
			
			if ( coralType ) {
				$el[coralType]("component").remove();
			}
			$el.remove();
		},		
		/**
	     * 根据id或者根子项索引修改项的文本
	     * @param key { string,number } : id，根子项索引
	     * @return ;
	     */
		update: function ( key, label ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				that._updateById( key, label );
			} else {
				that._updateByIndex( key, label );
			}

			this._refresh();
		},
		/**
		 * 根据id修改项的文本
		 * @param id { string } : id
         * @return ;
		 */
		_updateById: function ( id, label ) {
			var pNodeObj = this._getSubCoral(id);
			if (pNodeObj) {
				var $el = pNodeObj.$el;				
				switch (pNodeObj.type) {
					case "tieredmenu":
						$el.tieredmenu("updateItem", id, label);
						break;
					case "button":
						$el.button("update", label);
						break;
					case "splitbutton":
						$el.splitbutton("button").button("update", label);
						break;
					case "menubutton":
						$el.menubutton("button").button("update", label);
						break;
					default:
						break;
				}
			}
		},
		/**
		 * 根据根子项index修改项的文本
		 * @param index { number } :根子项索引
         * @return ;
		 */
		_updateByIndex: function ( index, label ) {
			var idx = parseInt(index);
			
			if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
			
			var pNodeObj = this._getSubCoral(index);			
			if (pNodeObj) {
				var $el = pNodeObj.$el;				
				switch (pNodeObj.type) {
					case "button":
						$el.button("update", label);
						break;
					case "splitbutton":
						$el.splitbutton("button").button("update", label);
						break;
					case "menubutton":
						$el.menubutton("button").button("update", label);
						break;
					default:
						break;
				}
			}
		},
		/**
		 * get coral component
		 */
		component: function () {
			return this.uiBox;
		},
		/**
		 * !-- get coral border
		 */
		_uiBorder: function() {
			return this.uiBorder;
		},
		/**
         * 禁用所有的菜单项
         * @return ;
         */
		disable: function () {
			this._setDisabled(true);
		},
		/**
         * 启用所有的菜单项
         * @return ;
         */
		enable: function () {
			this._setDisabled(false);
		},

		/**
		 * disabled handler code
		 * @param disabled{boolean}: true - disable; false - enable
		 */
		_setDisabled: function(disabled) {
			var that = this;
			
			var $els = this._getElements(0);	
			
			$.each( $els, function(i, el) {
				var $el = $(el);
				if ( $el.hasClass("coral-toolbar-html") ) return true;
				if ( !$el.attr("component-role") ) return;
				if (disabled) {
					$el[$el.attr("component-role")]("disable");
				} else {
					$el[$el.attr("component-role")]("enable");
				}
			});
			
			this.options.disabled = !!disabled;
		},		
		/**
	     * 根据id或者根子项索引，禁用
	     * @param key { string,number } : id，根子项索引
	     * @return ;
	     */
		disableItem: function ( key ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				that._disableItemById( key );
			} else {
				that._disableItemByIndex( key );
			}
		},
		/**
		 * 根据id，禁用
		 * @param id { string } : id
         * @return ;
		 */
		_disableItemById: function(id) {
			var that = this,
				pNodeObj = this._getSubCoral(id);
			
			if (pNodeObj) {
				var $el = pNodeObj.$el;
				if ( $el.hasClass("coral-toolbar-html") ) return ;
				switch (pNodeObj.type) {
					case "tieredmenu":
						$el.tieredmenu("disableItem", id);
						break;					
					default:
						var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
						if (!$itemEl.length) {
							return ;
						}
						
						$itemEl[$itemEl.attr("component-role")]("disable");
						break;
				}
			}
		},
		/**
	     * 根据根子项索引，禁用
	     * @param index { number } : 根子项索引
	     * @return ;
	     */
		_disableItemByIndex: function(index) {
			var that = this,
				idx = parseInt(index);
			
			if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
			
			var $itemEl = $( this._getElements(0)[idx] );
			if ( $itemEl.hasClass("coral-toolbar-html") ) return false;
			if (!$itemEl.length) {
				return false;
			}
			
			$itemEl[$itemEl.attr("component-role")]("disable");
			return true;
		},
		/**
	     * 根据id或者根子项索引，启用
	     * @param key { string,number } : id，根子项索引
	     * @return ;
	     */
		enableItem: function ( key ) {
			var that = this;
			
			if (typeof key === "string" ) {
				that._enableItemById( key );
			} else {
				that._enableItemByIndex( key );
			}
		},
		/**
		 * 根据id，启用
		 * @param id { string } : id
         * @return ;
		 */
		_enableItemById: function(id) {
			var that = this,
				pNodeObj = this._getSubCoral(id);
			
			if (pNodeObj) {
				var $el = pNodeObj.$el;	
				if ( $el.hasClass("coral-toolbar-html") ) return ;			
				switch (pNodeObj.type) {
					case "tieredmenu":
						$el.tieredmenu("enableItem", id);
						break;
					default:
						var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
						if (!$itemEl.length) {
							return ;
						}
						
						$itemEl[$itemEl.attr("component-role")]("enable");
						break;
				}
			}
		},
		/**
	     * 根据根子项索引，启用
	     * @param index { number } : 根子项索引
	     * @return ;
	     */
		_enableItemByIndex: function(index) {
			var that = this,
				idx = parseInt(index);
			
			if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
			
			var $itemEl = $( this._getElements(0)[idx] );
			if ( $itemEl.hasClass("coral-toolbar-html") ) return ;
			if (!$itemEl.length) {
				return false;
			}
			
			$itemEl[$itemEl.attr("component-role")]("enable");
			return true;
		},
		/**
	     * 根据id或者根子项索引，隐藏
	     * @param key { string,number } : id，根子项索引
	     * @return ;
	     */
		hide: function ( key ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				that._hideById( key );
			} else {
				that._hideByIndex( key );
			}

			this._refresh();
		},
		/**
         * 隐藏所有的菜单项
         * @return ;
         */
		hideAll: function() {
			var that = this;

			$.each(this._getElements(1), function(index, el) {
				var type = $(el).attr("component-role");
				
				if ( type ) {
					$(el)[type]("hide");
				} else {
					$(el).hide();
				}
			});

			this._refresh();			
		},
		/**
		 * 根据id，隐藏
		 * @param id { string } : id
         * @return ;
		 */
		_hideById: function(id) {
			var that = this,
				pNodeObj = this._getSubCoral(id);
		
			if (pNodeObj) {
				var $el = pNodeObj.$el;	
				
				if ( $el.hasClass("coral-toolbar-html") ) {
					$el.hide();
					return ;
				}			
				switch (pNodeObj.type) {
					case "tieredmenu":
						$el.tieredmenu("hideItem", id);
						break;
					default:
						var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
						if (!$itemEl.length) return ;
						
						$itemEl[$itemEl.attr("component-role")]("hide");
						break;
				}
			}
		},
		/**
	     * 根据根子项索引，隐藏
	     * @param index { number } : 根子项索引
	     * @return ;
	     */
		_hideByIndex: function(index) {
			var that = this,
				idx = parseInt(index);
			
			if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;

			var $itemEl = $( this._getElements(0)[idx] );
			if (!$itemEl.length) return false;
			
			if ( $itemEl.hasClass("coral-toolbar-html") ) {
				$itemEl.hide();
				return true;
			}
			
			$itemEl[$itemEl.attr("component-role")]("hide");
			return true;
		},
		/**
	     * 根据id或者根子项索引，显示
	     * @param key { string,number } : id，根子项索引
	     * @return ;
	     */
		show: function ( key ) {
			var that = this;
			
			if (typeof key === "string" ) {
				that._showById(key);
			} else {
				that._showByIndex(key);
			}
			this._refresh();
		},
		/**
         * 显示所有的菜单项
         * @return ;
         */
		showAll: function() {
			var that = this;

			$.each(this._getElements(1), function(index, el){
				var type = $(el).attr("component-role");
				
				if ( type ) {
					$(el)[type]("show");
				} else {
					$(el).show();
				}
			});

			this._refresh();
		},
		/**
		 * 根据id，显示
		 * @param id { string } : id
         * @return ;
		 */
		_showById: function(id) {
			var that = this,
				pNodeObj = this._getSubCoral(id);
			
			if (pNodeObj) {
				var $el = pNodeObj.$el;	
				if ( $el.hasClass("coral-toolbar-html") ) {
					$el.show();
					return ;
				}				
				switch (pNodeObj.type) {
					case "tieredmenu":
						$el.tieredmenu("showItem", id);
						break;
					default:
						var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
						if (!$itemEl.length) return ;
						
						$itemEl[$itemEl.attr("component-role")]("show");
						break;
				}
			}
			
		},
		/**
	     * 根据根子项索引，显示
	     * @param index { number } : 根子项索引
	     * @return ;
	     */
		_showByIndex: function(index) {
			var that = this,
				idx = parseInt(index);
			
			if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
			
			var $itemEl = $( this._getElements(0)[idx] );
			var type = $itemEl.attr("component-role");
			if (!$itemEl.length) return false;
			
			if ( type ) {
				$itemEl[type]("show");
			} else {
				$itemEl.show();
			} 
			return true;
		},
		_destroy: function() {			
			this.uiBox.replaceWith(this.element);
		},
		/**
		 * set option
		 * @param key {string}:键
		 * @param value {string}:值
		 */
		_setOption: function ( key, value ) {
			var that = this;
			//default option can't be modified
			if (key === "id" || key === "name" ) {
				return;
			}			 		
			if ( key === "disabled" ) {
				this._setDisabled(value);
			}
			this._super( key, value );
		},
		/**
		 * 刷新布局
		**/			
		refresh: function() {
			this._refresh();
		},		
		_refresh: function() {
			this._position();
			$.coral.refreshAllComponent(this.element);
		}
	});
	
	$.fn['toolbar'].defaults = {
		width: 'auto'
	};

})(jQuery);

/*!
 * 组件库4.0：分栏符
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

(function ($) {
"use strict";
	
$.component("coral.subfield", {
	version: "4.0.1",
	options: {
		title : "",
		lineCls : null,
		textCls : null,
		onClick : null
	},
    _create: function () {
    	if (!this.element.jquery) this.element = $(this.element);
    	
    	this.element.addClass("coral-subfield");
    	
    	this.fieldset = $("<fieldset class=\"coral-subfield-fieldset\"></fieldset>").appendTo(this.element);
    	
    	if (this.options.lineCls) {
    		this.fieldset.addClass(this.options.lineCls);
    	}
    	
    	this.legend   = $("<legend class=\"coral-subfield-legend\">" + this.options.title + "</legend>").appendTo(this.fieldset);
    	
    	if (this.options.textCls) {
    		this.legend.addClass(this.options.textCls);
    	}
    	// 
    	this._bindEvent();
	},
	//
	_bindEvent : function () {
		var _this = this;
		this.legend.bind( "click" + this.eventNamespace, function( event ) {
			if ( _this.options.disabled ) {
				event.preventDefault();
				event.stopImmediatePropagation();
			} else {					
				_this._trigger("onClick");
			}
		});
	},
	//设置属性处理
	_setOption: function(key, value) {
		if (key === "title") {
			this.setTitle(value);
		}
	},
	// 
	_destroy : function() {
		this.uiTitle.remove();
	},
	
	component : function() {
		return this.element;
	},
	show : function() {
		this.component().show();
	},
	hide : function() {
		this.component().hide();
	},
	setTitle: function(title) {
		$("legend", this.fieldset).html(title);
		this.options.title = title;
	},
	getTitle : function() {
		return this.options.title;
	}
});
})(jQuery);

/*!
 * 组件库4.0.1：按钮
 *
 * 依赖JS文件:
 *	   jquery.coral.core.js
 *	   jquery.coral.component.js
 */
(function( $, undefined ) {

var lastActive,
	baseClasses = "coral-button coral-component coral-state-default coral-corner-all",
	//typeClasses = "coral-button-icons-only coral-button-icon-only coral-button-text-icons coral-button-text-icon-primary coral-button-text-icon-secondary coral-button-text-only",
	typeClasses = "coral-button-text-icons coral-button-text-icon-primary coral-button-text-icon-secondary",
	focusClass = "coral-state-focus",
	formResetHandler = function() {
		var form = $( this );
		setTimeout(function() {
			form.find( ":coral-button" ).button( "refresh" );
		}, 1 );
	},
	radioGroup = function( radio ) {
		var name = radio.name,
			form = radio.form,
			radios = $( [] );
		if ( name ) {
			name = name.replace( /'/g, "\\'" );
			if ( form ) {
				radios = $( form ).find( "[name='" + name + "'][type=radio]" );
			} else {
				radios = $( "[name='" + name + "'][type=radio]", radio.ownerDocument )
					.filter(function() {
						return !this.form;
					});
			}
		}
		return radios;
	};

$.component( "coral.button", {
	version: "4.0.1",
	defaultElement: "<button>",
	options: {
		id: null, // 设置默认的id
		name: null,
		cls: null,
		title : false,
		disabled: null,
		text: true,
		label: null,
		icons: {
			primary: null,
			secondary: null
		},
		width: null,
		countdown: false,
		countdownTime: 3000,
		showCountdown: true,
		// 事件
		onCreate: null,
		onClick: null,
		onDblClick: null,
		onMouseEnter: null,
		onMouseLeave: null
	},
	_create: function() {		
		// 图标样式转换
		this.options.icons = this._icons();
		this.element.addClass("ctrl-init ctrl-init-button");
		this.element.closest( "form" )
			.unbind( "reset" + this.eventNamespace )
			.bind( "reset" + this.eventNamespace, formResetHandler );

		if ( typeof this.options.disabled !== "boolean" ) {
			this.options.disabled = !!this.element.prop( "disabled" );
		} else {
			this.element.prop( "disabled", this.options.disabled );
		}

		this._determineButtonType();
		this.hasTitle = !!this.buttonElement.attr( "title" )||this.options.title;

		var that = this,
			options = this.options,
			toggleButton = this.type === "checkbox" || this.type === "radio",
			activeClass = !toggleButton ? "coral-state-active" : "";
		// js初始化时对id初始化处理
		if (options.id) {
			this.element.attr("id", options.id);
		}
		if (options.name) {
			this.element.attr("name", options.name);
		}
		if ( options.label === null ) {
			options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
		}

		this._hoverable( this.buttonElement );

		this.buttonElement
			.addClass( baseClasses )
			.attr( "role", "button" )
			.bind( "mouseenter" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				if ( this === lastActive ) {
					$( this ).addClass( "coral-state-active" );
				}
				that._trigger("onMouseEnter", null, {"id": this.id, "label": that.options.label});
			}).bind( "mouseleave" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( activeClass );
				that._trigger("onMouseLeave", null, {"id": this.id, "label": that.options.label});
			})
			.bind( "click" + this.eventNamespace, function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				} else {					
					if (options.once) {
						that.element.button("disable");
					}
					if (options.countdown) {
						var wait = options.countdownTime/1000;
						var label = that.element.button("option", "label");
						function time() {
							if (wait <= 0) {
								that.element.button("enable");
								that.element.button("option", "label", label);
							} else {
								that.element.button("option", "label", label + "(" + wait + ")");
								wait--;
								setTimeout(function() {
									time();
								}, 1000);
							}
						}
						if ($(document).find(that.element).length) {
							that.element.button("disable");
							if (options.showCountdown) {
								time();
							} else {
								that._delay(function(){
									that.element.button("enable");
									that.element.button("option", "label", label);
								}, options.countdownTime);
							}
						}
					}
					that._trigger("onClick", null, {"id": this.id, "label": that.options.label});
				}
			})
			.bind( "dblclick" + this.eventNamespace, function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				} else {
					that._trigger("onDblClick", null, {"id": this.id, "label": that.options.label});
				}
			});
		
		// Can't use _focusable() because the element that receives focus
		// and the element that gets the coral-state-focus class are different
		this._on({
			focus: function() {
				this.buttonElement.addClass( "coral-state-focus" );
			},
			blur: function() {
				this.buttonElement.removeClass( "coral-state-focus" );
			}
		});
		
		if ( toggleButton ) {
			this.element.bind( "change" + this.eventNamespace, function() {
				that.refresh();
			});
		}

		if ( this.type === "checkbox" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
			});
		} else if ( this.type === "radio" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
				$( this ).addClass( "coral-state-active" );
				that.buttonElement.attr( "aria-pressed", "true" );

				var radio = that.element[ 0 ];
				radioGroup( radio )
					.not( radio )
					.map(function() {
						return $( this ).button( "component" )[ 0 ];
					})
					.removeClass( "coral-state-active" )
					.attr( "aria-pressed", "false" );
			});
		} else {
			this.buttonElement
				.bind( "mousedown" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).addClass( "coral-state-active" );
					lastActive = this;
					that.document.one( "mouseup", function() {
						lastActive = null;
					});
				})
				.bind( "mouseup" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).removeClass( "coral-state-active" );
				})
				.bind( "keydown" + this.eventNamespace, function(event) {
					if ( options.disabled ) {
						return false;
					}
					if ( event.keyCode === $.coral.keyCode.SPACE || event.keyCode === $.coral.keyCode.ENTER ) {
						$( this ).addClass( "coral-state-active" );
					}
				})
				.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
					$( this ).removeClass( "coral-state-active" );
				});

			if ( this.buttonElement.is("a") ) {
				this.buttonElement.keyup(function(event) {
					if ( event.keyCode === $.coral.keyCode.SPACE ) {
						$( this ).click();
					}
				});
			}
		}

		if (options.width) {
			this.buttonElement.outerWidth(options.width);
		}
		this._setOption( "disabled", options.disabled );
		this._resetButton();
	},
	_icons: function() {
		var icons   = this.options.icons,
		    iconArr = null, iconstr   = null, 
		    primary = null, secondary = null;
		if (icons && typeof icons === "string") {
			iconArr = icons.split(",");
			if (iconArr.length > 0) {
				iconstr = $.trim(iconArr[0]);
				secondary = cls("right", iconstr);
				if (null === secondary) {
					primary   = cls("left" , iconstr, true);
				}
			}
			if (iconArr.length > 1) {
				iconstr = $.trim(iconArr[1]);
				primary   = ((primary === null) ? cls("left" , iconstr) : primary);
				if (null === secondary) {
					secondary = cls("right", iconstr, true);
				}
			}
		} else { return icons; }
		// 获取css样式
		function cls (position, iconstr, force/*Boolean 强制返回*/) {
			var arr = iconstr.split(" ");
			if ($.inArray(position, arr) > -1) {
				arr = $.grep(arr, function(cls, i) {
					return cls !== position;
				});
				return arr.join(" ");
			}
			if (force) {
				return iconstr;
			}
			return null;
		}
		
		return {"primary": primary, "secondary": secondary};
	},
	_determineButtonType: function() {
		var ancestor, labelSelector, checked;

		if ( this.element.is("[type=checkbox]") ) {
			this.type = "checkbox";
		} else if ( this.element.is("[type=radio]") ) {
			this.type = "radio";
		} else if ( this.element.is("input") ) {
			this.type = "input";
		} else {
			this.type = "button";
		}

		if ( this.type === "checkbox" || this.type === "radio" ) {
			ancestor = this.element.parents().last();
			labelSelector = "label[for='" + this.element.attr("id") + "']";
			this.buttonElement = ancestor.find( labelSelector );
			if ( !this.buttonElement.length ) {
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
				this.buttonElement = ancestor.filter( labelSelector );
				if ( !this.buttonElement.length ) {
					this.buttonElement = ancestor.find( labelSelector );
				}
			}
			this.element.addClass( "coral-helper-hidden-accessible" );

			checked = this.element.is( ":checked" );
			if ( checked ) {
				this.buttonElement.addClass( "coral-state-active" );
			}
			this.buttonElement.prop( "aria-pressed", checked );
		} else {
			this.buttonElement = this.element;
		}
	},

	component: function() {
		return this.buttonElement;
	},

	_destroy: function() {
		this.element
			.removeClass( "coral-helper-hidden-accessible" );
		this.buttonElement
			.removeClass( baseClasses + " ui-state-active " + typeClasses )
			.removeAttr( "role" )
			.removeAttr( "aria-pressed" )
			.html( this.buttonElement.find(".coral-button-text").html() );

		if ( !this.hasTitle ) {
			this.buttonElement.removeAttr( "title" );
		}
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "disabled" ) {
			this.component().toggleClass( "coral-state-disabled", !!value );
			this.element.prop( "disabled", !!value );
			if ( value ) {
				if ( this.type === "checkbox" || this.type === "radio" ) {
					this.buttonElement.removeClass( "coral-state-focus" );
				} else {
					this.buttonElement.removeClass( "coral-state-focus coral-state-active" );
				}
			}
			return;
		}
		this._resetButton();
	},
	update: function (label) {
		if (typeof label === "string") {
			this.element.find(".coral-button-text").html(label);
		}
	},
	refresh: function() {
		var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "coral-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOption( "disabled", isDisabled );
		}
		if ( this.type === "radio" ) {
			radioGroup( this.element[0] ).each(function() {
				if ( $( this ).is( ":checked" ) ) {
					$( this ).button( "component" )
						.addClass( "coral-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					$( this ).button( "component" )
						.removeClass( "coral-state-active" )
						.attr( "aria-pressed", "false" );
				}
			});
		} else if ( this.type === "checkbox" ) {
			if ( this.element.is( ":checked" ) ) {
				this.buttonElement
					.addClass( "coral-state-active" )
					.attr( "aria-pressed", "true" );
			} else {
				this.buttonElement
					.removeClass( "coral-state-active" )
					.attr( "aria-pressed", "false" );
			}
		}
	},
	_resetButton: function() {
		if ( this.type === "input" ) {
			if ( this.options.label ) {
				this.element.val( this.options.label );
			}
			return;
		}
		var buttonElement = this.buttonElement.removeClass( typeClasses ),
			buttonText = $( "<span></span>", this.document[0] )
				.addClass( "coral-button-text" )
				.html( this.options.label )
				.appendTo( buttonElement.empty() )
				.text(),
			icons = this.options.icons,
			multipleIcons = icons.primary && icons.secondary,
			buttonClasses = [];

		if ( icons.primary || icons.secondary ) {
			if ( this.options.text ) {
				buttonClasses.push( "coral-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}

			if ( icons.primary ) {
				buttonElement.prepend( "<span class='coral-button-icon-primary icon " + icons.primary + "'></span>" );
			}

			if ( icons.secondary ) {
				buttonElement.append( "<span class='coral-button-icon-secondary icon " + icons.secondary + "'></span>" );
			}

			if ( !this.options.text ) {
				buttonClasses.push( multipleIcons ? "coral-button-icons-only" : "coral-button-icon-only" );
				if ( !this.hasTitle ) {
					buttonElement.attr( "title", $.trim( buttonText ) );
				}
			}
		} else {
			buttonClasses.push( "coral-button-text-only" );
		}
		if ( this.hasTitle ) {
			buttonElement.attr( "title", $.trim( buttonText ) );
		}
		buttonElement.addClass( buttonClasses.join( " " ) );
	}
});

$.component( "coral.buttonset", {
	version: "4.0.1",
	options: {
		items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(coral-button)"
	},

	_create: function() {
		this.element.addClass( "coral-buttonset" );
	},

	_init: function() {
		this.refresh();
	},

	_setOption: function( key, value ) {
		if ( key === "disabled" ) {
			this.buttons.button( "option", key, value );
		}

		this._super( key, value );
	},

	refresh: function() {
		var rtl = this.element.css( "direction" ) === "rtl",
			allButtons = this.element.find( this.options.items ),
			existingButtons = allButtons.filter( ":coral-button" );

		// Initialize new buttons
		allButtons.not( ":coral-button" ).button();
		
		// Refresh existing buttons
		existingButtons.button( "refresh" );
		
		this.buttons = allButtons
			.map(function() {
				return $( this ).button( "component" )[ 0 ];
			})
				.removeClass( "coral-corner-all coral-corner-left coral-corner-right" )
				.filter( ":first" )
					.addClass( rtl ? "coral-corner-right" : "coral-corner-left" )
				.end()
				.filter( ":last" )
					.addClass( rtl ? "coral-corner-left" : "coral-corner-right" )
				.end()
			.end();
	},

	_destroy: function() {
		this.element.removeClass( "coral-buttonset" );
		this.buttons
			.map(function() {
				return $( this ).button( "component" )[ 0 ];
			})
				.removeClass( "coral-corner-left coral-corner-right" )
			.end()
			.button( "destroy" );
	}
});

}( jQuery ) );

/**
 * 组件库4.0：面板
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 * 
 */

(function($) {

var timer = false, resizable = true;
$(window).unbind(".coral-panel").bind("resize.coral-panel",	function() {
	$.coral.beforeDoOverflow();
	if (!resizable) {
		return;
	}
	if (timer !== false) {
		clearTimeout(timer);
	}
	timer = setTimeout(function() {
		resizable = false;
		$.coral.refreshAllComponent("body");
		timer = false;
		resizable = true;
	}, 200);
});

$.component( "coral.panel", {
	version: "4.0.2",
	options: {
		id: null,
		title: null,
		iconCls: null, 
		width: "auto", 
		height: "auto", 
		left:null, 
		top: null, 
		cls: null,
		headerCls: null,
		bodyCls: null,
		style: {},
		href:  null,
		cache: true,
		fit:   false,
		border: true,
		doSize: true,
		noheader:false,
		content: null,
		collapsible: false,
		minimizable: false,
		maximizable: false,
		closable:  false,
		collapsed: false,
		minimized: false,
		maximized: false,
		closed:false,
		tools: null,
		url:  null,
		loadtext:"加载中，请耐心等候...",
		loadingMessage:"Loading...",
		extractor: function(content) {
			var reg = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
			var match = reg.exec(content);
			if(match) {
				return match[1];
			} else {
				return content;
			}
		},
		// 事件
		beforeOpen: $.noop,
		beforeClose: $.noop,
		beforeDestroy: $.noop,
		beforeCollapse: $.noop,
		beforeExpand: $.noop,
		
		onLoad: $.noop, 
		onOpen: $.noop,
		onClose: $.noop,
		onDestroy: $.noop,
		onResize: $.noop, /*参数(envent, {width, height})*/
		onMove: $.noop,   /*参数(envent, {left, top})*/
		onMaximize: $.noop,
		onRestore: $.noop,
		onMinimize: $.noop,
		onCollapse: $.noop,
		onExpand: $.noop
	},
	
	_create: function() {

		this.originalTitle = this.element.attr("title");
		this.element.removeAttr("title").addClass("ctrl-init ctrl-init-panel");
		this._createWrapper();
		this.isLoaded = false;
		
		this.element.appendTo(this.uiPanel);
		this._addHeader();
		this._setBorder();
		if (this.options.doSize == true) {
			this.uiPanel.css("display", "block");
			this.resizePanel();
		}
		if (this.options.closed == true || this.options.minimized == true) {
			this.close();
		} else {
			this.open();
		}
	},
	
	_createWrapper: function() {
		var that = this;
		this.element.addClass("coral-panel-body");
		this.uiPanel = $("<div class=\"coral-panel\"></div>").insertBefore(this.element);
	},
	
	_fit: function(fit) {
		return $.coral.panel.fit(this.uiPanel, fit);
	},
	
	resizePanel: function(resizeOpts){
		var opts  = this.options,
		    panel = this.uiPanel,
		    header = panel.children("div.coral-panel-header"),
		    body   = panel.children("div.coral-panel-body");
		if (resizeOpts) {
			$.extend(opts, {
				width: resizeOpts.width,
				height: resizeOpts.height,
				left: resizeOpts.left,
				top: resizeOpts.top
			});
		}
		opts.fit ? $.extend(opts, this._fit()) : this._fit(false);
		panel.css({
			left : opts.left,
			top : opts.top
		});
		if (!isNaN(opts.width)) {
			panel.outerWidth(opts.width);
		} else {
			panel.width("auto");
		}
		header.add(body).outerWidth(panel.width());
		if (!isNaN(opts.height)) {
			panel.outerHeight(opts.height);
			body.outerHeight(panel.height() - header.outerHeight());
		} else {
			body.height("auto");
		}
		panel.css("height", "");
		this._doResize();
		this._trigger("onResize", null, { width: opts.width, height: opts.height });
	},
	
	_setBorder: function() {
		var opts   = this.options,
		    panel  = this.uiPanel,
		    header = this.header(),
		    body   = this.body();
		if (!$.isEmptyObject(opts.style)) {
			panel.css(opts.style);
		}
		if (opts.border) {
			header.removeClass("coral-panel-header-noborder");
			body.removeClass("coral-panel-body-noborder");
		} else {
			header.addClass("coral-panel-header-noborder");
			body.addClass("coral-panel-body-noborder");
		}
		header.addClass(opts.headerCls);
		body.addClass(opts.bodyCls);
		/*if (opts.id) {
			$(this.element).attr("id", opts.id);
		} else {
			$(this.element).attr("id", "");
		}//*/
	},
	
	_addHeader: function() {
		var opts  = this.options,
		    panel = this.uiPanel,
		    that  = this;
		if (opts.tools && typeof opts.tools == "string") {
			panel.find(">div.coral-panel-header>div.coral-panel-tool .coral-panel-tool-a")
				.appendTo(opts.tools);
		}
		panel.children("div.coral-panel-header").remove();
		if ( opts.title && !opts.noheader ) {
			var title = $( "<div class=\"coral-panel-header\"><div class=\"coral-panel-title\">" + 
				opts.title + "</div></div>" ).prependTo(panel);
			if ( opts.iconCls ) {
				title.find(".coral-panel-title").addClass("coral-panel-with-icon");
				$("<div class=\"coral-panel-icon\"></div>").addClass(opts.iconCls).appendTo(title);
			}
			var tool = $("<div class=\"coral-panel-tool\"></div>").appendTo(title);
			tool.bind("click", function(e) {
				e.stopPropagation();
			});
			if ( opts.tools ) {
				if (typeof opts.tools == "string") {
					$(opts.tools).children().each(function() {
						$(this).addClass(
							$(this).attr("iconCls"))
								.addClass("coral-panel-tool-a")
								.appendTo(tool);
					});
				} else {
					for ( var i = 0; i < opts.tools.length; i++) {
						var t = $("<a href=\"javascript:void(0)\"></a>").addClass(opts.tools[i].iconCls).appendTo(tool);
						if (opts.tools[i].handler) {
							t.bind("click", eval(opts.tools[i].handler));
						}
					}
				}
			}
			if ( opts.collapsible ) {
				$("<a class=\"cui-icon-arrow-up3 coral-panel-tool-collapse\" href=\"javascript:void(0)\"></a>")
					.appendTo(tool).bind("click", function() {
						if (opts.collapsed === true) {
							that.expand(true);
						} else {
							that.collapse(true);
						}
						return false;
					});
			}
			if ( opts.minimizable ) {
				$("<a class=\"cui-icon-minus3 coral-panel-tool-min\" href=\"javascript:void(0)\"></a>")
					.appendTo(tool).bind("click", function() {
						that.minimize();
						return false;
					});
			}
			if ( opts.maximizable ) {
				$("<a class=\"cui-icon-enlarge7 coral-panel-tool-max\" href=\"javascript:void(0)\"></a>")
					.appendTo(tool).bind("click", function() {
						if ( opts.maximized === true ) {
							that.restore();
						} else {
							that.maximize();
						}
						return false;
					});
			}
			if ( opts.closable ) {
				$("<a class=\"cui-icon-cross2 coral-panel-tool-close\" href=\"javascript:void(0)\"></a>")
					.appendTo(tool).bind("click", function() {
						that.close();
						return false;
					});
			}
			panel.children("div.coral-panel-body").removeClass("coral-panel-body-noheader");
		} else {
			panel.children("div.coral-panel-body").addClass("coral-panel-body-noheader");
		}
	},
	_loadData: function() {
		var opts = this.options,
		    that = this;
		if ( opts.url ) {
			if ( !that.isLoaded || !opts.cache ) {
				that.isLoaded = false;
				that.element.html("");
				$(this.element).loading({
					position:   "inside",
					text:       this.options.loadtext
				});
				// 如果重复刷新panel，需要将上一次的请求终止。
				if ( this.xhr ){
					this.xhr.abort();
				}
				this.xhr = $.ajax(this._ajaxSettings( ));
				this.xhr
					.success(function( content ) {
						that.setContent( opts.extractor.call( that.element, content ) );
						that._trigger( "onLoad", null, arguments );
						that.isLoaded = true;
					}).complete(function( jqXHR, status ) {
						if ( jqXHR === that.xhr ) {
						    that.xhr = null;
						}
					});
			}
		} else {
			if (opts.content) {
				if (!that.isLoaded) {
					that.setContent(opts.content);
					that.isLoaded = true;
				}
			}
		}
	},
	_ajaxSettings:function(){
		var opts = this.options,
	        that = this;
		return {
			url : opts.url,
			cache : false,
			dataType : "html"
		};
	},
	_doResize: function() {
		$.coral.refreshAllComponent(this.element);
	},
	_destroy: function(forceDestroy) {
		if (forceDestroy != true) {
			if (this._trigger("beforeDestroy") == false) {
				return;
			}
		}
		if (this.originalTitle) {
			this.element.attr("title", this.originalTitle);
		}
		this.element.removeClass("coral-panel-body").detach();
		this.element.insertAfter(this.component());
		this.component().remove();
		this._trigger("onDestroy");
	},
	component: function() {
		return this.uiPanel;
	},
	panel: function() {
		return this.uiPanel;
	},
	getOptions: function() {
		return this.options;
	},
	header: function() {
		return this.uiPanel.find(">div.coral-panel-header");
	},
	body: function() {
		return this.uiPanel.find(">div.coral-panel-body");
	},
	setTitle: function(title) {
		this.options.title = title;
		this.header().find("div.coral-panel-title").html(title);
	},
	// 设置内容
	setContent: function(content) {
		this.element.children().remove();
		this.element.html(content);
		if ($.parser) {
			$.parser.parse(this.element);
		}
	},
	open: function(forceOpen) {
		var opts    = this.options,
		    restore = null;
		if (forceOpen != true) {
			if (this._trigger("beforeOpen", null) === false) {
				return;
			}
		}
		this.uiPanel.show();
		opts.closed = false;
		opts.minimized = false;
		restore = this.uiPanel
			.children(".coral-panel-header")
			.find("a.coral-panel-tool-restore");
		if (restore.length) {
			opts.maximized = true;
		}
		this._trigger("onOpen");
		if (opts.maximized === true) {
			opts.maximized = false;
			this.maximize();
		}
		if (opts.collapsed === true) {
			opts.collapsed = false;
			this.collapse();
		}
		if (!opts.collapsed) {
			this._loadData();
			this._doResize();
		}
	},
	close: function(forceClose) {
		var opts = this.options;
		var panel = this.uiPanel;
		if (forceClose != true) {
			if (this._trigger("beforeClose", null) == false) {
				return;
			}
		}
		this._fit(false);
		panel.hide();
		opts.closed = true;
		this._trigger("onClose");
	},
	refresh: function(url) {
		this.isLoaded = false;
		if (url) {
			this.options.url = url;
		}
		this._loadData();
	},
	reLoad: function(url) {
		this.refresh();
	},
	resize: function(options) {
		this.resizePanel(options);
	},
	move: function(options) {
		var opts = this.options;
		if (options) {
			if (options.left != null) {
				opts.left = options.left;
			}
			if (options.top != null) {
				opts.top = options.top;
			}
		}
		this.uiPanel.css({
			left : opts.left,
			top : opts.top
		});
		this._trigger("onMove", null, { left: opts.left, top: opts.top });
	},
	maximize: function() {
		var opts = this.options;
		if (opts.maximized === true) {
			return;
		}
		this.uiPanel.children("div.coral-panel-header")
		            .find("a.coral-panel-tool-max")
		            .addClass("coral-panel-tool-restore")
		            .addClass("cui-icon-shrink7")
		            .removeClass("cui-icon-enlarge7");
		if (!this.original) {
			this.original = {
				width : opts.width,
				height : opts.height,
				left : opts.left,
				top : opts.top,
				fit : opts.fit
			};
		}
		opts.left = 0;
		opts.top = 0;
		opts.fit = true;
		this.resizePanel();
		opts.minimized = false;
		opts.maximized = true;
		this._trigger("onMaximize");
	},
	minimize : function() {
		this._fit(false);
		this.uiPanel.hide();
		this.options.minimized = true;
		this.options.maximized = false;
		this._trigger("onMinimize");
	},
	restore : function() {
		if (this.options.maximized === false) {
			return;
		}
		this.uiPanel.show();
		this.uiPanel.children("div.coral-panel-header")
		            .find("a.coral-panel-tool-max")
		            .removeClass("coral-panel-tool-restore")
				    .addClass("cui-icon-enlarge7")
				    .removeClass("cui-icon-shrink7");
		$.extend(this.options, this.original);
		this.resizePanel();
		this.options.minimized = false;
		this.options.maximized = false;
		this.original = null;
		this._trigger("onRestore");
	},
	collapse : function(animate) {
		var opts = this.options,
		    body = this.body(),
		    that = this;
		if (opts.collapsed === true) {
			return;
		}
		body.stop(true, true);
		if (that._trigger("beforeCollapse") === false) {
			return;
		}
		this.header().find("a.coral-panel-tool-collapse").addClass("coral-panel-tool-expand");
		//this.header().find("a.cui-icon-arrow-down3").removeClass("cui-icon-arrow-down3").addClass("cui-icon-arrow-up3");
		if (animate === true) {
			body.slideUp("normal", function() {
				opts.collapsed = true;
				that._trigger("onCollapse");
			});
		} else {
			body.hide();
			opts.collapsed = true;
			that._trigger("onCollapse");
		}
	},
	expand: function(animate) {
		var opts = this.options,
		    body = this.body(),
		    that = this;
		if (opts.collapsed === false) {
			return;
		}
		body.stop(true, true);
		if (that._trigger("beforeExpand") === false) {
			return;
		}
		this.header().find("a.coral-panel-tool-collapse").removeClass("coral-panel-tool-expand");
		//$(this.header().find("a.cui-icon-arrow-up3")).removeClass("cui-icon-arrow-up3").addClass("cui-icon-arrow-down3");
		if (animate === true) {
			body.slideDown("normal", function() {
				opts.collapsed = false;
				that._trigger("onExpand");
				that._loadData();
				that._doResize();
			});
		} else {
			body.show();
			opts.collapsed = false;
			that._trigger("onExpand");
			that._loadData();
			that._doResize();
		}
	}
});

/**
 * 面板自适应
 */
$.coral.panel.fit = function ($ele, fit) {
	fit = (fit == undefined ? true : fit);
	var parent = $ele.parent()[0];
	parent = $(parent);
	if (fit) {
		if (!parent.hasClass("coral-panel-noscroll")) {
			parent.addClass("coral-panel-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").addClass("coral-panel-fit");
			}
		}
	} else {
		if (parent.hasClass("coral-panel-noscroll")) {
			parent.removeClass("coral-panel-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").removeClass("coral-panel-fit");
			}
		}
	}
	return {
		width: parent.width(),
		height: parent.height()
	};
};
})(jQuery);

/*!
 * 组件库4.0：下拉框
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 *    jquery.coral.panel.js
 *    jquery.validatehelper.js
 *    jquery.coral.control.js
 */

(function ($) {
"use strict";

$(document).unbind(".coral-combobox").bind("mousedown.coral-combobox mousewheel.coral-combobox",function(e){
	var p = $(e.target).closest(".coral-combo-panel").length;
	var c = $(e.target).closest(".coral-combo").length;
	var b = $(e.target).closest(".coral-button").length;
	if ( p || ( c && !b ) ) {
		return;
	}
	hidePanels();
});
function hidePanels( panel, iframePanel ){
	$( ".coral-combo-wrapper" ).not( panel ).hide();
	$(".coral-combo-iframePanel:visible").not( iframePanel ).hide();
}
$.component("coral.combo", $.coral.inputbase, {
	castProperties : ["triggers"],
	version: "4.0.2",
	options: {
		panelRenderOnShow: false,//设置为true后，不会去data中找到selected值进行初始化
		popupDialog: false,
		showStar: true,
		showDirection: "down",
		labelField: null,
		starBefore: false,
		isInited: false,
		id: null,
		name: null,
		showOnFocus : true,
		iframePanel : false,
		buttons : [],
		forceSelection: true,
		width : "auto",
		height : 22,
		placeholder: "", // 提示消息
		cls: "",
		required : false,
		errMsg: null,
		errMsgPosition: "leftBottom",
		isLabel: false,
		panelWidth: null,
		panelHeight: "auto",
		panelComponentCls: "",
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		maxPanelHeight: 200,
		multiple : false,
		separator : ",",
		valueTextSeparator : "-",
		postMode:"value", // value, text, value-text
		editable : false,
		readonly: false,
		readonlyInput: true,
		disabled : false,
		clearOnLoad : true,
		hasArrow : true,
		value: "",
		text: "",
		delay : 200,
		zIndex: 10000,
		enableHighlight: false,
		enablePinyin: false,
		showClose: false, // 是否显示x图标来清空当前选中的选项
		enableFilter: false,
		enterFilter : true, // 如果enableFilter=true时，是否开启回车时过滤筛选
		//方法
		query : null,
		filter: function(q, row) {
			var type = $(this).attr("component-role"),
				opts = $(this)[type]("option"),
				textField  = opts.textField,
				valueField = opts.valueField,
				text = (row[textField] ).toLowerCase(),
				value = (row[valueField]).toString().toLowerCase();
			q = q.toLowerCase();
		    // 先判断显示值
			if (text.indexOf(q) > -1) {
		    	return 'text';
		    }
			if( opts.enablePinyin === true ){
				if(pinyinEngine.toPinyin(text,false,"").indexOf(q) > -1) {
					return true;
				}
			}
			if(value.indexOf(q)>-1){
				return true;
			 } else {
			    return false;
			 }
		},
		//事件
		onKeyUp  : null,
		onKeyDown: null,
		onEnter  : null,
		onBlur : null,
		onClick : null,
		onValidError: null,
		onValidSuccess: null,
		onShowPanel : $.noop,
		onHidePanel : $.noop,
		onChange : $.noop,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
	/**
	 * add cacheItem to this.cache
	 * @param item { key:"keyName", value:{} }
	 */
	_addCacheItem: function(item) {
		if (typeof item !== "object") return;
		
		if (typeof this.cache === "undefined") {
			this.cache = {};
		}
		this.cache = $.extend({}, this.cache, item);
	},
	/**
	 * get cacheItem from this.cache
	 * @param key {string}
	 */
	_getCacheItem: function(key) {
		if (typeof key !== "string") return;
		
		if (this.cache && this.cache[key]) {
			return this.cache[key];
		} else {
			return null;
		}
	},
	/**
	 * remove cacheItem form this.cache
	 * @param key {string}
	 */
	_removeCacheItem: function(key) {
		if (this.cache && this.cache[key]) {
			delete this.cache[key];
		}
	},
    _create: function () {
    	this._prepareInit();
    	this._initCombo();
    	this._setDefaultValue();
		this._initState();
		this._initData();
		this._bindEvent();
	},
	/**
	 * prepare the param for the combo
	 */
	_prepareInit: function(){
		this.originalCss = {
			display: this.element[0].style.display,
			width: this.element[0].style.width,
			minHeight: this.element[0].style.minHeight,
			maxHeight: this.element[0].style.maxHeight,
			height: this.element[0].style.height
    	};
		this.panelRendered = false;//初始化的时候肯定是没有渲染的
		this.dataLoaded = false;
		this.isInit = false;
		this.isLoaded = false;
		this.isInited = false;
		this.currentValues = [];
		this.cache = {};
		if ( this.options.enableSearch === true ) {
			this.options.readonlyInput = false;
		}
		if ( this.options.popupDialog || this.options.enableFilter ) {
			this.options.readonlyInput = true;
		}
		this.element.hide();
    	// id 冲突处理
		if (this.element.attr("id")) {
			if (this.element.attr("id") != this.options.id) {
				this.options.id = this.element.attr("id");
			}
		} else if (this.options.id) {
			this.element.attr("id", this.options.id);
		}
		// 下拉树:id需要有值
		if (!this.element.attr("id")) {
			this.options.id = this.element.uniqueId().attr("id");
		}
		// 允许初始化的element存在name
		if (this.element.attr("name") && this.options.name) {
			if (this.element.attr("name") != this.options.name) {
				this.options.name = this.element.attr("name");
			}
		} else if (!this.options.name && this.element.attr("name")) {
    		this.options.name = this.element.attr("name");
    	}
		// 允许初始化的element存在value
		if (this.element.attr("value") && this.options.value) {
			if (this.element.attr("value") != this.options.value) {
				this.options.value = this.element.attr("value");
			}
		} else if (!this.options.value && this.element.attr("value")) {
    		this.options.value = this.element.attr("value");
    	}
	},
	/**
	 * construct the combo
	 */
	_initCombo: function() {
		var textbox = null, 
			valuebox = null,
			clearIcon = "",
			name = "",
			comboArrow = "";
		// 构造下拉框
		this.uiCombo = {combo: null, panel: null};
		this.previousValue = null;
		this.uiCombo.combo = $( "<span class='coral-combo coral-textbox'></span>" ).insertAfter(this.element);
		this.element.appendTo(this.uiCombo.combo); // 将 element 放进去
		if(this.options.hasArrow == true){
			if (this.options.showDirection == "down") {
				comboArrow = "<span class='coral-combo-arrow coral-icon-arrow cui-icon-arrow-down3'></span>";
			} 
			if (this.options.showDirection == "up") {
				comboArrow = "<span class='coral-combo-arrow coral-icon-arrow cui-icon-arrow-up3'></span>";
			} 
		}
		// 删除图标
		if ( this.options.showClose && !this.options.required) {
			clearIcon = "<span class='coral-input-clearIcon cui-icon-cross2'></span>";
		}
		this.elementBorder = $( "<span class='coral-combo-border coral-textbox-border coral-corner-all'>" + clearIcon + comboArrow + "</span>" ).appendTo(this.uiCombo.combo);
		// 下拉框显示值文本框
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (this.options.labelField) {
			this.uiLabel = $("<label class=\"coral-label\">"+ this.options.labelField +"</label>");
			this.elementBorder.before(this.uiLabel);
			this.uiCombo.combo.addClass("coral-hasLabel");
		}
		// add label and required star before function @lhb @2015-04-27
		this.uiCombo.textbox = $( "<input type='text' autocomplete='off' class='coral-combo-text coral-combo-default coral-textbox-default'>" ).appendTo(this.elementBorder);
		if (this.options.name) {
			this.element.removeAttr("name").attr("orgname", this.options.name);
			name = " name='" + this.options.name + "'";
		}
		// 下拉框隐藏文本值
		valuebox = $( "<input type='hidden' " + name + " class='coral-combo-value'>" ).appendTo(this.uiCombo.combo);
		// 下拉面板
		this.uiCombo.panel = $( "<div class='coral-combo-panel " + this.options.panelComponentCls + "'></div>" ).appendTo( "body" );
		if ( this.options.iframePanel ){
			this.uiCombo.iframePanel = $( "<iframe class='coral-combo-iframePanel' style='position:absolute;display:none;'></iframe>" ).appendTo( "body" );
		}
		this.uiCombo.pContent = $( "<div class='coral-combo-content'></div>" ).appendTo( this.uiCombo.panel );
		if ( this.options.enableFilter ) {
			$( "<div class='coral-combo-filter'><span class='coral-combo-filter-border'><input type='text' class='coral-combo-filterbox'></span>" +
				"<span class='coral-combo-search cui-icon-search2'></span></div>" ).appendTo( this.uiCombo.panel );
		}
		var panelPosition = "absolute";
		if ( this.options.popupDialog ) {
			panelPosition = "";
			// 弹出式对话框
			this.uiCombo.popupDialog = $( "<div class='coral-combo-popup-dialog'></div>" ).appendTo( "body" );
			this.uiCombo.popupInputbox = $( "<input type='text' />" ).appendTo( this.uiCombo.popupDialog );
		}
		if(this.options.hasArrow == false ){
			this.elementBorder.css({
				"padding-right": 0
			})
			this.uiCombo.textbox.css({
				"padding-right":0
			})
			this.uiClose().css({
				"right":0
			})
			
		}
		this.uiCombo.panel.css({
			position : panelPosition
		}).addClass( "coral-combo-wrapper " + this.options.cls + "-panel coral-front" ).hide();
		// handler placeholder @added by@lhb at @20150417 : placeholder
		this.uiCombo.textbox.attr( "placeholder", this.options.placeholder );
		//this.options.placeholder = this.options.placeholder || this.options.emptyText;
		this._showPlaceholder();
		if ( this.options.buttons.length > 0 ) {
			this._createButtonPanel();
		}
	},
	_initState: function(){
		this.options.isLabel === true ? this._setIsLabel(this.options.isLabel) : this._setReadonly(this.options.readonly);
		if ( !this.options.readonly ) {
			this.uiCombo.textbox.prop("readonly", this.options.readonlyInput);
		}
		this._setDisabled(this.options.disabled);
		this.resize();
	},
	_initData: $.noop,
	_setDefaultValue: function() {
		if (!this.options.value) {
			this.originalValue = "";
			return;
		} else {
			this.setValue(this.options.value);
			this.originalValue = this.getValue();
		}
	},
	/**
	 * 显示 placeholder @added by@lhb at @20150417 : placeholder
	 */
	_showPlaceholder: function ( placeholder ) {
		if ( $.support.placeholder || this.component().find( ".coral-textbox-placeholder-label" ).length) {
			return ;
		}
		placeholder = placeholder ? placeholder : this.options.placeholder;
		var	$placeholder = $("<span class='coral-textbox-placeholder-label'>" + placeholder + "</span>");
		
		$(this.uiCombo.textbox).after( $placeholder );
	},
	/**
	 * 隐藏 placeholder @added by@lhb at @20150417 : placeholder
	 */
	_hidePlaceholder: function () {
		if ( $.support.placeholder ) {
			return ;
		}
		this.component().find( ".coral-textbox-placeholder-label" ).remove();
	},
	/**
	 *
	 */
	_setIsLabel: function(isLabel) {
		var that = this;
		if (true === isLabel) {
			//TODO: hideRequire should be init in the validate ,here just prepare the event for the validate.
			this.component().removeClass("coral-readonly");
			this.component().addClass("coral-isLabel");
			this.uiCombo.textbox.prop("readonly", true);
			if(this.options.emptyText && "" === this.getValue()) {
				this.uiCombo.textbox.val("");
			}
			this.hidePanel();
			this.uiCombo.textbox.removeAttr( "placeholder");
		} else {
			this.component().removeClass("coral-isLabel coral-readonly");
			this.uiCombo.textbox.prop("readonly", this.options.readonlyInput);
			this.options.readonly = false;
			this.uiCombo.textbox.attr( "placeholder", this.options.placeholder );
		}
		this.options.isLabel = !!isLabel;
	},
	_setReadonly: function (readonly) {
		if (readonly) {
			this.element.prop("readonly", true);
			this.uiCombo.textbox.prop("readonly", true);
			this.uiCombo.combo.find(".coral-combo-value").prop("readonly", true);
		} else {
			$(this.element).prop("readonly", false);
			this.uiCombo.textbox.prop("readonly", false);
			this.uiCombo.combo.find(".coral-combo-value").prop("readonly", false);
		}
		this.options.readonly = !!readonly;
		this.uiCombo.combo.removeClass( "coral-isLabel" );
		this.uiCombo.combo.toggleClass( "coral-readonly", this.options.readonly );
	},
	_setDisabled: function(disabled) {
		if (disabled) {
			this.element.prop("disabled", true);
			this.uiCombo.combo.find(".coral-combo-value").prop("disabled", true);
			this.uiCombo.combo.find(".coral-combo-text").prop("disabled", true);
		} else {
			$(this.element).prop("disabled", false);
			this.uiCombo.combo.find(".coral-combo-value").prop("disabled", false);
			this.uiCombo.combo.find(".coral-combo-text").prop("disabled", false);
		}
		this.options.disabled = !!disabled;
		this.uiCombo.combo.toggleClass( this.componentFullName + "-disabled coral-state-disabled", this.options.disabled );
	},
	_selectPrev: $.noop,
	_selectNext: $.noop,
	_doEnter: $.noop,
	_doQuery: $.noop,
	/**
	 * 将$el中包含keyword的text部分高亮
	 * @param $el {jquery obj} : 需要添加高亮范围的元素
	 * @param keyword {string} : 高亮的关键字
	 */
	_addHighlight: function($el, keyword) {
		if ( keyword === "" || !$el.length || !this.options.enableHighlight  ) return;
		//keyword = keyword == [] ? "":keyword.join(this.options.separator);
		$el = $($el);
		var content = "",
			keywordArr = keyword.replace(/[\s]+/g,' ').split(' '),
			re;
		
		$el.each(function(index, item) {
			var $item = $(item),
				$parent = $(item).parent(),
				content = $(item).html();
				
			if (content == keyword) {
				return;
			}
			if ($item.hasClass(".coral-combobox-item-selected")) {
				$parent.html(that._getTextFromHTML(content));
				return;
			}
			if (!$item.children("input").length) {
				for (var n = 0; n < keywordArr.length; n ++) {
					re = new RegExp("" + keywordArr[n] + "","gmi");
					content = content.replace(re,'<span class="coral-keyword-highlight">' + keywordArr[n] + '</span>');
				}				
				$item.html(content);
			}
		});		
		
	},
	/**
	 * 将html片段中的text提取出来
	 */
	_getTextFromHTML: function(str) {
		if (typeof str === "undefined") return;
	    str = str.replace(/<\/?[^>]*>/g,''); //去除HTML tag
	    str = str.replace(/[ | ]*\n/g,'\n'); //去除行尾空白
	    //str = str.replace(/\n[\s| | ]*\r/g,'\n'); //去除多余空行
	    str=str.replace(/&nbsp;/ig,'');//去掉&nbsp;
	    return str;
	},
	_clearValues: function(data) {
		var	valueField = this.options.valueField,
		    currentValues = this.currentValues,
		    length = currentValues.length,
		    i,
		    j,
		    numbers = 0;
		for (i = 0; i < length; i++) {
			for (j = 0; j < data.length; j++) {
				if (currentValues[i] == data[j][valueField]) {
					numbers += 1;
					break;
				}
			}
		}
		if (numbers != length) {
			return true;
		} else {
			return false;
		}  
	},
	/**
	 * 移除高亮
	 * @param $el {jquery obj}: 需要移除的高亮元素
	 */
	_removeHighlight: function($el) {
		if (!$el.length || !this.options.enableHighlight) return;
		$el = $($el);
		var that = this;
		$el.each(function(index, item) {
			var $parent = $(item).parent();
			var content = $parent.html();
			$parent.html(that._getTextFromHTML(content));
		});		
	},
	/**
	 * 获取焦点方法
	 */
	focus: function() {
		var that = this;
		if (this.options.disabled || this.options.readonly || this.options.isLabel) return false;
		this.uiCombo.textbox.focus();
		// 如果没加载完，则先缓存，onLoad之后统一执行
		if (!this.isLoaded) {
			var cacheItem = {
				"focus": {
					param: null
				}
			};
			this._addCacheItem(cacheItem);
			return true;
		}
		//
		return true;
	},

	_bindEvent: function() {
		var that = this,
			opts  = this.options,
		    combo = this.uiCombo.combo,
		    panel = this.uiCombo.panel,
		    iframePanel = this.uiCombo.iframePanel;
		
		if ( this.options.disabled ) {
			this.element.addClass( "coral-state-disabled" );
		}
		this._off( that.component() );
		var suppressBlurs, suppressTT;
		this._on({
			"mouseenter.coral-combo-border" : function(e) {
				if ( that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly") ) {
					return ;
				}
				//that.uiCombo.combo.addClass( "coral-combo-arrow-hover" );
				that.uiCombo.combo.addClass("coral-textbox-hover");
				this._updateTitle();
			},
			"mouseleave.coral-combo-border" : function(e) {
				if (that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly")) {
					return ;
				}
				//that.uiCombo.combo.removeClass("coral-combo-arrow-hover");
				that.uiCombo.combo.removeClass("coral-textbox-hover");
			},
			"keydown.coral-combo-text": function(e) {
				this._doKeyDown(e, false);
			},
			"keyup.coral-combo-text": function(e) {
				if ( this.options.readonly || this.options.isLabel ) return;
				this._trigger("onKeyUp", e, {});
			},
			"blur.coral-combo-text": function(e) {
				this._setHv(e,"blur");
			},
			"focusin.coral-combo-text" : function(e) {
				if ( this.options.readonly || this.options.isLabel ) return;
				this.component().addClass( "coral-state-focus" );
				if ( !suppressBlurs ) {
					this._trigger("onFocus", e);
				}
			},
			"focusout.coral-combo-text" : function(e) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}
				if ( this.options.readonly || this.options.isLabel ) return;
				this._delay(function() {
					if ( suppressBlurs ) {
						suppressBlurs = false;
						return;
					}
					this.component().removeClass( "coral-state-focus" );
					if ( suppressTT ) {
						suppressTT = false;
						return;
					}
					this.hidePanel();
					this._trigger("onBlur", e);
				}, 100);
			},
			"click.coral-combo-text" : function(e) {
				if ( that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly")) {
					if(this.options.hasArrow == true && !this.options.readOnlyInput){
						return ;
					}
				}
				if ( that.component().hasClass("coral-state-focus") ) {
					if ( this.options.popupDialog && this.options.showOnFocus === true ) {
						this.uiCombo.popupDialog.dialog( "open" );
					} else {
						if ( panel.is( ":visible" ) ) {
							this.hidePanel();
						} else {
							this.showPanel();
						}
					}
				}
				// 如果enableFilter设置为true，showPanel 中有查询框聚焦方法，需要抑制失焦，防止触发onBlur事件。
				if ( this.options.enableFilter ) {
					suppressTT = true;
				}
				
				that._trigger("onClick", e);
			},
			"mousedown.coral-combo-arrow" : function(e) {
				if ( this.component().hasClass("coral-isLabel") || this.component().hasClass( "coral-readonly") ) {
					return;
				}
				if ( this.component().hasClass("coral-state-focus") ) {
					suppressBlurs = true;
				}
			},
			"click.coral-combo-arrow" : function(e) {
				hidePanels( panel, iframePanel );
				if ( that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly") ) {
					return;
				}
				if ( that.component().hasClass("coral-state-focus") ) {
					suppressBlurs = true;
				}
				// 如果enableFilter设置为true，showPanel 中有查询框聚焦方法，需要抑制失焦，防止触发onBlur事件。
				if ( this.options.enableFilter ) {
					suppressTT = true;
				}
				this.focus();
				if ( that.options.popupDialog ) {
					that.uiCombo.popupDialog.dialog( "open" );
				} else {
					if ( panel.is( ":visible" ) ) {
						that.hidePanel();
					} else {
						that.showPanel();
					}
				}
			},
			"click.coral-input-clearIcon" : function(e) {
				if ( this.component().hasClass("coral-state-focus") ) {
					suppressBlurs = true;
				}
				this.clear();
				// 清空后如果有placeholder则显示 @added by@lhb at @20150417 : placeholder
				if (this.options.placeholder) {
					this._showPlaceholder();
				}
			},
			/*"comboboxonshowpanel" : function(e) {
			},
			"combotreeonshowpanel" : function(e) {
			},*/
			"combogridonshowpanel": function(e) {
				that._removeGridHighlights();
				that._scrollTo(that.getValue());
				that.grid().grid("refresh");
			}
		});
		this._on( this.uiCombo.panel.find( ".coral-combo-filterbox" ), {
			"keydown": function(e) {
				this._doKeyDown(e, true);
			}
		});
		this._on( this.uiCombo.panel.find( ".coral-combo-search" ), {
			"click": function(e) {
				e.preventDefault();
				this._filter(e, true);
				return false;
			}
		});
	},
	 _updateTitle: function(){
		var widthDiv = $("<span style = 'visibility: hidden'>"+ this.getText() +"</span>").appendTo("body");
		if(this.component().outerWidth() < widthDiv.width()){
    		this.component().attr( "title", this.getText());
    	}
		widthDiv.remove();
	 },
	_doKeyDown: function ( e, searchOnly ) {
		var opts  = this.options,
			panel  = this.panel();
		
		this.previousValue = $(e.target).val();
		if ( opts.readonly || opts.isLabel ) return;
		var keyCode = $.coral.keyCode;
		switch (e.keyCode) {
			case keyCode.TAB:
				break;
			case keyCode.ENTER:
				e.preventDefault();
				this._doEnter(e);
				this._setHv(e);
				this._trigger("onEnter", e, {});
				break;
			case keyCode.ESCAPE:
				this.hidePanel();
				break;
			case keyCode.UP:
				e.preventDefault();// 阻止页面滚动事件
				if ( opts.readonly === false ) {
					if ( !panel.is(":visible") ) {
						this.showPanel();
					} else {
						if (opts.onSelectPrev) {
							this._trigger("onSelectPrev", e);
						} else {
							this._selectPrev(e);
						}	
					}
				}
				break;
			case keyCode.DOWN:
				e.preventDefault();// 阻止页面滚动事件
				if ( opts.readonly === false ) {
					if ( !panel.is(":visible") ) {
						this.showPanel();
					} else {
						if (opts.onSelectNext) {
							this._trigger("onSelectNext", e);
						} else {
							this._selectNext(e);
						}
					}
				}
				break;
			default:
				this._filter(e, searchOnly);
				break;
		}
		this._hidePlaceholder();
		this._trigger("onKeyDown", e);
	},
	_setHv: function(e, blur){
		var $this = $(e.target),inputVarr = [],
			inputVal = $this.val();
		if ( this.options.multiple ) {
			inputVal = inputVal.split(this.options.separator);
		} else {
			inputVal = [inputVal];
		}
		// 失去焦点后将下拉选项全部显示出来，恢复到查询之前的状态。
		this._showItems();
		var jinru = true;
		if ( blur == "blur" ) {
			jinru = inputVal.toString() != this.previousValue; 
		}
		if ( jinru ) {
			var textFiled = this.options.textField,
				valueField = this.options.valueField;
			var v = this._checkMathch(inputVal,true);
			if ( !v ) {
				$this.val("");
				this.setValues([""]);
			} else {
				this.setValues(v.valarr);
			}
		}
	},
	/**
	 * input search filter
	 */
	_searchFilter: $.noop,
	/**
	 * 过滤操作
	 */
	_filter: function (e, searchOnly) {
		var that = this,
			opts = this.options,
			panel = this.panel();
		if (that.timer) {
			clearTimeout(that.timer);
		}	
		// 需要放在timer外面，不然下拉grid会在隐藏状态下进行reload，grid的高度计算会为0；
		if ( !panel.is(":visible") ) {
			that.showPanel();
		}
		that.timer = setTimeout(function () {
			var q = $(e.target).val();
			if ( searchOnly ) {
				q = panel.find( ".coral-combo-filterbox" ).val();
			}
			// 查询 begin
			if ( that.options.multiple ) {
				q = q.split(opts.separator);
			} else {
				q = [q];
			}
			if ( q == that.previousValue ) {
				return;
			}
			if (opts.query) {
				opts.query.call(that.element, q);
			} else {
				that._doQuery(q);
			}
			// 赋值 begin
			var textFiled = that.options.textField,
				valueField = that.options.valueField;
			if ( !searchOnly ) {
				var v = that._checkMathch(q, false);
				that.setValues(v.valarr,false,true);
			}
			// 赋值 end
			that.resizeIframePanel();
		}, opts.delay);
		return false;
	},
	_formatValue: function(value) {
		return value;
	},
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		}
		if (key === "disabled") {
			this._setDisabled(value);
		} 
		this._super(key, value );
		if (key === "isLabel") {
			this._setIsLabel(value);
			return;
		}
	},
	_destroy : function() {
		this.panel().remove();
		if(this.options.iframePanel){
			this.uiCombo.iframePanel.remove();
		}
		this.component().replaceWith( this.element );
		if (this.options.name) {
			this.element.removeAttr("orgname").attr("name", this.options.name);
		}
		this.element.show();
		this.element.css(this.originalCss);
		//this.element.detach();
	},
	component : function() {
		return this.uiCombo.combo;
	},
	panel : function() {
		return this.uiCombo.panel;
	},
	uiArrow : function() {
		return this.uiCombo.combo.find("span.coral-combo-arrow");
	},
	uiClose : function() {
		return this.uiCombo.combo.find("span.coral-input-clearIcon");
	},
	uiBorder : function () {
		return this.component().find("span.coral-combo-border");
	},
	resize : function(width) {
		var opts  = this.options,
		    combo = this.uiCombo.combo,
		    panel = this.uiCombo.panel,
		    uiBorder = this.elementBorder;
		if (width) {
			opts.width = width;
		}
		if(opts.width== "auto" || opts.width == "item") return;            
		if (isNaN(opts.width)) {
			var parent   = this.element.parent(":first"),
			    pWidth   = null;
		    width = this.element.outerWidth();
			if (parent && parent.get(0).tagName !== "BODY") {
				pWidth = parent.outerWidth();
				if (pWidth < width) width = pWidth;
			}
			opts.width = width;
		}
		combo.outerWidth(opts.width);
	},
	resizeIframePanel : function(){
		var opts  = this.options,height,
	    	combo = this.uiCombo.combo,
	    	panel = this.uiCombo.panel,
		    iframePanel = this.uiCombo.iframePanel || $();
	    height = panel.height();
		iframePanel.css("height",height);
	},
	_initPanel: function(){
		var opts = this.options,
		    combo = this.uiCombo.combo,
		    uiBorder = this.elementBorder,
		    panel = this.uiCombo.panel,
		    tHeight = opts.panelHeight;
		if ( !this.panelRendered ) {
			this._renderItems( this.options.data );
			this.uiCombo.pContent.html( this.lazyPanelHtml );
			this.panelRendered = true;
			this.lazyPanelHtml = "";
		}
		// 下拉面板位置大小设置
		panel.css( "width" , (opts.panelWidth ? opts.panelWidth : uiBorder.outerWidth()) );		
		panel.css( "height", tHeight );
		if ( isNaN( tHeight ) ) {
			this.uiCombo.pContent.css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
			this.uiCombo.popupDialogTree && this.uiCombo.popupDialogTree.css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
		}
		if ( this.options.enableFilter && !isNaN( tHeight ) ) {
			this.uiCombo.pContent.height( opts.panelHeight - 30);
		} else {
			if ( tHeight == "auto" ){
				this.uiCombo.pContent.height( "" );
			} else {
				this.uiCombo.pContent.height( tHeight-2 );
			}
		}
		if ( this.options.iframePanel ){
			this.uiCombo.iframePanel.css( "height" , panel.outerHeight() );
		}
	},
	showPanel : function() {
		var that = this,
			opts = this.options,
		    combo = this.uiCombo.combo,
		    uiBorder = this.elementBorder,
		    showDirection = this.options.showDirection,
		    panel = this.uiCombo.panel,
		    iframePanel = this.uiCombo.iframePanel || $();
		// 判断下拉框面板是否关闭，关闭则打开
		if ( panel.is( ":hidden" ) ) {
			var zIndicies = /*panel.siblings*/$( ".coral-front:visible" ).map(function() {
					return +$( this ).css( "z-index" );
				}).get(),
				zIndexMax = Math.max.apply( null, zIndicies );
			if ( zIndexMax >= +panel.css( "z-index" ) ) {
				panel.css( "z-index", zIndexMax + 1 );
				if ( this.options.iframePanel ) {
					iframePanel.css( "z-index", zIndexMax );
				}
			}
			if ( !this._PanelInited ) {
				this._initPanel();
			}
			this._PanelInited = true;
			panel.show(0, function() {
				that._trigger("onShowPanel", null, {});
				that.resizeIframePanel();
				iframePanel.show();
				(function move () {
					if (panel.is(":visible")) {
						panel.css({
							left : $.coral.getLeft( panel, uiBorder ),
							top  : $.coral.getTop( panel, uiBorder, showDirection),
							width: ( opts.panelWidth ? opts.panelWidth : uiBorder.outerWidth() )
						});
						if ( that.options.iframePanel ) {
							iframePanel.css({
								left : $.coral.getLeft( iframePanel, uiBorder ),
								top  : $.coral.getTop( iframePanel, combo, showDirection ),
								width: ( opts.panelWidth ? opts.panelWidth : uiBorder.outerWidth() )
							});
						}
						setTimeout(move, 200);
					}
				})();
				//需要下拉面板调整好位置后再将输入框聚焦，否则聚焦事件会影响页面的滚动；
				that.uiCombo.panel.find( ".coral-combo-filterbox" ).focus();
			});
		}
		if ( opts.enableFilter ) {
			this.setValues(this.getValues());
		}
	},
	hidePanel : function() {
		this.uiCombo.panel.hide();
		if (this.uiCombo.iframePanel){
			this.uiCombo.iframePanel.hide();
		}
		this._trigger("onHidePanel", null, {});
	},
	disable : function() {
		this._setDisabled(true);
	},
	enable : function() {
		this._setDisabled(false);
	},
	show : function() {
		this._super();
	},
	hide : function() {
		this._super();
		this.hidePanel();
	},
	hideErrors: function () {
		$.validate.hideErrors( this.uiBorder() );
		this.component().removeClass("coral-combo-error");
	},
	clear : function() {
		this.setValues( [], true, false );
	},
	/**
	 * 20150121 返回 oldText
	 */
	getOldText: function () {
		return this.oldText;
	},
	reset : function() {
		this.setValue(this.originalValue);
	},
	getText : function() {
		return this.uiCombo.combo.find("input.coral-combo-text").val();
	},
	_setText : function( text ) {
		var $textbox = this.uiCombo.combo.find("input.coral-combo-text");
		$textbox.val(text);
		this.previousValue = text;
	},
	//与grid的编辑功能一起修改，要支持postMode
	setText: function(text) {
		this._setText(text);
	},
	getValues : function() {
		var valArr = [];
		this.uiCombo.combo.find("input.coral-combo-value").each(function() {
			valArr.push($(this).val());
		});
		return valArr;
	},
	// values必须是数组格式
	// tChange: true(则是用户选择或取消选择的操作)；false(则是开发者代码调用setValues方法)。
	setValues: function(values, tChange, remainText) {
		var oldValues = this.getValues(), comboVal = null,
		    i = 0, oldTmp = [], eqTmp = [];
		values = values || [];
		this.oldValues = oldValues;
		var itemVal = [],
			name = "",
			value = "";
		this.uiCombo.combo.find("input.coral-combo-value").remove();		
		for (i = 0; i < values.length; i++) {
			name = "";
			value = "";
			if (this.options.name) {
				name = " name='" + this.options.name + "' ";
			}
			itemVal.push("<input type='hidden' " + name + " value='" + 
					this._formatValue(values[i]) + "' class='coral-combo-value' />");
		}
		this.uiCombo.combo.append(itemVal.join(""));
		
		for (i = 0; i < oldValues.length; i++) {
			oldTmp[i] = oldValues[i];
		}
		for (i = 0; i < values.length; i++) {
			for ( var j = 0; j < oldTmp.length; j++) {
				if (values[i] == oldTmp[j]) {
					eqTmp.push(values[i]);
					oldTmp.splice(j, 1);
					break;
				}
			}
		}
		if ( values.length ) {// 只要是有值，就应该隐藏placeholder
			if (this.options.placeholder) {
				this._hidePlaceholder();
			}
		}
		if ((eqTmp.length != values.length || values.length != oldValues.length) 
				&& (!remainText) && tChange) {
			if (this.options.multiple) {
				this._trigger("onChange", null, {
					value: values, 
					newValue: values, 
					newText: this.getText(),
					text: this.getText(), 
					oldValue: oldValues, 
					oldText: this.getOldText()
				});
			} else {
				this._trigger("onChange", null, {
					value: values[0], 
					newValue: values[0], 
					newText: this.getText(), 
					text: this.getText(), 
					oldValue: oldValues[0], 
					oldText: this.getOldText()
				});
			}
		}
	},
	// 返回字符串形式的值
	getValue: function() {
		return this.getValues().join( this.options.separator );
	},
	// 设置值，多选设置要以分隔符进行分割
	setValue: function(value,tChange,remainText) {
		value = value.split( this.options.separator );
		this.setValues( value );
	},
	// 获得选中的所有项目
	getSelectedItems: function() { 
		var Arr = this.getValues(),
			Arr2 = [];
		var comboData = this.options.data;
		for ( var i=0; i<Arr.length ;i++ ){
			for ( var j=0; j < comboData.length ;j++ ){
				var p = comboData[j];
				if ( Arr[i] == p.id ) {
					for ( var obj in p ) {		
						Arr2.push( obj+"="+p[obj]+"\n" );
					}
				}
			}
		}
		return Arr2;
	},
	// 这个有待优化，，，，refresh只是dom元素发生变化后进行重新渲染，不能调用销毁方法
	refresh : function() {
		this.destroy();
		this.component().remove();
		this._create();
	}
});
})(jQuery);

/**
 * 组件库4.0：下拉框
 * 
 * 依赖JS文件:
 *   jquery.coral.core.js
 *   jquery.coral.component.js
 *   jquery.coral.panel.js
 *   jquery.coral.combo.js
 * 
 */
(function($){
"use strict";
var COMBOBOX_SERNO = 0;
$.component( "coral.combobox", $.coral.combo, {
	version: "4.0.3",
	castProperties : ["data","buttons"],
	options: {
		cls       : "",
		valueField: "value",
		textField : "text",
		panelRenderOnShow: false,
		mode      : "local",	// or "remote"
		method    : "post",
		url       : null,
		data      : [],
		buttons   : [],
		width  : "auto",
		showText  : true, // 
		emptyText : null,       // value为空的option，显示值（text）
		postMode  : "value",    // value, text, value-text
		formatter: function(item) {
			var textField = $(this).combobox("option", "textField");
			return item[textField];
		},
		loader: function(param, success, error) {
			var that = this,
			    instance = $(this),
			    url = instance.combobox("option", "url");
			if (!url) return false;
			$.ajax({
				type: instance.combobox("option", "method"),
				url:  url,
				data: param,
				dataType: "json",
				success: function(data){
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});
			return false;
		},
		
		beforeLoad : $.noop, /*参数(event, param)*/
		onLoad     : $.noop, /*数据加载成功*/ 
		onError    : $.noop, /*数据加载失败*/
		onShowPanel: $.noop,
		beforeSelect   : $.noop, /*参数(event, {valueField, textField})*/
		onSelect   : $.noop, /*参数(event, {valueField, textField})*/
		unSelect : $.noop  /*参数(event, {valueField, textField})*/		
	}, 
	_create : function() {
		var that = this,
		    showPanelEvent = null;
		var date1 = new Date();
		
		this.data = this.data || [];//this.data默认不能undefined
		COMBOBOX_SERNO++;
		that.options.itemIdPrefix = "combobox_i" + COMBOBOX_SERNO;
    	this.element.addClass( "coral-form-element-combobox coral-validation-combobox ctrl-form-element" );
    	var onShowPanel = $.coral.toFunction( this.options.onShowPanel );
		showPanelEvent = function(e) {
			onShowPanel.apply( that.element, [e] );
			that._scrollTo( that.getValue() );
		};
		this.options.onShowPanel = showPanelEvent;
		this._super();
		this._on( this.uiCombo.panel, {
			mouseover: function( e ) {
				$(e.target).closest('.coral-combobox-item').addClass('coral-combobox-item-hover');	
			},
			mouseout: function( e ) {
				$(e.target).closest('.coral-combobox-item').removeClass('coral-combobox-item-hover');
			},
			mousedown: function( e ) {
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
				});
				var item = $(e.target).closest('.coral-combobox-item'),
				value = item.attr("value");
				// 点击面板上面的查询框的时候，不能返回false，否则不能选中查询框里面的内容。
				if ( $(e.target).closest('.coral-combo-filterbox').length ) return;
				// 如果判断点击的不是选项，可能是点击的滚动条，返回false才能阻止事件冒泡；
				if (!item.length || item.hasClass('coral-combobox-item-disabled')){return false;}
				var i = this.getRowIndex( value );
				if ( false === this._trigger("beforeSelect", null, [ {"item":this.options.data[i]},{"data":this.options.data[i]} ]) ) {
					return false;
				} 
				if (this.options.multiple) {
					this.oldText = this.uiCombo.textbox.val();// 20150121重新设置之前保存下text
					if ("" === value) {
						this.clear();
						this.select(value);
						this.hidePanel();
					} else {
						if (this.options.emptyText) {
							this.unselect("");
						}
						if (item.hasClass("coral-combobox-item-selected")) {
							this.unselect(value);
							item.removeClass("coral-combobox-item-selected");
						} else {
							this.select(value);
						}
					}
				} else {
					this.oldText = this.uiCombo.textbox.val();// 20150121重新设置之前保存下text
					this.select(value);
					this.hidePanel();
				}
				return false;
			}
			
		});
		if(this.options.isLabel && this.options.emptyText && "" === this.getValue()) {
			this.uiCombo.textbox.val("");
		}
	}, 
	_initData : function() {
		if (this.options.url) {
			return this._request(this.options.url);
		}
		
		if ( this.options.data.length ) {
			return this.loadData(this.options.data);
		}
		
		return this.loadData(this._transformData());
	},
	_renderItems: function( data ){
		var opts     = this.options,
		    panel    = this.panel(),
		    that     = this,
			defaultOption = {},
			selected = [],
			itemStr = [],
			i,
			restAttr = '',
			formatterEvent = $.coral.toFunction(this.options.formatter),
			itemattrFun = $.coral.toFunction(this.options.itemattr);
		for (i = 0; i < data.length; i++) {
			var row = data[i],
				v = row[opts.valueField],
				s = row[opts.textField],
				classes = !! row.hidden == true ? "hidden" : "",
				fmt = s;
			if (formatterEvent) {
				fmt = formatterEvent.call(this.element, data[i]);
			}
			if ($.isFunction(itemattrFun)) {
				var itemAttrObj = itemattrFun.apply( this.element[0], [{"item":data[i]}]);
				if (!$.isEmptyObject( itemAttrObj )) {
					if (itemAttrObj.hasOwnProperty("style")) {
						style += itemAttrObj.style;
						delete itemAttrObj.style;
					}
					if (itemAttrObj.hasOwnProperty("class")) {
						classes += ' ' + itemAttrObj['class'];
						delete itemAttrObj['class'];
					}
					try { delete itemAttrObj.role; } catch(ra){}
					for (attrName in itemAttrObj) {
						if (itemAttrObj.hasOwnProperty(attrName)) {
							restAttr += ' ' + attrName + '=' + itemAttrObj[attrName];
						}
					}
				}
				itemStr.push("<div class='coral-combobox-item "+ classes + restAttr +" ' id='"+this.options.itemIdPrefix+"_"+i+"' value='"+v+"'>"+fmt+"</div>");
				
			}else{
				itemStr.push("<div class='coral-combobox-item "+ classes +" ' id='"+this.options.itemIdPrefix+"_"+i+"' value='"+v+"'>"+fmt+"</div>");
			}
			if ( row['selected'] && $.inArray(v, selected) === -1 ) {
				selected.push(this.getModeValue(v, s));
			}
		}
		this.lazyPanelHtml = itemStr.join("");
		return selected;
	},
	loadData: function(data, remainText, loadEvent) {
		var opts     = this.options,
		    panel    = this.panel(),
		    that     = this,
		    loadevent = loadEvent ||"onLoad",
			formatterEvent = $.coral.toFunction(this.options.formatter),
			defaultOption = {},
			selected = [], 
			clearValues = false,
			values   = null;
		if (!(data instanceof Array)) data = [];
		this.data = (data || []);
		if ( opts.clearOnLoad ){
			clearValues = that._clearValues(this.data);
		}
		this.uiCombo.pContent.empty();	// clear old data
		if (this.options.emptyText) {
			if (!(data.length > 0 && "" === data[0][this.options.valueField])) {
				defaultOption[this.options.valueField] = "";
				defaultOption[this.options.textField] = this.options.emptyText;
				data.unshift(defaultOption);
			}
		}
		var itemStr = [];
		if (!this.panelRenderOnShow) {
			selected = this._renderItems(this.data);
			this.uiCombo.pContent.html(this.lazyPanelHtml);
			this.panelRendered = true;
		}
		// option.value有值，则优先
		if (this.currentValues.length && !clearValues) {
			selected = this.currentValues;
		}
		// 已设值且不为空，则优先级别为最高
		/*values = this.currentValues;
		if ("" !== values.toString()) {
			selected = values;
		}*/
		if (!this.isInit) {
			this.isInit = true;
			this.originalValue = selected.join(",");
		}
		this.dataLoaded = true;
		if (opts.multiple) {
			this.setValues(selected, false, remainText);
		} else {
			selected = selected.length?[selected[0]]:[];
			this.setValues(selected, false, remainText);
		}
		this._trigger(loadevent, null, [data]);
	},
	localFilter: function(filterEvent) {
		var data = this.getData() , 
			item = this.panel().find(".coral-combobox-item");
		for(var i = 0; i < data.length; i++) {
			$(item[i]).hide();
			if (filterEvent.apply(this.element, [data[i]])) {
				var v = data[i][this.options.valueField];
				var s = data[i][this.options.textField];
				$(item[i]).show();//此处注意不能移除选项上的class hidden
			}
		}
	},
	_scrollTo : function(value) {
		var panel = this.panel().find(".coral-combo-content"),
			h;
		var item = this.getEl( value );
		if (item.length) {
			if (item.position().top <= 0) {
				h = panel.scrollTop() + item.position().top;
				panel.scrollTop(h);
			} else if (item.position().top + item.outerHeight() > panel.height()) {
				h = panel.scrollTop() + item.position().top + item.outerHeight() - panel.height();
				panel.scrollTop(h);
				//panel.children(".coral-combo-content").scrollTop(h);
				//: TODO bug 有maxheight或者搜索框的时候，滚动条出现在content上而不是panel上
			}
		}
	}, 
	_transformData : function() {
		var opts = this.options;
		var data = [];
		$(">option", this.element).each(function() {
			var item = {};
			item[opts.valueField] = $(this).attr("value") !== undefined ? $(this).attr("value") : $(this).html();
			item[opts.textField]  = $(this).html();
			item["selected"]      = $(this).attr("selected");
			data.push(item);
		});
		return data;
	},
	_showItems : function(){
		this.uiCombo.panel.find(".coral-combobox-item").show();
	},
	_doQuery : function(q) {
		var opts = this.options,
		    filterEvent = this.options.filter;
		if (opts.mode == "remote") {
			this._request(null, {q:q}, true);
		} else {
			var panel  = this.panel();
			var data = this.getData() , item = panel.find(".coral-combobox-item");
			item.hide();
			//重新查询前，将之前的高亮标签删除
			this._removeHighlight(this.uiCombo.pContent.find("span.coral-keyword-highlight"));
			this.uiCombo.pContent.find(".coral-combobox-item-selected").removeClass("coral-combobox-item-selected");
			this.uiCombo.pContent.find(".coral-item-focus").removeClass("coral-item-focus");
			//
			for(var i = 0; i < data.length; i++) {
				var spell = pinyinEngine.toPinyin(data[i][opts.textField],false,"");
				for(var j = 0;j< q.length;j++){
					var r = filterEvent.apply(this.element, [q[j], data[i]]);
					if (r) {
						var v = data[i][opts.valueField].toString();// 匹配的value
						var t = data[i][opts.textField];// 匹配的text
						
						if (t.indexOf(q[j]) > -1 || v.indexOf(q[j]) > -1 || spell.indexOf(q[j]) > -1) {
							$(item[i]).show();//此处注意不能移除选项上的class hidden
							if( t == q[j] ){
								$(item[i]).addClass("coral-combobox-item-selected");
								this._removeHighlight( $(item[i]).find("span.coral-keyword-highlight") );
							} else if (r == "text") {
								// 如何是匹配的text，则高亮其中的关键字
								this._addHighlight( $(item[i]), q[j] );
							}
						}
					}
				}
			}
		}
	}, 
	// checkTypeFlag 为false的时候（查询），不应该将所有项目显示出来
	_checkMathch: function(text, noSearchFlag){
		var valarr = [],
			textarr = [];
		var opts = this.options,
			textField = opts.textField,
			valueField = opts.valueField;
		var matchedIndex = 0;
		if ( noSearchFlag ) {
			this._showItems();
		}
		var matched = false;
		var data = this.data,
			modevalue = "",
			exsit = {},
			repeatIndex = 0,// 选中的值
			i,
			j;
		if ( opts.multiple ) {
			for(i = 0; i < text.length; i++){
				for(j = 0; j < data.length; j++){
					if( data[j][textField] != text[i] && data[j][valueField] != text[i] ){
						exsit[i.toString()] = true;
					}
					if( data[j][textField] == text[i] ){
						modevalue = this.getModeValue(data[j][valueField], data[j][textField]);
						valarr.push( modevalue );
						matched = true;
						break;
					}
				}
				if ( !matched && !opts.forceSelection ) {
					// 如果查询的文本与data中的value匹配，查询的时候，不能进行选中，失去焦点的时候才可以选中
					if ( ( !exsit[i.toString()] && !noSearchFlag ) || noSearchFlag ) {
						valarr.push(text[i]);
						textarr.push(text[i]);
					}
				}
				matched = false;
			}
		} else {
			var index = -1;
			// 检测当前页里面的值是否有匹配
			for( i = 0; i < data.length; i++ ){
				if ( data[i][textField] == text[0] ){
					index = index===-1?i:index;// 单选的时候，只保留地一个匹配的选项
					matched = true;
				}
				if( data[i][textField] != text[0] && data[i][valueField] != text[0] ){
					exsit["0"] = true;
				}
			}
			if ( matched ) {
				modevalue = this.getModeValue(data[index][valueField], data[index][textField]);
				valarr.push( modevalue );
			}
			if ( !matched && !opts.forceSelection ) {
				// 如果查询的文本与data中的value匹配，查询的时候，不能进行选中，失去焦点的时候才可以选中
				if ( ( !exsit["0"] && !noSearchFlag ) || noSearchFlag ) {
					valarr.push(text[0]);
					textarr.push(text[0]);
				}
			}
		}
		return {
			valarr:valarr,
			textarr:textarr
		};
	},
	_request : function(url, param, remainText) {
		var that = this,
		    opts = {}, 
		    data = [], 
		    loaderEvent = this.options.loader,
		    isUrl = false;
		if ( !url && !that.options.url ){
			url = [];
		} else if (!url && that.options.url){
			url = that.options.url;
		}
	    if ( typeof( url ) !== "string" ) {
	    	
		// 传过来的是object，需要区别是data还是options
		// 如果是options，可能是options.data或者options.url ，否则才为data
		    opts = url;
		    if (opts.data) { //传进来的是options对象
			    data = opts.data;			    
		    } else if (opts.url) {// 传进来的是data对象
			    url = opts.url;
			    that.options.url = opts.url;
			    isUrl = true;
		    } else if (opts instanceof Array) {
			    data = url;
		    } else if (!opts.url && !opts.data && !that.options.url) {
		    	data = [];
		    } else if (!opts.url && !opts.data && that.options.url) {
		    	url = that.options.url ;
		    	isUrl = true;
		    }
	    } else {
	    	that.options.url = url;
		    isUrl = true;
	    }
	    if (isUrl){
	    	param = param || {};
			if (this._trigger("beforeLoad", null, [param]) == false) return;
			loaderEvent.apply(this.element, [param, function(data) {
				var loadEvent =  opts.onLoad;
				that.loadData(data, remainText , loadEvent);
//				that._trigger($.isFunction( opts.onLoad ) ? opts.onLoad:"onLoad", null, [data]);
				that._loadedHandler();
			}, function() {
				that._trigger("onError", null, arguments);
			}]);
	     } else{
	    	 var loadEvent = opts.onLoad ;
			 that.loadData(data, remainText , loadEvent);
	     }
	},
	/**
	 * 加载后执行缓存的方法
	 */
	_loadedHandler: function() {
		var that = this;
		/** setValues **/
		var item_setValues = this._getCacheItem("setValues");
		if (item_setValues) {
			this.setValues(item_setValues.values, item_setValues.triggerOnChange, item_setValues.remainText);
			this._removeCacheItem("setValues");
		}
		/** focus **/
		var item_focus = this._getCacheItem("focus");
		if (item_focus) {
			//this.focus();
			this._removeCacheItem("focus");
		}		
	},
	_selectItems: function(isFirst,direction) {
		var panel = this.panel(),
		    item  = null, value = null,
		    focus = panel.find(".coral-item-focus:visible"),
		    position = ":last";
		if (isFirst) {
			position = ":first";
		}
		focus.removeClass("coral-item-focus");
		if ( focus.length ) {
			value = focus.attr("value");
		} else {
			focus = item = panel.find(".coral-combobox-item-selected:visible" + position);
			if (item.length) value = item.attr("value");
		}
		if(direction == "prev"){
			if(focus.prevAll(":visible").length === 0){
				focus = panel.find(".coral-combobox-item:visible:last") ;
				focus.addClass("coral-item-focus");
			}else{
				focus.prevAll(":visible:eq(0)").addClass("coral-item-focus");
			}
		}else{
			if(focus.nextAll(":visible").length === 0){
				focus = panel.find(".coral-combobox-item:visible:first") ;
				focus.addClass("coral-item-focus");
			}else{
				focus.nextAll(":visible:eq(0)").addClass("coral-item-focus");
			}
		}
		return value;
	},
	_selectPrev : function() {
		var panel  = this.panel(),
		   targetValue = this._selectItems(true,"prev"),
		   item = panel.find(".coral-combobox-item[value=\"" + targetValue + "\"]"),
		    prev = null, value= null;
		if (item.length){
			prev = item.prevAll(":visible:eq(0)");
		} else {
			item = panel.find(".coral-combobox-item:visible:last");
		}
		if (null !== prev && prev.length === 0) {
			prev = panel.find(".coral-combobox-item:visible:last");
		}
		value = !!prev ? prev.attr("value") : item.attr("value");
		this.select(value);
		//item.focus();
		this._scrollTo(value);
	},
	_selectNext: function() {
		var panel  = this.panel(),
		    targetValue = this._selectItems(true,"next"),
		    item = panel.find(".coral-combobox-item[value=\"" + targetValue + "\"]"),
		    next = null,
		    value= null;
		if (item.length) {
			next = item.nextAll(":visible:eq(0)");
		} else {
			item = panel.find(".coral-combobox-item:visible:first");
		}
		if (next && next.length == 0) {
			next = panel.find(".coral-combobox-item:visible:first");
		};
		value = next ? next.attr("value") : item.attr("value");
		this.select(value);
		//item.focus();
		this._scrollTo(value);
	},

	_doEnter : function (e) {
		var panel  = this.panel(),
			values = this.getValues(),
			item = panel.find(".coral-item-focus:visible"),
			i,
			data = this.getData(),
			opts = this.options,
			value = item.attr("value");
		if ( value ) {
			var modeValue = "", matchedIndex = 0;
			for(i=0;i < data.length;i++){
				if(value == data[i][opts.valueField]){
					matchedIndex = i;
				}
			}
			modeValue = this.getModeValue(value, data[matchedIndex][opts.textField]);
			if ( this.options.multiple ) {
				if ($.inArray(modeValue, values) == -1) {
					this.select(value);
				} else {
					this.unselect(value);
				}
			} else {
				this.hidePanel();
			}
		}
	},	
	_formatValue: function(value) {
		var data = this.getData(), opts = this.options,
		    valueField = opts.valueField, textField  = opts.textField,
		    i = 0, row = null;
		if ("text" === opts.postMode || "value-text" === opts.postMode) {
			for (i = 0; i < data.length; i++) {
				row = data[i];
				if ("" != value && value == row[valueField]) {
					if ("text" === opts.postMode )	return row[textField];
					if ("value-text" === opts.postMode) return value + opts.valueTextSeparator + row[textField];
				}
			}
		}
		return value;
	},
	_destroy : function () {
		this.element.removeClass("coral-validation-combobox");
		this.element.removeClass("coral-form-element-combobox");
		this._super();
	}, 
	/**
	 * postMode有多种形式，此方法只获得value部分
	 */
	_getOnlyValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
			( !this.currentValues[0] && 
			this.currentValues.length === 1) ) return valArr;
		for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i],
			    j     = 0,
			    valueField = opts.valueField,
			    textField  = opts.textField,
			    row        = null;
			if ("value-text" === opts.postMode) {
				value = value.split(opts.valueTextSeparator)[0];
				valArr.push(value);
			}
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
			if ( "text" === opts.postMode ) {
				for (;data && j < data.length; j++) {
					row = data[j];
					if ( row[textField] == value ) {
						valArr.push(row[valueField]);
						break;
					}
				}
			}
		}
		return valArr;
	},
	_getCurrentValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
			( !this.currentValues[0] && 
			this.currentValues.length === 1) ) return valArr;
		return this.currentValues;
	},
	getData: function() {
		return this.data || [];
	},
	/**
	 *  triggerOnChange : true(则是用户选择或取消选择的操作)；false(则是开发者代码调用setValues方法)。
	 */
	setValues: function( values, triggerOnChange, remainText ) {
		var opts  = this.options,
		    data  = this.getData(),
			panel = this.panel(),
			mOptions = remainText,
		    i = 0, j = 0,
		    oldValues = this.getValues() || [],
			valueArr = [], textArr = [],valArr = null,
			value = null, text = null;
		
		if ( typeof ( mOptions ) == "object" ){
			remainText = mOptions.remainText;
			triggerOnChange = mOptions.triggerOnChange;
		}
		// 当前值缓存，防止异步加载下拉选项时，设值不起作用
		this.currentValues = values;
		if(!this.dataLoaded){
			return;
		}
		panel.find(".coral-combobox-item-selected").removeClass("coral-combobox-item-selected");
		for(i = 0; i < values.length; i++){
			value = values[i];
			text = value;
			
			var index = this.getRowIndex( value );
			if ( index > -1 ) {
				text = data[ index ][ opts.textField ];
				valArr = data[ index ][ opts.valueField ];
				var row = this._getItemByIndex( index ).addClass("coral-combobox-item-selected");
				// 如果emptyText存在 并且被选中的时候，设置placeholder
				if ( opts.emptyText && "" == value ) {
					this.uiCombo.textbox.attr( "placeholder", opts.emptyText );
					this._showPlaceholder(opts.emptyText);
					text = "";
				} else {
					this._hidePlaceholder();
				}
				// 如果emptyText存在 并且被选中的时候，设置placeholder
				textArr.push( text );
				valueArr.push( value );
			} else if ( index < 0 && !opts.forceSelection ) {
				textArr.push( text );
				valueArr.push( value );
			} 
		}
		
		if (!remainText) {
			this._setText( textArr.join(opts.separator));
		}
		// added by @lhb @20150414 : 如果没有对应值，则设置传进的值
		var noValueArr = this._getMinus(valueArr, values);
		if ( (noValueArr.length && valueArr.length) || !valueArr.length ) {
			textArr = textArr.concat(noValueArr);
			if (!remainText) {
				this._setText( textArr.join(opts.separator) );
			}
			valueArr = values;
		}
		if (opts.width == "item") {
			var widthDiv = $("<div style = 'visibility:hidden;'><span>"+this.getText()+"</span></div>")
                           .appendTo("body"),
                innerText = this.component().find(".coral-textbox-default");
            var elementPadding = parseInt(innerText.css("padding-left")) +
                                 parseInt(innerText.css("padding-right")),
                arrowWidth = this.uiArrow().outerWidth() + 2*parseInt(this.uiArrow().css("right")),
                width = widthDiv.find("span").outerWidth() + elementPadding + arrowWidth ;
            this.resize(width);
            widthDiv.remove();
            // resize 方法会将options中的width变为数字，这里重新进行设置。
            opts.width = "item";
		}
		this._super( valueArr,triggerOnChange, remainText);	
	},
	/**
	 * 获取第一个数组中没有，第二个数组中有的项，返回一个数组
	 * @param a,b {Array} : 两个数组
	 * @return b_a {Array} : 第二个数组减去第一个数组的结果
	 */
	_getMinus: function(a, b) {
		var b_a = [];
		
		$.each(b, function(i, o) {
			if ( $.inArray(o, a) == -1 ) {
				b_a.push(o);
			}
		});	
		
		return b_a;
	},
	getEl:function( value ){
		var index = this.getRowIndex( value );
		var id = index;
		return $( '#'+this.options.itemIdPrefix+"_"+id );
	},
	_getItemByIndex:function( index ){
		var id = index;
		return $( '#'+this.options.itemIdPrefix+"_"+id );
	},
	getRowIndex: function( value ){
		var opts = this.options,
			data = this.getData(),
			postMode = opts.postMode;
		for(var i=0; i<data.length; i++){
			if ( postMode == "value") {
				if (data[i][opts.valueField] == value){
					return i;
				}
			} 
			if ( postMode == "text") {
				if (data[i][opts.textField] == value){
					return i;
				}
			}
			if ( postMode == "value-text") {
				if (data[i][opts.valueField] == value.split(opts.valueTextSeparator)[0]){
					return i;
				}
			}
		}
		return -1;
	},
	clear: function() {
		var panel = this.panel();
		this._super();
		panel.find(".coral-combobox-item-selected").removeClass("coral-combobox-item-selected");
		panel.find(".coral--item-focus").removeClass("coral--item-focus");
	},
	reload: function(url) {
		this._request(url);
	},
	select: function(value) {
		var opts = this.options,
	    	data = this.getData(),
	    	i,
	    	values;
		value = $.trim( value );// enter的时候有空格
		if (opts.multiple) {
			values = this.getValues();
		} else {
			values = [];
		}
		
		var modeValue = "", matchedIndex = 0;
		for (i = 0 ; i < data.length ; i++) {
			if (value == data[i][opts.valueField]) {
				matchedIndex = i;
			}
		}
		modeValue = this.getModeValue(value, data[matchedIndex][opts.textField]);
		// 如果点击的是重复的则返回
		for(i = 0; i < values.length; i++) {
			if (values[i] == modeValue) return;
		}
		values.push(modeValue);
		this.setValues(values, true, false);
		this._trigger("onSelect", null, [{
			"item": data[matchedIndex],
			"value":value,
			"text":data[matchedIndex][opts.textField]
		}]);
	},
	getModeValue: function(value, text){
		var modeValue;
		if (this.options.postMode == "value") {
			modeValue = value;
		} 
		if (this.options.postMode == "text") {
			modeValue = text;
		}
		if (this.options.postMode == "value-text") {
			modeValue = value + "-" + text;
		}
		return modeValue;
	},
	unselect: function(value) {
		var opts  = this.options,
		    data  = this.getData(),
		    values= this.getValues(),
		    i;
		var matchedIndex = 0;
		for (i = 0 ; i < data.length ; i++) {
			if (value == data[i][opts.valueField]) {
				matchedIndex = i;
			}
		}
		if (this.options.postMode == "value") {
			value = value;
		} 
		if (this.options.postMode == "text") {
			value = data[matchedIndex][opts.textField];
		}
		if (this.options.postMode == "value-text") {
			value = value + "-" + data[matchedIndex][opts.textField];
		}
		for(i = 0; i < values.length; i++) {
			if (values[i] == value) {
				values.splice(i, 1);
				this.setValues(values, true, false);
				this._trigger("onSelect", null, [{
					"item" : data[matchedIndex],
					"value" : value,
					"text" : data[matchedIndex][opts.textField]
				}]);
				break;
			}
		}
	},
	showPanel: function() {
		//openPanel，将之前的高亮标签删除
		this._removeHighlight(this.uiCombo.pContent.find("span.coral-keyword-highlight"));
		var i = 0, value;
		this._super();
		if (!this.hideValueArr) return ;
		// 隐藏选项处理
		for (; i < this.hideValueArr.length; i++) {
			value = this.hideValueArr[i];
			this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + value + "\"]").hide();
		}
	},
	// 添加下拉选项
	addOption: function(option) {		
		var that = this, i = 0, item = null,
		    valueField = this.options.valueField,
		    textField  = this.options.textField,
		    v = option[valueField],
		    s = option[textField];
		// 判断数据格式
		if (!(valueField in option) || !(textField in option)) {
			if ($.message) { 
				$.message("JSON格式不正确!");
			}
			return false;
		}
		// 检查valueField值是否重复
		for (i = 0; i < this.data.length; i++) {
			if ((option[valueField] == this.data[i][valueField]) || (option[textField] == this.data[i][textField]) ) {
				if ($.message) $.message("当前选项已存在!");
				return false;
			}
		}
		// 同步缓存 并 向下拉面板添加相应的选项
		item = $("<div class=\"coral-combobox-item\"></div>");
		item.attr("value", v);
		if (this.options.formatter) {
			item.html(this.options.formatter.call(this.element, option));
		} else {
			item.html(s);
		}
		if (this.data.length > 0 && "" == this.data[0][valueField]) {
			this.data.splice(1, 0, option);
			item.insertAfter(this.uiCombo.pContent.find(":first-child"));
		} else {
			this.data.unshift(option);
			item.prependTo(this.uiCombo.pContent);
		}
		// 事件绑定
		/*item.hover(
				function() { $(this).addClass("coral-combobox-item-hover");   },
				function() { $(this).removeClass("coral-combobox-item-hover");}
			).click(function() {
				var item = $(this), value = item.attr("value");
				
				if (that.options.multiple) {
					if ("" == value) {
						that.clear();
						that.select(value);
						that.hidePanel();
						return ;
					} else {
						if (that.options.emptyText) {
							that.unselect("");
						}
						if (item.hasClass("coral-combobox-item-selected")) {
							that.unselect(value);
						} else {
							that.select(value);
						}
					}
				} else {
					that.select(value);
					that.hidePanel();
				}
			});	*/	
		return true;
	},
	// 删除下拉选项
	removeOption: function(option/*索引值 隐藏值 或下拉选项JSON格式*/) {
		var _option = null, value = null, i = 0,
		    valueField = this.options.valueField,
		    pos = null;
		// 索引值 
		if (typeof option === "number") {
			if (option > this.data.length) return ;
			_option = this.data[i];
			pos    = option;
		}
		// 隐藏值
		if (typeof option === "string") {
			value = option;
		}
		// 下拉选项JSON格式
		if (typeof option === "object") {
			if (!(valueField in option)) return;
			value = option[valueField];
		}
		// 查找对应的位置
		if (value !== null) {
			for (; i < this.data.length; i++) {
				 if (value == this.data[i][valueField]) {
					 _option = this.data[i];
					 pos     = i;
					 break;
				 }
			}
		}
		// 删除下拉选项相应信息
		if (pos !== null) {
			this.data.splice(pos, 1);
			this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + value + "\"]").remove();
		}
	},
	// 清除下拉框所有选项，病清除 value && text
	clearOptinons: function() {
		this.uiCombo.pContent.empty();
		this.clear();		
	},
	// 显示下拉选项
	showOption: function (option/*索引值 隐藏值 或下拉选项JSON格式*/) {
		var jq;
		if (typeof option === "number") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item:eq(" + option + ")");
		} else if (typeof option === "string") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option + "\"]");
		} else if (typeof option === "object") {
			if (!(this.options.valueField in option)) return;
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option[this.options.valueField] + "\"]");
		} else {
			this.uiCombo.pContent.find(".coral-combobox-item").removeClass("hidden");
			this.hideValueArr = null;
		}
		if (jq && jq.length > 0) {
			jq.removeClass("hidden");// 此处不能通过hide方法，，必须removeClass hidden
			if (this.hideValueArr) {
				this.hideValueArr.splice($.inArray(jq.attr("value"), this.hideValueArr), 1);
			}
		}
	},
	// 隐藏下拉选项
	hideOption : function (option/*索引值 隐藏值 或下拉选项JSON格式*/) {
		if (!this.hideValueArr) this.hideValueArr = [];
		var jq;
		if (typeof option === "number") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item:eq(" + option + ")");
		} else if (typeof option === "string") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option + "\"]");
		} else {
			if (!(this.options.valueField in option)) return;
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option[this.options.valueField] + "\"]");
		}
		if (jq && jq.length > 0) {
			jq.addClass("hidden");//此处必须通过class hidden来控制，否则会和过滤的功能冲突
			this.hideValueArr.push(jq.attr("value"));
		}
	}
});
	
	
})(jQuery);

/**
 * 组件库4.0：下拉框
 * 
 * 依赖JS文件:
 *   jquery.coral.core.js
 *   jquery.coral.component.js
 *   jquery.coral.panel.js
 *   jquery.coral.combo.js
 * 	 jquery.coral.tree.js
 * 
 */
(function($){	
$.component( "coral.combotree", $.coral.combo, {
	version: "4.0.3",
	castProperties : ["data", "rootNode","buttons"],
	options: {
		valueField: 'id',
		textField : 'name',
		panelRenderOnShow: false,
		mode      : 'local',	// or 'remote'
		method    : 'post',
		url       : null,
		data      : null,
		buttons   : [],
		postMode  : "value",    // value, text, value-text
		multiple  : false,		// 可多选树
		simpleDataEnable: false,
		simpleDataIdKey: "id",
		simpleDataPIdKey: "pId",
		simpleDataRootPId: null,
		rootNode: false,
		radioType: "level",
		showRootNode: true,
		allowPushParent: true,
		traversal : false,		// 是否遍历其父子节点
		cascadeCheck : false,	// 多选时不关联父子节点
		formatter: function(row) {
			var textField = $(this).combotree("option", "textField");
			return row[textField];
		},
		loader: function(param, success, error) {
			var that = this,
			    instance = $(this),
			    url = instance.combotree("option", "url");
			if (!url) return false;
			$.ajax({
				type: instance.combotree("option", "method"),
				url:  url,
				data: param,
				dataType: 'json',
				success: function(data) {
					success(data);
				},
				error: function(e){
					error.apply(this, arguments);
				}
			});
			/*$.ajax({
				type: "get",
				url:  url,
				data: {},
				dataType: 'json',
				success: function(data) {
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});*/
			//return false;
		},
		
		beforeClick: null,   /*下拉树 beforeClick(treeId, treeNode)事件*/
		beforeLoad : $.noop, /*参数(event, param)*/
		onLoad     : $.noop, /*数据加载成功*/ 
		onError    : $.noop, /*数据加载失败*/
		onSelect   : $.noop, /*参数(event, {valueField, textField})*/
		unSelect : $.noop,  /*参数(event, {valueField, textField})*/	
		onExpand: null,		
		onClick : null
	}, 	
	/**
	 * return $tree
	 */
	tree: function () {
		return $("#"+$(this.element).attr('id')+"_tree");
	},
	/**
	 * keysObj ({id:testId, name:testName, ... })
	 */
	_filterLocalTree: function (keysObj) {
		var that = this,
			treeObj = $("#"+$(this.element).attr('id')+"_tree");
		// 支持拼音搜索
		treeObj.tree ("filterNodesByParam", keysObj);	
	},
	_create : function() {
		var that = this,
		    showPanelEvent = null;
    	this.element.addClass("coral-form-element-combotree coral-validation-combotree coral-combobox-f ctrl-form-element");
    	
		showPanelEvent = function(){
			
		};
		this.options.onShowPanel = showPanelEvent;
		this._super();
		//lihaibo
		if ( this.options.popupDialog ) {
			this.uiCombo.popupInputbox = this.uiCombo.popupInputbox.textbox({
				componentCls: "coral-combo-popup-input",
				icons: [ {
					icon: "cui-icon-search2",
					click: function (e, data) {						
						that._filterLocalTree({"name": data.value});
					}
				}],
				onKeyUp: function (e, data) {					
					that._filterLocalTree({"name": data.value});
					
					e.stopPropagation();
				}
			});
			
			this.uiCombo.popupDialog.dialog({
				autoOpen : false,
				title: "下拉树",
				height : 'auto',
				width : 'auto',
				modal : true,
				resizable: false,
				buttons: {
					"确定" : function(e) {
						var valueArr = $.data( that.uiCombo.popupInputbox, "value"),
							textArr = $.data( that.uiCombo.popupInputbox, "text");
						if ( valueArr ) {
							that.setValues(valueArr, true, textArr);
						}
						$(this).dialog("close");
					},
					"关闭" : function(e) {
						$(this).dialog("close");
					}
				}		
			});		
		}
		this.uiCombo.panel.unbind().bind('mouseover', function(e){
			$(e.target).closest('.coral-combobox-item').addClass('coral-combobox-item-hover');
		}).bind('mouseout', function(e){
			$(e.target).closest('.coral-combobox-item').removeClass('coral-combobox-item-hover');
		}).bind('mousedown', function(e) {
			that.cancelBlur = true;
			that._delay(function() {
				delete that.cancelBlur;
			});
			return false;
		});	
	}, 
	_getSetting: function(){
		var that = this;
		var setting = {
			simpleDataEnable: this.options.simpleDataEnable,
			simpleDataIdKey: this.options.simpleDataIdKey,
			simpleDataPIdKey: this.options.simpleDataPIdKey,
			simpleDataRootPId: this.options.simpleDataRootPId,
			checkable : this.options.multiple,
			radioType: this.options.radioType,
			showRootNode:this.options.showRootNode,
			rootNode:this.options.rootNode,
			chkboxType  : this.options.cascadeCheck ? { "Y" : "", "N" : "" } : { "Y" : "ps", "N" : "ps" },
			beforeClick : function ( treeId, treeNode ) {
				if ( !that.options.allowPushParent && treeNode.isParent ) return false;
				var fn = $.coral.toFunction( that.options.beforeClick );
				if ( !that.options.multiple ) {
					if ( $.isFunction(fn) ) {
						return fn(treeId, treeNode);
					}
					return true;
				} else {
					return false;
				}
			},
			onClick : function( e, treeId, treeNode, clickFlag ) {
				var textArr = [];
				var valueArr = [];
				textArr.push( treeNode.name );
				valueArr.push( treeNode.id );
				if( that.options.traversal ){
					var pNode = treeNode.getParentNode();
					while( !!pNode ) {
						textArr.push(pNode.name);
						//valueArr.push(pNode.id);
					    pNode = pNode.getParentNode();
					}
				}

				if ( that.options.popupDialog ) {
					$.data( that.uiCombo.popupInputbox, "value", valueArr.reverse() );
					$.data( that.uiCombo.popupInputbox, "text", textArr.reverse() );
				} else {
					//给下拉框赋值
					that.setValues(valueArr.reverse(), true,textArr.reverse());
				}	
				if ( !that.options.multiple && !treeNode.isParent ||
						!that.options.multiple && that.options.allowPushParent ) {
					that.hidePanel();
				} 
				//that._trigger("onClick", e, {treeId:treeId, treeNode:treeNode, clickFlag:clickFlag});
				that._trigger("onNodeClick", e, {treeId:treeId, node:treeNode, clickFlag:clickFlag});
				// 添加onSelect事件
				//that._trigger("onSelect", e, {treeId:treeId, treeNode:treeNode});
				return false;
			},
			beforeCheck: function( treeId, treeNode ){
				//if ( !that.options.parentNodeAllowCheck && treeNode.isParent ) return false;
				var ret = that._trigger("beforeNodeCheck", null, {treeId: treeId, node:treeNode});
				if ( !ret ) return false;
			},
			onCheck : function(e, treeId, treeNode){
				var textArr = [];
				var valueArr = [];
				var nodes = $('#'+treeId).tree("getCheckedNodes",true);
				for (var i=0, l=nodes.length; i<l; i++) {
					//在关联父子节点时,半选状态节点不作为下拉框的值
					if(that.options.cascadeCheck || !nodes[i].getCheckStatus().half){
						if (!that.options.allowPushParent && nodes[i].isParent) {
							continue;
						}
						textArr.push(nodes[i].name);
						valueArr.push(nodes[i].id);
					}
				}
				
				if ( that.options.popupDialog ) {
					$.data( that.uiCombo.popupInputbox, "value", valueArr);
					$.data( that.uiCombo.popupInputbox, "text", textArr);
				} else {
					//给下拉框赋值
					that.setValues(valueArr, true,textArr);
				}									
				that._trigger("onNodeCheck", e, {treeId:treeId, node:treeNode});
			},
			onLoad : function (e, treeId, treeNode, msg) {
				var textArr = [],
				 	valueArr = [],
				 	i,
				 	nodes = [],
				 	clearValues = false,
				 	data = $('#'+treeId).tree("getNodes"),
				    dataJson = $('#'+treeId).tree("transformToArray",data);
				if (  that.options.clearOnLoad ){
					clearValues = that._clearValues( dataJson );
				}
				if(that.options.multiple) {
					nodes = $('#'+treeId).tree("getCheckedNodes",true);
				} else {
					nodes = $('#'+treeId).tree("getSelectedNodes");
				}
				for (i=0, l=nodes.length; i<l; i++) {
					//在关联父子节点时,半选状态节点不作为下拉框的值
					if (that.options.cascadeCheck || !nodes[i].getCheckStatus().half) {
						if (!that.options.allowPushParent && nodes[i].isParent) {
							continue;
						}
						textArr.push(nodes[i].name);
						valueArr.push(nodes[i].id);
					}
				}
				if(that.currentValues.length && !clearValues) {
					valueArr = that.currentValues;
				}
				if (!that.isInit) {
					that.isInit = true;
					that.originalValue = valueArr.join(",");
				}
				that.dataLoaded = true;
				//给下拉框赋值
				that.setValues(valueArr);
				that.isLoaded = true;
				// 添加onLoad事件
				that._trigger("onLoad", e, {treeId:treeId, treeNode:treeNode, msg:msg});
			},
			onExpand: function (e, treeId, node) {
				that._trigger("onExpand", e, [{treeId: treeId, node: node}]);
			}
		};
		return setting;
	},
	// 设置 popupDialog input 的值
	setPopupInput: function ( text ) {
		this.uiCombo.popupInputbox.textbox("setValue", text.join(this.options.separator) );
	},
	_initData : function() {
		var tree = $("<ul id=\""+$(this.element).attr('id')+"_tree\"></ul>");
		if ( this.options.popupDialog ) {
			tree.appendTo(this.uiCombo.popupDialog);
			this.uiCombo.popupDialogTree  = tree;
		} else {
			tree.appendTo(this.uiCombo.pContent);
		}
		this.uiCombo.panel.unbind().bind('mousedown', function(e){
			e.preventDefault();
		});
		
		var setting = this._getSetting();
		//异步树setting
		if ( typeof this.options.url == 'string' && this.options.url !== '' ) {
			$.extend(setting,{asyncEnable : true,asyncUrl : this.options.url,asyncAutoParam : 'id,name'});
		}
		//初始化tree
		tree.tree(setting, this.options.data);
		// lihaibo add
		var textArr = [];
		var valueArr = [];
		var nodes = $('#'+$(this.element).attr('id')+"_tree").tree("getCheckedNodes",true);
		for (var i=0, l=nodes.length; i<l; i++) {
			//在关联父子节点时,半选状态节点不作为下拉框的值
			if((nodes[i].getCheckStatus() != null) && (this.options.cascadeCheck || !nodes[i].getCheckStatus().half)){
				textArr.push(nodes[i].name);
				valueArr.push(nodes[i].id);
			}
		}
		//给下拉框赋值，如果为空，则不赋值		
		if (valueArr.length > 0) {
			this.setValues(valueArr, false,textArr);	
		}
	},	
	_renderItems: function( data ){
		
	},
	_scrollTo : function(value) {
		var panel = this.panel();
		var item = panel.find("div.coral-combobox-item[value=\"" + value + "\"]");
		if ( item.length ){
			if (item.position().top <= 0){
				var h = panel.scrollTop() + item.position().top;
				panel.scrollTop(h);
			} else if (item.position().top + item.outerHeight() > panel.height()){
				var h = panel.scrollTop() + item.position().top + item.outerHeight() - panel.height();
				panel.scrollTop(h);
			}
		}
	}, 
	_request : function(url, param, remainText) {
	/*	var $tree = $("#"+$(this.element).attr('id')+"_tree");
		var opts = this.options, 
		    that = this,
		    loaderEvent = this.options.loader;
		if ( $.isArray( url ) ) {
			that.loadData(url, remainText);
		} else {
			if (url) {
				opts.url = url;
			}
			param = param || {};
			if (this._trigger("beforeLoad", null, [param]) == false) return;
			loaderEvent.apply(this.element, [param, function(data) {
				that.loadData(data, remainText);
			}, function() {
				that._trigger("onError", null, arguments);
			}]);
		}*/
		var that = this,
	        opts = {}, 
	        data = [], 
	        loaderEvent = this.options.loader,
	        isUrl = false;
		if ( !url && !that.options.url ){
			url = [];
		}else if (!url && that.options.url){
			url = that.options.url;
		}
        if ( typeof( url ) !== "string" ) {
	     // 传过来的是object，需要区别是data还是options
	    // 如果是options，可能是options.data或者options.url ，否则才为data
	         opts = url;
	         if ( opts.data ) { //传进来的是options对象
		          data = opts.data;			    
	          } else if ( opts.url ) {// 传进来的是data对象
		          url = opts.url
		          that.options.url = opts.url;
		          isUrl = true;
	          } else if( opts instanceof Array ) {
		          data = url;
	          }else if ( !opts.url && !opts.data && !that.options.url ){
			      data = [];
			  }else if ( !opts.url && !opts.data && that.options.url ){
			      url = that.options.url ;
			      isUrl = true;
			  }
        } else {
    	    that.options.url=url
	        isUrl = true;
        }
        if ( isUrl ){
    	     param = param || {};
		     if (this._trigger("beforeLoad", null, [param]) == false) return;
		     loaderEvent.apply(this.element, [param, function(data) {
			      that.loadData(data, remainText);
			      that._trigger( $.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [data]);
		      }, function() {
			      that._trigger("onError", null, arguments);
		      }]);
        } else{
    	    that.loadData(data, remainText);
    	    that._trigger($.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [data]);
        }

	},
	getTree: function(){
		return $("#"+$(this.element).attr('id')+"_tree");
	},
	/**
	 * handle
	 */
	loadData: function (data, remainText) {
		var $tree = this.getTree();
		$tree.tree("reload", data);
		var nodes = $tree.tree("getNodes");
		// expand root node defaultly
		$.each( nodes, function( i, node ) {
			$tree.tree("expandNode", node, true);
		});
		this.dataLoaded = true;
		this.setValues(this.currentValues);
	},
	getData: function() {
		return this.getTree().tree("getNodes") || [];
	},	
	/**
	 * 加载后执行缓存的方法
	 */
	setComboValues: function(values, remainText) {
		/*// 如果没加载完，则先缓存，onLoad之后统一执行
		if (!this.isLoaded) {
			var cacheItem = {
				"setComboValues": {
					values: values,
					remainText: remainText
				}
			};
			this._addCacheItem(cacheItem);
		}
		//
		var opts  = this.options;
		var nodeName = [];
		var comboId = $(this.element).attr('id');
		$("#"+comboId+"_tree").tree("cancelSelectedNode");
		if(opts.multiple){
			//清空checkbox
			$("#"+comboId+"_tree").tree("checkAllNodes",false);
			//设置checkbox
			for(i in values){
				var node = $("#"+comboId+"_tree").tree("getNodeByParam","id",values[i]);
				//$("#"+comboId+"_tree").tree("selectNode",node);
				if(node)
					$("#"+comboId+"_tree").tree("checkNode", node, true, !opts.cascadeCheck);
			}
		}
		//获得value对应的text值
		if(!remainText) {
			for(i in values){
				var node = $("#"+comboId+"_tree").tree("getNodeByParam","id",values[i]);
				if (node) {
					nodeName.push(node.name);
				} else {
					nodeName.push(values[i]); // added by @lhb @20150415 : 如果没有对应值，则设置传进的值
				}
			}
			remainText = nodeName;
		}	*/
		this.setValues(values,false, remainText); // 20150121 不触发change，不校验
	},
	_setCombotree: function(values, remainText) {
		values = this.currentValues;
		// 如果没加载完，则先缓存，onLoad之后统一执行
		/*if (!this.isLoaded) {
			var cacheItem = {
				"setComboValues": {
					values: values,
					remainText: remainText
				}
			};
			this._addCacheItem(cacheItem);
		}*/
		//
		var opts  = this.options;
		var nodeName = [];
		var comboId = $(this.element).attr('id');
		$("#"+comboId+"_tree").tree("cancelSelectedNode");
		if(opts.multiple){
			//清空checkbox
			$("#"+comboId+"_tree").tree("checkAllNodes",false);
			//设置checkbox
			for(i in values){
				var node = $("#"+comboId+"_tree").tree("getNodeByParam","id",values[i]);
				//$("#"+comboId+"_tree").tree("selectNode",node);
				if(node)
					$("#"+comboId+"_tree").tree("checkNode", node, true, !opts.cascadeCheck);
				//获得value对应的text值
				if(!remainText) {
					var node = $("#"+comboId+"_tree").tree("getNodeByParam","id",values[i]);
					if (node) {
						nodeName.push(node.name);
					} else {
						nodeName.push(values[i]); // added by @lhb @20150415 : 如果没有对应值，则设置传进的值
					}
				}
			}
		} else {
			for(i in values){
				var node = $("#"+comboId+"_tree").tree("getNodeByParam","id",values[i]);
				$("#"+comboId+"_tree").tree("selectNode",node);
				//获得value对应的text值
				if(!remainText) {
					var node = $("#"+comboId+"_tree").tree("getNodeByParam","id",values[i]);
					if (node) {
						nodeName.push(node.name);
					} else {
						nodeName.push(values[i]); // added by @lhb @20150415 : 如果没有对应值，则设置传进的值
					}
				}
			}
		}
		if(!remainText) {
			remainText = nodeName;
		}
		return remainText;
	},
	//给下拉树赋值并赋值文本
	/**
	 *  isSelect : true(则是用户选择或取消选择的操作)；false(则是开发者代码调用setValues方法)。
	 */
	setValues: function(values, triggerOnChange, remainText) {
		// 当前值缓存，防止异步加载下拉选项时，设值不起作用
		this.currentValues = values;
		var nodeText = this._setCombotree(values, remainText);
		var opts  = this.options,
			textArr = [];
		remainText = typeof remainText == "boolean" ? remainText: false;
		if ( !remainText ) {
			this._setText(nodeText.join(opts.separator));
		} 
		this._super(values, triggerOnChange, remainText);
	},
	//赋值
	setValue: function(value, triggerOnChange, remainText){
		value = value.split( this.options.separator );
		this.setValues(value, false, remainText);
	},
	_getOnlyValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
				( !this.currentValues[0] && 
				this.currentValues.length === 1) ) return valArr;
		for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i];
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
		}
		/*for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i],
			    j     = 0,
			    valueField = opts.valueField,
			    textField  = opts.textField,
			    row = null;
			
			if ( "value-text" === opts.postMode ) {
				valArr.push(value.split(opts.valueTextSeparator)[0]);
			}
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
			if ( "text" === opts.postMode ) {
				for (;data && j < data.length; j++) {
					row = data[j];
					if ( row[textField] == value ) {
						valArr.push(row[valueField]);
						break;
					}
				}
			}
			
		}*/
		return valArr;
	},
	_showItems : function(){
		var allNodes = this.tree().tree("getNodes");
		var allNodesData = this.tree().tree("transformToArray",allNodes);
		this.tree().tree("showNodes", allNodesData,{showParents: true});
	},
	//下拉框查询方法
	_doQuery : function(q) {	
		if(q=='') return;
		var opts = this.options,
			dataArr = [],
			textField = opts.textField,
			valueField = opts.valueField,
		    filterEvent = this.options.filter;
		if (opts.mode == "remote") {
			this._request(null, {q:q}, true);
		} else {
			var nodes = this.tree().tree("getNodes");
			var data = this.tree().tree("transformToArray",nodes);
			this.tree().tree("hideNodes",data);
			for(var i = 0; i < data.length; i++) {
				var spell = pinyinEngine.toPinyin(data[i][textField],false,"");
				for(var j = 0;j< q.length;j++){
					var r = filterEvent.apply(this.element, [q[j],data[i]]);
					if (r) {
						var v = data[i][valueField];// 匹配的value
						var t = data[i][textField];// 匹配的text
						
						if (t.indexOf(q[j]) > -1 || spell.indexOf(q[j]) > -1) {
							dataArr.push(data[i]);
							this.tree().tree("showNodes",dataArr,{showParents: true});
							this.tree().tree("expandNode", dataArr[0].getParentNode(), true, false, false);
						}
					}
				}
			}
		}
	},
	_checkMathch:function(text, noSearchFlag){
		var valarr = [],
			textarr = [],
		 	tvalarr = [],
		 	ttextarr = [],
			nodes=[],
			i,
			j,
			k,
			h,
			options = this.options,
			textField = options.textField,
			valueField = options.valueField;
		if ( noSearchFlag ) {
			this._showItems();
		}
		var matched = false;
		var exsit = {};
		if ( options.multiple ) {
			this.tree().tree("checkAllNodes", false);
			for(i = 0; i < text.length; i++){
				if ( noSearchFlag ) {
					if ( this.options.forceSelection && $.trim( text[i] ) === "" ) {
						continue;
					}
				}
				var nodes = this.tree().tree("getNodesByParam", textField, text[i], null);
				if( !nodes.length ){
					exsit[i.toString()] = true;
				}
				for(j=0;j<nodes.length;j++){
					// cascadeCheck为true，说明父节点是可以单独选的
					if ( options.cascadeCheck || !nodes[j].isParent ) {
						valarr.push(nodes[j][valueField]);
						textarr.push(nodes[j][textField]);
						matched = true;
						break;
					}
				}
				if ( !matched && !this.options.forceSelection ) {
					if ( ( !exsit[i.toString()] && !noSearchFlag ) || noSearchFlag ) {
						valarr.push(text[i]);
						textarr.push(text[i]);
					}
				}
				matched = false;
			}
			for(h=0;h<valarr.length;h++){
				var nodes = this.tree().tree("getNodesByParam", valueField, valarr[h], null);
				if ( nodes.length ) {
					this.tree().tree("checkNode", nodes[0], true, !options.cascadeCheck);
				}
			}
			// 为了获取选中父节点的所有子节点，必须要等上面的checkNode方法执行后才有效。
			var nodes = this.tree().tree("getCheckedNodes",true);
			for (k=0, l=nodes.length; k<l; k++) {
				//在关联父子节点时,半选状态节点不作为下拉框的值
				if( options.cascadeCheck || !nodes[k].getCheckStatus().half ){
					if ( !options.allowPushParent && nodes[k].isParent ) {
						continue;
					}
					if ( $.inArray(nodes[k][valueField], valarr) == -1 ) {
						textarr.push(nodes[k][textField]);
						valarr.push(nodes[k][valueField]);
					}
				}
			}
		} else {
			var nodes = this.tree().tree("getNodesByParam", textField, text[0], null);
			var index = -1;
			for (i = 0; i < nodes.length; i++ ) {
				index = index===-1?i:index;// 单选的时候，只保留地一个匹配的选项
				matched = true;
			}
			if ( matched ) {
				valarr.push(nodes[index][valueField]);
				textarr.push(nodes[index][textField]);
			}
			if ( !matched && !this.options.forceSelection ) {
				valarr.push(text[0]);
				textarr.push(text[0]);
			}
		}
		return {
			valarr:valarr,
			textarr:textarr
		}
	},
	//清除下拉框值
	clear: function(){
		this._super();
		//清除多选框选中
		if(this.options.multiple){
			$("#"+$(this.element).attr('id')+"_tree").tree("checkAllNodes",false);
		}
	},
	_formatValue: function(value) {
		var data;
		if ( this.options.multiple ) {
			data = this.getTree().tree("getCheckedNodes",true);
		} else {
			data = this.getTree().tree("getSelectedNodes");
		}
		var opts = this.options,
		    valueField = opts.valueField, textField  = opts.textField,
		    i = 0, row = null;
		if ("text" === opts.postMode || "value-text" === opts.postMode) {
			for (i = 0; i < data.length; i++) {
				row = data[i];
				if ("" != value && value == row[valueField]) {
					if ("text" === opts.postMode )	return row[textField];
					if ("value-text" === opts.postMode) return value + opts.valueTextSeparator + row[textField];
				}
			}
		}
		return value;
	},
	reload: function(url) {
		this._request(url);
	},
	_destroy : function () {
		var that = this;
		
		this.element.removeClass("coral-validation-combotree");
		this.element.removeClass("coral-form-element-combotree");
		if (this.options.popupDialog) {
			this.uiCombo.popupDialog.dialog("forceDestroy");
		}
		this._super();
	}	
});
})(jQuery);

/**
 * 组件库4.0：下拉框
 * 
 * 依赖JS文件:
 *   jquery.coral.core.js
 *   jquery.coral.component.js
 *   jquery.coral.panel.js
 *   jquery.coral.combo.js
 * 	 jquery.coral.tree.js
 *   jquery.coral.grid.js
 */
(function($){	
$.component( "coral.combogrid", $.coral.combo, {
	version: "4.0.3",
	castProperties : ["colNames", "colModel", "data", "buttonOptions", "gridOptions","buttons"],
	options: {
		colNames: [],
		colModel : [],
		valueField: "id",
		textField: "name",
		panelRenderOnShow: false,
		multiple : false,
		selarrrow: [],
		buttons:[],
		url       : null,
		panelWidth : 500,
		panelHeight : 220,
		sortable : false,
		data      : [],
		onSelectRow : null,
		onSelectAll : null,
		onSortableColums : null,
		onLoad     : $.noop, /*数据加载成功*/
		onComplete : null,
		pager: false,
		// add sub button options
		buttonOptions: null,
		gridOptions: {} // grid 额外的参数添加
	}, 
	grid: function () {
		return $("#combo_grid_"+$(this.element).attr('id'));
	},
	/**
	 * 获取combogrid的button组件
	 */
	button: function () {
		if (null !== this.options.buttonOptions) {
			return this.$button;
		}
	},
	_destroy : function () {
		this.element.removeClass("coral-validation-combogrid");
		this.element.removeClass("coral-form-element-combogrid");
		this.grid().grid("destroy");
		this._super();
	},
	_showItems:function(){
		var grepArr = [],valarr = [],textarr = [],new_arr = [];
		var textField = this.options.textField,
			valueField = this.options.valueField,
			sdata = {};
		var $grid = this.grid();
		sdata['filters'] = '{}';
		$grid.grid("option", "localonce", true);
		$.extend($grid.grid("option", "postData"),sdata);
		$grid.grid("reload", {page:1});
	},
	_doQuery:function(q){
		var opts = this.options,
			$grid = this.grid();
		var textField = opts.textField;
		var fields = $grid.grid("option", "colModel"),
			sdata = [],
			fieldsRules = [];
		for (var i in fields) {
			var item = fields[i];
			if ("cb" == item.name || "rn" == item.name) continue;
			for(var j = 0;j< q.length;j++){
				//fieldsRules.push('{"field":"'+ item.name +'","op":"cn","data":"'+q[j]+'"}');
				//fieldsRules.push('{"field":"'+ textField +'","op":"cn","data":"'+q[j]+'"}');
			}
		}
		for(var j = 0;j< q.length;j++){
			fieldsRules.push('{"field":"'+ textField +'","op":"cn","data":"'+q[j]+'"}');
		}
		sdata['filters'] = '{"groupOp":"OR","rules":['+ fieldsRules.join(",") +']}';
		$grid.grid("option", "localonce", true);
		$.extend($grid.grid("option", "postData"),sdata);
		$grid.grid("reload", {page:1});
	},
	_checkMathch:function(text, noSearchFlag){
		var grepArr = [],valarr = [],textarr = [],new_arr = [];
		var textField = this.options.textField,
			valueField = this.options.valueField,
			sdata = {},
			repeatIndex = 0,// 选中的值
			i,
			j;
		var $grid = this.grid();
		if ( noSearchFlag ) {
			this._showItems();
		}
		var data = this.grid().grid("option", "data");
		var matched = false;
		var exsit = {};
		if ( this.options.multiple ) {
			// 检测当前页里面的值是否有匹配
			for( i = 0; i < text.length; i++ ){
				for( j = 0; j < data.length; j++ ){
					if( data[j][textField] != text[i] && data[j][valueField] != text[i] ){
						exsit[i.toString()] = true;
					}
					if ( data[j][textField] == text[i] ){
						valarr.push(data[j][valueField]);
						textarr.push(data[j][textField]);
						matched = true;
						break;
					}
				}
				if ( !matched && !this.options.forceSelection ) {
					if ( ( !exsit[i.toString()] && !noSearchFlag ) || noSearchFlag ) {
							valarr.push(text[i]);
							textarr.push(text[i]);
						}
				}
				matched = false;
			}
			// 检测缓存里面的值是否有匹配
			var valarrCache = this._getOnlyValues();
			var textarrCache = this._getOnlyTexts();
			for( i = 0; i < text.length; i++ ){
				for( j = 0; j < textarrCache.length; j++ ){
					if(textarrCache[j] == text[i] && 
						$.inArray(textarrCache[j], textarr) === -1){
						valarr.push(valarrCache[j]);
						textarr.push(textarrCache[j]);
					}
				}
			}
		} else {
			var index = -1;
			// 检测当前页里面的值是否有匹配
			for( i = 0; i < data.length; i++ ){
				if ( data[i][textField] == text[0] ){
					index = index===-1?i:index;// 单选的时候，只保留地一个匹配的选项
					matched = true;
				}
			}
			if ( matched ) {
				valarr.push(data[index][valueField]);
				textarr.push(data[index][textField]);
			}
			if ( !matched && !this.options.forceSelection ) {
				if ( ( !exsit["0"] && !noSearchFlag ) 
						|| noSearchFlag ) {
						valarr.push(text[0]);
						textarr.push(text[0]);
					}
			}
		}
		return {
			valarr:valarr,
			textarr:textarr
		};
	},
	/**
	 * reload
	 */
	reload: function( url ) {
		this.cache.isReload = true;
		var $grid = this.grid(),
		    that = this,
		    opts = {},
	        isUrl = false,
	        data = [],
		    // TODO: 临时取属性 orgdatatype
		    datatypeTemp = $grid.grid("option", "orgdatatype");
		if ( !url && !this.options.url ) {
			url = [];
		} else if ( !url && this.options.url ) {
			url = this.options.url;
		}
		if ( typeof( url ) !== "string" ) {
			opts = url;
			if ( opts.data ) {
				data = opts.data;
			} else if ( opts.url ) {
				url = opts.url;
				isUrl = true;
			} else if ( url instanceof Array ) {
				data = url;
			} else if ( !opts.url && !opts.data && !this.options.url ) {
		    	data = [];
		    } else if ( !opts.url && !opts.data && this.options.url ) {
		    	url = this.options.url ;
		    	isUrl = true;
		    }
		} else {
			isUrl = true;
		}
		if ( $.isFunction( opts.onLoad ) ) {
			this.cache.onLoad = opts.onLoad;
		}
		if ( opts.postData ) {
			//this.cache.postData = opts.postData;
		}
		if ( isUrl ){
			$grid.grid("option", "url", url);
			this.options.url  = url;
			if (datatypeTemp != "json") {
				$grid.grid("option", "datatype", "json");
				$grid.grid("reload");
				$grid.grid("option", "datatype", datatypeTemp);
			}
		} else {
			if (datatypeTemp != "local") {
				$grid.grid("option", "orgdatatype", "local");
				$grid.grid("clearGridData");
				$grid.grid("addRowData", this.options.valueField, data);
				this.cache.isReload = false;
				this._trigger( opts.onLoad, null, [data]);
				$grid.grid("option", "orgdatatype", datatypeTemp);
			}
			$grid.grid("option", "data", data);
		}
		$grid.grid("reload");
	},
	_removeGridHighlights: function() {		
		this._removeHighlight(
			this.grid().find(".coral-grid-btable tr td > span.coral-keyword-highlight"));
	},
	/**
	 * 给搜索到的grid结果集上加高亮显示
	 */
	_addGridHighlights: function() {
		this._addHighlight(this.grid().find(".coral-grid-btable .jqgrow").children("td"), 
			this.uiCombo.textbox.val());
	},
	/**
	** 每次选择一行时，更新缓存的value，text，rowId
	**/
	_updateGridData: function (ui) {
		var that = this;
		var rowData = this.grid().grid("getRowData", ui.rowId);
		var value = this._getTextFromHTML( rowData[this.options.valueField] );
		var text = this._getTextFromHTML( rowData[this.options.textField] );
		var index = $.inArray(value, this.gridValueArr);
		//单选时，不缓存值。
		if ( !this.options.multiple ) {
			this.gridValueArr = [value];
			this.gridTextArr = [text];
			this.gridRowIdArr = [ui.rowId];
			return ;
		}
		//多选时，缓存值。
		if ( !ui.status ) {
			if ( index != -1 ) {
				this.gridValueArr.splice(index, 1);
				this.gridTextArr.splice(index, 1);
				this.gridRowIdArr.splice(index, 1);
			}
		} else {
			if ( index == -1 ) {
				this.gridValueArr.push(value);
				this.gridTextArr.push(text);
				this.gridRowIdArr.push(ui.rowId);
			}
		}
	},
	_create : function() {
		var that = this, 
		    showPanelEvent = null, 
		    goptions;

    	this.element.addClass("coral-form-element-combogrid coral-validation-combogrid");
    	this._super();
		this.panelRendered = true;
		// add button code
		if (null !== this.options.buttonOptions) {
			this.$button = this._getButtonEl();
			this.component().append(this.$button).addClass("coral-combogrid-hasButton");
			this.$button.button(this.options.buttonOptions);
		}
		this.uiCombo.panel.unbind().bind('mousedown', function(e) {
			that.cancelBlur = true;
			that._delay(function() {
				delete that.cancelBlur;
			});
			var p = $(e.target).closest(".coral-grid-pager").length;
			if (p==1) {
				return true;
			} else {
				return false;
			}
		});
	}, 
	_initCombo: function() {
		this._super();
		var $grid = $();
		
		if ( this.options.pager ) {
			grid = $('<div id="combo_grid_'+$(this.element).attr('id')+'"><div class="combo_grid_'+$(this.element).attr('id')+'"></div></div>').appendTo(this.uiCombo.pContent);	
		} else {
			grid = $('<div id="combo_grid_'+$(this.element).attr('id')+'"></div>').appendTo(this.uiCombo.pContent);	
		}
		
		// 缓存value，text，rowId数组，用以设置值
		this.gridValueArr = [];
		this.gridTextArr = [];
		this.gridRowIdArr = [];

		goptions = {
			fitStyle: "fill",
			sortable: this.options.sortable,
			colModel : this.options.colModel,
		    colNames : this.options.colNames,
			multiselect: this.options.multiple,
			width : "auto"
		};
		goptions = $.extend({}, goptions, this.options.gridOptions);
		
		if (null != this.options.url) {
			goptions.url = this.options.url;
			goptions.datatype = "json";
		} else {
			goptions.data = this.options.data;
			goptions.datatype = "local";
		}
		
		this._on(grid, {
			gridonselectrow: function(e, ui) {
				var value = this._getOnlyValues();
				if (this.options.multiple) {
					if ( $.inArray(ui.rowId,value)==-1 ){
						value.push(ui.rowId);
					} else {
						value.splice( $.inArray( ui.rowId, value ), 1 );
					}
				} else {
					value = [ ui.rowId ];
				}
				this.setValues(value, true, false);
				if (!this.options.multiple && e.originalEvent && e.originalEvent.type == "click" ) {
					this.hidePanel();
				}
			},
			gridonselectall: function(e, ui) {
				var tvalue = ui.status ? ui.aRowIds.concat():[];
				this.setValues(tvalue, true, false);
			},
			gridonload: function(e, ui) {
				var t = this,
					clearValues = false,
				    data = ui.data;
				if (t.options.clearOnLoad){
					clearValues = t._clearValues(data);
				}
				this._addGridHighlights();
				this.isLoaded = true;
				var selarrrow = this.grid().grid("option", "selarrrow").concat();
				for(var i =0;i< selarrrow.length;i++){
					this.grid().grid("setSelection", selarrrow[i], false);
				}
				var value = this._getOnlyValues();
				// 点击分页码时，reload，设置缓存的值
				$.each(value, function(i, v) {
					t.grid().grid("setSelection", v, false, null);					
				});
				if (clearValues == true) {
					this.currentValues = [];
				} 
				this.setValues(this.currentValues);
				if (this.cache.isReload) {
					this.cache.isReload = false;
					this._trigger(this.cache.onLoad || "onLoad", null, [ui]);
					delete this.cache.onLoad;
				}
			}
		});
		
		grid.grid(goptions);
		grid.grid("refresh");
	},
	_getButtonEl: function () {
		return $("<button type='button'></button>").addClass("coral-combogrid-button");
	},
	/**
	 * 根据colName获取grid所有行集合数据
	 * @param colNameArr {array,string} : 列名name数组
	 * @return rowData {array} : 行集合数据
	 */
	_getRowDataByColName: function(colNameArr) {
		var that = this,
			opts = this.options,
			$grid = this.grid(),
			gridData = $grid.grid("option", "data"),
			rowData = [];
		
		if (typeof colNameArr === "string") {
			colNameArr = [colNameArr];
		}
		
		$.each(gridData, function(index, item) {
			var rowObj = {};
			for (var i in colNameArr) {
				var colName = colNameArr[i];
				rowObj[colName] = item[colName];
			}
			rowData.push(rowObj);
		});

		return rowData;
	},
	/**
	 * grid根据value数组，获取对应的text数组
	 * @param valueArr {array} : value 集合数组
	 * @returns textArr {array} : text 集合数组
	 */
	_getTextArrByValueArr: function (valueArr) {
		var that = this,
			opts = this.options,
			valueField = this.options.valueField,
			textField = this.options.textField,
			dataObj = this._getRowDataByColName( [valueField, textField] ),
			textArr = [];
		
		for (var i in valueArr) {
			var valueItem = valueArr[i],
				hasText = false;
			
			$.each(dataObj, function(index, item) {
				if (valueItem == item[valueField]) {
					textArr.push(item[textField]);
					hasText = true;
				}
			});
			// 如果没找到对应的text，则将value作为一个textItem
			if (!hasText) {
				textArr.push(valueArr[i]);
			}
		}
		
		return textArr;
	},	
	//给文本框赋值
	setValues: function (values, triggerOnChange, text) {
		// 清除下拉列表的选中
		var $grid = this.grid();
		var selarrrow = $grid.grid("option", "selarrrow").concat();
		for(var i =0;i< selarrrow.length;i++){
			$grid.grid("setSelection", selarrrow[i], false);
		}
		// 如果没加载完，则先缓存，onLoad之后统一执行
		if (!this.isLoaded) {
			var cacheItem = {
				"setValues": {
					values: values,
					text: text,
					triggerOnChange: triggerOnChange
				}
			};
			this._addCacheItem(cacheItem);
		}
		var opts  = this.options;
		var textArr = [];
		textArr = this._getTextArrByValueArr(values);
		text = typeof text == "boolean" ? text: false;
		if (!text) {
			this._setText(textArr.join(opts.separator));
		} 
		this.currentValues = values;
		this.currentTexts = textArr;
		var tvalues = values.concat();
		tvalues.sort();
		for(var i =0;i < tvalues.length;i++){
			if ( tvalues[i] !== tvalues[i+1] && i != tvalues.length ||
					i == tvalues.length ) {
				$grid.grid("setSelection", tvalues[i], false);
			}
		}
		this._super(values, triggerOnChange, false);
	},
	_getOnlyValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
				( !this.currentValues[0] && 
				this.currentValues.length === 1) ) return valArr;
		for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i],
			    j     = 0,
			    valueField = opts.valueField,
			    textField  = opts.textField,
			    row = null;
			
			if ( "value-text" === opts.postMode ) {
				valArr.push(value.split(opts.valueTextSeparator)[0]);
			}
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
			if ( "text" === opts.postMode ) {
				for (;data && j < data.length; j++) {
					row = data[j];
					if ( row[textField] == value ) {
						valArr.push(row[valueField]);
						break;
					}
				}
			}
			
		}
		return valArr;
	},
	_getOnlyTexts: function(){
		return this.currentTexts || [];
	},
	getData: function() {
		return this.grid().grid("option", "data") || [];
	},
	_selectPrev : function(){
		 var that = this,
		 	 selected = null,
		 	 index = 0,
		 	 rows = that.grid().grid("getDataIDs");
			 selarrrow = that.grid().grid("option","selarrrow").concat();
			 valueFirst = that.getValues()[0];
			 that.selectedRow = that.selectedRow || valueFirst;
		 if(that.options.multiple){
			 if ( that.selectedRow ) {
					// that.selectedRow 在rows中的第几个 得到下一个
					for(var i=rows.length;i>=0;i--){
						if ( that.selectedRow == rows[i] ) {
							index = (i==0? (rows.length-1) : ( i - 1 ));
							that.selectedRow = rows[ index ];
							break;
						}//下一个
					}
					if ( $.inArray( that.selectedRow, selarrrow ) == -1){//没选中的情况
						that.grid().grid("setSelection", that.selectedRow);
					} 
					// 判断当前项目(selectedRow)是否选中
					// that.selectedRow 在selarrrow中是否存在	
				} else {
					that.selectedRow = rows.length;
					that.grid().grid("setSelection",rows.length);
				}
				that._scrollTo(that.selectedRow);
		 }else{
		  //取得选中行	
			selected = that.grid().grid("option","selrow");
			if (selected) {
				//取得选中行的rowIndex
				index = that.grid().grid("getInd",selected);   
				//向上移动到第一行为止
				if (index >= 0) {
					that.grid().grid("setSelection",rows[index-2]);
				}
			} else {	
				that.grid().grid("setSelection", rows.length);	
			}
		 }
			that._scrollTo(selected);
	},
	_selectNext : function(){
		var that = this, 
			selected = null,
			index = 0,
			rows = that.grid().grid("getDataIDs");
			selarrrow = that.grid().grid("option","selarrrow").concat();
			valueFirst = that.getValues()[0];
			that.selectedRow = that.selectedRow || valueFirst;
		if ( that.options.multiple ) {		
			if ( that.selectedRow ) {
				// that.selectedRow 在rows中的第几个 得到下一个
				for(var i=0;i<rows.length;i++){
					if ( that.selectedRow == rows[i] ) {
						index = (i==rows.length-1? 0 : ( i + 1 ));
						that.selectedRow = rows[ index ];
						break;
					}//下一个
				}
				if ( $.inArray( that.selectedRow, selarrrow ) == -1){//没选中的情况
					that.grid().grid("setSelection", that.selectedRow);
				} 
				// 判断当前项目(selectedRow)是否选中
				// that.selectedRow 在selarrrow中是否存在	
			} else {
				that.selectedRow = rows[0];
				that.grid().grid("setSelection",rows[0]);
			}
			that._scrollTo(that.selectedRow);
		} else {		
			selected = that.grid().grid("option","selrow");
			//$.inArray
			if ( selected ) {
				//取得选中行的rowIndex
				index = that.grid().grid("getInd",selected);		
				//向下移动到当页最后一行为止	
				if (index < rows.length) {	
					that.grid().grid("setSelection",rows[index]);
				}
			} else {
				that.grid().grid("setSelection",rows[0]);
			}
			that._scrollTo(selected);
		}
	},
	_doEnter: function() {
		if (!this.uiCombo.panel.is(":visible")) return;
		if ( this.options.multiple ) {
			this.grid().grid("setSelection", this.selectedRow);
		} else {
			this.hidePanel();
		}
	},
	_scrollTo : function(value) {
		var panel = this.panel();
		var item = panel.find(".coral-row-ltr[id=\"" + value + "\"]");
		if (item.length){
			if (item.position().top <= 0){
				var h = panel.find(".coral-grid-rows-view").scrollTop() + item.position().top - item.outerHeight();
				panel.find(".coral-grid-rows-view").scrollTop(h);
			} else if (item.position().top + item.outerHeight() > panel.find(".coral-grid-rows-view").height()){
				var h = panel.find(".coral-grid-rows-view").scrollTop() + item.position().top + item.outerHeight() - panel.find(".coral-grid-rows-view").height();
				panel.find(".coral-grid-rows-view").scrollTop(h);
			}
		}
	}
});
})(jQuery);

/*!
 * jQuery CORALI Datepicker 4.0.1
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function( $, undefined ) {

$.extend($.coral, { datepicker: { version: "4.0.2" } });

var PROP_NAME = "coral-datepicker",
	datepicker_instActive;

/* 日历组件管理
 * 此类使用单例模式，$.datepicker用于该日历选择框的交互。
 * 日历选择组件的配置通过一个实例对象来维护，允许多个不同的配置方案在用一个页面上
 */
function Datepicker() {
	this.componentName = "datepicker";
	this.componentFullName = "coral-datepicker";
	this._curInst = null; // 当前在用的实例
	this._keyEvent = false; //  若最后一个是键盘事件
	this._disabledInputs = []; //  日历选择输入框中被禁用的
	this._datepickerShowing = false; //  日历是否为正显示，True为是
	this._inDialog = false; // 日历是否正显示为一个对话框中，True为是
	this._mainDivId = "coral-datepicker-divId"; // 日历选择组件主ID
	this._inlineClass = "coral-datepicker-inline"; // 内嵌标记类名
	this._appendClass = "coral-datepicker-append"; // 附加标记类名
	this._triggerClass = "coral-datepicker-trigger"; //  触发标记类名
	this._dialogClass = "coral-datepicker-dialog"; // 对话框标记类名
	this._disableClass = "coral-datepicker-disabled"; // 禁用标记类名
	this._unselectableClass = "coral-datepicker-unselectable"; // 为选择标记类名
	this._currentClass = "coral-datepicker-current-day"; //当前日期标记类名
	this._dayOverClass = "coral-datepicker-days-cell-over"; // 日期单元格类名
	this.regional = []; // 地域性设置，通过语言代码索引
	this.regional[""] = { // 默认地域设置
		
		//将默认英文改为中文
		closeText: '关闭',//关闭
		prevText: '上月',//上月
		nextText: '下月&#x3E;',//下月
		currentText: '今天',//今天
		// 以下两个属性，将“月”字去掉，选择框内只显示数字，“月”字写死在 select 外面，配置在 monthSuffix 属性
		monthNames: ['1','2','3','4','5','6',
		'7','8','9','10','11','12'],//月的名字
		monthNamesShort: ['1','2','3','4','5','6',
		'7','8','9','10','11','12'],//月的短名
		dayNames: ['星期日','星期一','星期二','星期三','星期四','星期五','星期六'],//日期名
		dayNamesShort: ['周日','周一','周二','周三','周四','周五','周六'],//日期短名
		dayNamesMin: ['日','一','二','三','四','五','六'],//日期单名
		weekHeader: '周',//周前缀
		dateFormat: 'yyyy-MM-dd',//日期格式
		formatOptions: {
		  ymdFormat: ["dd","MMdd","yyyyMM","yyyyMMdd"],
		  ymFormat:["yyyy","yyyyMM"],
		  yFormat:["yyyy"]
		},
		firstDay: 1,//每周第一天
		isRTL: false,//为True表示右到左语言，否则为左到右
		showMonthAfterYear: true,// 为True表示年份选择优选月份
		yearSuffix: '年',//年与月之间的分隔文字
		monthSuffix: '月' // 月文本配置
		
		
	};
	this._defaults = { //全局默认设置，针对所有日历组件实例
		showOn: "button", //  “focus” 即获得焦点后弹出
			//  “button” 按钮点击后触发，“both” 两者
		showAnim: "fadeIn", // 日历组件弹出时动画，参照jquery动画
		showOptions: {}, // 动画增强选项
		iframePanel: false,
		defaultDate: null, //  默认时间，为空则为今天
		appendText: "", // 输入框显示的文字，例如显示格式 
		buttonText: "...", // 按钮的文字
		buttonImage: "", //按钮的图片Url
		buttonImageOnly: false, // 为True则只有图片，否则将图片赋予按钮
		hideIfNoPrevNext: false, //  为True隐藏 上一个月/下一个月
			// 若为不可用，false 就只是禁用他们
		navigationAsDateFormat: false, //为True日期格式应用于  prev/today/next
		gotoCurrent: false, // 为True则today链接返回为当前选择
		changeMonth: true, //  为True则能直接选择月份，否则仅为 prev/next
		changeYear: true, // 为True则能直接选择年度，否则仅为 prev/next
		complete: true,//是否自动补全日期
		yearRange: "c-30:c+30", //  下拉框中年度范围，默认为当前年度+-10年
		showOtherMonths: true, //为True显示非本月的日期，否则为空白
		selectOtherMonths: true, // 为True允许选择非本月的日期，否则不能
		showWeek: false, // 为True显示 周 的序号
		calculateWeek: this.iso8601Week, //  如何计算年当中的周
			// 使用Date对象返回 周 的数量
		shortYearCutoff: "+10", 
		validDate: true,
		minDate: null, //最小的可选日期，为null则无限制
		maxDate: null, // 最大的可选日期，为null则无限制
		duration: "fast", // 显示、关闭的速度
		beforeShowDay: null, //  方法，使用date并返回一个数组
			// [0]=true 则为可选则的，[1]=自定义css名
			// [2]= 单元格标题，
		beforeShow: null, // 方法，在输入框中返回个性化设定的日历组件
	//	onSelect: null, // 当日期被选择后的方法回调
		onChangeMonthYear: null, // 当月份和年度发生改变时的方法回调
		onClose: null, //当日历组件被关闭时的方法回调
		numberOfMonths: 1, // 显示的月份的数量
		showCurrentAtPos: 0, // 在多月份中当前月份的位置，起始为0
		stepMonths: 1, // 跳过月份的步长
		stepBigMonths: 12, //big links中back/forward跳过月份的步长
		altField: "", //  alt键被存储的值
		altFormat: "", // alt键被存储的日期格式
		constrainInput: true, // 输入被迫按照当前日期格式
		showButtonPanel: true, //  True为显示一个button面板
		autoSize: false, // True输入时按照日期格式调整大小
		disabled: false, // 初始为禁用状态
		
		//补充。。。
		//autoFormat : false, // 是否自动格式化输入日期
		isLabel : false, // 是否输入框为标签项
		readonly : false, // 输入框是否为只读
		showClose: false,
		value : null ,//输入框值
		required : false,//是否为只读
		showStar : true,
		starBefore: false,
		errMsg: null,
		errMsgPosition: "leftBottom",
		startDateId: null,
		endDateId: null,
		onSelect : null ,
		onChange : null,
		onFormatError : null,
		onFormatWarn : null,
		//原始的dateFormat
		srcDateFormat : null,
		zIndex : null,
		name : null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
		
	};
	$.extend(this._defaults, this.regional[""]);
	this.regional.en = $.extend( true, {}, this.regional[ "" ]);
	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
	this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='coral-datepicker coral-component coral-component-content coral-helper-clearfix coral-corner-all'></div>"));
	this.iframePanel = $("<iframe class='coral-datepicker-iframePanel' style='position:absolute;height:auto;'></iframe>" )

	$( document ).off(".coral-datepicker").on("mousedown.coral-datepicker", "#"+this._mainDivId, function(e){
		if ( $(e.target).hasClass("menuTimeSel")) {
			e.stopPropagation();
			return;
		}
		$(".menuSel").hide();
		e.stopPropagation();
	});
}

$.extend(Datepicker.prototype, {
	//为元素添加类名，指出一个已配置的日历组件
	markerClassName: "hasDatepicker",

	//跟踪最大的显示行数
	maxRows: 4,

	// TODO 重命名“widget”
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/*
	 * 覆盖日历组件实例的默认设置方法。
	 * @param settings object - 新的设置
	 * @return 管理的对象
	 */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},
	// get uiDatepicker
	_componentDatepicker: function (target) {
		return $(target).parent().parent();
	},
	//初始化hidden span input元素
	_init : function(target,inst){
		var id=this._get(inst,"id"),
			name = $(target).attr("name") || this._get(inst,"name") || "",
			value=this._get(inst,"value"),
			width=this._get(inst,"width"),
			height=this._get(inst,"height"),
			cls = this._get(inst,"cls"),
			labelField = this._get(inst, "labelField"),
			showClose = this._get(inst, "showClose"),
			clearIcon = "",
			componentCls = this._get(inst,"componentCls");
		this.originalValue = value;
		if ( name ) { 
			$(target).removeAttr("name");
		}
		if (showClose) {
			clearIcon = "<span class='coral-input-clearIcon cui-icon-cross2'></span>";
		}
		var hidden=$("<input id='"+id+"_srcval' name='"+name+"' type='hidden' value='"+(value==null?"":value)+"'>");
		var span2=$("<span id='"+id+"_span2' class='coral-textbox-border coral-corner-all'>" + clearIcon + "</span>");
		var span1=$("<span id='"+id+"_span1' class='coral-textbox'></span>");
		$(target).addClass("coral-textbox-default coral-validation-datepicker");
		$(target).addClass("coral-form-element-datepicker ctrl-init ctrl-form-element ctrl-init-datepicker");

		if(height!=null){
			span1.outerHeight(height);
			$(target).outerHeight("100%");
		}
		if(width!=null){
			span1.outerWidth(width);
		}
		span1.insertAfter($(target)).addClass(componentCls);
		hidden.appendTo(span2);
		$(target).appendTo(span2).addClass(cls);
	   
		span2.appendTo(span1);
		if( inst.settings.iframePanel ){
			$.datepicker.iframePanel.appendTo("body").hide();
		};
		if (null != labelField) {
			var uiLabel = $("<label class=\"coral-label\">"+ labelField +"</label>");
			span2.before(uiLabel);
			span1.addClass("coral-hasLabel");
		}
	},
	/*
	 * 日历组件附加jquery选择器
	 * @param target element - 目标对象为 输入框或div或span
	 * @param settings object - 为日历组件实例使用新的设置
	 */
	_attachDatepicker: function(target, settings) {
		settings = settings || {};
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = (nodeName === "div" || nodeName === "span");
		
		if (!target.id) {
			if (settings.id) {
				target.id = settings.id;
			}else{
				/*this.uuid += 1;
				target.id = "dp" + this.uuid;*/
			}
			settings.id = $(target).uniqueId().attr("id");
		} else {
			if (settings.id) {
				target.id = settings.id;
			} else {
				settings.id = $(target).uniqueId().attr("id");
			}
		}
		settings.value =  $(target).val() || settings.value || "";
		inst = this._newInst($(target), inline);
		
		//解析input对象中data-options并赋值给响应的settings
		if(nodeName === "input"){
			var dataoptions=$.parser.parseOptions(target,[], ['dataCustom','formatOptions']);
			$.extend( true, settings, dataoptions );
		}
		
		if ( settings.startDateId ) {
			$( "#"+settings.startDateId ).datepicker("option", "endDateId", target.id);
		}
		settings = $.extend({}, this._defaults, $.fn["datepicker"].defaults, settings || {});		
		//如果srcDateFormat没有指定，则将dateFormat复制到srcDateFormat
		if( settings["dateFormat"] != null && 
			settings["srcDateFormat"] == null ){
			settings["srcDateFormat"] = settings["dateFormat"];
		}
		inst.settings = $.extend({}, settings || {});
		//初始化
		this._init(target,inst);
		
		if (nodeName === "input") {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
		//var form = $(target).closest("form");
		// 如果form存在，则不进行添加
		// 如果form不存在，额外的进行添加
		//if ( !form.length && !$.data( $(target)[0], "inited" )) {
		$.validate.addField( $(target), settings );
		//}
	},
	
	//创建一个新的实例对象
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
		this.dpDiv.css({display:"none"});//默认隐藏组件外框Div
		target.attr( "component-role", this.componentName );//身份识别
		return {id: id, input: target, 
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, 
			drawMonth: 0, drawYear: 0, 
			inline: inline, 
			isShow: false,
			dpDiv: (!inline ? this.dpDiv : 
			bindHover($("<div class='" + this._inlineClass + " coral-datepicker coral-datepicker-panel coral-component coral-component-content coral-helper-clearfix coral-corner-all'></div>")))};
	},
	//输入框附加日历组件
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		this._attachments(input, inst);
		input.addClass(this.markerClassName)
			.keydown(this._doKeyDown)
			.keypress(this._doKeyPress)
			.keyup(this._doKeyUp);
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
		
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		if( inst.settings.readonly ) {
			this._readonlyDatepicker( target,inst.settings.readonly);
		}
		if( inst.settings.isLabel ) {
			this._isLabelDatepicker( target,inst.settings.isLabel);
		}
		/*if( inst.settings.required && inst.settings.showStar) {
			$.validate._showRequire(input.parent().parent());
		}*/
	},
	//处理defaultDate
	_processDefaultDate : function(that,inst,defaultDate){
		if(defaultDate==""){
			inst.selectedDay = inst.currentDay = null;
			inst.selectedMonth = inst.currentMonth = null;
			inst.selectedYear = inst.currentYear = null;
			
			inst.currentHur=null;
			inst.currentMiu=null;
			inst.currentSed=null;
			inst.input.val("");
			return null;
		}
		var dateFormat=that._get(inst,"dateFormat");
		var defaultDateObj=null;
		try{
			defaultDateObj=that.parseDate(dateFormat,defaultDate,that._getFormatConfig(inst));
		}catch(e){
			//触发格式化错误事件
			that._apply(inst,"onFormatError",[defaultDate,inst]);
			that._apply(inst,"onFormatWarn",[defaultDate,inst]);
			return null;
		}
		inst.selectedDay = inst.currentDay = defaultDateObj.getDate();
		inst.selectedMonth = inst.currentMonth = defaultDateObj.getMonth();
		inst.selectedYear = inst.currentYear = defaultDateObj.getFullYear();
		
		inst.currentHur=defaultDateObj.getHours();
		inst.currentMiu=defaultDateObj.getMinutes ();
		inst.currentSed=defaultDateObj.getSeconds();
		var date=that._daylightSavingAdjustWidthTime(new Date(inst.currentYear, inst.currentMonth, inst.currentDay),[inst.currentHur,inst.currentMiu,inst.currentSed]);
		var datestr = "";
		if ( !inst.settings.value && defaultDate ) {
			inst.settings.value = defaultDate;
		}
		if ( inst.settings.value != "" ) {
			var srcDateFormat = this.getFormatter(inst.settings.value,this._get(inst,"dateFormat"), this._getFormatConfig(inst));
			datestr = this.completeFormate(srcDateFormat,dateFormat,inst);
			datestr = this.formatDate(datestr, date, this._getFormatConfig(inst));
		} 
		inst.input.val(datestr);
		return date;
	},
	//基于settings上附加内容
	_attachments: function(input, inst) {
		var that =this;
		var showOn, buttonText, buttonImage,
			appendText = this._get(inst, "appendText"),
			isRTL = this._get(inst, "isRTL");

		if (inst.append) {
			inst.append.remove();
		}
		if (appendText) {
			inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
			input[isRTL ? "before" : "after"](inst.append);
		}

		input.unbind("focus", this._showDatepicker);
		input.unbind("blur");
		input.parent().unbind("mouseleave");
		input.parent().unbind("mouseenter");
		input.unbind(".attachments");

		if (inst.trigger) {
			inst.trigger.remove();
		}
		//将defaultDate值赋值给input，并格式化为显示格式
		var defaultDate= that._get(inst, "value");
		if("" == input.parent().find("input[type='hidden']").val() && typeof defaultDate==="string" && defaultDate!=''){				
			that._processDefaultDate(that,inst,defaultDate);
			that._setHiddenInputValue(inst);//设置隐藏字段值
		} else {
			var valueDate = that._getHiddenInputValue(inst);
			that._processDefaultDate(that,inst,valueDate);
		}
		input.parent().find(".coral-input-clearIcon").unbind("click").bind("click", function(e){
			that._clearDate(inst);
		});
		showOn = this._get(inst, "showOn");
		input.focus(function(e){
			//that._inputFocus(inst);
			if (showOn === "focus" || showOn === "both") { //  在被标记的域中弹出日历组件
				that._showDatepicker(e);
			}
		});
		if (showOn === "button" || showOn === "both") {
			// 按钮点击时弹出日历组件
			buttonText = this._get(inst, "buttonText");
			inst.trigger = $("<span/>").addClass("coral-icon-calendar cui-icon-calendar4");
			
			input[isRTL ? "before" : "after"](inst.trigger);
			if(this._get(inst, "isLabel")!=true){
				input.parent().addClass("coral-datepicker-no-close");
			}
			inst.trigger.click(function(e) {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
					$.datepicker._hideDatepicker();
				} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
					$.datepicker._hideDatepicker();
					//$.datepicker._showDatepicker(input[0]);//取消重复调用
				} else {
					//$.datepicker._showDatepicker(input[0]);//取消重复调用
				}
				$.datepicker._showDatepicker(input[0]);
				return false;
			});
		}
		input.blur(function(e){
			that._inputBlur(inst,e);
		});
		//增加验证
		input.parent().mouseleave(function() {
			if ( inst.settings.readonly || inst.settings.isLabel || inst.settings.disabled ) {
				return ;
			}
			input.parent().parent().removeClass("coral-textbox-hover");
		});    
		//lihaibo add
		input.parent().mouseenter(function(){
			if ( inst.settings.readonly || inst.settings.isLabel || inst.settings.disabled ) {
				return ;
			}
			input.parent().parent().addClass("coral-textbox-hover");
		});
	/*	input.keyup(function(e){
			switch (e.keyCode) {
			case 9:
				$.datepicker._showDatepicker( e );
				break;
			}
		});*/
		input.bind("keyup.attachments", function(e){
			switch (e.keyCode) {
			case 9:
				$.datepicker._showDatepicker( e );
				break;
			}
		})
	},

	//为日期格式应用最大长度
	_autoSize: function(inst) {
		if (this._get(inst, "autoSize") && !inst.inline) {
			var findMax, max, maxI, i,
				date = new Date(2009, 12 - 1, 20), // 确定浮点位数
				dateFormat = this._get(inst, "dateFormat");

			if (dateFormat.match(/[DM]/)) {
				findMax = function(names) {
					max = 0;
					maxI = 0;
					for (i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					"monthNames" : "monthNamesShort"))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
			}
			inst.input.attr("size", this._formatDate(inst, date).length);
		}
	},
	//div中加入日历组件
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName)) {
			return;
		}
		divSpan.addClass(this.markerClassName).append(inst.dpDiv);
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//若disabled 为True，在显示前禁用日历组件
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// 设置display为block 代替 inst.dpDiv.show() 不能工作在未连接的元素
		inst.dpDiv.css( "display", "block" );
	},

	/*
	 * 在对话框中弹出日历组件
	 * @param input - 忽略的
	 * @param data string or Date - 显示的初始日期
	 * @param onSelect function - 当日期被选中是触发的回调函数
	 * @param settings object - 更新对话框中日历组件实例的设置
	 * @param pos int[2] - 等同于 对话框在屏幕中的位置
	 * 					event - x/y
	 * @return 对象 
	 */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if (!inst) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $("<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>");
			this._dialogInput.keydown(this._doKeyDown);
			$("body").append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = 
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// 移动焦点至屏幕中的输入项，之后隐藏对话框
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI) {
			$.blockUI(this.dpDiv);
		}
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},
	//将目标对象与日历组件分离
	_destroyDatepicker: function(target) {
		var nodeName,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		$(target).parent().parent().replaceWith($target);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		

		nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName === "input") {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind("blur").
				unbind("focus", this._showDatepicker).
				unbind("keydown", this._doKeyDown).
				unbind("keypress", this._doKeyPress).
				unbind("keyup", this._doKeyUp);
		} else if (nodeName === "div" || nodeName === "span") {
			$target.removeClass(this.markerClassName).empty();
		}
		$(target).val("");
		$(target).removeAttr("value");
		$target.removeAttr( "component-role" )
			   .removeClass("coral-textbox-default coral-validation-datepicker coral-form-element-datepicker ctrl-init ctrl-form-element ctrl-init-datepicker")
			   .removeAttr("data-options");
	},

	//启用日历组件到一个jquery选择器上
	_enableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		//$(target).parent().parent().css({opacity: "1"});
		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = false;
			inst.trigger.filter("button").
				each(function() { this.disabled = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
			$target.parent().parent().removeClass("coral-state-disabled");
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().removeClass("coral-state-disabled");
			inline.find("select.coral-datepicker-month, select.coral-datepicker-year").
				prop("disabled", false);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
	},

	//禁用日历组件到一个jquery选择器上
	_disableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		//$(target).parent().parent().css({opacity: "0.5"});
		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = true;
			inst.trigger.css({opacity: "0.5", cursor: "default"});
			
			$target.parent().parent().addClass("coral-state-disabled");
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().addClass("coral-state-disabled");
			inline.find("select.coral-datepicker-month, select.coral-datepicker-year").
				prop("disabled", true);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},
	/**
	 * 设置日历组件为只读
	 */
	_readonlyDatepicker: function(target,flag){
		var inline,
			$target = $(target);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		$(target).parent().parent().removeClass( "coral-isLabel" );
		$(target).parent().parent().toggleClass( "coral-readonly", flag );
		$.datepicker._readonly(target,flag);
	},
	_readonly: function(target,flag){
		var nodeName = target.nodeName.toLowerCase(),
			inst = $.data(target, PROP_NAME);
		if (nodeName === "input" && flag) {
			target.readOnly = true;
			inst.trigger.filter("button").
				each(function() { this.readOnly = true; }).end().
				filter("img").css({opacity: "0.5", cursor: "default"});
		}
		if (nodeName === "input" && !flag) {
			if($.datepicker._isIsLabelDatepicker(inst))return ;
			target.readOnly = false;
			inst.trigger.filter("button").
				each(function() { this.readOnly = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
		}
	},
	/**
	 * 日历组件是否为只读
	 */
	_isReadonlyDatepicker: function(inst) {
		if($.datepicker._get(inst,"readonly")){
			return $.datepicker._get(inst,"readonly");
		}
		return false;
	},
	
	_isIsLabelDatepicker: function(inst) {
		if($.datepicker._get(inst,"isLabel")){
			return $.datepicker._get(inst,"isLabel");
		}
		return false;
	},
	/**
	 * 设置日历组件为只读
	 */
	_isLabelDatepicker: function(target,flag){
		var inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var id=$.datepicker._get(inst,"id");
		//修改样式
		if(flag){
			$target.parent().removeClass("coral-datepicker-no-close");
			$target.parent().parent().removeClass("coral-readonly");
			$target.parent().parent().addClass("coral-isLabel");
		}else{
			$target.parent().parent().removeClass("coral-isLabel coral-readonly");
			$target.parent().addClass("coral-datepicker-no-close");
		}
		//设置为只读 标签
		$.datepicker._set(inst,"readonly",flag);
		$.datepicker._set(inst,"isLabel",flag);
		$.datepicker._readonly(target,flag);
	},
	
	/*
	 * 是否第一个jquery组件禁用的日历组件
	 * @param target element - 输入框  或 div 或 span
	 * @return boolean - true 为禁用的，false 为启用的
	 */	
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] === target) {
				return true;
			}
		}
		return false;
	},

	/*
	 * 从目标对象中得到日历组件的实例
	 * @param target element - 输入框  或 div 或 span
	 * @return object - 关联的实例对象
	 * @throws 获得实例对象报错
	 */
	_getInst: function(target) {
		try {
			if('object' === target.nodeName.toLowerCase()){
				return false;
			}

			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw "Missing instance data for this datepicker";
		}
	},

	/**
	 * 用于更新option参数时赋值的方法
	 * @param target element - 目标对象
	 * @param key object - 新的设置对象
	 * 			   string - 设置的key
	 * @param value any - 新的value
	 */
	_optionDatepicker: function(target, key, value) {
		var that = this;
		var settings, date, minDate, maxDate,
			inst = this._getInst(target);

		if (arguments.length === 2 && typeof key === "string") {
			return (key === "defaults" ? $.extend({}, $.datepicker._defaults) :
				(inst ? (key === "all" ? $.extend({}, inst.settings) :
				this._get(inst, key)) : null));
		}
		if (arguments.length === 1 ) {
			return inst ? $.extend({}, inst.settings) : null;
		}
		settings = key || {};
		if (typeof key === "string") {
			settings = {};
			settings[key] = value;
		}

		if (inst) {
			if (this._curInst === inst) {
				this._hideDatepicker();
			}

			date=this._getDateDatepicker(target, true);
			minDate = this._getMinMaxDate(inst, "min");
			maxDate = this._getMinMaxDate(inst, "max");
			extendRemove(inst.settings, settings);
			if( key=="value" ){
				date = that._processDefaultDate(that,inst, value);
				//设置隐藏字段值
			}
			if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
				inst.settings.minDate = this._formatDate(inst, minDate);
			}
			if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			}
			
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker(target);
				} else {
					this._enableDatepicker(target);
				}
			}
			if ( "readonly" in settings ) {
				this._readonlyDatepicker(target,settings.readonly);
			}
			if ( "isLabel" in settings ) {
				this._isLabelDatepicker(target,settings.isLabel);
			}
			if ( "showAnim" in settings ) {
				//下拉显示的时候无需进行下面的初始化操作
				return;
			}
			if ( key === "startDateId" ) {
				$( "#"+value ).datepicker( "option", "endDateId", this._get( inst, "id" ) );
			}
			
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			if ( inst.isShow ) {
				this._updateDatepicker(inst);
			}
			this._updateAlternate(inst);
			this._setHiddenInputValue(inst);
			/*//防止日期框意外显示
			if($.datepicker._datepickerShowing===false){
				inst.dpDiv.css({display:"none"});
			}*/
			$(target).trigger( "onOptionChange", {key: key, value: settings[ key ]} );
		}
	},
	_validDatepicker: function( target ){
		var data = {
			hasTips: false,
			element: $(target)
		};
		return ( $.validate.validateField( null, data ).length > 0 ? false : true );
	},
	//发生变化的方法
	_changeDatepicker: function(target, key, value) {
		this._optionDatepicker(target, key, value);
	},
	/**
	 * 日历组件的刷新方法
	 */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},
	_resetDatepicker: function(target){
		$(target).datepicker("option", "value", this.originalValue);
	},
	/**
	 * 设置日历组件的日期
	 */
	_setValueDatepicker: function(target, value) {
		$(target).datepicker("option", "value", value)
	},
	
	/**
	 * 取得日历组件的日期
	 */
	_getValueDatepicker: function(target, noDefault) {
		return $(target).datepicker("option", "value");
	},
	/**
	 * 设置日历组件的日期
	 */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			//var tmpDateFormat=this._get(inst,"dateFormat");
		//	this._set(inst,"dateFormat",editFormat);
			this._setDate(inst, date);
			//this._set(inst,"dateFormat",tmpDateFormat);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
			//设置隐藏字段值
			this._setHiddenInputValue(inst);
		}
	},
	
	/**
	 * 取得日历组件的日期
	 */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline) {
			this._setDateFromField(inst, noDefault);
		}
		return (inst ? this._getDate(inst) : null);
	},
	/**
	 * 取得日历组件的显示值
	 */
	_getDateValueDatepicker: function(target) {
		var inst = this._getInst(target);
		//if( !inst.currentYear ) return "";
		return this._getHiddenInputValue(inst);
		/*var str=this._formatDate(inst);
		return str;*/
	},

	//执行keydown事件
	_doKeyDown: function(event) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst(event.target),
			handled = true,
			isRTL = inst.dpDiv.is(".coral-datepicker-rtl");
		var oldValue = $.datepicker._getHiddenInputValue(inst);
		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing) {
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; //  屏蔽Tab
				case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv);
						if (sel[0]) {
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						}

						onSelect = $.datepicker._get(inst, "onSelect");
						if (onSelect) {
							dateStr = $.datepicker._formatDate(inst);
							// 触发回调
							//onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
						} else {
							$.datepicker._hideDatepicker();
						}
						return false; // form中不提交
				case 27: $.datepicker._hideDatepicker();
						break; // 屏蔽 escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, "stepBigMonths") :
							-$.datepicker._get(inst, "stepMonths")), "M");
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, "stepBigMonths") :
							+$.datepicker._get(inst, "stepMonths")), "M");
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) {
							$.datepicker._clearDate(inst);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) {
							$.datepicker._gotoToday(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, -7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, +7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if (event.keyCode === 36 && event.ctrlKey) { // 显示日历 date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		} else {
			// 对输入框的keyDown事件
			handled = false;
			switch (event.keyCode) {
			case 9:
			case 13: 
				$.datepicker._setHiddenInputValue(inst);
				datestr = $.datepicker._getHiddenInputValue(inst);
				$.datepicker._change(inst, oldValue, datestr);
				break; 
			}
		}
		// added by mengshuai begin onKeydown
		$.datepicker._trigger(inst, "onKeyDown", event, [ { "oldValue": oldValue, "value": inst.input.val() } ]);
		// added by mengshuai end
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},
	_change: function(inst, oldValue, value, event){
		if ( oldValue != value ) {
			this._trigger(inst, "onChange", event, [ { "oldValue": oldValue,"newValue": value,"value": value } ]);
		}
	},

	//执行keypress事件
	_doKeyPress: function(event) {
		/*var chars, chr,
			inst = $.datepicker._getInst(event.target);

		if ($.datepicker._get(inst, "constrainInput")) {
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
		}*/
	},

	//执行keyup事件
	_doKeyUp: function(event) {
		var date,
			inst = $.datepicker._getInst(event.target);
		var oldValue = $.datepicker._getHiddenInputValue(inst);
		if (inst.input.val() !== inst.lastVal) {
			try {
				//支持通过键盘删除日期操作
				if(inst.input.val()==""){
					inst.selectedDay = null;
					inst.drawMonth = inst.selectedMonth = null;
					inst.drawYear = inst.selectedYear = null;
					inst.currentDay = null;
					inst.currentMonth = null;
					inst.currentYear = null;
					inst.currentHur = null;
					inst.currentMiu = null;
					inst.currentSed = null;
					
				}
				
				date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));
				// 标识是用户在键盘输入的编辑状态
				inst.input.addClass("isEdit");
					

				if (date && $.datepicker._checkDateRange(inst,date)===0) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					//$.datepicker._updateDatepicker(inst);
				}
				//触发修改事件
				var dateStr=inst.input.val();
			//	$.datepicker._trigger(inst, "onChange", event, [ { "oldValue": oldValue, "newValue": datestr,"value": datestr } ]);
			//	$.datepicker._apply(inst,"onChange",[dateStr,inst]);
			//	this._apply( inst,"onChange",[ { "oldValue": oldValue, "newValue": datestr,"value": datestr } ] );
				//设置隐藏字段值
			//	$.datepicker._setHiddenInputValue(inst);
			}catch (err) {
				//触发格式化错误事件
				var dateStr=inst.input.val();
				$.datepicker._apply(inst,"onFormatError",[dateStr,inst]);
				$.datepicker._apply(inst,"onFormatWarn",[dateStr,inst]);
			}
			$.datepicker._trigger(inst, "onKeyUp", event, [ { "oldValue": oldValue, "value": inst.input.val() } ]);
		}
		return true;
	},
	/**
	 * 重定义_trigger
	 */
	_trigger: function( inst, type, event, data ) {
		var prop, orig, rData = {};

		data = data || {};
		event = $.Event( event );
		event.type = ("datepicker" + type ).toLowerCase();
		event.target =  inst.input[0];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		$(event.target).trigger( event, data );
		var callback = $.datepicker._get(inst, type);
		var dataCustom = $.datepicker._get(inst, "dataCustom");
		var fn = $.coral.toFunction(callback);
		event.data = event.data || {};
		// TODO: dataCustom// 
		$.extend(event.data, dataCustom);
		return !( $.isFunction(fn) && fn.apply( (inst.input ? inst.input[0] : null), [ event ].concat( data ) ) === false || event.isDefaultPrevented() );
	},
	/**
	 * 检查日期时间是否在最大最小日期范围内
	 * @return 0在minDate和maxDate之间  1大于maxDate 2小于minDate 
	 */
	_checkDateRange : function(inst,date){
		var minDate = this._getMinMaxDate(inst, "min");
		var maxDate = this._getMinMaxDate(inst, "max");
		if(maxDate!=null && date>maxDate){
			return 1;
		}
		if(minDate!=null && date<minDate){
			return 2;
		}
		return 0; 
	},
	//获取srcDateFormat的分隔符是什么
	_srcDateFormatSeparator : function(srcDateFormat){
		var separator = "/";
		if(srcDateFormat.indexOf("/")>-1){
			return separator;
		}
		if(srcDateFormat.indexOf("-")>-1){
			separator = "-";
			return separator;
		}
	},
	/**
	 * 设置隐藏input字段值,getValue()取值的时候，若complete==false,只能根据显示值的格式来显示，但是分隔符可以根据隐藏值的格式显示，
	 * 例如：显示值为2015-12，隐藏值srcDateFormat=“yyyy/MM/dd”，则getValue()取到的值为2015/12
	 */
	_setHiddenInputValue :function(inst) {
		// 修改赋值bug 20150129
		if (inst.input.val() == "") {
			inst.input.parent().find("input[type='hidden']").val("");
			return ;
		}
		var dateFormat=this._get(inst,"dateFormat");
		var srcDateFormat = srcDateFormat || this._get(inst,"srcDateFormat");//this._get(inst,"srcDateFormat");
		var separator = this._srcDateFormatSeparator(srcDateFormat);
		if(inst.currentYear==null || inst.currentMonth==null){
			inst.input.parent().find("input[type='hidden']").val("");
			return ;
		}
		var date=this._daylightSavingAdjustWidthTime(new Date(inst.currentYear, inst.currentMonth, inst.currentDay),[inst.currentHur,inst.currentMiu,inst.currentSed]);
		var format = this.getFormatter(inst.input.val(),this._get(inst,"dateFormat"), this._getFormatConfig(inst));
			datestr = this.completeFormate(format,dateFormat,inst);
		if(this._get(inst,"complete")){
			var dateStr=this.formatDate(srcDateFormat, date, this._getFormatConfig(inst));
		}else {
			//getValue()的时候如果配置的srcDateFormat有分隔符，按照下面的处理，取到值的分隔符按照srcDateFormat的分隔符显示
			if(srcDateFormat.indexOf("-")>-1 ||srcDateFormat.indexOf("/")>-1 ){
				datestr = (datestr.indexOf("y")>-1 && datestr.indexOf("M")>-1 && datestr.indexOf("d")>-1)?srcDateFormat:datestr; 
				var dateStr = this.formatDate(datestr, date, this._getFormatConfig(inst));
				if(dateStr.indexOf("-") > -1){
					var dateStr = dateStr.indexOf(separator) ==-1 ? dateStr.replace(/-/gm,separator):dateStr;
				}else if(dateStr.indexOf("/") > -1){
					var dateStr = dateStr.indexOf(separator) ==-1 ? dateStr.replace(/\//gm,separator):dateStr;
				}
			}else{
				//如果srcDateFormat没有分隔符，例如srcDateFormat=“yyyyMMdd”,按如下处理
				datestr = datestr.indexOf("-")>-1?datestr.replace(/-/gm,""):datestr.replace(/\//gm,"");
				if(datestr.indexOf("y")>-1){
					if(datestr.indexOf("d")==-1 && datestr.indexOf("y")>-1 && datestr.indexOf("M")>-1){
						srcDateFormat = (srcDateFormat.split(" "))[0];
						datestr = srcDateFormat.replace(/d/gm,"");
					}
					if(datestr.indexOf("y")>-1 && datestr.indexOf("M")>-1 && datestr.indexOf("d")>-1){
						datestr = srcDateFormat;
					}else{
						datestr = datestr;
					}
				}
				var dateStr=this.formatDate(datestr, date, this._getFormatConfig(inst));
			}
		}
		inst.input.parent().find("input[type='hidden']").val(dateStr);
	},
	/**
	 * 取得隐藏字段值
	 */
	_getHiddenInputValue:function(inst){
		var id=this._get(inst,"id");
		return inst.input.parent().find("input[type='hidden']").val();
	},
	//根据dateFormat构件editFormat
	_createEditFormat : function(dateFormat){
		var editFormat="";
		if(dateFormat!=null){
			if(this._isYearMonthMode(dateFormat)){
				editFormat+="yyyy-MM";
			}else if(this._isYearMode(dateFormat)){
				editFormat+="yyyy";
			}else{
				editFormat+="yyyy-MM-dd";
			}
			if(this._hasTime(dateFormat)){
				editFormat+=" HH:mm:ss";
			}
		}
		return editFormat;
	},
	//如果complete为true，返回dateFormat即自动补全；若complete为false,根据配置的格式来显示
	completeFormate : function(dateshow,dateFormat,inst){
		var str1,str2,mark = null;
		var dateformat = dateFormat.indexOf("H")>-1?(dateFormat.split(" "))[0]:dateFormat;
		if(this._get(inst,"complete")){
			return dateFormat;
		}else{
			//若dateformat不含“dd”,则只需根据dateFormat的格式来显示
			if(dateformat.indexOf("d") == -1){
				if(dateformat.indexOf("d") == -1 && dateshow.indexOf("M") == -1){
					return dateshow;
				}
				return dateformat;
			}
			//若dateFormat中有“dd”,则根据配置的模式显示，但是样式要和dateFormat的样式一样
			if(dateformat.indexOf("d") > -1){
				var posYear = dateformat.indexOf("y"),
				 	posDay =  dateformat.indexOf("d"),
				 	substr1 = dateformat.substr(posDay + 2,dateformat.length),
					substr2 = dateformat.substr(0,posDay-1),
					substr3 = dateformat.substr(0,posDay + 2);
				//如果dateshow只有两位,即dd,则直接返回dateshow
				if(dateshow.length == 2){
					return dateshow;
				}
				//如果dateshow为yyyyMMdd,则返回dateFormat的格式
				if(dateshow.indexOf("y") > -1 && dateshow.indexOf("d") > -1 && dateshow.indexOf("M") > -1){
					return dateFormat;
				}
				//如果dateshow不含dd,比如“yyyyMM”,根据dateFormat格式返回
				if(dateshow.indexOf("d") == -1){
					if(dateshow.indexOf("M") == -1){
						return dateshow;
					}
					if( posDay == 0){
						datestr = substr1;
					}
					if(posDay == 8){
						datestr = substr2;
					}
					if(posDay == 3){
						datestr = substr2 + substr1;
					}
				}else if(dateshow.indexOf("y") == -1){
					if( posYear == 0){
						datestr = dateformat.substr(posYear + 5,5);
					}
					if(posYear == 6){
						datestr = dateformat.substr(0,posYear-1);
					}
				}
			}
			return datestr;
		}
	},
	//输入框获得焦点的时候将显示格式换成编辑格式
	_inputFocus : function(inst){
		/*var dateFormat=this._get(inst,"dateFormat");
		
		if($.datepicker._isReadonlyDatepicker(inst) || $.datepicker._isIsLabelDatepicker(inst)){
			return ;
		}
		$.datepicker._componentDatepicker(inst.input).addClass( "coral-state-focus" );
		var datestr = "";
		//TODO: 是否需要删除赋值
		// 修改赋值bug 20150129
		var date=this._daylightSavingAdjustWidthTime(new Date(inst.currentYear, inst.currentMonth, inst.currentDay),[inst.currentHur,inst.currentMiu,inst.currentSed]);
		if ( inst.currentYear && inst.input.val() !== "") {
			var srcDateFormat = this.getFormatter(inst.input.val(),this._get(inst,"dateFormat"), this._getFormatConfig(inst));
			var datestr = this.completeFormate(srcDateFormat,dateFormat,inst);
			datestr = this.formatDate(datestr, date, this._getFormatConfig(inst));
		}
		inst.input.val(datestr);*/
		//$("#dateinput2").val("dateFormat="+this._get(inst,"dateFormat"));
	},
	//失去焦点的时候将编辑格式换成显示格式
	_inputBlur : function(inst,e){
		$.datepicker._componentDatepicker(inst.input).removeClass( "coral-state-focus" );
		var dateFormat=this._get(inst,"dateFormat");
		if($.datepicker._isReadonlyDatepicker(inst) || $.datepicker._isIsLabelDatepicker(inst)){
			return ;
		}
		var oldValue = this._getHiddenInputValue(inst);
		var datestr = "";
		var date=this._daylightSavingAdjustWidthTime(new Date(inst.currentYear, inst.currentMonth, inst.currentDay),[inst.currentHur,inst.currentMiu,inst.currentSed]);
		// 日期面板不显示的时候才触发onBlur事件和onChange事件；
		// 日期面板显示的时候，onChange事件交给面板上面的事件去处理；
		if ( (typeof inst.currentYear != "undefined" || inst.currentYear != null) && !inst.isShow ) {
			var srcDateFormat = this.getFormatter(inst.input.val(),this._get(inst,"dateFormat"), this._getFormatConfig(inst));
			// 修改赋值bug 20150129
			if ( "" != inst.input.val() ) {
				datestr = this.completeFormate(srcDateFormat,dateFormat,inst);
				datestr = this.formatDate(datestr, date, this._getFormatConfig(inst));
			} 
			inst.input.val(datestr);
			this._setHiddenInputValue(inst);
			//var value = this._getHiddenInputValue(inst);
			//设置隐藏字段值
			if( datestr !== oldValue ) {
				var startDateId = this._get(inst, "startDateId");
				var endDateId = this._get(inst, "endDateId");
				if ( startDateId ) {
					$( "#"+startDateId ).datepicker("option", "maxDate", datestr);
				}
				if ( endDateId ) {
					$( "#"+endDateId ).datepicker("option", "minDate", datestr);
				}
			}
			$.datepicker._change(inst, oldValue, datestr, null);
			this._trigger(inst, "onBlur", e, [ { "value": datestr } ]);
		}
	},
	/**
	 * 获取焦点方法
	 */
	_focusDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input || $.datepicker._isReadonlyDatepicker($.datepicker._getInst(input)) || $.datepicker._isIsLabelDatepicker($.datepicker._getInst(input))) { // already here
			return false;
		}

		var inst = $.datepicker._getInst(input);
		inst.input.focus();
		return true;
	},
	//在给定的输入字段上弹出日历组件
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ( $.datepicker._isDisabledDatepicker(input) || 
				$.datepicker._lastInput === input || 
				$.datepicker._isReadonlyDatepicker( $.datepicker._getInst( input ) ) || 
				$.datepicker._isIsLabelDatepicker( $.datepicker._getInst( input ) ) ) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst(input);
		
		if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
			$.datepicker._curInst.dpDiv.stop( true, true );
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}

		beforeShow = $.datepicker._get(inst, "beforeShow");
		beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
			return;
		}
		extendRemove(inst.settings, beforeShowSettings);

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);

		if ( $.datepicker._inDialog ) { // 隐藏 cursor
			input.value = "";
		}
		if ( !$.datepicker._pos ) { // 
			$.datepicker._pos = $.datepicker._findPos( input );
			$.datepicker._pos[1] += input.offsetHeight; // 增加高度
		}
		isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css("position") === "fixed";
			return !isFixed;
		});

		offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;

		inst.dpDiv.empty();
		
		inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
		this.iframePanel.css({position: "absolute", display: "block", top: "-1000px"});
		$.datepicker._updateDatepicker(inst);
		
		var panel = $(inst.dpDiv),
	        ifPanel = this.iframePanel, 
            width = panel.width(),
	        height = panel.height();
	    
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px"});
		this.iframePanel.css({position: ($.datepicker._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px", width:width, height:height});
		if ( !inst.isShow ) {
			inst.isShow = true;
			if (!inst.inline) {
				showAnim = $.datepicker._get(inst, "showAnim");
				duration = $.datepicker._get(inst, "duration");
				if(this._get(inst,"zIndex")!=null){
					inst.dpDiv.zIndex(this._get(inst,"zIndex")+1);
					this.iframePanel.zIndex(this._get(inst,"zIndex"));
				}
				//inst.dpDiv.zIndex($(input).zIndex()+1);
				$.datepicker._datepickerShowing = true;
	
				if ( $.effects && $.effects.effect[ showAnim ] ) {
					inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
				} else {
					inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
				}
				this.iframePanel.show(showAnim);   
				if ( $.datepicker._shouldFocusInput( inst ) ) {
					inst.input.focus();
				}
	
				$.datepicker._curInst = inst;
			}
			
			(function move () {
				var datepickerComponent = $(input).parent().parent();
				    
				
				if (inst.isShow) {
					panel.css({
						left : $.coral.getLeft( panel, datepickerComponent ),
						top  : $.coral.getTop( panel, datepickerComponent )
					});
					ifPanel.css({
						left : $.coral.getLeft( panel, datepickerComponent ),
						top  : $.coral.getTop( panel, datepickerComponent )
					});
					setTimeout(move, 200);
				}
			})();
		}
		inst.dpDiv.find( "#dpTimeSpinner" ).spinner( "setValue", inst.dpDiv.find("#dpTimeHour").val() );
	},
	_updateDateTime: function(inst){
		var that = this,hur,min,sed;
		var minDate = this._getMinMaxDate(inst, "min");
		var maxDate = this._getMinMaxDate(inst, "max");
		var minDay = new Date(minDate);
			maxDay = new Date(maxDate);
		var compDate = new Date(inst.selectedYear,inst.selectedMonth,inst.selectedDay),
			compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate()),
			compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
		inst.dpDiv.find( "#dpTimeSpinner" ).spinner({
			max: 24,
			min: 0,
			step: 1,
			componentCls: "dptimespinner",
			onSpin: function( e, ui ){
				var value = $(this).spinner( "getValue" );
				if ( $.datepicker.focusInput == "dpTimeHour" ) {
						inst.dpDiv.find("#dpTimeHour").val(ui.value);
						hur = inst.dpDiv.find("#dpTimeHour").val();
					if(new Date(compDate).getTime() == new Date(compMin).getTime() &&(minDate && hur < minDay.getHours())|| (maxDate && hur > maxDay.getHours())){
						inst.dpDiv.find("#dpTimeHour").val(value);
						return false;
					}
				}
				if ( $.datepicker.focusInput == "dpTimeMinute" ) {
						inst.dpDiv.find("#dpTimeMinute").val(ui.value);
						var min = inst.dpDiv.find("#dpTimeMinute").val();
						var hour = inst.dpDiv.find("#dpTimeHour").val();
					if(new Date(compDate).getTime() == new Date(compMin).getTime() && (minDate && min < minDay.getMinutes() && hour <= minDay.getHours())|| (maxDate && min >= maxDay.getMinutes() && hour >= maxDay.getHours())){
						inst.dpDiv.find("#dpTimeMinute").val(value);
						return false;
					}
				}
				if ( $.datepicker.focusInput == "dpTimeSecond" ) {
						inst.dpDiv.find("#dpTimeSecond").val(ui.value);
						sed = inst.dpDiv.find("#dpTimeSecond").val();
						var hour = inst.dpDiv.find("#dpTimeHour").val(),
							miu = inst.dpDiv.find("#dpTimeMinute").val();
					if(new Date(compDate).getTime() == new Date(compMin).getTime() &&(minDate && sed < minDay.getSeconds() && hour <= minDay.getHours() && miu <= minDay.getMinutes())|| (maxDate && sed > maxDay.getSeconds()&& hour >= maxDay.getHours()&& miu >= maxDay.getMinutes())){
						inst.dpDiv.find("#dpTimeSecond").val(value);
						return false;
					}
				}
			}
		});
		inst.dpDiv.find( "#dpTimeSpinner" ).spinner( "setValue", inst.dpDiv.find("#dpTimeHour").val() );
	},
	// 更新日历组件
	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		datepicker_instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		
		this._updateDateTime(inst);
		this._attachHandlers(inst);
		this._attachTimeHandlers(inst);
		
		var origyearshtml,
			numMonths = this._getNumberOfMonths(inst),
			cols = numMonths[1],
			width = 17,
			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

		if ( activeCell.length > 0 ) {
			datepicker_handleMouseover.apply( activeCell.get( 0 ) );
		}
		
		inst.dpDiv.removeClass("coral-datepicker-multi-2 coral-datepicker-multi-3 coral-datepicker-multi-4").width("");
		if (cols > 1) {
			inst.dpDiv.addClass("coral-datepicker-multi-" + cols).css("width", (width * cols) + "em");
		}
		inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
			"Class"]("coral-datepicker-multi");
		inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
			"Class"]("coral-datepicker-rtl");

		if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			//inst.input.focus();
		}		
		// 
		if( inst.yearshtml ){
			origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find("select.coral-datepicker-year:first").replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* 检查屏幕中剩余位置 */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* 发现指定对象在屏幕中的位置. */
	_findPos: function(obj) {
		var position,
			inst = this._getInst(obj),
			isRTL = this._get(inst, "isRTL");

		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];
		}

		position = $(obj).offset();
		return [position.left, position.top];
	},

	//隐藏日历组件
	_hideDatepicker: function(input) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;
		if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
			return;
		}
		inst.isShow = false;
		if (this._datepickerShowing) {
			showAnim = this._get(inst, "showAnim");
			duration = this._get(inst, "duration");
			postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};

			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
			} else {
				inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
			}
            this.iframePanel.hide();
            
			if (!showAnim) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get(inst, "onClose");
			if (onClose) {
				onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
			}

			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
				if ($.blockUI) {
					$.unblockUI();
					$("body").append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},


	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind(".coral-datepicker-calendar");
	},


	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst) {
			return;
		}

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);
		if (event.isDefaultPrevented()) {return};
		if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
				$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.closest("." + $.datepicker._triggerClass).length &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	//调整日期字段
	_adjustDate: function(id, offset, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		if (this._isDisabledDatepicker(target[0]) || $.datepicker._isReadonlyDatepicker(inst) || $.datepicker._isIsLabelDatepicker(inst)) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), 
			period);
		this._updateDatepicker(inst);
	},

	//响应gotoToday
	_gotoToday: function(id) {
		var that = this,
			date,
			target = $(id),
			inst = this._getInst(target[0]);
		var hasTime = this._hasTime(this._get(inst,"dateFormat"));
		if (this._get(inst, "gotoCurrent") && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			if ( !hasTime ) {
				date.setHours(0, 0, 0, 0);
			}
			if(that._checkDateRange(inst,date)===1){
				return;
			}else if(that._checkDateRange(inst,date)===2){
				return;
			}
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			inst.currentHur = date.getHours();
			inst.currentMiu = date.getMinutes();
			inst.currentSed = date.getSeconds();
			
		}
		this._notifyChange(inst);
		this._adjustDate(target);
		// 如果没有时间格式，点击“今天”按钮， 则默认选中今天的日期
		
		if (!hasTime) {
			var $targetToday = inst.dpDiv.children("table").find(".coral-datepicker-today");
			this._selectDay(id, +$targetToday.attr("data-month"), +$targetToday.attr("data-year"), $targetToday[0]);
		}else{
			this._selectDateTime(inst);
		}
		this._updateDateTime(inst);
	},

	//响应年月选择

	_selectMonthYear: function(id, select, period, change) {
		var target = $(id),
			inst = this._getInst(target[0]);
		var isYearMonth=this._isYearMonthMode(this._get(inst,"dateFormat"));
		var isYear = this._isYearMode(this._get(inst,"dateFormat"));
		//inst["selected" + (period === "M" ? "Month" : "Year")] =		
		if(isYearMonth===true){
			inst["draw" + (period === "M" ? "Month" : "Year")]=
			parseInt(period === "M" ? $(select).attr("data-month"): select.options[select.selectedIndex].value,10);
		}else if(isYear===true){
			inst["drawYear"]=
				parseInt(period === "Y" ? $(select).attr("data-year"): select.options[select.selectedIndex].value,10);
		}else{
			inst["draw" + (period === "M" ? "Month" : "Year")]=
			parseInt(select.options[select.selectedIndex].value,10);
		}
		inst["selected" + (period === "M" ? "Month" : "Year")]=
		inst["draw" + (period === "M" ? "Month" : "Year")];
			
		var oldValue = this._getHiddenInputValue(inst);
		if(isYearMonth===true && period === "M"){
			this._setMonthYearValue(this,inst);
		}
		if(isYear === true){
			this._setMonthYearValue(this,inst);
			//change = false;
		}
		var value = this._getHiddenInputValue(inst);
		this._notifyChange(inst);
		if(change){
			$.datepicker._change(inst, oldValue, value, null);
		}
		this._adjustDate(target);
	},
	//针对年月模式时的值处理
	_setMonthYearValue : function($this,inst){
		var dateFormat=$this._get(inst,"dateFormat");
		if($this._isYearMonthMode(dateFormat)){
			inst.currentYear=inst.selectedYear;
			inst.currentMonth=inst.selectedMonth;
			inst.currentDay=inst.selectedDay=1;
		}
		if($this._isYearMode(dateFormat)){
			inst.currentYear=inst.selectedYear;
			inst.currentMonth=inst.selectedMonth=1;
			inst.currentDay=inst.selectedDay=1;
		}
		var dateStr = $this._formatDate(inst);
		if (inst.input) {
			inst.input.val(dateStr);
		}
		//设置隐藏字段值
		$this._setHiddenInputValue(inst);
	},

	// 选择的天更新到输入域中
	_selectDay: function(id, month, year, td) {
		var inst,minDate,maxDate
			target = $(id);

		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0]) || $.datepicker._isReadonlyDatepicker($.datepicker._getInst(target[0])) || $.datepicker._isIsLabelDatepicker($.datepicker._getInst(target[0]))) {
			return;
		}
		inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $("a", td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;	
		dateFormat = this._get(inst,"dateFormat");
		//验证时间是否超范围
		this._autoFixInput(this,inst);
		//加入时间字段
		var hur=inst.dpDiv.find("#dpTimeHour").val();
		var miu=inst.dpDiv.find("#dpTimeMinute").val();
		var sed=inst.dpDiv.find("#dpTimeSecond").val();
		inst.currentHur=hur;
		inst.currentMiu=miu;
		inst.currentSed=sed;
		
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
		//日期选中时增加样式
		$(td).parent().parent().find("a").removeClass("coral-state-active");	
		$(td).children("a").addClass("coral-state-active");
		this._updateDatepicker(inst);
	},
	//清楚日期
	_clearDate: function(inst) {
		this._setDate(inst, "");
	},
	_clearErrorDatepicker:function(target){
		$(".coral-validate-state-error").remove();
		$(".coral-errorIcon").remove();
		$(".coral-validate-error").removeClass("coral-validate-error");
		$(target).prop("isError", false);
	},
	// 选择的日期更新到输入域中
	_selectDate: function(id, dateStr) {
		var onSelect,
			target = $(id),
			inst = this._getInst(target[0]);

		//取得日期时间格式，查看是否含有时间
		var dateFormat=this._get(inst, "dateFormat");
		
		var hasTime = this._hasTime(dateFormat);
		
		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input) {
			if(!hasTime){
				inst.input.val(dateStr);
			}
		}
		this._updateAlternate(inst);
		//不触发修改时间
		/* else if (inst.input && !hasTime) {
			inst.input.trigger("change"); // fire the change event
		}*/
		if (inst.inline){
			this._updateDatepicker(inst);
		} else {
			if(!hasTime){
				this._hideDatepicker();
				this._lastInput = inst.input[0];
				if (typeof(inst.input[0]) !== "object") {
					inst.input.focus(); // restore focus
				}
				this._lastInput = null;
				
				var oldValue = this._getHiddenInputValue(inst);
				//设置隐藏字段值
				this._setHiddenInputValue(inst);
				
				var datestr=this._getHiddenInputValue(inst);
				if( datestr !== oldValue ) {
					var startDateId = this._get(inst, "startDateId");
					var endDateId = this._get(inst, "endDateId");
					if ( startDateId ) {
						$( "#"+startDateId ).datepicker("option", "maxDate", datestr);
					}
					if ( endDateId ) {
						$( "#"+endDateId ).datepicker("option", "minDate", datestr);
					}
					$.datepicker._change(inst, oldValue, datestr, null);
				}
				
			}else{
				
			}
		}
		/*var oldValue = this._getHiddenInputValue(inst);
		//设置隐藏字段值
		this._setHiddenInputValue(inst);
		
		var datestr=this._getHiddenInputValue(inst);
		if( datestr !== oldValue ) {
			//
			this._trigger( inst, "onChange", null, [ { "oldValue": oldValue, "newValue": datestr } ]);
			this._apply( inst,"onChange",[ { "oldValue": oldValue, "newValue": datestr } ] );
		}*/
		//触发日期选择时间
		this._trigger( inst, "onSelect", null, [ { "oldValue": oldValue, "newValue": datestr } ]);
	},
	
	/**********************************时间处理start*********************************/
	//增加时间按钮事件及输入框验证处理
	_attachTimeHandlers :function(inst){
		var that = this,datestr="";
		var oldValue = this._getHiddenInputValue(inst);
			$.datepicker._setHiddenInputValue(inst);
		var	datestr = $.datepicker._getHiddenInputValue(inst);
		// 对时间边栏的处理，点击确定按钮后触发时间选择
		inst.dpDiv.find("#dpTimeEnsure").bind('mousedown',function(e){
			that._autoFixInput(that,inst);
			$.datepicker._selectDateTime(inst);
			//e.stopPropagation();
			e.preventDefault();
			$.datepicker._change(inst, oldValue, datestr);
		});
		this._verifyInput(inst,inst.dpDiv.find("#dpTimeHour"),"H");
		this._verifyInput(inst,inst.dpDiv.find("#dpTimeMinute"),"m");
		this._verifyInput(inst,inst.dpDiv.find("#dpTimeSecond"),"s");
	},
	//自动更正时间范围
	_autoFixInput : function (that,inst){
		var min = 0;
		var minDate = that._getMinMaxDate(inst, "min");
		var maxDate = that._getMinMaxDate(inst, "max");
		var hur=inst.dpDiv.find("#dpTimeHour").val();
		var miu=inst.dpDiv.find("#dpTimeMinute").val();
		var sed=inst.dpDiv.find("#dpTimeSecond").val();
		//如果时间的输入框输入的不是数字，那么返回上一个日期
		hur = hur.replace(/[^0-9]/g,'');
		if(hur=='')  hur = inst.currentHur;
		miu = miu.replace(/[^0-9]/g,'');
		if(miu=='')  miu = inst.currentMiu;
		sed = sed.replace(/[^0-9]/g,'');
		if(sed=='')  sed = inst.currentSed;
		var date=new Date(inst.currentYear,inst.currentMonth,inst.currentDay,hur,miu,sed);
		var tmpDate=date;
		if(that._checkDateRange(inst,date)===1){
			tmpDate=maxDate;
		}else if(that._checkDateRange(inst,date)===2){
			tmpDate=minDate;
		}
		inst.dpDiv.find("#dpTimeHour").val(tmpDate.getHours()||"00");
		inst.dpDiv.find("#dpTimeMinute").val(tmpDate.getMinutes()||"00");
		inst.dpDiv.find("#dpTimeSecond").val(tmpDate.getSeconds()||"00");
	},
	//增加输入框验证
	_verifyInput : function(inst,input,type){
		var that=this,min=0,max=59;
		max=type=="H"?23:max;
		input.change(function(){   
                    that._autoFixInput(that,inst); 
                }).bind("paste",function(){  //CTR+V事件处理    
                    //处理最大最小日期时间范围
                    that._autoFixInput(that,inst); 
                });
	},
	//将选择的日期时间更新到输入框中
	_selectDateTime : function(inst){
		var oldValue = this._getHiddenInputValue(inst);
		var hur=inst.dpDiv.find("#dpTimeHour").val();
		var miu=inst.dpDiv.find("#dpTimeMinute").val();
		var sed=inst.dpDiv.find("#dpTimeSecond").val();
				
		inst.currentHur=hur;
		inst.currentMiu=miu;
		inst.currentSed=sed;
			
		//取得日期时间格式，查看是否含有时间
		//var dateFormat=this._get(inst, "dateFormat");
		
		//if(this._hasTime(dateFormat)){
		if ( inst.selectedYear ) {
		}
		inst.input.val( this._formatDate(inst) );
		//设置隐藏字段值
		this._setHiddenInputValue(inst);
		this._updateAlternate(inst);
		
		var datestr=this._getHiddenInputValue(inst);
		$.datepicker._change(inst, oldValue, datestr, null);
		target = $(inst.input[0]);
		if (target) {
			var startDateId = this._get(inst, "startDateId");
			var endDateId = this._get(inst, "endDateId");
			if ( startDateId ) {
				$( "#"+startDateId ).datepicker("option", "maxDate", datestr);
			}
			if ( endDateId ) {
				$( "#"+endDateId ).datepicker("option", "minDate", datestr);
			}
		}
		this._hideDatepicker();
	},
	//检查日期格式中是否含有时间格式
	//返回 true or false
	_hasTime : function( dateFormat ){
		var format = (dateFormat+"");
		if( format.indexOf("H")!=-1 || format.indexOf("m")!=-1 || format.indexOf("s")!=-1 ){
			return true;
		}
		return false;
	},
	_hasHur : function( dateFormat ){
		var format = ( dateFormat+"" );
		if( format.indexOf("H")!=-1 ){
			return true;
		}
		return false;
	},
	_hasMin : function( dateFormat ){
		var format = ( dateFormat+"" );
		if( format.indexOf("m")!=-1 ){
			return true;
		}
		return false;
	},
	_hasSec : function( dateFormat ){
		var format = ( dateFormat+"" );
		if( format.indexOf("s")!=-1 ){
			return true;
		}
		return false;
	},
	//是否为年月模式的
	_isYearMonthMode : function(dateFormat){
		if(!this._hasTime(dateFormat)){
			return dateFormat.indexOf("M")!=-1 && dateFormat.indexOf("y")!=-1 &&dateFormat.indexOf("d")==-1;
		}
		return false;
	},
	//是否为只有年的模式
	_isYearMode : function(dateFormat){
		if(!this._hasTime(dateFormat)){
			return dateFormat.indexOf("y")!=-1 && dateFormat.indexOf("M")==-1 && dateFormat.indexOf("d")==-1;
		}
		return false;
	},
	/**********************************时间处理end*********************************/

	//交替更新
	_updateAlternate: function(inst) {
		var altFormat, date, dateStr,
			altField = this._get(inst, "altField");

		if (altField) { // update alternate field too
			altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
			date = this._getDate(inst);
			dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ""];
	},

	/* 计算当前Date对象的年周数 基于ISO 8601 定义
	 * @param date Date - 日期对象
	 * @return  number - Date对象在年中的周数
	 */
	iso8601Week: function(date) {
		var time,
			checkDate = new Date(date.getTime());

		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

		time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},
	/*// yyyy-MM-dd 
	// 11
	//查找format的分隔符在什么位置
	searchIndex : function(format){
		var i=0,j=0,temp = [];
		format = format.indexOf("/")>-1 ? format.replace( /\//g, "" ):format.replace( /-/g, "" );
		for( i = 0; i < format.length - 1; i++ ){
			if ( format[i] != format[i+1] ){//splice
				temp.push(j+1);
				j++;
			}
			j++;
		}
		return temp;
	},*/
	//该方法的作用：根据value得到format
	getFormatter:function(value, format, settings){
		var inputFormats = null,
			inputFormat = null;
		if(format.indexOf("y")>-1 && format.indexOf("M")>-1 && format.indexOf("d")>-1){
			inputFormats = "ymdFormat";
		}
		if(format.indexOf("y")>-1 && format.indexOf("M")>-1 && format.indexOf("d")==-1){
			inputFormats = "ymFormat";
		}
		if(format.indexOf("y")>-1 && format.indexOf("M") == -1 && format.indexOf("d") ==-1){
			inputFormats = "yFormat";
		}
		var editFormate = "yyyy-MM-dd";
		var formatOpts = settings.inst ? $.extend({},this._defaults.formatOptions,settings.inst.settings.formatOptions): 
			this._defaults.formatOptions;
		value = (typeof value === "object" ? value.toString() : value + "");
		if (value === "") {
			return null;
		}
		var vValue = value.split(" ");
		if(vValue[0].indexOf("/")>-1 || vValue[0].indexOf("-")>-1){
			var subStr =vValue[0].indexOf("/")>-1 ? vValue[0].split("/") : vValue[0].split("-");
			//实现日期框中月份和日期可以输入个位数字
			for(var i=0;i<subStr.length;i++){
				if(subStr[i].length % 2 != 0  ){
					subStr[i] = "0"+ subStr[i];
				}
				vValue[0] = subStr.join("-");
			}
		}
		var valRep = vValue[0].indexOf("/")>-1 ? vValue[0].replace( /\//g, "" ):vValue[0].replace( /-/g, "" );//去除value中的特殊字符
		var	str1 = vValue[0].split("/").length-1;//value中有几个分隔符
			str2 = vValue[0].split("-").length-1;
		//将去掉特殊分隔符的value的长度与formatOpts里面存的format的长度进行比较，取得长度相等的format
		for(var i=0;i<formatOpts[inputFormats].length;i++){
			if(formatOpts[inputFormats][i].length == valRep.length){
				inputFormat = formatOpts[inputFormats][i];
			}
		}
		return (inputFormat ? inputFormat: format) || null ;
		
	},
	//得到配置的模式format，和输入框中的value值
	configDateFormat: function(format,value,settings){
		//若有hh:mm:ss的时候，只取前面的年日月
		var orgFormat = format;
		var vformat = format.split(" ");
		var timeFormat = vformat[1] || "";
		var vValue = value.split(" ");
		if(vValue[0].indexOf("/")>-1 || vValue[0].indexOf("-")>-1){
			var subStr =vValue[0].indexOf("/")>-1 ? vValue[0].split("/") : vValue[0].split("-");
			//实现日期框中月份和日期可以输入个位数字
			for(var i=0;i<subStr.length;i++){
				if(subStr[i].length % 2 != 0  ){
					subStr[i] = "0"+ subStr[i];
				}
				vValue[0] = subStr.join("-");
			}
		}
		settings.inst && (settings.inst.beforevalue = vValue);
		format = this.getFormatter( vValue[0], vformat[0], settings);
		format += orgFormat.substr(vformat[0].length, orgFormat.length);//将时间与年月日拼在一起显示
		vValue[0] = vValue[0].indexOf("/")>-1? vValue[0].replace( /\//g, "" ):vValue[0].replace( /-/g, "" );//将value中的分隔符去掉
		value = vValue.join(" "); 
		return {
			format: format,
			value: value
		};
	},
	//解析指定格式的字符串为一个Date对象
	//指定格式为yyyy-MM 或 yyyy-MM-dd 或 yyyy-MM-dd HH:mm:ss
	parseDate: function (format, value, settings) {
		if (format == null || value == null) {
			throw "Invalid arguments";
		}
		settings = settings || {};	
		value = (typeof value === "object" ? value.toString() : value + "");
		if (value === "") {
			return null;
		}
	    var fValue = this.configDateFormat(format,value,settings);
	    format = fValue.format;	    
	    value = fValue.value;
		//是否含有时间
		var hasTime=this._hasTime(format);

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
			shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			inst=settings.inst,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			hur = -1,
			miu = -1,
			sed = -1,
			literal = false,
			date,
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			//判断格式匹配长度  如 yyyy 返回4 ，yyy 返回3
			lookMathesLength = function(match){
				var length=1;
				while(iFormat+1 < format.length && format.charAt(iFormat+1) == match){
					length++;
					iFormat++;
				}
				return length;
			},
			getNumber = function(match) {
				var isDoubled = lookAhead(match),
					size = (match === "@" ? 14 : (match === "!" ? 20 :
					(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
					minSize = (match === "y" ? size : 1),
					digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
					num = value.substring(iValue).match(digits);
				if (!num) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[0].length;
				return parseInt(num[0], 10);
			},
			//带有长度的数字
			getNumber2 = function(match,size) {
				if ( iValue > value.length || iValue == value.length) {
					return -1;
				}
				var digits = new RegExp("^\\d{1," + size + "}"),
					num = value.substring(iValue).match(digits);
				if (!num) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[0].length;
				return parseInt(num[0], 10);
			},
			getName = function(match, shortNames, longNames) {
				var index = -1,
					names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
						return [ [k, v] ];
					}).sort(function (a, b) {
						return -(a[1].length - b[1].length);
					});

				$.each(names, function (i, pair) {
					var name = pair[1];
					if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
						index = pair[0];
						iValue += name.length;
						return false;
					}
				});
				if (index !== -1) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},
			checkLiteral = function() {
				if ("" !== value.charAt(iValue) && value.charAt(iValue) !== format.charAt(iFormat)) {
					return; // 支持没有格式化符号的输入
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};
			

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch (format.charAt(iFormat)) {
					// 解析日期
					case "d":
						var ml=lookMathesLength("d");
						day = getNumber2("d",ml);
						break;
					case "M":
						ml=lookMathesLength("M");
						month = getNumber2("M",ml);
						break;
					case "y":
						ml=lookMathesLength("y");
						year = getNumber2("y",ml);
						break;

					//解析时间
					case "H":
						ml=lookMathesLength("H");
						hur = getNumber2("H",ml);
						break;	
					case "m":
						ml=lookMathesLength("m");
						miu = getNumber2("m",ml);
						break;	
					case "s":
						ml=lookMathesLength("s");
						sed = getNumber2("s",ml);
						break;
					default:
						checkLiteral();
				}
			}
		}
		//如果年月模式将日期改为1
//		if(format=="yyyy-MM"){
//			day=1;
//		}
//		// ??
		/*if (iValue < value.length){
			extra = value.substr(iValue);
			if (!/^\s+/.test(extra)) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}*/
		//??
		if( day == -1 ){
			day = 1;
			if(month == -1 ){
				month = 1;
			}
		}
		
		if(day != -1 && month == -1){
			month = new Date().getMonth() + 1;
		}
		if (year === -1) {
			year = new Date().getFullYear();
		} else if (year < 100) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		}
		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				//dim = this._getDaysInMonth(year, month - 1,inst);
				dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim) {
					break;
				}
				month++;
				day -= dim;
			} while (true);
		}
			year = ( year==-1 ? 1 : year);
//			month = ( month==-1 ? 1 : month);
//			day = ( day==-1 ? 1 : day);
			hur = ( hur==-1? 0 : hur);
			miu = ( miu==-1? 0 : miu);
			sed = ( sed==-1? 0 : sed);
		// ??
		//date = this._daylightSavingAdjustWidthTime(new Date(year, month - 1, day,hur,miu,sed),[inst.currentHur,inst.currentMiu,inst.currentSed]);
		date = this._daylightSavingAdjustWidthTime(new Date(year, month - 1, day),[hur,miu,sed]);
		if ( 
			( date.getFullYear() !== year || 
			date.getMonth() + 1 !== month ||
			date.getDate() !== day ) ||
			( hasTime && (date.getHours() !== hur || 
			date.getMinutes() !== miu ||
			date.getSeconds() !== sed ) )
			) {
			throw "Invalid date"; // E.g. 31/02/00
			
		}
		return date;
	},

	
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* 
	 * 将Date对象格式化为一个字符串
y	将年份表示为最多两位数字。如果年份多于两位数，则结果中仅显示两位低位数。
yy	同上，如果小于两位数，前面补零。
yyy	将年份表示为三位数字。如果少于三位数，前面补零。
yyyy	将年份表示为四位数字。如果少于四位数，前面补零。
M	将月份表示为从 1 至 12 的数字
M M	同上，如果小于两位数，前面补零。
M M M	返回月份的缩写 一月 至 十二月 (英文状态下 Jan to Dec) 。
M M M M	返回月份的全称 一月 至 十二月 (英文状态下 January to December) 。
d	将月中日期表示为从 1 至 31 的数字。
d d	同上，如果小于两位数，前面补零。
H	将小时表示为从 0 至 23 的数字。
H H	同上，如果小于两位数，前面补零。
m	将分钟表示为从 0 至 59 的数字。
m m	同上，如果小于两位数，前面补零。
s	将秒表示为从 0 至 59 的数字。
s s	同上，如果小于两位数，前面补零。
w	返回星期对应的数字 0 (星期天) - 6 (星期六) 。
D	返回星期的缩写 一 至 六 (英文状态下 Sun to Sat) 。
D D	返回星期的全称 星期一 至 星期六 (英文状态下 Sunday to Saturday) 。
W	返回周对应的数字 (1 - 53) 。
W W	同上，如果小于两位数，前面补零 (01 - 53) 。
	 */
	formatDate: function (format, date, settings) {
		if (!date) {
			return "";
		}

		var iFormat,
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			// Check whether a format character is doubled
			//是否为两个相同的字符
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			//判断格式匹配长度  如 yyyy 返回4 ，yyy 返回3
			lookMathesLength = function(match){
				var length=1;
				while(iFormat+1 < format.length && format.charAt(iFormat+1) == match){
					length++;
					iFormat++;
				}
				return length;
			},
			formatNumber = function(match, value, len) {
				var num = "" + value;
				if (lookAhead(match)) {
					while (num.length < len) {
						num = "0" + num;
					}
				}
				return num;
			},
			formatName = function(match, value, shortNames, longNames) {
				return (lookAhead(match) ? longNames[value] : shortNames[value]);
			},
			output = "",
			literal = false;

		if (date) {
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						output += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							output += formatNumber("d", date.getDate(), 2);
							break;
						case "D":
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);
							break;
						/*case "o":
							output += formatNumber("o",
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case "m":
							output += formatNumber("m", date.getMonth() + 1, 2);
							break;*/
						case "M":
							var ml=lookMathesLength("M");
							if(ml==4){
								output += monthNames[date.getMonth()];
							}else if(ml==3){
								output += monthNames[date.getMonth()];
							}else if(ml==2){
								output += (date.getMonth() + 1>9?date.getMonth() + 1:"0"+(date.getMonth() + 1));
							}else if(ml==1){
								output += date.getMonth() + 1;
							}
							
							//output += formatNumber("M", date.getMonth() + 1, 2);//formatName("M", date.getMonth(), monthNamesShort, monthNames);
							break;
						case "y":
							ml=lookMathesLength("y");
							if(ml==4){
								output += date.getFullYear();
							}else if(ml==3){
								output += (date.getFullYear()+"").substring(1,4);
							}else if(ml==2){
								output += ((date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							}else if(ml==1){
								output += date.getYear() % 100;
							}
							//output += (lookAhead("y") ? date.getFullYear() :
							//	(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							break;
							
						// 时间解析	
						case "H":
							ml=lookMathesLength("H");
							if(ml==2){
								output += (date.getHours()>9?date.getHours():"0"+(date.getHours()));
							}else if(ml==1){
								output += date.getHours();
							}
						break;
						case "m":
							ml=lookMathesLength("m");
							if(ml==2){
								output += (date.getMinutes()>9?date.getMinutes():"0"+(date.getMinutes()));
							}else if(ml==1){
								output += date.getMinutes();
							}
						break;
						case "s":
							ml=lookMathesLength("s");
							if(ml==2){
								output += (date.getSeconds()>9?date.getSeconds():"0"+(date.getSeconds()));
							}else if(ml==1){
								output += date.getSeconds();
							}
						break;
						//计算年周数
						case "W":
							ml=lookMathesLength("W");
							if(ml==2){
								output += (settings.calculateWeek(date)>9?settings.calculateWeek(date):"0"+settings.calculateWeek(date));
							}else if(ml==1){
								output += settings.calculateWeek(date);
							}
						break;
						//返回一周中的天数
						case "w":
							output += date.getDay();
						break;
						/*case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'")) {
								output += "'";
							} else {
								literal = true;
							}
							break;*/
						default:
							output += format.charAt(iFormat);
					}
				}
			}
		}
		return output;
	},


	_possibleChars: function (format) {
		var iFormat,
			chars = "",
			literal = false,

			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					chars += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					//case "d": case "m": case "y": case "@":
					case "d": case "m": case "y": case "@": case "H": case "M": case "s":
						chars += "0123456789";
						break;
					//case "D": case "M":
					case "D": case "W":
						return null; // Accept anything
					case "'":
						if (lookAhead("'")) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt(iFormat);
				}
			}
		}
		return chars;
	},

	//得到属性值
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},
	//设置属性值
	_set: function(inst, name,val) {
		return inst.settings[name] = val;
	},
	//解析可执行的Date对象初始化日历组件
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() === inst.lastVal) {
			return;
		}
		var dateFormat = this._get(inst, "dateFormat"),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate(inst),
			date = defaultDate,
			dateValue = inst.input.val(),
			settings = this._getFormatConfig(inst);
		
		try {
			date = this.parseDate(dateFormat, dateValue, settings) || defaultDate;
		} catch (event) {
			//dateValue = (noDefault ? "" : dateValue);
			date = defaultDate;
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = date.getDate();
		inst.currentMonth = date.getMonth();
		inst.currentYear = date.getFullYear();
		
		inst.currentHur = date.getHours();
		inst.currentMiu = date.getMinutes();
		inst.currentSed = date.getSeconds();
		this._adjustInstDate(inst);
		//设置隐藏字段值
		//this._setHiddenInputValue(inst);
		var datestr=this._getHiddenInputValue(inst);
		var startDateId = this._get(inst, "startDateId");
		var endDateId = this._get(inst, "endDateId");
		if ( startDateId ) {
			$( "#"+startDateId ).datepicker("option", "maxDate", datestr);
		}
		if ( endDateId ) {
			$( "#"+endDateId ).datepicker("option", "minDate", datestr);
		}
	},

	//取得默认的date在显示时
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
	},
	/* A date may be specified as an exact value or a relative one. */
	//按照指定格式来判定时间范围
	//指定格式 为 yyyy-MM-dd HH:mm:ss 或者 yyyy-MM-dd
	_determineDate: function(inst, date, defaultDate) {
		var that = this;
		var offsetNumeric = function(offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date;
			},
			offsetString = function(offset) {
				try {
					var tmpFormat="yyyy-MM-dd";
					var srcDateFormat=that._get(inst,"srcDateFormat");
					if(that._isYearMonthMode(srcDateFormat)){
						tmpFormat="yyyy-MM";
					}
					if(that._isYearMode(srcDateFormat)){
						tmpFormat="yyyy";
					}
					if((offset+"").length>10 && that._hasTime(srcDateFormat)){
						tmpFormat+=" HH:mm:ss";
					}
					tmpFormat = $.datepicker._get(inst, "dateFormat");
					//return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					return $.datepicker.parseDate(tmpFormat,
						offset, $.datepicker._getFormatConfig(inst));
				}catch (e) {
					// Ignore
					//return "Invalid Date";
					//触发格式化错误事件
					$.datepicker._apply(inst,"onFormatError",[date,inst]);
					$.datepicker._apply(inst,"onFormatWarn",[date,inst]);
				}

				var date = (offset.toLowerCase().match(/^c/) ?
					$.datepicker._getDate(inst) : null) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec(offset);

				while (matches) {
					switch (matches[2] || "d") {
						case "d" : case "D" :
							day += parseInt(matches[1],10); break;
						case "w" : case "W" :
							day += parseInt(matches[1],10) * 7; break;
						case "m" : case "M" :
							month += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
						case "y": case "Y" :
							year += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
					}
					matches = pattern.exec(offset);
				}
				return new Date(year, month, day);
			},
			newDate = (date == null || date === "" ? 
					defaultDate : 
					(typeof date === "string" ? 
						offsetString(date) : 
						(typeof date === "number" ? 
							(isNaN(date) ? 
								defaultDate : 
								offsetNumeric(date)
							) : 
							new Date(date.getTime())
						)
					)
				);

		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
		var hur = 0, miu = 0, sed = 0, msed = 0;
		if (newDate) {
			hur = newDate.getHours(),
			miu = newDate.getMinutes(),
			sed = newDate.getSeconds(),
			msed = newDate.getMilliseconds();
			
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjustWidthTime(newDate,[hur,miu,sed]);
	},

	//调整日期时间
	_daylightSavingAdjust: function(date,inst) {
		if (!date) {
			return null;
		}
		/*var hasTime=false;
		if(inst!=null){
			var dateFormat=this._get(inst,"dateFormat");
			hasTime=this._hasTime(dateFormat);
		}
		if(!hasTime){
			date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		}*/
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	//直接设置日期
	_setDate: function(inst, date, noChange) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
		var dateFormat=this._get(inst,"dateFormat");
		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		
		inst.currentHur=newDate.getHours();
		inst.currentMiu=newDate.getMinutes();
		inst.currentSed=newDate.getSeconds();
		
		if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
			this._notifyChange(inst);
		}
		this._adjustInstDate(inst);
		if (inst.input) {
			if ( clear ) {
				this._processDefaultDate(this,inst,"");
				this._setHiddenInputValue(inst);//设置隐藏字段值
			} else {
				if(this._get(inst,"complete")){
					inst.input.val(this._formatDate(inst));
				}else{
					var format = this.getFormatter(inst.settings.value,this._get(inst,"dateFormat"), this._getFormatConfig(inst));
					var datestr = this.completeFormate(format,dateFormat,inst);
					datestr = this.formatDate(datestr, date, this._getFormatConfig(inst));
					/*var format = this.getFormatter(inst.input.val(),this._get(inst,"srcDateFormat"), this._getFormatConfig(inst));
				var datestr = this.completeFormate(format,this._get(inst,"srcDateFormat"),inst);*/
					inst.input.val(datestr);
				}
			}
		}
	},

	//取回日期对象
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
			this._daylightSavingAdjustWidthTime( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ), [inst.currentHur,inst.currentMiu,inst.currentSed] ) );
		return startDate;
	},
	
	_daylightSavingAdjustWidthTime: function(date,timeArr) {
		var ndate = this._daylightSavingAdjust( date );
		if ( ndate ) {
			ndate.setHours(timeArr[0]);
			ndate.setMinutes(timeArr[1]);
			ndate.setSeconds(timeArr[2]);
			ndate.setMilliseconds(0);
		}
		return date;
	},
	//响应日历组件上的各种动作事件 
	_attachHandlers: function(inst) {
		var $this=this;
		var stepMonths = this._get(inst, "stepMonths"),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		var isYearMonth=this._isYearMonthMode(this._get(inst,"dateFormat"));
		var isYear = this._isYearMode(this._get(inst,"dateFormat"));
		inst.dpDiv.find("[data-handler]").map(function () {
			var handler = {
				prev: function () {
					if(isYearMonth===true){
						$.datepicker._adjustDate(id, -1, "Y");
					}else if(isYear===true){
						$.datepicker._adjustDate(id, -12, "Y");
					}else{
						$.datepicker._adjustDate(id, -stepMonths, "M");
					}
					//$this._setMonthYearValue($this,inst);
					return false;
				},
				next: function () {
					if(isYearMonth===true){
						$.datepicker._adjustDate(id, +1, "Y");
					}else if(isYear===true){
						$.datepicker._adjustDate(id, +12, "Y");
					}else{
						$.datepicker._adjustDate(id, +stepMonths, "M");
					}
					//$this._setMonthYearValue($this,inst);
					return false;
				},
				hide: function () {
					$.datepicker._hideDatepicker();
				},
				today: function () {
					$.datepicker._gotoToday(id);					
					return false;
				},
				selectDay: function () {
					$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
					return false;
				},
				selectMonthAndHide: function(){
					$.datepicker._selectMonthYear(id, this, "M", true);
					$.datepicker._hideDatepicker();
					return false;
				},
				selectYearAndHide: function(){
					$.datepicker._selectMonthYear(id, this, "Y", true);
					$.datepicker._hideDatepicker();
					return false;
				},
				selectMonth: function () {
					$.datepicker._selectMonthYear(id, this, "M");
					return false;
				},
				selectYear: function () {
					$.datepicker._selectMonthYear(id, this, "Y");
					return false;
				},
				/*clickHour: function(){
					inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
						max: 24,
						min: 0,
						step: 1,
						value: $(this).html()
					});
					inst.dpDiv.find("#dpTimeHour").val($(this).html());
					inst.dpDiv.find(".menuSel").hide();
				},
				clickMinute: function(){
					inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
						max: 60,
						min: 0,
						step: 1,
						value: $(this).html()
					});
					inst.dpDiv.find("#dpTimeMinute").val($(this).html());
					inst.dpDiv.find(".menuSel").hide();
				},
				clickSecond: function(){
					inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
						max: 60,
						min: 0,
						step: 1,
						value: $(this).html()
					});
					inst.dpDiv.find("#dpTimeSecond").val($(this).html());
					inst.dpDiv.find(".menuSel").hide();
				},*/
				focusTime: function () {
					if ( $(this).prop("readonly") ) return false;
					
					$.datepicker.focusInput = this.id;
					if ( this.id == "dpTimeHour" ){
						inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
							max: 24,
							min: 0,
							step: 1,
							value: this.value
						});
						inst.dpDiv.find(".menuSel").hide();
						inst.dpDiv.find(".hourMenu").show();
					}
					if ( this.id == "dpTimeMinute" ){
						inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
							max: 60,
							min: 0,
							step: 1,
							value: this.value
						});
						//获得时间的值，然后判断如果大于最小日期的时间，例如最小日期的时间为09:20:45，那么可以获得时间的值为09，那么选择大于9点的时候，分钟和秒
						//都是可以选择的，用新生成的面板来取代原来的面板。
						var value = $("#dpTimeHour").val();
						inst.dpDiv.find(".minuteMenu").replaceWith($this._modifiedMin(inst,value));
						inst.dpDiv.find(".menuSel").hide();
						inst.dpDiv.find(".minuteMenu").show();
					}
					if ( this.id == "dpTimeSecond" ){
						inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
							max: 60,
							min: 0,
							step: 1,
							value: this.value
						});
						var value = $("#dpTimeHour").val();
						var value1 = $("#dpTimeMinute").val();
						inst.dpDiv.find(".secondMenu").replaceWith($this._modifiedSed(inst,value,value1));
						inst.dpDiv.find(".menuSel").hide();
						inst.dpDiv.find(".secondMenu").show();
					}
					return false;
				}
			};
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
			//重新生成的时间面板绑定"mousedown"事件，点击事件面板选中时间
			$(inst.dpDiv).off(".hourMenu").on("mousedown.hourMenu", ".hourMenu", function(e){
				if ( !$(e.target).hasClass("menuTimeSel") ) return false;;
				inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
					max: 24,
					min: 0,
					step: 1,
					value: $(e.target).html()
				});
				inst.dpDiv.find("#dpTimeHour").val($(e.target).html());
				inst.dpDiv.find(".menuSel").hide();	
				$this._autoFixInput($this,inst);
				return false;
			});
			$(inst.dpDiv).off(".minuteMenu").on("mousedown.minuteMenu", ".minuteMenu", function(e){
				if ( !$(e.target).hasClass("menuTimeSel") ) return false;;
				inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
					max: 60,
					min: 0,
					step: 1,
					value: $(e.target).html()
				});
				inst.dpDiv.find("#dpTimeMinute").val($(e.target).html());
				inst.dpDiv.find(".menuSel").hide();
				$this._autoFixInput($this,inst);
				return false;
			});
			$(inst.dpDiv).off(".secondMenu").on("mousedown.secondMenu", ".secondMenu", function(e){
				if ( !$(e.target).hasClass("menuTimeSel") ) return false;;
				inst.dpDiv.find( "#dpTimeSpinner" ).spinner("option",{
					max: 60,
					min: 0,
					step: 1,
					value: $(e.target).html()
				});
				inst.dpDiv.find("#dpTimeSecond").val($(e.target).html());
				inst.dpDiv.find(".menuSel").hide();
				$this._autoFixInput($this,inst);
				return false;
			});
		});
	},
	// 生成 当前状态日历组件的html代码
	_generateHTML: function(inst) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate,defaultDateTime, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjustWidthTime(
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate()),[0,0,0]), // clear time
			isRTL = this._get(inst, "isRTL"),
			isYearMonth=this._isYearMonthMode(this._get(inst,"dateFormat")),
			isYear=this._isYearMode(this._get(inst,"dateFormat"));
			showButtonPanel = isYearMonth==true || isYear==true?false:this._get(inst, "showButtonPanel"),
			hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
			navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
			numMonths = this._getNumberOfMonths(inst),
			showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
			stepMonths = this._get(inst, "stepMonths"),
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
			currentDate = this._daylightSavingAdjustWidthTime((!inst.currentDay ? new Date(9999,9,9) :
				new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),[0,0,0]),
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),		
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear,
			//日期时间格式
			dateFormat = this._get(inst,"dateFormat");
			//根据日期时间格式调整最大最小值，在日历绘制时
			var hasTime = this._hasTime(this._get(inst,"dateFormat"));
			//有time情况，最小日期要-1
			/*if(minDate!=null && hasTime){
				minDate.setDate(minDate.getDate());
			}*/
			//无time情况，最大日期要+1(作废)
			/*if(maxDate!=null && !hasTime){
				maxDate.setDate(maxDate.getDate());
			}*/

		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			maxDraw = this._daylightSavingAdjustWidthTime(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()),[inst.currentHur,inst.currentMiu,inst.currentSed]);
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth, 1),[inst.currentHur,inst.currentMiu,inst.currentSed]) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get(inst, "prevText");
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth - stepMonths, 1),[inst.currentHur,inst.currentMiu,inst.currentSed]),
			this._getFormatConfig(inst)));

		prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			"<a class='coral-datepicker-prev coral-state-default coral-corner-all' data-handler='prev' data-event='mousedown'" +
			" title='" + prevText + "'><span class='icon  cui-icon-arrow-" + ( isRTL ? "right3" : "left3") + "'></span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='coral-datepicker-prev coral-state-default coral-corner-all coral-state-disabled' title='"+ prevText +"'><span class='coral-icon coral-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

		nextText = this._get(inst, "nextText");
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth + stepMonths, 1),[inst.currentHur,inst.currentMiu,inst.currentSed]),
			this._getFormatConfig(inst)));

		next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			"<a class='coral-datepicker-next coral-state-default coral-corner-all' data-handler='next' data-event='mousedown'" +
			" title='" + nextText + "'><span class='cui-icon-arrow-" + ( isRTL ? "left3" : "right3") + "'></span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='coral-datepicker-next coral-state-default coral-corner-all coral-state-disabled' title='"+ nextText + "'><span class='coral-icon coral-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

		currentText = this._get(inst, "currentText");
		gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

		controls = "";//(!inst.inline ? "<button type='button' class='coral-datepicker-close coral-state-default coral-priority-primary coral-corner-all' data-handler='hide' data-event='click'>" +
			//this._get(inst, "closeText") + "</button>" : "");

		buttonPanel = (showButtonPanel) ? "<div class='coral-datepicker-buttonpane coral-component-content' "+(isYearMonth || isYear?"style='display:none'":"")+">" + (isRTL ? controls : "") +
			(this._isInRange(inst, gotoDate) ? "<button type='button' class='coral-datepicker-current coral-state-default coral-priority-primary coral-corner-all' data-handler='today' data-event='mousedown'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
		var buttonPanelstr = "";
		!hasTime||(buttonPanelstr += '<button class="coral-datepicker-close coral-state-default coral-priority-secondary coral-corner-all" id="dpTimeEnsure">确定</button>');	
		buttonPanelstr += (showButtonPanel)? "<button type='button' class='coral-datepicker-current coral-state-default coral-priority-primary coral-corner-all' data-handler='today' data-event='mousedown'" +
			">" + currentText + "</button>":"";

		firstDay = parseInt(this._get(inst, "firstDay"),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);

		showWeek = this._get(inst, "showWeek");
		dayNames = this._get(inst, "dayNames");
		dayNamesMin = this._get(inst, "dayNamesMin");
		monthNames = this._get(inst, "monthNames");
		monthNamesShort = this._get(inst, "monthNamesShort");
		beforeShowDay = this._get(inst, "beforeShowDay");
		showOtherMonths = this._get(inst, "showOtherMonths");
		selectOtherMonths = this._get(inst, "selectOtherMonths");
		defaultDateTime = this._getDefaultDate(inst);//原始defaultDate，会含有时间格式
		//只含年月日
		defaultDate=new Date(defaultDateTime.getFullYear(),defaultDateTime.getMonth(),defaultDateTime.getDate());
		html = "";
		dow;
		for (row = 0; row < numMonths[0]; row++) {
			group = "";
			this.maxRows = 4;
			for (col = 0; col < numMonths[1]; col++) {
				selectedDate = this._daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth, inst.selectedDay),[inst.currentHur,inst.currentMiu,inst.currentSed]);
				cornerClass = " coral-corner-all";
				calender = "";
				if (isMultiMonth) {
					calender += "<div class='coral-datepicker-group";
					if (numMonths[1] > 1) {
						switch (col) {
							case 0: calender += " coral-datepicker-group-first";
								cornerClass = " coral-corner-" + (isRTL ? "right" : "left"); break;
							case numMonths[1]-1: calender += " coral-datepicker-group-last";
								cornerClass = " coral-corner-" + (isRTL ? "left" : "right"); break;
							default: calender += " coral-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='coral-datepicker-header coral-component-header coral-helper-clearfix" + cornerClass + "'>" +
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort,isYearMonth) + // draw month headers
					"</div>" ;
				if(isYearMonth===true){
					//生成月份
					calender += this._generateMonthHTML(inst, drawMonth, drawYear, minDate, maxDate,
						row > 0 || col > 0, monthNames, monthNamesShort,currentDate,today);
				}
				//生成年份
				if(isYear == true){
					calender += this._generateYearHTML(inst,drawYear, minDate, maxDate,
							row > 0 || col > 0,currentDate,today);
				}
				calender += "<table class='coral-datepicker-calendar' "+(isYearMonth || isYear ? "style='display:none'":"")+"><thead>" +
					"<tr>";
				thead = (showWeek ? "<th class='coral-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
				for (dow = 0; dow < 7; dow++) { // days of the week
					day = (dow + firstDay) % 7;
					thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='coral-datepicker-week-end'" : "") + ">" +
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth,inst);
				if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				}
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth, 1 - leadDays),[0,0,0]);
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += "<tr>";
					tbody = (!showWeek ? "" : "<td class='coral-datepicker-week-col'>" +
						this._get(inst, "calculateWeek")(printDate) + "</td>");
					for (dow = 0; dow < 7; dow++) { // create date picker days
						daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
						otherMonth = (printDate.getMonth() !== drawMonth);
						unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate<= new Date(minDate.getFullYear(),minDate.getMonth(),minDate.getDate()-1)) || (maxDate && printDate > maxDate);
						tbody += "<td class='" +
							((dow + firstDay + 6) % 7 >= 5 ? " coral-datepicker-week-end" : "") + // highlight weekends
							(otherMonth ? " coral-datepicker-other-month" : "") + // highlight days from other months
							((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "") + // highlight selected day
							(unselectable ? " " + this._unselectableClass + " coral-state-disabled": "") +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
							(printDate.getTime() === today.getTime() ? " coral-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='mousedown' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							(unselectable ? "<span class='coral-state-default'>" + printDate.getDate() + "</span>" : "<a class='coral-state-default" +
							(printDate.getTime() === today.getTime() ? " coral-state-highlight" : "") +
							(printDate.getTime() === currentDate.getTime() ? " coral-state-active" : "") + // highlight selected day
							(otherMonth ? " coral-priority-secondary" : "") + // distinguish dates from other months
							"' href='javascript:void(0);'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjustWidthTime(printDate,[0,0,0]);
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				if(isYearMonth == false && isYear == false){
					calender += "</tbody></table>" + this._generateDateTimeHTML(inst,dateFormat, buttonPanelstr)+(isMultiMonth ? "</div>" +
							((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='coral-datepicker-row-break'></div>" : "") : "");
				}
				group += calender;
			}
			html += group;
		}
		//html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},
	//生成 仿win8 风格 月份
	_generateMonthHTML : function(inst,drawMonth,drawYear,minDate, maxDate,
			secondary, monthNames, monthNamesShort,currentDate,today){
		var html="<table class='coral-datepicker-calendar' ><tbody>";
		var month=0;var highlightcss="";var activecss="";
		var inMinYear = (minDate && minDate.getFullYear() === drawYear);
		var inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
		for(var i=0;i<3;i++){
			html+="<tr>"
			for(var j=0;j<4;j++){
				if(month === today.getMonth() && drawYear === today.getFullYear()){
					highlightcss="coral-state-highlight";
				}else{
					highlightcss="";
				}
				if(month === drawMonth){
					activecss="coral-state-active";
				}else{
					activecss="";
				}
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())){
					html+="<td data-handler='selectMonthAndHide' data-event='mousedown' data-month='"+ month +"'>" +
						"<a class='coral-state-default date-month "+ highlightcss + " "+activecss+"' href='javascript:void(0);'" +
						">"+ monthNames[month++] +"</a></td>";
				}else{
					html+="<td class='"+ this._unselectableClass + " coral-state-disabled'>" +
						"<span class='date-month' >"+ monthNames[month++] + "</span></td>";
				}
			}
			html+="</tr>";
		}
		return html+"</tbody></table>";
	},
	//只生成年份
	_generateYearHTML : function(inst,drawYear,minDate, maxDate,
			secondary, currentDate,today){
		var html="<table class='coral-datepicker-calendar' ><tbody>";
		var highlightcss="";var activecss="";
		var year = drawYear-(drawYear%12);
		var inMinYear = (minDate && minDate.getFullYear() === drawYear);
		var inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
		
		for(var i=0;i<3;i++){
			html+="<tr>"
			for(var j=0;j<4;j++){
				/*if(drawYear === today.getFullYear()){
					highlightcss="coral-state-highlight";
				}else{*/
					highlightcss="";
				//}
				if(year == inst.currentYear){
					activecss="coral-state-active";
				}else{
					activecss="";
				}
				if ((!inMinYear || year >= minDate.getFullYear()) && (!inMaxYear || year <= maxDate.getFullYear())){
					html+="<td data-handler='selectYearAndHide' data-event='mousedown' data-year='"+ year +"'>" +
						"<a class='coral-state-default date-year "+ " "+activecss+"' href='javascript:void(0);'" +
						">"+ year++ +"</a></td>";
				}else{
					html+="<td class='"+ this._unselectableClass + " coral-state-disabled'>" +
						"<span class='date-year' >"+ year++ + "</span></td>";
				}
			}
			html+="</tr>";
		}
		return html+"</tbody></table>";
	},
	//生成时间输入框
	_generateDateTimeHTML : function(inst,dateFormat,buttonPanelstr){
		var divStyle='style="display:none"';
		var minMaxDate,hur,min,sed;
		var hasTime=this._hasTime(dateFormat),
			hasHur=this._hasHur(dateFormat),
			hasMin=this._hasMin(dateFormat),
			hasSec=this._hasSec(dateFormat);
		if(hasTime){
			divStyle='style="display:block"';
		}
		var date=new Date();
		var minDate = this._get(inst, "minDate");
		var maxDate = this._get(inst, "maxDate");
			hur = hasHur?( inst.currentHur || date.getHours() ):"00";
			min = hasMin?( inst.currentMiu || date.getMinutes() ):"00";
			sed = hasSec?( inst.currentSed || date.getSeconds() ):"00";
		var tmpDate=new Date(inst.selectedYear,inst.selectedMonth,inst.selectedDay,hur,min,sed);
		var compDate = new Date(inst.selectedYear,inst.selectedMonth,inst.selectedDay),
			minDay = new Date(minDate),
			maxDay = new Date(maxDate),
			compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate()),
			compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
		//验证时间是否超范围
		if(this._checkDateRange(inst,tmpDate)===1){
			tmpDate=new Date(maxDate);
			hur=tmpDate.getHours();
			min=tmpDate.getMinutes();
			sed=tmpDate.getSeconds();
		}else if(this._checkDateRange(inst,tmpDate)===2){
			tmpDate=new Date(minDate);
			hur=tmpDate.getHours();
			min=tmpDate.getMinutes();
			sed=tmpDate.getSeconds();
		}
		$.datepicker.focusInput = "dpTimeHour";
		var dateTimeHTML= [];
		dateTimeHTML.push( "<div class='coral-datepicker-time' >" );
		// init hour
		dateTimeHTML.push( "<div class='menuSel hourMenu' style='display: none; margin-left: 6px; margin-top: -90px;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0<tr' nowrap='nowrap'><tbody>" );
		var k= 0;
		for ( var i = 0; i < 4; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 6; j++ ) {
					if((minDate && k < new Date(minDate).getHours() && new Date(compDate).getTime() == new Date(compMin).getTime())
							||(maxDate && k > new Date(maxDate).getHours() && new Date(compDate).getTime() == new Date(compMax).getTime())){
						dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickHour' data-event='click' >" +
								"<span class='coral-state-default'>"+ k++ +"</span></td>" );
					}else{
						dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickHour' data-event='click' >"+ k++ +"</td>" );
				}
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		// init minute
		dateTimeHTML.push( "<div class='menuSel minuteMenu' style='display: none; margin-left: 6px; margin-top: -48px;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0<tr' nowrap='nowrap'><tbody>" );
		k= 0;
		for ( var i = 0; i < 2; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 6; j++ ) {
				if((minDate && k < new Date(minDate).getMinutes() && new Date(compDate).getTime() == new Date(compMin).getTime() )
						||(maxDate && k > new Date(maxDate).getMinutes() && new Date(compDate).getTime() == new Date(compMax).getTime())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickMinute' data-event='click'>" +
							"<span class='coral-state-default'>"+ k +"</span></td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickMinute' data-event='click' >"+ k +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		// init second
		dateTimeHTML.push( "<div class='menuSel secondMenu' style='display: none; margin-left: 6px; margin-top: -48px;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0<tr' nowrap='nowrap'><tbody>" );
		k= 0;
		for ( var i = 0; i < 2; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 6; j++ ) {
				if((minDate && k < new Date(minDate).getSeconds() && new Date(compDate).getTime() == new Date(compMin).getTime() )
						||(maxDate && k > new Date(maxDate).getSeconds() && new Date(compDate).getTime() == new Date(compMax).getTime())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickSecond' data-event='click'>" +
							"<span class='coral-state-default'>"+ k +"</span></td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickSecond' data-event='click' >"+ k +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );

		dateTimeHTML.push( "<table cellspacing='0' cellpadding='0' border='0'>" );
			dateTimeHTML.push( "<tr>" );
				dateTimeHTML.push( "<td class='datepicker-time-input'" + divStyle +">");
					dateTimeHTML.push( "<input data-handler='focusTime' data-event='focus' id='dpTimeHour' class='datepicker-timeinput datepicker-time-tB1' " + (hasHur ? "":"readonly") +" value='"+hur+"' maxlength='2'>" );
					dateTimeHTML.push( "<input value=':' class='coral-datepicker-time-tm' readonly>" );
					dateTimeHTML.push( "<input data-handler='focusTime' data-event='focus' id='dpTimeMinute' class='datepicker-timeinput datepicker-time-tE' " + (hasMin ? "":"readonly") +" value='"+min+"' maxlength='2'>" );
					dateTimeHTML.push( "<input value=':' class='coral-datepicker-time-tm' readonly>" );
					dateTimeHTML.push( "<input data-handler='focusTime' data-event='focus' id='dpTimeSecond' class='datepicker-timeinput datepicker-time-tB2' " + (hasSec ? "":"readonly") +" value='"+sed+"' maxlength='2'>" );
					dateTimeHTML.push( "<input id='dpTimeSpinner'/>" );
				dateTimeHTML.push( "</td>" );
			dateTimeHTML.push( "</tr>" );
		dateTimeHTML.push( "</table></div>" );
		dateTimeHTML.push( "<div class='coral-datepicker-time' >" );
		dateTimeHTML.push( "<div cellspacing='0' cellpadding='0' border='0'></div>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='0' border='0'>" );
			dateTimeHTML.push( "<tr>" );
				dateTimeHTML.push( "<td>" + buttonPanelstr + "</td>" );
			dateTimeHTML.push( "</tr>" );
		dateTimeHTML.push( "</table></div>" );
		return dateTimeHTML.join("");
	},
	//有最小值和最大值的时候，例如最小日期为2015-08-12 09:45:10 ，当选择2015-08-12，时间大于9点的时候，分钟和秒的面板上的所有值都可以点击，因此重新生成面板
	_modifiedMin: function(inst,value){
		var minDate = this._get(inst, "minDate");
		var maxDate = this._get(inst, "maxDate");
		var compDate = new Date(inst.selectedYear,inst.selectedMonth,inst.selectedDay),
			minDay = new Date(minDate),
			maxDay = new Date(maxDate),
			compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate()),
			compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
		var dateTimeHTML= [];
		dateTimeHTML.push( "<div class='menuSel minuteMenu' style='display: none; margin-left: 6px; margin-top: -48px;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0<tr' nowrap='nowrap'><tbody>" );
		k= 0;
		for ( var i = 0; i < 2; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 6; j++ ) {
				if((minDate && k < new Date(minDate).getMinutes() && new Date(compDate).getTime() == new Date(compMin).getTime() && value == new Date(minDate).getHours())
						||(maxDate && k > new Date(maxDate).getMinutes() && new Date(compDate).getTime() == new Date(compMax).getTime() && value == new Date(maxDate).getHours())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickMinute' data-event='click'>" +
							"<span class='coral-state-default'>"+ k +"</span></td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickMinute' data-event='click' >"+ k +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		return dateTimeHTML.join("");
	},
	_modifiedSed: function(inst,value,value1){
		var minDate = this._get(inst, "minDate");
		var maxDate = this._get(inst, "maxDate");
		var compDate = new Date(inst.selectedYear,inst.selectedMonth,inst.selectedDay),
			minDay = new Date(minDate),
			maxDay = new Date(maxDate),
			compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate()),
			compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
		var dateTimeHTML= [];
		dateTimeHTML.push( "<div class='menuSel secondMenu' style='display: none; margin-left: 6px; margin-top: -48px;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0<tr' nowrap='nowrap'><tbody>" );
		k= 0;
		for ( var i = 0; i < 2; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 6; j++ ) {
				if((minDate && k < new Date(minDate).getSeconds() && new Date(compDate).getTime() == new Date(compMin).getTime() && value == new Date(minDate).getHours() && value1 == new Date(minDate).getMinutes())
						||(maxDate && k > new Date(maxDate).getSeconds() && new Date(compDate).getTime() == new Date(compMax).getTime()&& value == new Date(maxDate).getHours() && value1 == new Date(maxDate).getMinutes())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickSecond' data-event='click'>" +
							"<span class='coral-state-default'>"+ k +"</span></td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickSecond' data-event='click' >"+ k +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		return dateTimeHTML.join("");
	},
	// 生成月份和年度的头部
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort,isYearMonth) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get(inst, "changeMonth"),
			changeYear = this._get(inst, "changeYear"),
			showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
			html = "<div class='coral-datepicker-title'>",
			monthHtml = "",
			monthSuffix = this._get(inst, "monthSuffix");
		//年份
		//月份选择
		if(!this._isYearMonthMode(dateFormat)&&!this._isYearMode(dateFormat)){
			if (secondary || !changeMonth) {
				monthHtml += "<span class='coral-datepicker-month'>" + monthNames[drawMonth] + "</span>";
			} else {
				inMinYear = (minDate && minDate.getFullYear() === drawYear);
				inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
				monthHtml += "<select class='coral-datepicker-month' data-handler='selectMonth' data-event='change'>";
				for ( month = 0; month < 12; month++) {
					if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
						monthHtml += "<option value='" + month + "'" +
						(month === drawMonth ? " selected='selected'" : "") +
						">" + monthNamesShort[month] + "</option>";
					}
				}
				
				monthHtml += "</select>";
				monthHtml += monthSuffix;// “月”，写死在panel
			}
			
			if (!showMonthAfterYear) {
				html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
			}
		}

		// 年度选择
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if (secondary || !changeYear) {
				html += "<span class='coral-datepicker-year'>" + drawYear + "</span>";
			} else {
				// 判断 年度范围用来显示
				years = this._get(inst, "yearRange").split(":");
				thisYear = new Date().getFullYear();
				determineYear = function(value) {
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				year = determineYear(years[0]);
				endYear = Math.max(year, determineYear(years[1] || ""));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				if(this._isYearMode(dateFormat)){
					var year = drawYear-(drawYear % 12)
					inst.yearshtml +="<span class = 'coral-datepicker-year'>" + year + "-" + (year+11) + "</span>";
				}else{
					inst.yearshtml += "<select class='coral-datepicker-year' data-handler='selectYear' data-event='change'>";
					for (; year <= endYear; year++) {
						inst.yearshtml += "<option value='" + year + "'" +
						(year === drawYear ? " selected='selected'" : "") +
						">" + year + "</option>";
					}
					inst.yearshtml += "</select>";
				}

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get(inst, "yearSuffix");
		if (showMonthAfterYear) {
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + (isYearMonth===false?monthHtml:"");
		}
		html += "</div>"; // 关闭 datepicker_header
		return html;
	},
	
	//调整日期子字段
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period === "Y" ? offset : 0),
			month = inst.drawMonth + (period === "M" ? offset : 0),
			day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month,inst)) + (period === "D" ? offset : 0),
			date = this._restrictMinMax(inst, this._daylightSavingAdjustWidthTime(new Date(year, month, day),[inst.currentHur,inst.currentMiu,inst.currentSed]));

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period === "M" || period === "Y") {
			this._notifyChange(inst);
		}
	},

	//保证一个日期在最大和最小范围内
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			newDate = (minDate && date < minDate ? minDate : date);
		return (maxDate && newDate > maxDate ? maxDate : newDate);
	},

	//通知月份或月份发生改变
	_notifyChange: function(inst) {
		var onChange = this._get(inst, "onChangeMonthYear");
		if (onChange) {
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
		}
	},

	//判断 显示的月份数量
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, "numberOfMonths");
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
	},

	//判定当前最大最小的日期 - 保证没有时间组件被设定
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
	},

	//查找月中的日期
	_getDaysInMonth: function(year, month,inst) {
		// TODO: 代码优化；
		if ( inst ) {
			return 32 - this._daylightSavingAdjustWidthTime(new Date(year, month, 32),[inst.currentHur,inst.currentMiu,inst.currentSed]).getDate();
		} else {
			return 32 - this._daylightSavingAdjustWidthTime(new Date(year, month, 32),[0,0,0]).getDate();
		}
	},

	//查找月中的第一天的date
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	//判定 是否允许调整月份
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst),
			date = this._daylightSavingAdjustWidthTime(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1),[inst.currentHur,inst.currentMiu,inst.currentSed]);

		if (offset < 0) {
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth(),inst));
		}
		return this._isInRange(inst, date);
	},

	//给定的日期是否在接收范围内
	_isInRange: function(inst, date) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			minYear = null,
			maxYear = null,
			years = this._get(inst, "yearRange");
			if (years){
				yearSplit = years.split(":");
				currentYear = new Date().getFullYear();
				minYear = parseInt(yearSplit[0], 10);
				maxYear = parseInt(yearSplit[1], 10);
				if ( yearSplit[0].match(/[+\-].*/) ) {
					minYear += currentYear;
				}
				if ( yearSplit[1].match(/[+\-].*/) ) {
					maxYear += currentYear;
				}
			}

		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()) &&
			(!minYear || date.getFullYear() >= minYear) &&
			(!maxYear || date.getFullYear() <= maxYear));
	},

	//提供配置用来格式化和解析
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, "shortYearCutoff");
		shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
			monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames"),calculateWeek:this._get(inst,"calculateWeek"),"inst":inst};
	},

	//格式化给定的日期用来显示
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day === "object" ? day :
			this._daylightSavingAdjustWidthTime(new Date(year, month, day),[inst.currentHur,inst.currentMiu,inst.currentSed])) :
			this._daylightSavingAdjustWidthTime(new Date(inst.currentYear, inst.currentMonth, inst.currentDay),[inst.currentHur,inst.currentMiu,inst.currentSed]));
		date.setHours(inst.currentHur);
		date.setMinutes(inst.currentMiu);
		date.setSeconds(inst.currentSed);
		date.setMilliseconds(0);
		return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
	},
	//调用事件
	_apply : function(inst,type,datas,event){
		var callback = $.datepicker._get(inst,type);
		if (callback) {
			if(typeof callback ==="string"){
				return window[callback].apply((inst.input ? inst.input[0] : null),[event].concat(datas));
			}else if($.isFunction( callback )){
				return callback.apply((inst.input ? inst.input[0] : null), [event].concat(datas));
			}
		}
	}
});

//为日历组件元素绑定事件
function bindHover(dpDiv) {
	var selector = "button, .coral-datepicker-prev, .coral-datepicker-next, .coral-datepicker-calendar td a, .menuTimeSel";
	var selectormousedown = "#coral-datepicker-divId";
	return dpDiv.delegate(selector, "mouseout", function() {
			$(this).removeClass("coral-state-hover");
			if (this.className.indexOf("coral-datepicker-prev") !== -1) {
				$(this).removeClass("coral-datepicker-prev-hover");
			}
			if (this.className.indexOf("coral-datepicker-next") !== -1) {
				$(this).removeClass("coral-datepicker-next-hover");
			}
		})
		.delegate( selector, "mouseover", datepicker_handleMouseover );
}
function datepicker_handleMouseover() {
	if (!$.datepicker._isDisabledDatepicker( datepicker_instActive.inline? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
		$(this).parents(".coral-datepicker-calendar").find("a").removeClass("coral-state-hover");
		$(this).addClass("coral-state-hover");
		if (this.className.indexOf("coral-datepicker-prev") !== -1) {
			$(this).addClass("coral-datepicker-prev-hover");
		}
		if (this.className.indexOf("coral-datepicker-next") !== -1) {
			$(this).addClass("coral-datepicker-next-hover");
		}
	}
}
// jquery extend 忽略null
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props) {
		if (props[name] == null) {
			target[name] = props[name];
		}
	}
	return target;
}

/**
 * 日历组件的工厂方法调用
 * @param option string - 命令 ， 附加参数选项
 * 				 object - 为日历组件附加设置
 * @return jquery对象
 */
$.fn.datepicker = function(options){
	var returnValue = this;
	if ( !this.length ) {
		return this;
	}
	//初始化日历组件
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick);
		$.datepicker.initialized = true;
	}
	//在body中加入日历组件
	if ($("#"+$.datepicker._mainDivId).length === 0) {
		$("body").append($.datepicker.dpDiv);

	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);

	if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "getDateValue" || options === "widget" || options == "component")) {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	if (typeof options === "string" && (options === "valid")) {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
		//对 datepicker("option","xxx")进行处理
		//value -> getDateValue
		var method=options;
		if(arguments[1]=="value"){
			method="getDateValue";
		}
		return $.datepicker["_" + method + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	this.each(function() {
		//实例为空，判断为初始化
		if ( !$.data(this, PROP_NAME) ) {
			returnValue = typeof options === "string" ?
				$.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this].concat(otherArgs)) :
					$.datepicker._attachDatepicker(this, options);
		//判断为调用方法
		} else if ( !!$.data(this, PROP_NAME) ) {
			returnValue = typeof options === "string" ?
					$.datepicker["_" + options + "Datepicker"].
					apply($.datepicker, [this].concat(otherArgs)) :
						$.datepicker._attachDatepicker(this, options);
		}
	});
	return returnValue;
};

$.datepicker = new Datepicker(); // 单例模式
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "4.0.1";

})(jQuery);

/*!
 * 组件库4.0：下拉框
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

( function( $ ) {
"use strict";
	
$.component( "coral.checkbox", $.coral.formelement, {
	version: "4.0.1",
	castProperties : ["triggers"],
	options: {
		showStar: true,
		id: null,
		name: null,
		value: "",
		label: "",
		maxLabelWidth:"auto",
		labelField: null,
		starBefore: false,
		title: "",//只有设置maxLabelWidth属性的时候会显示title
		width: "auto",
		height: null,
		disabled: false,
		required: false,
		readonly: false,
		checked: false,
		errMsg: null,
		errMsgPosition: "leftBottom",
		onValidError: null,
		onKeyDown: null,
		onValidSuccess: null,
		onChange: $.noop,  /* 参数 ( event, { checked: boolean } ) */
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
    _create: function() {
    	var that = this,
    		options = this.options,
    		maxLabelWidth = options.maxLabelWidth,
    		label = options.label;
    	that.originalValue = "";
    	if ( !that.element.jquery ) {
    		that.element = $(that.element);
    	}    		
    	
    	that.element.addClass("coral-form-element-checkbox");
    	that.element.addClass("coral-validation-checkbox");

    	typeof that.element.attr("id") == "undefined" && !!that.options.id&&that.element.attr( "id", that.options.id );
    	that.options.id = that.element.uniqueId().attr("id");
    	
    	var name = that.element.attr("name");
    	typeof name != "undefined"?(that.options.name = name):(that.element.attr("name", that.options.name));
    	
    	if ( $.trim(that.element.val()) != "" && $.trim(that.element.val()) != "on" ) {
    		that.options.value = that.element.val();
    	} else if (that.options.value) {
    		that.element.val(that.options.value);
    	}
    	// 便于查找同一个name的所复选框
    	if (that.options.name) {
    		that.nameMark = "coral-checkbox-element-" + that._hashCode(that.options.name);
    		that.element.addClass(that.nameMark);
    	}    	
    	
		that.uiCheckbox = $("<span class=\"coral-checkbox\"></span>");
		that.uiLabel = $("<label class=\"coral-checkbox-label\" for='"+that.options.id+"'></label>");
		that.uiIcon = $("<span class=\"coral-checkbox-icon\"></span>");
		if ( maxLabelWidth == "auto" ){
			that.uiText = $("<span class=\"coral-checkbox-text\"></span>");
		}else{
			that.uiText = $("<span class=\'coral-checkbox-text\'  title=\'"+label+"\' style=\'max-width:"+maxLabelWidth+"px;\'></span>");
		}
			
		that.uiLabel.append(that.uiIcon);		
		that.uiLabel.append(this.uiText);
		if (that.options.label) {
			that.uiText.append(that.options.label);			
		}		
		if (that.options.title) {
			that.uiLabel.attr("title", that.options.title);
		}
		if (that.options.checked) {
			that.uiIcon.addClass("cui-icon-checkbox-checked coral-checkbox-hightlight");
			that.element.prop("checked", true);
		} else {
			that.uiIcon.addClass("cui-icon-checkbox-unchecked");
			that.element.prop("checked", false);
		}
		
		that.element.after(that.uiCheckbox);
		that.uiCheckbox.append(that.element).append(that.uiLabel);
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (options.labelField) {
			this.uiLabelField = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
			this.uiCheckbox.prepend(this.uiLabelField);
			this.uiCheckbox.addClass("coral-hasLabel");
		}
		if((that.element)[0].checked === true){
			that.originalValue = that.options.value;
		}
		// add label and required star before function @lhb @2015-04-27
		that._bindEvent();
		
		that._trigger("onCreate", null, []);
	},
	reset: function() {
		if ( this.originalValue === "") {
			this.uncheck();
		} else {
			this.check();
		}
	},
	// 获取checkbox name相同的list
	_getCheckboxs: function () {
		var that = this,
			form  = that.element.closest("form");
		
		if (!that.nameMark) return that.element;
		
		if ( form.length > 0 ) {
			return form.find($("."+that.nameMark)); 
		} else {
			return $("."+that.nameMark);
		}
	},
	_setDisabled: function(disabled) {
		//this._setOption("disabled", disabled);
		
		if (disabled) {
			this.element.prop("disabled", true);
			this.uiCheckbox.addClass("coral-state-disabled");			
		} else {
			this.element.prop("disabled", false);
			this.uiCheckbox.removeClass("coral-state-disabled");
		}
		
		this.options.disabled = ( disabled ? true : false );
	},
	_setReadonly: function(readonly) {
		if (readonly) {
			this.element.prop("readonly", true);
			this.uiCheckbox.addClass("coral-readonly");			
		} else {
			this.element.prop("readonly", false);
			this.uiCheckbox.removeClass("coral-readonly");
		}	
		this.options.readonly = !!readonly;
	},
	/**
	 * 获取焦点方法
	 */
	focus: function() {
		var that = this;
		if (this.options.disabled || this.options.readonly) return false;
		
		this.element.focus();
		return true;
	},
	_bindEvent: function() {
		var that = this;
		
		if ( this.options.disabled ) {
			this._setDisabled(this.options.disabled);
		}	
		
		this.element.bind("change", function(event){
			if ($(this).prop("checked")) {
				that.uiIcon.removeClass("cui-icon-checkbox-unchecked ").addClass("cui-icon-checkbox-checked coral-checkbox-hightlight");
			} else {
				that.uiIcon.removeClass("cui-icon-checkbox-checked coral-checkbox-hightlight").addClass("cui-icon-checkbox-unchecked");
			}
			that._trigger("onChange", event, [{ checked: !!that.element.prop("checked") }]);
		}).bind( "focus", function(event) {
			that.uiCheckbox.addClass("coral-checkbox-highlight");
		}).bind( "blur", function() {
			that.uiCheckbox.removeClass("coral-checkbox-highlight");
		}).bind( "keydown" + this.eventNamespace, function(e) {
			that._trigger("onKeyDown", e, {});
		});
		
		this.uiCheckbox.bind("mouseenter" + this.eventNamespace, function() {
			if (that.options.disabled || that.uiCheckbox.hasClass("coral-checkbox-highlight") || that.uiCheckbox.hasClass("coral-checkbox-highlight")) {
				return;
			}
			$(this).addClass("coral-checkbox-hover");
		}).bind("mouseleave" + this.eventNamespace, function() {
			if (that.options.disabled) {
				return;
			}
			$(this).removeClass("coral-checkbox-hover");
		});
		this.uiLabel.bind("click" ,function(e){
			if (that.options.readonly || that.options.isLabel) {
				return false;
			}
			that._trigger("onClick", e, {});
		});
	},
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		} 
		if (key === "disabled") {
			this._setDisabled(value);
		} 
		if (key === "label") {
			this.uiText.html(value);
		} 
		if (key ==="maxLabelWidth"){
			var maxLabelWidth = value;
			if ( value != "auto" ){
				maxLabelWidth = maxLabelWidth+"px";
				this.uiText.attr("title",this.options.label);
			} else {
				maxLabelWidth = "";
				this.uiText.attr("title","");
			}
			this.uiText.css("max-width",maxLabelWidth);
		}
		/*if (key === "isLabel") {
			this._setIsLabel(value);
			return;
		}*/
		this._super(key, value);
	},
	_destroy : function() {
		this.uiCheckbox.replaceWith( this.element );
		this.uncheck();
		this.element.removeAttr("value");
		this.element.removeClass("coral-form-element-checkbox");
		this.element.removeClass("coral-validation-checkbox");
		this.element.removeClass(this.nameMark);
	},
	// hash code
	_hashCode : function (str) {
		if (!str) return 0;
		str = "" + str;
		var h = 0, off = 0, len = str.length;
        for (var i = 0; i < len; i++) { 
        	h = 31 * h  + str.charCodeAt(off++);
        	if ( h > 0x7fffffff || h < 0x80000000) {  
        		h=h & 0xffffffff; 
        	}
        }
        return h; 
	},	
	component : function() {
		return this.uiCheckbox;
	},
	disable : function() {
		this._setDisabled(true);
	},
	readonly: function(){
		this._setReadonly(true);
	},
	enable : function() {
		this._setDisabled(false);
	},
	show : function() {
		this.component().show();
	},
	hide : function() {
		this.component().hide();
	},
	check: function() {
		if (!this.uiIcon.hasClass("coral-checkbox-hightlight")) {
			this.uiIcon.removeClass("cui-icon-checkbox-unchecked").addClass("cui-icon-checkbox-checked coral-checkbox-hightlight");
			this.element.prop("checked", true);
		}		
	},	
	uncheck : function() {
		if (this.uiIcon.hasClass("coral-checkbox-hightlight")) {
			this.uiIcon.removeClass("cui-icon-checkbox-checked coral-checkbox-hightlight").addClass("cui-icon-checkbox-unchecked");
			this.element.prop("checked", false);
		}	
	},
	isChecked: function() {
		return this.element.prop("checked");
	},
	getValue: function() {
		return this.getValues().join(",");
	},
	getValues : function() {
		var that = this,
			valArr = [];
		
		that._getCheckboxs().each(function() {
			var jq = $(this);
			if (jq.checkbox("isChecked")) {
				valArr.push(jq.val());
			}
		});
		return valArr;
	},
	refresh : function() {
		this._destroy();
		this._create();
	}
});
})(jQuery);

/*!
 * 组件库4.0：复选框组
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 *    jquery.validatehelper.js
 */

(function ($) {
"use strict";
	
$.component("coral.checkboxlist", $.coral.formelement, {
	version: "4.0.1",
	castProperties : ["data", "triggers"],
	options: {
		id:null,
		name:null,
		valueField:"value",
		textField :"text",
		//width : "auto",
		//height : 22,
		required: false,
		showStar: true,
		maxLabelWidth : "auto",
		labelField: null, // 表单元素前面的文本
		starBefore: false, // 必输项 * 是否前面
		column: null, // 每行放几个复选框
		disabled: false,
		readonly:false,
		value: "",
		data:null, // 数组形式: [{value:,text:},...]或者 字符串形式: "cn:中国;us:美国;..."
		url: null,
		termSplit : ";", // 如果data是字符串，则termSplit作为复选框组的分隔符
		itemSplit : ":", // 如果data是字符串，则每个复选框隐藏值与显示值的分隔符
		errMsg: null,
		errMsgPosition: "leftBottom",
		repeatLayout: "table", // "table", "flow" // flow 时自适应
		itemWidth: "auto", // repeatLayout 为 flow 时，radio item 控制宽度，用于对齐
		
		onValidError: null,
		onKeyDown: null,
		onValidSuccess: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false, // true 则不单独校验
		onChange: $.noop /*参数(event, {value:string,checked:boolean})*/
	},
    _create: function () {
    	var that = this,
    	    textbox = null, 
    	    valuebox = null,
    	    uiArrow = null,
    	    options = this.options;
    	if (!this.element.jquery) {
    		this.element = $(this.element);
    	}
    	
    	this.element.addClass("coral-form-element-checkboxlist  ctrl-init ctrl-form-element ctrl-init-checkboxlist coral-validation-checkboxlist");

    	typeof that.element.attr("id") == "undefined" && !!that.options.id&&that.element.attr( "id", that.options.id );
    	that.options.id = that.element.uniqueId().attr("id");    	
    	var name = that.element.attr("name");
    	typeof name != "undefined" ? (that.options.name = name) : (that.element.attr("name", that.options.name));
    	
		this.uiBoxlist = $("<span class=\"coral-checkboxlist\"></span>");
		this.uiInput   = $("<input type=\"hidden\">");
		if (this.options.name) {
			this.uiInput.attr("name", this.options.name);
		}
		if (this.options.value) {
			this.uiInput.val(this.options.value);
		}
		
		this._initData();		
		this.uiInput.appendTo(this.uiBoxlist);
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (options.labelField) {
			this.uiLabel = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
			this.uiBoxlist.prepend(this.uiLabel);
			this.uiBoxlist.addClass("coral-hasLabel");
		}
		// add label and required star before function @lhb @2015-04-27
		this.uiBoxlist.insertAfter(this.element);		
		this.element.hide();		
		this._bindEvent();
	},
	reload: function( url ){
		
	},
	/**
	 * 获取生成筛选框的数据
	 * @returns
	 */
	_initData : function () {
		var that = this,
			options = this.options;
		if (this.options.url) {
			//data = $.loadJson(this.options.url);
			if ( this.xhr ){
				this.xhr.abort();
			}
			this.xhr = $.ajax(this._ajaxSettings( ));
			this.xhr
				.success(function( data ) {
					that._loadData(data);
				}).complete(function( jqXHR, status ) {
					if ( jqXHR === that.xhr ) {
						that.xhr = null;
					}
				}).error(function(){
					 $.alert( "Json Format Error!" );
				});
		}else if (this.options.data) {
			this._loadData(this.options.data);
		}
		/*data = data || this.options.data;
		if (typeof data === "string") {
			tmpArr = data.split(this.options.termSplit);
			data = [];
			for (; i < tmpArr.length; i++) {
				tmpRow = tmpArr[i];
				rowArr = tmpRow.split(this.options.itemSplit);
				option = {};
				option[this.options.valueField] = rowArr[0];
				option[this.options.textField]  = rowArr[1];
				data.push(option);
			}
		}*/
	},
	_ajaxSettings :function(){
		var opts = this.options,
	        that = this;
		return {
			type: "get",
			url: opts.url,
			data: {},
			async: false,
			dataType: "json"
		};
	},
	_loadData : function (data) {
		var tmpArr = null, checked=[],row,
	        i = 0, option = null, 
	        tmpRow = null, rowArr = null;
		if (typeof data === "string") {
			tmpArr = data.split(this.options.termSplit);
			data = [];
			for (; i < tmpArr.length; i++) {
				tmpRow = tmpArr[i];
				rowArr = tmpRow.split(this.options.itemSplit);
				option = {};
				option[this.options.valueField] = rowArr[0];
				option[this.options.textField]  = rowArr[1];
				data.push(option);
			}
		}
		this.data = data;
		for(i;i<data.length;i++){
			row = data[i];
			if(row['checked']){
				checked.push(row[this.options.valueField]);
			}
		}
		if(this.options.value) {
			checked = this.options.value.split(",");
		}
		if ( !this.isInit ) {
			this.isInit = true;
			this.originalValue = checked.join(",");
		}
		this._renderChkItem();
		this.setValue(checked);
	},
	_renderChkItem: function(){
		if (this.options.repeatLayout == "table") {
			if (this.options.column == null ) {
				this.options.column = 3;
			} 
			this._renderTableItem();			
			this.uiTable.appendTo(this.uiBoxlist);
		} else if (this.options.repeatLayout == "flow") {
			if (this.options.column == null ) {
				this.options.column = this.data.length;
			} 
			this._renderBorderItem();
			this.uiBorder.appendTo(this.uiBoxlist);
		}		
	},
	reset: function(){
		this.setValue(this.originalValue);
	},
	_renderBorderItem: function () {
		var that = this,
			opts = this.options,
			column = this.options.column,
			data = this.data;
		
		that.uiBorder = $("<span class=\"coral-checkboxlist-border\"></span>");
		
		for (var i in data) {
			if ( i > (column-1) && i%(column) == 0) {
				$("<br/>").appendTo(that.uiBorder);
			}
			that._renderItem(data[i]).css("width", opts.itemWidth).appendTo(that.uiBorder);
		}
	},
	_renderTableItem: function () {
		this.uiTable = $("<table></table>");
		
		var i = 0, j = 0, 
		    data = this.data, 
		    len  = data.length || 0, 
		    column = this.options.column,
		    rows = 0, uiTr = null, uiTd = null;
		
		if (!data || data.length < 1) return;
		
		rows = Math.ceil(len/column);
		
		for (; i < rows; i++) {
			uiTr = $("<tr></tr>");
			for (j = 0; j < column ; j++) {
				uiTd = $("<td></td>");
				if ((i*column + j) < len) {
					this._renderItem(data[(i*column + j)]).appendTo(uiTd);
				}
				uiTd.appendTo(uiTr);
			}
			uiTr.appendTo(this.uiTable);
		}
	},
	_renderItem : function (cellData) {
		var isHidden = cellData.hidden == true?"hidden":"";
		var uiCheckbox = $("<span class='coral-checkbox "+isHidden+"'></span>"),
		    uiLabel    = $("<span class='coral-checkbox-label'></span>"),
		    uiIcon = $("<span class='coral-checkbox-icon'></span>"),
		    maxLabelWidth = this.options.maxLabelWidth,
		    uiText = $(),
		    value      = cellData[this.options.valueField],
		    text       = cellData[this.options.textField];
		
		//uiCheckbox.val( value );	
		if ( maxLabelWidth == "auto" ){
			uiText = $("<span class=\"coral-checkbox-text\"></span>");
		}else{
			uiText = $("<span class=\'coral-checkbox-text\'  title=\'"+text+"\' style=\'max-width:"+maxLabelWidth+"px;\'></span>");
		}
		uiCheckbox.attr( "data-value", value );	
		
		uiLabel.append(uiIcon).append(uiText);
		uiLabel.appendTo(uiCheckbox);
		uiIcon.addClass("cui-icon-checkbox-unchecked");
		uiText.append(text);
		
		return uiCheckbox;
	}, 
	_bindEvent: function() {
		var that = this;
		
		if ( this.options.disabled ) {
			this._setDisabled(this.options.disabled);
		}		
		this.uiBoxlist.find(".coral-checkbox").each(function() {
			$(this).bind("mouseenter" + that.eventNamespace, function() {
				if ($(this).hasClass("coral-state-disabled")) {
					return;
				}
				$(this).addClass("coral-checkbox-hover");
			}).bind("mouseleave" + that.eventNamespace, function() {
				if ($(this).hasClass("coral-state-disabled")) {
					return;
				}
				$(this).removeClass("coral-checkbox-hover");
			}).bind("click" + that.eventNamespace, function( event ) {
				if (that.options.disabled) {
					return;
				}
				
				var uiCheckbox = $(this),
					  uiIcon = uiCheckbox.find(".coral-checkbox-icon");
				
				if (uiCheckbox.hasClass("coral-state-disabled")) {
					event.stopPropagation();
					return;
				}
				if (uiIcon.hasClass("coral-checkboxlist-item-highlight")) {
					uiIcon.removeClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight").addClass("cui-icon-checkbox-unchecked");
				} else {
					uiIcon.removeClass("cui-icon-checkbox-unchecked").addClass("coral-checkboxlist-item-highlight cui-icon-checkbox-checked");
				}
				var oldValue = that.getValue();
				that._changeValue();
				that._trigger("onChange", null, {value: that.uiInput.val(),oldValue:oldValue, checked: uiIcon.hasClass("coral-checkboxlist-item-highlight")});
				event.stopPropagation();
			}).bind( "keydown" + this.eventNamespace, function(e) {
				that._trigger("onKeyDown", e, {});
			});
		});
		this.uiBoxlist.find(".coral-checkbox-label").each(function() {
			$(this).bind("click" + that.eventNamespace, function( event ) {
				if (that.options.readonly) {
					return false;
				}				
			})
		});	
	},
	_changeValue: function() {
		var that = this, valArr = [];

		this.uiBoxlist.find(".coral-checkbox").each(function() {
			if ($(this).find(".coral-checkbox-icon").hasClass("coral-checkboxlist-item-highlight")) {				
				valArr.push( $(this).attr("data-value") );
			}			
		});
		
		this.uiInput.val(valArr.toString());
	},
	_setDisabled: function(disabled) {
		disabled = !!disabled;

		this.uiBoxlist.find(".coral-checkbox").each(function() {
			$(this).toggleClass( "coral-state-disabled", disabled );
		});
		
		this.options.disabled = disabled;
	},
	_setReadonly: function(readonly) {
		readonly = !!readonly;

		this.uiBoxlist.find(".coral-checkbox").each(function() {
			$(this).toggleClass( "coral-readonly", readonly );
		});
		
		this.options.readonly = readonly;
	},	
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		} 
		if (key === "disabled") {
			this._setDisabled(value);
			return;
		}
		if (key ==="maxLabelWidth"){
			var maxLabelWidth = value;
			if ( value != "auto" ){
				maxLabelWidth = maxLabelWidth+"px";
                var array = this.component().find(".coral-checkbox-text");
                for( var i=0;i<array.length;i++){
                	var text = $(array[i]).html();
                	$(array[i]).attr("title",text);
                }
			} else {
				maxLabelWidth = "";
				this.component().find(".coral-checkbox-text").attr("title","");
			}
			this.component().find(".coral-checkbox-text").css("max-width",maxLabelWidth);
		}
		this._super(key, value );
	},
	_destroy : function() {
		this.component().remove();
		if (this.options.name) {
			this.element.removeAttr("orgname").attr("name", this.options.name);
		}
		this.element.removeClass("coral-form-element-checkboxlist");
		this.element.removeClass("coral-validation-checkboxlist");
		this.element.show();
	},
	focus: function() {
		//TODO:focus
	},
	component : function() {
		return this.uiBoxlist;
	},
	disable : function() {
		this._setOption("disabled", true);
		this._setDisabled(true);
	},
	readonly : function(){
		this._setReadonly("readonly",true);
	},
	enable : function() {
		this._setOption("disabled", false);
		this._setDisabled(false);
	},
	disableItem : function (value) {
		this.uiBoxlist.find(".coral-checkbox[data-value=\"" + value + "\"]").toggleClass( "coral-state-disabled", true );
	},
	enableItem : function (value) {
		this.options.disabled = false;
		
		var item = this.uiBoxlist.find(".coral-checkbox[data-value=\"" + value + "\"]").toggleClass( "coral-state-disabled", false );		
	},
	show : function() {
		this.component().show();
	},
	hide : function() {
		this.component().hide();
	},
	getValue : function() {
		return this.uiInput.val();
	},
	setValue : function(value, force) {
		var oldValue = this.getValue() || [];
		this.uiBoxlist.find(".coral-checkboxlist-item-highlight").each(function() {
			$(this).removeClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight").addClass("cui-icon-checkbox-unchecked");
		});
		
		var i = 0, valArr = $.isArray(value) ? value 
				: ((!value || typeof value !== "string" || "" === $.trim(value)) ? [] : value.split(","));
		for (; i < valArr.length; i++) {
			this.uiBoxlist.find(".coral-checkbox[data-value=\"" + valArr[i] + "\"]").find(".coral-checkbox-icon")
							   .removeClass("cui-icon-checkbox-unchecked").addClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight");
		}
		
		this.uiInput.val(valArr.toString());
		
		/*if (force !== true) {
			this.valid();
		}*/
	},
	// 反选 force 的意义同 setValue 中的 force
	invertCheck : function (force) {
		var valArr = [];
		
		this.uiBoxlist.find(".coral-checkboxlist-item-highlight").each(function() {
			$(this).removeClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight").addClass("coral-checkbox-temp");
		});
		this.uiBoxlist.find(".cui-icon-checkbox-unchecked").each(function() {
			$(this).removeClass("cui-icon-checkbox-unchecked").addClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight");
		});
		this.uiBoxlist.find(".coral-checkbox-temp").each(function() {
			$(this).removeClass("coral-checkbox-temp").addClass("cui-icon-checkbox-unchecked");
		});
		
		this.uiBoxlist.find(".coral-checkbox").each(function() {
			if ($(this).find(".coral-checkbox-icon").hasClass("coral-checkboxlist-item-highlight")) {
				valArr.push( $(this).attr("data-value") );
			}			
		});
		
		this.setValue(valArr, force);		
	},
	// 全选；若要反选请使用 setValue(null)
	checkAll : function () {
		var valArr = [], i = 0, row = null, data = this.data;
		for (; i < data.length; i++ ) {
			row = data[i];
			valArr.push(row[this.options.valueField]);
		}
		this.setValue(valArr);
	},
	// 获取指定项的显示名称
	getText : function (values/*String:"CN,US,EN" or Array:["CN","US","EN"]*/) {
		var i    = 0, 
		    data = this.data,
		    val  = null,
		    txtArr = [];
		if (!values) {
			values = this.getValue().split(",");
		} else if (typeof values) {
			values = values.split(",");
		}
		for (; i < data.length; i++) {
			val = data[i][this.options.valueField];
			if ($.inArray(val, values) > -1) txtArr.push(data[i][this.options.textField]);
		}
		return txtArr.toString();
	}
});
})(jQuery);

/*
 * 组件库 4.0 ： 单选框
 * 
 * 依赖 JS 文件 ：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

( function( $ ) {
"use strict";

$.component( "coral.radio", $.coral.formelement , {
	version: "4.0.1",
	castProperties : ["triggers"],
	options: {
		showStar: true,
		id: null,
		name: null,
		width: "auto",
		height: 24,
		label: "",
		starBefore: false,
		labelField: null,
		disabled: false,
		readonly:false,
		allowCancel: false,
		checked: false,
		required: false,
		isCheck: false,
		value: "",
		errMsg: null,
		errMsgPosition: "leftBottom",
		onValidError: null,
		onValidSuccess: null,
		onClick: null,
		onKeyDown: null,
		onChange: $.noop,  // 参数(event, { checked })
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
    _create: function() {
    	var that = this,
    		options = this.options;
    	if ( !that.element.jquery ) {
    		that.element = $(that.element);
    	}
    	
    	that.element.addClass("coral-form-element-radio");
    	that.element.addClass("coral-validation-radio");
    	
    	typeof that.element.attr("id") == "undefined" && !!that.options.id&&that.element.attr( "id", that.options.id );
    	that.options.id = that.element.uniqueId().attr("id");
    	
    	var name = that.element.attr("name");
    	typeof name != "undefined"?(that.options.name = name):(that.element.attr("name", that.options.name));

    	if ( $.trim( that.element.val() ) != "" && $.trim(that.element.val()) != "on" ) {
    		that.options.value = that.element.val();
    	} else if (that.options.value) {
    		that.element.val(that.options.value);
    	}
    	// 便于查找同一个 name 的所单选框
    	that.nameMark = "coral-radio-element-" + that._hashCode( that.options.name );
		that.element.addClass(that.nameMark);
		
		that.uiRadio = $("<span class=\"coral-radio\"></span>");
		that.uiLabel = $("<label class=\"coral-radio-label\" for="+that.options.id+"></label>");
		that.uiIcon = $("<span class=\"coral-radio-icon\"></span>");
		
		that.uiLabel.append(that.uiIcon);		
		if (that.options.label) {
			that.uiLabel.append(that.options.label);
		}
		
		if (that.options.checked) {
			that._getRadios().not(that.element).radio("uncheck");
			that.uiIcon.addClass("cui-icon-radio-checked coral-radio-hightlight");
			that.element.prop("checked", true);
		} else {
			that.uiIcon.addClass("cui-icon-radio-unchecked");
			that.element.prop("checked", false);
		}		
		that.element.after(that.uiRadio);
		that.uiRadio.append(that.element).append(that.uiLabel);
		
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (options.labelField) {
			this.uiLabelField = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
			this.uiRadio.prepend(this.uiLabelField);
			this.uiRadio.addClass("coral-hasLabel");
		}
		// add label and required star before function @lhb @2015-04-27
		if((that.element)[0].checked === true){
			that.originalValue = this.getValue();
		} 
		that._bindEvent();
	},
	reset : function() {
		if ( this.originalValue === "off" || this.originalValue === "") {
			this.uncheck();
		} else {
			this.check();
		}
	},
	// 获取radio name相同的list
	_getRadios: function () {
		var that = this,
			form  = that.element.closest("form");
		
		if ( form.length > 0 ) {
			return form.find($("."+that.nameMark)); 
		} else {
			return $("."+that.nameMark);
		}
	},
	_setDisabled: function(disabled) {
		//this._setOption("disabled", disabled);
		
		if (disabled) {
			this.element.prop("disabled", true);
			this.uiRadio.addClass("coral-state-disabled");
		} else {
			this.element.prop("disabled", false);
			this.uiRadio.removeClass("coral-state-disabled");
		}
		
		this.options.disabled = (disabled ? true : false);
	},
	_setReadonly:function(readonly){
		if (readonly) {
			this.element.prop("reaonly", true);
			this.uiRadio.addClass("coral-readonly");
		} else {
			this.element.prop("readonly", false);
			this.uiRadio.removeClass("coral-state-readonly");
		}	
		this.options.readonly = !!readonly;
	},
	/**
	 * 获取焦点方法
	 */
	focus: function() {
		var that = this;
		if (this.options.disabled || this.options.readonly) return false;
		
		this.element.focus();
		return true;
	},
	_bindEvent: function() {
		var that = this;		
		if ( this.options.disabled ) {
			this._setDisabled(this.options.disabled);
		}
		var suppressClick;
		this.element.bind( "focus", function() {
			that.uiRadio.addClass("coral-radio-highlight");
		}).bind( "blur", function() {
			that.uiRadio.removeClass("coral-radio-highlight");
		}).bind( "click", function(event) {
			if (that.options.disabled) {
				return ;
			}		
			that._trigger("onClick", null, { checked: !!that.element.prop("checked") });	
			if ( suppressClick ) {
				suppressClick = false;
				return false;
			}
		}).bind( "keydown" + this.eventNamespace, function(e) {
			that._trigger("onKeyDown", e, {});
		});
		this.uiRadio.bind("mouseenter" + this.eventNamespace, function() {
			if (that.options.disabled) {
				return;
			}
			$(this).addClass("coral-radio-hover");
		}).bind("mouseleave" + this.eventNamespace, function() {
			if (that.options.disabled) {
				return;
			}
			$(this).removeClass("coral-radio-hover");
		});
		this.uiLabel.bind("click" ,function(e){
			//e.preventDefault();
			if ( that.options.readonly || that.options.disabled ) {
				return false;
			}
			suppressClick = true;
			that.options.isCheck = $(that.element).prop("checked");
			if ( !that.options.isCheck ) {
				that._clearCheckedState();
				that.uiIcon.removeClass("cui-icon-radio-unchecked");
				that.uiIcon.addClass("cui-icon-radio-checked coral-radio-hightlight");
				that.element.prop("checked", true);
				that._trigger("onChange", null, [{ checked: !!that.element.prop("checked") }]);	
			} else {
				if ( !that.options.allowCancel ) {
					e.preventDefault();
					return false;
				}
				that._clearCheckedState();
				that.uiIcon.addClass("cui-icon-radio-unchecked");
				that.element.prop("checked", false);
				that._trigger("onChange", null, [{ checked: !!that.element.prop("checked") }]);	
			}
			
		})
	},
	clear: function(){
		
	},
	_clearCheckedState: function(){
		this._getRadios().each(function(){
			$(this).radio("component").find(".coral-radio-icon").removeClass("cui-icon-radio-checked coral-radio-hightlight").addClass(" cui-icon-radio-unchecked");
		});
	},
	// hash code
	_hashCode : function(str) {
		if ( !str ) {
			return 0;
		}	
		str = "" + str;		
		var h = 0, off = 0, len = str.length;        
		for (var i = 0; i < len; i++) { 
        	h = 31 * h  + str.charCodeAt(off++);
        	if ( h > 0x7fffffff || h < 0x80000000) {  
        		h=h & 0xffffffff; 
        	}
        }
		
        return h; 
	},		
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		} 
		if (key === "disabled") {
			this._setDisabled(value);
		} 
		this._super(key, value );
	},
	_destroy: function() {
		this.uiRadio.replaceWith( this.element );
		this.uncheck();// just uncheck not remove the attr value
		this.element.removeClass("coral-form-element-radio");
		this.element.removeClass("coral-validation-radio");
		this.element.removeClass(this.nameMark);
	},
	component: function() {
		return this.uiRadio;
	},
	disable: function() {
		this._setDisabled(true);
	},
	enable: function() {
		this._setDisabled(false);
	},
	show: function() {
		this.component().show();
	},
	hide: function() {
		this.component().hide();
	},
	check: function() {
		var that = this;
		
		if (this.uiIcon.hasClass("cui-icon-radio-unchecked")) {
			that._getRadios().each(function(){
				$(this).radio("component").find(".coral-radio-icon").removeClass("cui-icon-radio-checked coral-radio-hightlight").addClass(" cui-icon-radio-unchecked");
			});
			this.uiIcon.removeClass("cui-icon-radio-unchecked").addClass("cui-icon-radio-checked coral-radio-hightlight");
			this.element.prop("checked", true);
		}		
	},
	uncheck: function() {
		if (this.uiIcon.hasClass("coral-radio-hightlight")) {
			this.uiIcon.removeClass("cui-icon-radio-checked coral-radio-hightlight").addClass("cui-icon-radio-unchecked");
			this.element.prop("checked", false);
		}	
	},
	isChecked: function() {
		return this.element.prop("checked");
	},
	/**
	 * TODO: 待验证是否合理
	 */
	setValue : function(value) {
		if ( "on" === value ) {
			this.check();
		} else {
			this.uncheck();
		}
	},
	getValue: function() {
		return this.getValues().join(",");
	},
	getValues: function() {
		var that = this,
			valArr = [];

		that._getRadios().each(function() {
			var jq = $(this);
			if (jq.radio("isChecked")) {
				valArr.push(jq.val());
			}
		});
		
		return valArr;
	},
	refresh: function() {
		this._destroy();
		this._create();
	}
});
})(jQuery);

/*!
 * 组件库4.0：复选框组
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 *    jquery.validatehelper.js
 */

(function ($) {
"use strict";
	
$.component("coral.radiolist", $.coral.formelement,{
	version: "4.0.1",
	castProperties : ["data", "triggers"],
	options: {
		id: null,
		name: null,
		valueField: "value",
		textField : "text",
		//width : "auto",
		//height : 22,
		required : false,
		labelField: null, // 表单元素前面的文本
		starBefore: false, // 必输项 * 是否前面
		showStar: true,
		column : null, // 每行放几个单选框
		disabled : false,
		readonly:false,
		isCheck: false,
		allowCancel:false,
		value : "",
		valueIndex: null, // number
		data  : [], // 数组形式: [{value:,text:},...]或者 字符串形式: "cn:中国;us:美国;..."
		url   : null,
		termSplit : ";", // 如果data是字符串，则termSplit作为复选框组的分隔符
		itemSplit : ":", // 如果data是字符串，则每个复选框隐藏值与显示值的分隔符
		repeatLayout: "table", // "table", "flow" // flow 时自适应
		itemWidth: "auto", // repeatLayout 为 flow 时，radio item 控制宽度，用于对齐

		errMsg: null,
		errMsgPosition: "leftBottom",
		onLoad: null, // url
		onValidError: null,
		onKeyDown: null,
		onValidSuccess: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false, // true 则不单独校验
		onChange : $.noop /*参数(event, {value: string, checked: boolean})*/
	},
    _create: function () {
    	var that = this,
    	    textbox = null, 
    	    valuebox = null,
    	    uiArrow = null,
    	    options = this.options;
    	
    	this._prepareInit();
    	this._initComponent();
    	this._setDefaultValue();
		// 数据处理
		this._initData();
		this._bindEvent();
		
		if ( this.options.url ) {
			this._trigger("onLoad", null, [{data: this.getData()}]);
		}
	},
	_prepareInit: function(){
		this.isInit = false;
	},
	_initComponent: function(){
		this.element.addClass("coral-form-element-radiolist coral-validation-radiolist ctrl-init ctrl-form-element ctrl-init-radiolist");

    	typeof this.element.attr("id") == "undefined" && !!this.options.id&&that.element.attr( "id", this.options.id );
    	this.options.id = this.element.uniqueId().attr("id");
    	
    	var name = this.element.attr("name");
    	typeof name != "undefined" ? (this.options.name = name) : (this.element.attr("name", this.options.name));

    	this.uiBoxlist = $("<span class=\"coral-radiolist\"></span>");
		this.uiInput   = $("<input type=\"hidden\">");
		if (this.options.name) {
			this.uiInput.attr("name", this.options.name);
			this.element.removeAttr("name").attr("orgname", this.options.name);
		}
		this.uiInput.appendTo(this.uiBoxlist);
		// add label before function @lhb @2015-04-27 add labelField attribute
		if (this.options.labelField) {
			this.uiLabel= $("<label class=\"coral-label\">"+ this.options.labelField +"</label>");
			this.uiBoxlist.prepend(this.uiLabel);
			this.uiBoxlist.addClass("coral-hasLabel");
		}
		this.uiBoxlist.insertAfter(this.element);
		this.element.hide();
	},
	_setDefaultValue: function() {
		
	},
	/**
	 * 获取生成筛选框的数据
	 * @returns
	 */
	_initData: function() {
		var that = this,
			options = this.options;

		if (options.url) {
			if ( this.xhr ){
				this.xhr.abort();
			}
			this.xhr = $.ajax(this._ajaxSettings( ));
			this.xhr
				.success(function( data ) {
					that._loadData(data);
				}).complete(function( jqXHR, status ) {
					if ( jqXHR === that.xhr ) {
					    that.xhr = null;
					}
				}).error(function(){
					 $.alert( "Json Format Error!" );
				});
		} else if (options.data) {
			this._loadData(options.data);
		}
	},
	_ajaxSettings :function(){
		var opts = this.options,
	        that = this;
		return {
			type: "get",
			url: opts.url,
			data: {},
			async: false,
			dataType: "json"
		};
	},
	_loadData : function (data) {
		var tmpArr = null, row,checked,
	        i = 0, option = null, 
	        tmpRow = null, rowArr = null;
		if (typeof data === "string") {
			tmpArr = data.split(this.options.termSplit);
			data = [];
			for (; i < tmpArr.length; i++) {
				tmpRow = tmpArr[i];
				rowArr = tmpRow.split(this.options.itemSplit);
				option = {};
				option[this.options.valueField] = rowArr[0];
				option[this.options.textField]  = rowArr[1];
				data.push(option);
			}
		}
		this.data = data;
		for(i;i<data.length;i++){
			row = data[i];
			if(row['checked']){
				checked=row[this.options.valueField];
			}
		}
		if (this.options.value) {
			checked = this.options.value;
		}
		if ( !this.isInit ) {
			this.isInit = true;
			this.originalValue = checked;
		}
		this._renderRadioItem();
		this.setValue(checked);
	},
	_renderRadioItem: function(){
		// 创建复选框组
		if (this.options.repeatLayout == "table") {
			if (this.options.column == null ) {
				this.options.column = 3;
			} 
			this._renderTableItem();
			this.uiTable.appendTo(this.uiBoxlist);
		} else if (this.options.repeatLayout == "flow") {
			if (this.options.column == null ) {
				this.options.column = this.data.length;
			} 
			this._renderFlowItem();
			this.uiBorder.appendTo(this.uiBoxlist);
		}		
		
	},
	reset: function(){
		this.setValue(this.originalValue);
	},
	/**
	 * 返回data ( url / data )
	 */
	getData: function () {
		return this.data;
	},
	_renderFlowItem: function () {
		var that = this,
			opts = this.options,
			column = this.options.column,
			data = this.data;
		
		that.uiBorder = $("<span class=\"coral-radiolist-border\"></span>");
		
		for (var i in data) {
			if ( i > (column-1) && i%(column) === 0) {
				$("<br/>").appendTo(that.uiBorder);
			}
			that._renderItem(data[i]).css("width", opts.itemWidth).appendTo(that.uiBorder);
		}
	},
	_renderTableItem: function () {
		this.uiTable = $("<table></table>");
		
		var i = 0, j = 0, 
		    data = this.data, 
		    len  = data.length || 0, 
		    column = this.options.column,
		    rows = 0, uiTr = null, uiTd = null;
		
		if (!data || data.length < 1) return;
		
		rows = Math.ceil(len/column);
		
		for (; i < rows; i++) {
			uiTr = $("<tr></tr>");
			for (j = 0; j < column ; j++) {
				uiTd = $("<td></td>");
				if ((i*column + j) < len) {
					this._renderItem(data[(i*column + j)]).appendTo(uiTd);
				}
				uiTd.appendTo(uiTr);
			}
			uiTr.appendTo(this.uiTable);
		}
	},
	_renderItem : function (cellData) {
		var isHidden = cellData.hidden === true?"hidden":"";
		var uiRadio = $("<span class='coral-radio "+isHidden+"'></span>"),
		    uiLabel    = $("<label class='coral-radio-label'></label>"),
		    uiIcon = $("<span class='coral-radio-icon'></span>"),
		    value      = cellData[this.options.valueField],
		    text       = cellData[this.options.textField];
		
		uiRadio.attr("value", value);		
		uiLabel.append(uiIcon).append(text);
		uiLabel.appendTo(uiRadio);
		uiIcon.addClass("cui-icon-radio-unchecked");
		
		return uiRadio;
	}, 
	_bindEvent: function() {
		var that = this;
		
		if ( this.options.disabled ) {
			this._setDisabled ( this.options.disabled );
		}
		this._on( {
			"mouseenter .coral-radio": function( e ){
				if ( that.options.readonly ) {
					return false;
				}
				var radio = $( e.target ).closest( ".coral-radio" );
				if ( $( radio ).hasClass( "coral-state-disabled" ) ) {
					return;
				}
				$( radio ).addClass( "coral-radio-hover" );
			},
			"mouseleave .coral-radio": function( e ){
				if ( that.options.readonly ) {
					return false;
				}
				var radio = $( e.target ).closest( ".coral-radio" );
				if ( $( radio ).hasClass( "coral-state-disabled" ) ) {
					return;
				}
				$( radio ).removeClass( "coral-radio-hover" );
			},
			"keydown .coral-radio": function( e ){
				that._trigger( "onKeyDown", e, {} );
			},
			"click .coral-radio": function( e ){
				var radio = $( e.target ).closest( ".coral-radio" );
				if ( that.options.readonly ) {
					return false;
				}				
				var uiRadio = radio,
					uiIcon = uiRadio.find( ".coral-radio-icon" ),
				    value   = uiRadio.attr( "value" ),
				    oldValue = that.getValue();
				if ( value == oldValue ){
					if ( !this.options.allowCancel ) return false;
					uiIcon.removeClass( "cui-icon-radio-checked coral-radiolist-item-hightlight" ).addClass( "cui-icon-radio-unchecked" );
					that.uiInput.val( "" );
				} else {
				    that.setValue( value );
				    that._trigger( "onChange", null, {value: value, checked: uiIcon.hasClass( "coral-radiolist-item-hightlight" )} );
				}				
				e.stopPropagation();
			}
		} );
	},
	_setDisabled: function(disabled) {
		disabled = !!disabled;
		
		this.uiBoxlist.find(".coral-radio").each(function() {
			$(this).toggleClass( "coral-state-disabled", disabled );
		});
		
		this.options.disabled = disabled;
	},	
	_setReadonly: function(readonly) {
		readonly = !!readonly;
		
		this.uiBoxlist.find(".coral-radio").each(function() {
			$(this).toggleClass( "coral-readonly", readonly );
		});
		
		this.options.readonly = readonly;
	},
	_setOption: function(key, value) {
		if (key === "id" || key === "name") {
			return ;
		}

		if (key === "disabled") {
			this._setDisabled(value);
		}
		if (key === "readonly") {
			this._setReadonly(value);
		}
		
		this._super(key, value );
	},
	_destroy: function() {
		// ??
		this.component().remove();
		
		if (this.options.name) {
			this.element.removeAttr("orgname").attr("name", this.options.name);
		}
		this.element.removeClass("coral-form-element-radiolist");
		this.element.removeClass("coral-validation-radiolist");
		this.element.show();
	},
	focus: function(){
		//TODO: focus 
	},
	component: function() {
		return this.uiBoxlist;
	},
	disable: function() {
		this._setDisabled(true);
	},
	readonly: function(){
		this._setReadonly(true);
	},
	enable: function() {
		this._setDisabled(false);
	},
	disableItem: function (value) {
		this.uiBoxlist.find( ".coral-radio[value=\"" + value + "\"]" ).toggleClass( "coral-state-disabled", true );
	},
	enableItem: function (value) {
		this.options.disabled = false;
		this.uiBoxlist.find( ".coral-radio[value=\"" + value + "\"]" ).toggleClass( "coral-state-disabled", false );
	},
	show: function() {
		this.component().show();
	},
	hide: function() {
		this.component().hide();
	},	
	getValue: function() {
		return this.uiInput.val();
	},
	setValue: function( value ) {
		this.uiBoxlist.find(".coral-radiolist-item-hightlight").each(function() {
			$(this).removeClass("cui-icon-radio-checked coral-radiolist-item-hightlight").addClass("cui-icon-radio-unchecked");
		});
		
		var item = this.uiBoxlist.find(".coral-radio[value=\"" + value + "\"]").find(".coral-radio-icon")
			.removeClass("cui-icon-radio-unchecked").addClass("cui-icon-radio-checked coral-radiolist-item-hightlight");
		this.uiBoxlist.find(".coral-radio").removeClass("coral-state-highlight");
		this.uiBoxlist.find(".coral-radio[value=\"" + value + "\"]").addClass("coral-state-highlight");
		
		this.uiInput.val( value );	
	},
	// 获取指定项的显示名称
	getText: function (value) {
		var i    = 0, 
		    data = this.data,
		    val  = null,
		    txtArr = [];
		if (!value) {
			value = this.getValue();
		}
		for (; i < data.length; i++) {
			val = data[i][this.options.valueField];
			if (val == value) return (data[i][this.options.textField]);
		}
		return "";
	}
});
})(jQuery);

/*!
 * 组件库4.0.1：进度条
 *
 * 依赖JS文件:
 *   jquery.coral.code.js
 *   jquery.coral.component.js
 */
(function( $, undefined ) {
"use strict";

$.component( "coral.progressbar", {
	version: "4.0.1",
	options: {
		id: null,
		name: null,
		max: 100,
		value: 0,
		text: "{value}%",

		onChange: null,
		onComplete: null
	},

	min: 0,

	_create: function() {
		this.oldValue = this.options.value = this._constrainedValue();

		this.element
			.addClass( "coral-progressbar coral-component coral-corner-all" );

		this.valueDiv = $( "<div class=\"coral-progressbar-value coral-corner-left\"></div>" )
			.appendTo( this.element );
		this.textDiv = $("<div class=\"coral-progressbar-text\"></div>").appendTo(this.valueDiv);
		// 进度条宽度
		this.valueWidth = this.element.width() - (this.valueDiv.outerWidth(true) - this.valueDiv.outerWidth());

		this._refreshValue();
	},

	_destroy: function() {
		this.element
			.removeClass( "coral-progressbar coral-component coral-component-content coral-corner-all" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}
		return (this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) ));
	},

	_setOptions: function( options ) {
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {
			value = Math.max( this.min, value );
		}
		if ( key === "disabled" ) {
			this.element
				.toggleClass( "coral-state-disabled", !!value )
				.attr( "aria-disabled", value );
		}
		this._super( key, value );
	},

	_percentage: function() {
		return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage().toFixed(0),
			text = this.options.text.replace(/{value}/, percentage),
			left = 0, top = 0;

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.toggleClass( "coral-corner-right", value === this.options.max )
			.width(this.valueWidth * percentage / 100);
		
		if (100 == percentage) this.valueDiv.width("auto");
		
		this.textDiv.html(text);
		
		
		left = (this.element.position().left + (this.element.outerWidth()  - this.textDiv.outerWidth()) / 2);
		top  = (this.element.position().top  + (this.element.outerHeight() - this.textDiv.outerHeight())/2);
		
		this.textDiv.position({
			of: this.element,
			my: left + " " + top,
			at: left + " " + top 
		});

		this.element.toggleClass( "coral-progressbar-indeterminate", this.indeterminate );

		if ( this.indeterminate ) {
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div class='coral-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
			}
		} else {
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "onChange", null, {value: value, oldValue: this.oldValue});
		}
		if ( value === this.options.max ) {
			this._trigger( "onComplete" );
		}
	}
});

})( jQuery );

//>>label: Accordion
//>>group: Component
//>>description: Displays collapsible content panels for presenting information in a limited amount of space.
//>>docs: 
//>>demos: 
//>>css.structure: ../themes/base/core.css
//>>css.structure: ../themes/base/accordion.css
//>>css.theme: ../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"./core",
			"./component"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

return $.component( "coral.accordion", {
	version: "4.0.1",
	options: {
		active: 0,
		animate: {params : {},duration : 300,easing  : 'swing'},//在此给动画默认属性赋值
		collapsible: false,
		event: "click",
		header: "> li > :first-child,> :not(li):even",
		heightStyle: "auto",
		icons: {
			activeHeader: "cui-icon-arrow-down3",
			header: "cui-icon-arrow-up3"
		},

		//回调方法
		activate: null,
		beforeActivate: null
	},
	
	hideProps: {
		borderTopWidth: "hide",
		borderBottomWidth: "hide",
		paddingTop: "hide",
		paddingBottom: "hide",
		height: "hide"
	},
		
	showProps: {
		borderTopWidth: "show",
		borderBottomWidth: "show",
		paddingTop: "show",
		paddingBottom: "show",
		height: "show"
	},
		
	_create: function() {
		var options = this.options;
		options.icons = $.coral.toFunction(options.icons);
		this.prevShow = this.prevHide = $();
		this.element.addClass( "coral-accordion ctrl-init ctrl-init-accordion coral-component coral-helper-reset" )
			.attr( "role", "tablist" );

		// 当collapsible: false and active: false / null时，必须指定一个展开节点，默认是index:0
		if ( !options.collapsible && (options.active === false || options.active == null) ) {
			options.active = 0;
		}

		this._processPanels();
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var that = this, icons = this.options.icons;
		if ( icons ) {
			$( "<span>" )
				.addClass( "coral-accordion-header-icon icon " + icons.header )
				.prependTo( this.headers );
			this.active.children( ".coral-accordion-header-icon" )
				.removeClass( icons.header )
				.addClass( icons.activeHeader );
			this.headers.each(function(){
				var dataOptions = $.parser.parseOptions(this);
				if ( dataOptions.collapsible == false ){
					$(this).children( ".coral-accordion-header-icon" ).remove();
				} else {
					$(this).addClass( "coral-accordion-icons" );
				}
			});
		}
	},

	_destroyIcons: function() {
		this.headers
			.removeClass( "coral-accordion-icons" )
			.children( ".coral-accordion-header-icon" )
				.remove();
	},

	_destroy: function() {
		var contents;

		// 清除主标签上的class
		this.element
			.removeClass( "coral-accordion coral-component coral-helper-reset" )
			.removeAttr( "role" );

		// clean up headers
		this.headers
			.removeClass( "coral-accordion-header coral-accordion-header-active coral-state-default " +
				"coral-corner-all coral-state-active coral-state-disabled coral-corner-top" )			
			.removeAttr( "role" )
			.removeAttr( "aria-expanded" )
			.removeAttr( "aria-selected" )
			.removeAttr( "aria-controls" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();
		this._destroyIcons();

		// clean up content panels
		contents = this.headers.next()
			.removeClass( "coral-helper-reset coral-widget-content coral-corner-bottom " +
				"coral-accordion-content coral-accordion-content-active coral-state-disabled" )
			.css( "display", "" )
			.removeAttr( "role" )
			.removeAttr( "aria-hidden" )
			.removeAttr( "aria-labelledby" )
			.removeUniqueId();
		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}

		// #5332 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		if ( key === "disabled" ) {
			this.element
				.toggleClass( "coral-state-disabled", !!value )
				.attr( "aria-disabled", value );
			this.headers.add( this.headers.next() )
				.toggleClass( "coral-state-disabled", !!value );
		}
	},
		//键盘事件
	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.coral.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
			case keyCode.RIGHT:
			case keyCode.DOWN:
				toFocus = this.headers[ ( currentIndex + 1 ) % length ];
				break;
			case keyCode.LEFT:
			case keyCode.UP:
				toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
				break;
			case keyCode.SPACE:
			case keyCode.ENTER:
				this._eventHandler( event );
				break;
			case keyCode.HOME:
				toFocus = this.headers[ 0 ];
				break;
			case keyCode.END:
				toFocus = this.headers[ length - 1 ];
				break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			toFocus.focus();
			event.preventDefault();
		}
	},
	//内容部分事件
	_panelKeyDown : function( event ) {
		if ( event.keyCode === $.coral.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().focus();
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
			options.active = false;
			this.active = $();
		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );
		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			if ( this.headers.length === this.headers.find(".coral-state-disabled").length ) {
				options.active = false;
				this.active = $();
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}
		} else {
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		//为头部<h>添加class
		this.headers = this.element.find( this.options.header )
			.addClass( "coral-accordion-header coral-state-default coral-corner-all" );
		//为内容<div>添加class
		this.headers.next()
			.addClass( "coral-accordion-content coral-helper-reset coral-component-content coral-corner-bottom" )
			.filter(":not(.coral-accordion-content-active)")
			.hide();
	},

	_refresh: function() {
		
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent();
		//为激活状态下的头部<h>添加class
		this.active = this._findActive( options.active )
			.addClass( "coral-accordion-header-active coral-state-active coral-corner-top" )
			.removeClass( "coral-corner-all" );
		//为激活状态下的内容<div>添加class
		this.active.next()
			.addClass( "coral-accordion-content-active" )
			.show();
		//为头部添加属性role=tab
		this.headers
			.attr( "role", "tab" )
			.each(function() {
				var header = $( this ),
					headerId = header.uniqueId().attr( "id" ),
					panel = header.next(),
					panelId = panel.uniqueId().attr( "id" );
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			})
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
			.attr({
				"aria-selected": "false",
				"aria-expanded": "false",
				tabIndex: -1
			})
			.next()
				.attr({
					"aria-hidden": "true"
				})
				.hide();

		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr({
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			})
			.next()
				.attr({
					"aria-hidden": "false"
				});
		}
		//为头部<h>添加图标
		this._createIcons();
		//为头部<h>绑定事件
		this._setupEvents( options.event );
		//自动填充满高度
		if ( heightStyle === "fill" ) {
			$.coral.fitParent(this.component(), true);
			//父元素高度
			maxHeight = parent.height();
			//以父元素高度为基础，减去兄弟元素的高度
			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});
			//再减去所有头部<h>的高度
			this.headers.each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});
			//为内容部分设置高度与浮动
			this.headers.next()
				.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				//.css( "overflow", "auto" );
				.addClass( "coral-scroll" );
		} else if ( heightStyle === "auto" ) {
			//以内容自身高度填充
			maxHeight = 0;
			this.headers.next()
				.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
				})
				.height( maxHeight );
		}
		this.headers.each(function(){
			var dataOptions = $.parser.parseOptions(this);
			if ( dataOptions.collapsible == false ){
				$(this).next().addClass("hidden");
			}
		});
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		if ( active === this.active[ 0 ] ) {
			return;
		}

		active = active || this.active[ 0 ];

		this._eventHandler({
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		});
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" });
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},
	
	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			//判断是否选中激活状态中的头部<h>
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			//折叠标志true/false
			collapsing = clickedIsActive && options.collapsible,
			//展开内容
			toShow = collapsing ? $() : clicked.next(),
			//隐藏内容                        
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow,
				headerOptions: $.parser.parseOptions( (collapsing ? $() : clicked) )
			};

		event.preventDefault();

		if (
				// 点击的是激活状态头部，并且参数设置collapsible为false，则返回
				( clickedIsActive && !options.collapsible ) ||
				// 允许运行激活前的回调函数
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );
		this.active = clickedIsActive ? $() : clicked;
		//动态效果
		this._toggle( eventData );

		//针对激活状态头部<h>切换class
		active.removeClass( "coral-accordion-header-active coral-state-active" );
		if ( options.icons ) {
			active.children( ".coral-accordion-header-icon" )
				.removeClass( options.icons.activeHeader )
				.addClass( options.icons.header );
		}
		//如果点击的不是激活状态头部<h>，则切换class
		if ( !clickedIsActive ) {
			clicked
				.removeClass( "coral-corner-all" )
				.addClass( "coral-accordion-header-active coral-state-active coral-corner-top" );
			if ( options.icons ) {
				clicked.children( ".coral-accordion-header-icon" )
					.removeClass( options.icons.header )
					.addClass( options.icons.activeHeader );
			}

			clicked
				.next()
				.addClass( "coral-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// 针对正在运行的动画效果，停止当前队列中的所有动画
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;
		//animate : {}有动画效果
		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {//animate : null无动画效果
			toHide.hide();
			toShow.show();
			//切换class
			this._toggleComplete( data );
		}

		toHide.attr({
			"aria-hidden": "true"
		});
		toHide.prev().attr( "aria-selected", "false" );
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr({
				"tabIndex": -1,
				"aria-expanded": "false"
			});
		} else if ( toShow.length ) {
			this.headers.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr({
					"aria-selected": "true",
					tabIndex: 0,
					"aria-expanded": "true"
				});
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			//动画结束后的回调函数，主要处理切换class
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}
		// 使用options.easing赋值
		easing = easing || options.easing || animate.easing;
		// 使用options.duration赋值
		duration = duration || options.duration || animate.duration;
		//当所有内容都已关闭时，直接展开当前点击的内容
		if ( !toHide.length ) {
			return toShow.animate( this.showProps, duration, easing, complete );
		}
		//当其他内容都已关闭时，直接关闭当前点击的内容
		if ( !toShow.length ) {
			return toHide.animate( this.hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		//当既有需要关闭的内容，也有需要展开的内容时，执行以下代码
		//关闭内容的动画
		toHide.animate( this.hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		});
		//展开内容的动画
		toShow
			.hide()
			.animate( this.showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						adjust += fx.now;
					} else if ( that.options.heightStyle !== "content" ) {
						//fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			});
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel;

		toHide
			.removeClass( "coral-accordion-content-active" )
			.prev()
				.removeClass( "coral-corner-top" )
				.addClass( "coral-corner-all" );

		if ( toHide.length ) {
			toHide.parent()[0].className = toHide.parent()[0].className;
		}
		this._trigger( "onActivate", null, data );
	}
});

} ) );

(function( $, undefined ) {

$.component( "coral.autocomplete", $.coral.inputbase,{
	version: "4.0.2",
	defaultElement: "<input>",
	castProperties : ["source","buttons","rootNode", "triggers"],
	options: {
		appendTo: "body",//如果放在dialog里面，会把dialog撑开。
		autoFocus: false,
		allowRepeat: false,
		asyncType: "post",
		delay: 300,
		maxLabelWidth : "auto" ,
		multiLineLabel: false,
		minLength: 0,
		minHeight: 1,
		height: "auto",
		multiple : false,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		value: "",
		text: "",
		forceSelection: false,
		defaultValue: "", // value separator text
		postMode:"value", // value, text, value-text
		required: false,
		showStar: true,
		separator: ",",
		buttons: [],
		errMsg: null,
		errMsgPosition: "leftBottom",
		panelHeight:"auto",
		maxPanelHeight: 200,
		iframePanel : false,
		isLabel: false,
		source: null,
		valueField: "value",
		textField: "label",
		searchField:"valueField",
		// callbacks
		onValidSuccess: null,
		onValidError: null,
		onChange: null,
		onBlur: null,
		onClose: null,
		onFocus: null,
		onOpen: null,
		oncancel:null,
		onResponse: null,
		onSearch: null,
		onSelect: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},

	requestIndex: 0,
	pending: 0,
	_create: function() {
		var that = this;
		this._prepareInit();
		this._initAutocomplete();
		this._initState();
		this._initSource();
		this._initData();
		this._bindEvent();
		this._setDefaultValue();
		this._setDefaultText();
		this.liveRegion = $( "<span>", {
				role: "status",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			})
			.addClass( "coral-helper-hidden-accessible" )
			.appendTo( this.document[ 0 ].body );

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the component is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
		if ( this.options.multiLineLabel ) {
			// TODO: 销毁的时候应该考虑easyText组件的销毁情况，待测试
			$( this.element ).easyText({
				minWidth:10,
				maxWidth:200,
				maxChars:60
			});
			// Clicks outside of a treePanel move the input element to the end
			this._on( this.document, {
				click: function( event ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					this._moveInput( "last", event );
				}
			});
		}
	},
	_prepareInit: function(){
		this.lastSelectedItem = {};
		this.selectedItems = [];
		
		this.isNewMenu = true;
	},
	_initAutocomplete: function(){
		var autocompleteCls = this.options.render == "tree"?"autocompletetree":"autocomplete";
		if ( this.options.iframePanel ){
			   this.iframePanel = $( "<iframe class='coral-autocomplete-iframePanel' style='position:absolute;display:none;'></iframe>" ).appendTo( "body" );
		}
		if ( this.options.multiLineLabel ) {
			var that = this, nodeName = this.element[ 0 ].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";
			this.ismultiLineLabel =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );
			
			this.autocompleteWrapper = $("<span class='coral-"+autocompleteCls+" coral-textboxlist coral-textbox'></span>").insertAfter(this.element);
			this.elementBorder = $("<span class='coral-textbox-border coral-corner-all'></span>").css({
				minHeight: this.options.minHeight  + "px",
				height: this.options.height,
				overflow: "auto"
			}).appendTo(this.autocompleteWrapper);
			// 下拉框显示值文本框
			this.valuebox = $("<input type='hidden'>").appendTo(this.elementBorder);
			this.valueMethod = this.valuebox[ isTextarea || isInput ? "val" : "text" ];
			this.textMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			
			this.element
				.addClass( "coral-validation-"+autocompleteCls+" coral-autocomplete-input coral-autocomplete-text coral-textbox-default" )
				.attr( "autocomplete", "off" );
			this.textboxlistUl = $( "<ul class='coral-textboxlist-ul'><li class='coral-textboxlist-inputLi'></li></ul>" );
			this.textboxlistUl.appendTo( this.elementBorder );
			this.element.appendTo( this.textboxlistUl.find( ".coral-textboxlist-inputLi" ) );
			if ( this.options.buttons.length > 0 ) {
				this._createButtonPanel();
			}
			// 初始化id，name，value
			if ( typeof this.element.attr("id") != "undefined" ) {
	    		this.options.id = this.element.attr("id");
	    	} else if ( this.options.id ){
	    		this.element.attr("id", this.options.id);
	    	}
			if ( typeof this.element.attr( "name" ) != "undefined" ) {
	    		this.options.name = this.element.attr( "name" ); // name属性加到hidden元素上
	    		this.valuebox.attr( "name", this.options.name );
	    		this.element.removeAttr( "name" );
	    	} else if ( this.options.name ) {
	    		this.valuebox.attr( "name", this.options.name );
	    	}
	
			if ( this.options.text ) {
				this.setText( this.options.text );
			}
			if ( $.trim( this.valuebox.val() ) != "" ) {
	    		this.options.value = this.valuebox.val();
	    	}
			if ( this.options.showPopup ) {
				
			}
		} else {
			var nodeName = this.element[ 0 ].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";
			this.ismultiLineLabel =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );
			
			this.autocompleteWrapper = $("<span class=\"coral-"+autocompleteCls+" coral-textbox\" style=\"border-width: 0;\"></span>").insertAfter(this.element);
			this.elementBorder = $("<span class=\"coral-textbox-border coral-corner-all\"></span>").css({
				minHeight: this.options.minHeight  + "px"
			}).appendTo(this.autocompleteWrapper);
			// 下拉框显示值文本框
			this.valuebox = $("<input type='hidden'>").appendTo(this.elementBorder);
			
			this.valueMethod = this.valuebox[ isTextarea || isInput ? "val" : "text" ];
			this.textMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			
			this.element
				.addClass( "coral-validation-"+autocompleteCls+" coral-autocomplete-input coral-autocomplete-text coral-textbox-default coral-form-element-autocomplete" )
				.attr( "autocomplete", "off" );
			
			this.element.appendTo( this.elementBorder );
			if ( this.options.buttons.length > 0 ) {
				this._createButtonPanel();
			}
			// 初始化id，name，value
			if ( typeof this.element.attr("id") != "undefined" ) {
	    		this.options.id = this.element.attr("id");
	    	} else if ( this.options.id ){
	    		this.element.attr("id", this.options.id);
	    	}
			if ( typeof this.element.attr( "name" ) != "undefined" ) {
	    		this.options.name = this.element.attr( "name" ); // name属性加到hidden元素上
	    		this.valuebox.attr( "name", this.options.name );
	    		this.element.removeAttr( "name" );
	    	} else if ( this.options.name ) {
	    		this.valuebox.attr( "name", this.options.name );
	    	}
	
			if ( this.options.text ) {
				this.setText( this.options.text );
			}
			if ( $.trim( this.valuebox.val() ) != "" ) {
	    		this.options.value = this.valuebox.val();
	    	}
		}
	},
	_initState: function(){
		if( this.element.prop("readonly") || this.options.readonly ){
    		this.options.readonly = true;
    		this.valuebox.prop( "readonly", true );
    		this.element.prop( "readonly", true );
    		this.component().addClass("coral-readonly");
    	}
		if ( this.options.isLabel ) {
			this.element.prop( "readonly", true );
			this.valuebox.prop( "readonly", true );
			this.component().addClass( "coral-isLabel" );
		}
	},
	reset : function() {
		this.setValue(this.originalValue);
	},
	_bindEvent: function(){
		// Some browsers only repeat  events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var that = this, 
			suppressKeyPress, suppressKeyPressRepeat, suppressInput;
		this._on( this.element, {
			"mouseenter" : function(e) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				that.autocompleteWrapper.addClass("coral-textbox-hover");
			},
			"mouseleave" : function(e) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				that.autocompleteWrapper.removeClass("coral-textbox-hover");
			},
			keyup: function( event ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				this._trigger( "onKeyUp", event, { } );
			},
			keydown: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.coral.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.LEFT:
					suppressKeyPress = true;
					this._moveItem( "left", event );
					break;
				case keyCode.RIGHT:
					suppressKeyPress = true;
					this._moveItem( "right", event );
					break;
				case keyCode.UP:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:
					// when menu is open and has focus
					if ( this.menu.active ) {
						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.ismultiLineLabel ) {
							// ??
							this.setValue( this.term, true );
						}
						this.close( event );
						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;
					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
				//this._change( event );
				this._trigger( "onKeyDown", event, { } );
			},
			keypress: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.ismultiLineLabel || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}
				if ( this.options.render == "tree" ) {
					return;
				}				
				// replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.coral.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				default:
					break;
				}
			},
			input: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				this.selectedItem = null;
				this.previous = this.getValue();
				this.component().addClass( "coral-state-focus" );
			},
			blur: function( event ) {
				this.component().removeClass( "coral-state-focus" );
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				// 非multiLineLabel不需要额外校验
				if ( !this.options.multiLineLabel ) {
					if ( this.options.multiple ) {
						
					} else {
						// 20150121 : value 无值时设置为输入值，text为空时，value也设置为空。
						if ( !this.options.forceSelection ) {
							if ( this.lastSelectedItem[this.options.textField] != this.element.val() ) {
								this.setValue( this.element.val(), true );
							}
						} else {
							// TODO: 检查输入的值是否是建议列表里面的值，如果不是则清空输入框和隐藏域
							// 如果是url
							// 如果是数组
							/*if ( !this.lastSelectedItem 
									|| this.getText() !== this.lastSelectedItem[this.options.textField] ) {
								this.setValue( "", true );
							}*/
							if ( this.options.render == "tree" ){
								
							}else{
								var grepArr = $.grep( this.responseItems, function( value0 ) {
									return value0[that.options.textField] == that.element.val();
								});
								if ( !grepArr.length ){
									this.setValue( "", true );
								} else {
									this.setValue( grepArr[0][that.options.valueField], true );
								}
							}
						}
					}
				}
				
				
				this._trigger( "onBlur", event, { item: this.selectedItem } );
			}
		});
		this._on( this.menu.element, {
			mousedown: function( event ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
				});

				// clicking on the scrollbar causes focus to shift to the body
				// but we can't detect a mouseup or a click immediately afterward
				// so we have to track the next mousedown and close the menu if
				// the user clicks somewhere outside of the autocomplete
				var menuElement = this.menu.element[ 0 ];
				if ( !$( event.target ).closest( ".coral-menu-item" ).length ) {
					this._delay(function() {
						var that = this;
						this.document.one( "mousedown", function( event ) {
							if ( event.target !== that.element[ 0 ] &&
									event.target !== menuElement &&
									!$.contains( menuElement, event.target ) ) {
								that.close();
							}
						});
					});
				}
			},
			menuonfocus: function( event, ui ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				var label, item;
				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						});

						return;
					}
				}

				item = ui.item.data( "coral-autocomplete-item" );
				if ( false !== this._trigger( "onFocus", event, { item: item } ) ) {
					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						/*if (this.options.postMode=="value") {
							this.setValue( item[this.options.valueField] );
						} else if (this.options.postMode=="text") {
							this.setValue( item[this.options.textField] );
						} else if (this.options.postMode=="value-text") {
							this.setValue( item[this.options.valueField] + "-"+ item[this.options.textField] );
						}*/
						// this._value( item[this.options.valueField] );
						//this._text( item[this.options.textField] );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item[this.options.valueField] ;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuonselect: function( event, ui ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				var item = ui.item.data( "coral-autocomplete-item" ),
					previous = this.previous;

				// only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {
					this.element.focus();
					this.previous = previous;
					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay(function() {
						this.previous = previous;
						this.selectedItem = item;
						that.lastSelectedItem = item;
					});
				}
				that.lastSelectedItem = item;
				this.selectedItem = item;
				//setValue()和setText(),先将原有的值删去，再加上选择的值
				if ( false !== this._trigger( "onSelect", event, { item: item } ) ) {
						var item = ui.item.data( "coral-autocomplete-item" );
						valueField = item[this.options.valueField];
						textField = item[this.options.textField];
						var value = that.getValue(),
						text = that.getText(),
						vv = value==""?[]:value.split(this.options.separator),
						vt = text==""?[]:text.split(this.options.separator);
						if ( that.options.multiple ) {
							if (this.options.postMode=="value") {
								if ( !this.options.allowRepeat && $.inArray(valueField, vv) > -1 ) {
									return ;
								}
								vv.push( valueField );
								vt.push( textField );
								this.setText(vt.join(this.options.separator));
								this.setValue(vv.join(this.options.separator), true);
							} 
							if (this.options.postMode=="text") {
								if ( !this.options.allowRepeat && $.inArray(textField, vt) > -1 ) {
									return ;
								}
								vt.push( textField );
								that.setValue(vt.join(this.options.separator), true );
							} 
							if (this.options.postMode=="value-text") {
								if ( !this.options.allowRepeat && $.inArray(valueField + "-"+textField, vv + "-" + vt) > -1 ) {
									return ;
								}
								vv.push( valueField );
								vt.push( textField );
								this.setValue(vv.join(this.options.separator) + "-"+ vt.join(this.options.separator), true );
							}
						} else{
							if (this.options.postMode=="value") {
								this.setText(item[this.options.textField], true );
								this.setValue(item[this.options.valueField], true );
							} 
							if (this.options.postMode=="text") {
								this.setValue(item[this.options.textField], true );
							} 
							if (this.options.postMode=="value-text") {
								this.setValue(item[this.options.valueField] + "-"+ item[this.options.textField], true );
							}
						}
				}
				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this.getText();
				this.close( event );
			}
		});
		if ( this.options.multiLineLabel ) {
			this._on( {
				"click .coral-label-close" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					this._removeLabel( e );
				},
				"click .coral-textboxlist-item" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					e.stopPropagation();
				},
				"click .coral-textbox-border" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					this.element.focus();
				},
				"mouseenter .coral-label-close" : function( e ){
					$( e.target ).addClass( "coral-label-close-hover" );
				},
				"mouseleave .coral-label-close" : function( e ){
					$( e.target ).removeClass( "coral-label-close-hover" );
				},
				"focus .coral-textboxlist-item" : function( e ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					$( e.target ).addClass( "coral-state-active" );
				},
				"blur .coral-textboxlist-item" : function( e ) {
					$( e.target ).removeClass( "coral-state-active" );
				},
				"keydown .coral-state-active" : function( e ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					var keyCode = $.coral.keyCode;
					switch ( e.keyCode ) {
					case keyCode.LEFT:
						//suppressKeyPress = true;
						this._moveInput( "left", e );
						break;
					case keyCode.RIGHT:
						//suppressKeyPress = true;
						this._moveInput( "right", e );
						break;
					case keyCode.BACKSPACE:
						this._removeLabel( e );
						break;
					case keyCode.DELETE:
						this._removeLabel( e );
						break;
					default:
						break;
					}
				}
			});
		}
	},
	_initData: function(){
		var that = this;
		var opts = this.options;
		this.menu = $( "<ul>" )
		.addClass( "coral-autocomplete-panel coral-front" )
		.appendTo( this._appendTo() )
		.menu({
			// disable ARIA support, the live region takes care of that
			role: null
		})
		.hide()
		.menu( "instance" );
		if ( isNaN( opts.panelHeight ) ) {
			$(".coral-autocomplete-panel").css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
			$(".coral-autocomplete-iframePanel").css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
		}
	},
	_setDefaultValue: function(){
		if (!this.options.value) {
			this.originalValue = "";
			return ;
		} else {
			this.setValue(this.options.value);
			this.originalValue = this.getValue();
		}
	},
	_setDefaultText: function(){
		if ( !this.options.text ) return ;
		this.setText( this.options.text );
	},
/*	_createButtonPanel: function() {
		this.uiDialogButtonPanel = $("<span class=\"coral-autocomplete-btn-icons coral-corner-right coral-buttonset\"></span>");
		this.elementBorder.append( this.uiDialogButtonPanel );
		this._createButtons();
		this.elementBorder.css( "padding-right", this.uiDialogButtonPanel.outerWidth() );
	},*/
/*	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons.concat();
		if ( $.isEmptyObject( buttons ) ) buttons = {};
		$.each( buttons, function(i) {
			var buttonOptions,
				addCls = "",
				removeCls = "",
				props = $.extend( { type: "button" }, {click: this.click} );
			var click = this.click || $.noop;
			props.click = function() {
				click.apply( that.element[0], arguments );
			};
			delete this.click;
			removeCls = "coral-corner-all";
			if ( i == ( buttons.length - 1 ) ) {
				addCls = "coral-corner-right"
			}
			$( "<button></button>", props ).button( this )
				.addClass(addCls).removeClass(removeCls).appendTo( that.uiDialogButtonPanel );
			this.click = click;
		});
	},*/
	getLastSelectedItem: function(){
		return this.lastSelectedItem;
	},
	
	_destroy: function() {
		clearTimeout( this.searching );
		this.element
			.removeClass( "coral-autocomplete-input" )
			.removeAttr( "autocomplete" );
		this.menu.element.remove();
		if(this.options.iframePanel){
			this.iframePanel.remove();
		}
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		var maxWidth = this.options.maxLabelWidth;
		if ( maxWidth != "auto" ) {
			maxWidth = maxWidth+"px";
		}

		this._super( key, value );
		
		if ( key === "isLabel" && typeof value === "boolean" ) {
			this.element.prop( "readonly", value );
			this.valuebox.prop( "readonly", value );
			this.component().removeClass( "coral-readonly" );	
			this.component().toggleClass( "coral-isLabel", value );
			if ( this.textboxlistUl ) {
				if( value ){
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width","");
				}else{
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width",maxWidth);
				}
			}
		}
		if ( key === "readonly" && typeof value === "boolean") {
			this.element.prop( "readonly", value );
			this.valuebox.prop( "readonly", value );
			this.component().removeClass( "coral-isLabel" );	
			this.component().toggleClass( "coral-readonly", value );
			if ( this.textboxlistUl ) {
				if( value ){
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width","");
				}else{
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width",maxWidth);
				}
			}
		}
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
		if ( key === "value") {
			this.setValue( value );
		}
		
	},
	
	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".coral-front" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},
	_filter: function( array, request, response ){
		response( $.coral.autocomplete.filter( array, request.term, this.options.valueField, this.options.textField ,this.options.searchField) );
	},
	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				that._filter( array, request, response );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				if ( this.element.attr("name") ){
					request[this.element.attr("name")] = request.term;
				}
				that.xhr = $.ajax({
					url: url,
					data: request,
					type: that.options.asyncType,
					dataType: "json",
					success: function( data ) {
						if ( that.options.render != "tree" ) {
							response( data );
						} else {
							$( that.menu.element ).tree("reload", data);
							response( data );
						}
					},
					error: function() {
						response([]);
					}
				});
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay(function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._term(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},
	_term: function(){
		if ( this.options.multiLineLabel ) {
			return this.element.val();
		}
		return this.getText();
	},
	search: function( text/*value*/, event ) {
		text = text != null ? text : this._term();
		// always save the actual value, not the one passed as an argument
		this.term = this._term();

		if ( text.length < this.options.minLength ||
			( this.options.minLength > 0 && $.trim( text ) == "" ) ) {
			return this.close( event );
		}

		if ( this._trigger( "onSearch", event ) === false ) {
			return;
		}

		return this._search( text );
	},

	_search: function( text ) {
		this.pending++;
		this.element.addClass( "coral-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: text }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy(function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this.element.removeClass( "coral-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "onResponse", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "onOpen" );
		} else {
			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {
		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			if(this.options.iframePanel){
				this.iframePanel.hide();
			}
			this.options.render != "tree" && this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "onClose", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this.getValue() ) {
			this._trigger( "onChange", event, { item: this.selectedItem,oldValue: this.previous,value: this.getValue(),text:this.getText(),lastSelectedItem: this.lastSelectedItem} );
		}
	},
	_normalize: function( items ) {
		var that = this;
		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ][this.options.textField] && items[ 0 ][this.options.valueField] ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			});
		});
	},

	_suggest: function( items ) {
		var ul = this.menu.element,nData;//.empty();
		var iframePanel = this.iframePanel || $();
		if ( this.options.render == "tree" ){
			//$( ul ).tree("addNodes", null, items);
			//$( ul ).tree("filterNodesByParam", {"name": "112"} );
		}else{
			this.menu.element.empty();
			this._renderMenu( ul, items );
			this.isNewMenu = true;
			this.menu.refresh();
		}
		this.responseItems = items;
		// size and position menu
		var height = ul.height();
		iframePanel.css("height",height);
		ul.show();
		iframePanel.show();
		var zIndicies = ul.siblings( ".coral-front:visible" ).map(function() {
				return +$( this ).css( "z-index" );
			}).get(),
			zIndexMax = Math.max.apply( null, zIndicies );
		if ( zIndexMax >= +ul.css( "z-index" ) ) {
			ul.css( "z-index", zIndexMax + 1 );
			iframePanel.css( "z-index", zIndexMax );
		}
		iframePanel.outerWidth(
				 Math.max(
						// Firefox wraps long text (possibly a rounding bug)
						// so we add 1px to avoid the wrapping (#7513)
						ul.width( "" ).outerWidth() + 1,
						this.elementBorder.outerWidth()
				 )
		);
		this._resizeMenu();
		ul.position( $.extend({
			of: this.elementBorder
		}, this.options.position ) );
		iframePanel.position( $.extend({
			of: this.elementBorder
		}, this.options.position ) );
		if ( this.options.autoFocus ) {
			this.menu.next();
		}
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		var iframePanel = this.iframePanel || $();
		ul.outerWidth( Math.max(
			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.elementBorder.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		});
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "coral-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		var text = item[this.options.textField];
		var attrName, restAttr = '', classes = !!item.hidden==true?"hidden":"";
		var _fn = $.coral.toFunction(this.options.formatter),nData;
		if($.isFunction(_fn)){
			text = _fn.apply(this.element[0], [{"item":item}]);
		}
		var itemattrFun = $.coral.toFunction(this.options.itemattr);
		if($.isFunction(itemattrFun)){
			var itemAttrObj = itemattrFun.apply( this.element[0], [{"item":item}]);
			if(!$.isEmptyObject( itemAttrObj )) {
				if (itemAttrObj.hasOwnProperty("style")) {
					style += itemAttrObj.style;
					delete itemAttrObj.style;
				}
				if (itemAttrObj.hasOwnProperty("class")) {
					classes += ' ' + itemAttrObj['class'];
					delete itemAttrObj['class'];
				}
				// dot't allow to change role attribute
				try { delete itemAttrObj.role; } catch(ra){}
				for (attrName in itemAttrObj) {
					if (itemAttrObj.hasOwnProperty(attrName)) {
						restAttr += ' ' + attrName + '=' + itemAttrObj[attrName];
					}
				}
			}
			return $('<li class="' + classes + '"' + restAttr + '>').text( text ).appendTo( ul );
			
		}else{
			return $( "<li>" ).addClass(classes).text( text ).appendTo( ul );
		}
		
	},
	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if (!this.options.multiLineLabel ) {
				this.setValue( "", true );
				this.setText( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	component: function() {
		return this.autocompleteWrapper;
	},
	/**
	 * set the lastSelectedItem 
	 **/
	_setLastSelectedItem: function(){
		var options = this.options;
		var value = this.getValue(),
			text = this.getText();
		// lastSelectedItem是引用模式，如果改变的值是空，会影响source里面的值。
		this.lastSelectedItem = {};
		this.lastSelectedItem[options.valueField] = value;
		this.lastSelectedItem[options.textField] = text;
	},
	
	/*_value: function( value, noChange ) {
		if ( this.options.multiLineLabel ) {
			var that = this;
			if ( value != "" && !value ) {
				return this.valuebox.val();
			}
			
			var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
				indexOfInputLi = inputLi.index(),
				index = indexOfInputLi,
				values = this.valuebox.val()==""?[]:this.valuebox.val().split( "," );
			if ( this.options.multiple ) {
				values.splice(index,0,value);
			} else {
				values = [];
				values.push( value );
			}
			
			if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
				var array = $( this.menu.element ).tree("transformToArray", this.options.source),
					texts = [],
					grepArr = $.grep( value.split( "," ), function( value0 ) {
						var ret = false;
						$.each(array, function(i){
							if ( value0 == array[i][that.options.valueField] ) {
								texts.push(array[i][that.options.textField]);
								return true;
							}
						});
						return ret;
					});
				if ( texts.length ){
					this.setText( texts );
				}
			} else if ( typeof this.options.source == "string" && this.selectedItem ) {
				this.setText(this.selectedItem[this.options.textField]);
			} else if ( $.trim( value ) == "" ) {
				this.setText(value);
			}
			this.valuebox.val( values.join( "," ) );
			!noChange && this._change(null);
		} else {
			return this.valueMethod.apply( this.valuebox, value );
		}
	},*/

	_text: function( text ) {
		var maxLabelWidth = this.options.maxLabelWidth,
		    readonly = this.options.readonly,
		    isLabel = this.options.isLabel;
		if ( this.options.multiLineLabel ) {
			if ( text != "" && !text ) {
				var texts = [];
				$.each( this.textboxlistUl.find( ".coral-textboxlist-item" ), function(){
					texts.push($( this ).text());
				} );
				return texts.join( "," );
			}
			var item = "";
			if ( text != "" && !(text instanceof Array) ) {
				text = text.split( this.options.separator );
			}
			if ( text instanceof Array ) {
				if ( maxLabelWidth == "auto" || isLabel || readonly ){
					$.each(text, function(i){
						text.splice(i,1,"<li tabindex='-1' class='coral-textboxlist-item'  title='"+this+"'>"+this+"<span class='coral-label-close cui-icon-cross2'></span></li>");
					});
				}else{
					$.each(text, function(i){
						text.splice(i,1,"<li tabindex='-1' class='coral-textboxlist-item'  style='  max-width:"+maxLabelWidth+"px;' title='"+this+"'>"+this+"<span class='coral-label-close cui-icon-cross2'></span></li>");
					});
				}
				item = text.join("");
			} else {
				if ( maxLabelWidth == "auto"|| isLabel || readonly){
					item = "<li tabindex='-1' class='coral-textboxlist-item'   title='"+this+"' >"+text+"<span class='coral-label-close  cui-icon-cross2'></span></li>";
				}else{
					item = "<li tabindex='-1' class='coral-textboxlist-item'  style='  max-width:"+maxLabelWidth+"px;' title='"+this+"' >"+text+"<span class='coral-label-close cui-icon-cross2'></span></li>";
				}
			}
			if ( text != "" ) {
				if ( this.options.multiple ) {
					this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
					this.textboxlistUl.find( ".coral-textboxlist-inputLi" ).before( item );
				} else {
					this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
					this.textboxlistUl.find( ".coral-textboxlist-inputLi" ).before( item );
				}
			} else {
				this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
			}
		} else {
			return this.textMethod.apply( this.element, arguments );
		}
		
		
	},
	getOldValue: function(){
		var opts = this.options,
		    valArr = [],
		    substr = [],
		    i = 0;
		if ( !this.currentValues ) return valArr;
		var substr = this.currentValues.split(",");
		for (; i <substr.length; i++) {
			var value = substr[i];
			valArr.push(value);
		}
		return valArr;
	},
	/**
	 * value: 设置的值。
	 * 
	 * changed：不对外开放，如果不传默认是false，内部调用，
	 * 如果需要出发onChange事件，则设置changed为true。
	 * 
	 */
	setValue: function ( opts, changed ) {
		var that = this,
			value, text,changed, removed;
		if ( typeof opts !== "string" ) {
			value = opts.value;
			changed = opts.changed;
			removed = opts.removed;
		} else {
			value = opts;
		}
		if ( this.options.multiLineLabel ) {
			this.element.val("");
			this.element.css({width:"10px"});//清空值并且 将宽度还原；否则会将元素的高度撑开
		}
		this.previous = this.getValue();
		// 多行标签模式的设置值，有多选的功能
		if ( this.options.multiLineLabel ) {
			var that = this;
			var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
				indexOfInputLi = inputLi.index(),
				index = indexOfInputLi,
				values = this.valuebox.val(value)==""?[]:this.valuebox.val(value);
				//this.setText("");
				if ( $.trim( value ) == "" ) {
					this.setText(value);
				} else if ( "text" === this.options.postMode ) {
					this.setText( value );
				} else if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
					
					var array = ( this.options.render == "tree" )?
							$( this.menu.element ).tree("transformToArray", this.options.source.concat()):this.options.source,
						texts = [],
						grepArr = $.grep( value.split( "," ), function( value0 ) {
							var ret = false;
							$.each(array, function(i){
								if ( value0 == array[i][that.options.valueField] ) {
									texts.push(array[i][that.options.textField]);
									return true;
								}
							});
							return ret;
						});
					
					if ( texts.length ){
						this.setText( texts );
					}
				} 
			//}
			if ( value == "" ) values = [];
			this.valuebox.val( value );
			this.currentValues = value;
		} else {
			// 不是标签模式，目前没有多选的功能
			// 设置text
			if ( $.trim( value ) == "" ) {
				this.setText(value);
			} else if ( "text" === this.options.postMode ) {
				this.setText( value );
			} /*else if ( typeof this.options.source == "string") {
				if (  this.selectedItem ) {
					this.setText(this.selectedItem[this.options.textField]);
				}
			} */
			else if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
				var array = ( this.options.render == "tree" )?
						$( this.menu.element ).tree("transformToArray", this.options.source.concat()):this.options.source,
					texts = [],
					grepArr = $.grep( value.split( "," ), function( value0 ) {
						var ret = false;
						$.each(array, function(i){
							if ( value0 == array[i][that.options.valueField] ) {
								texts.push(array[i][that.options.textField]);
								return true;
							}
						});
						return ret;
					});
				
				if ( texts.length ){
					this.setText( texts[0] );
				}
				/*} else if ( $.trim( value ) == "" ) {
					this.setText( value );
				}*/
			}
			this.valuebox.val( value );
			//this.setText( value );
			// 如果source是数组的时候 也直接赋值
		}
		changed && this._change(null);
	},
	
	setText: function (text) {
		this._text(text);
		this._setLastSelectedItem();
	},
	
	getValue: function(){
		if ( this.options.multiLineLabel ) {
			//if ( value != "" && !value ) {
			return this.valuebox.val();
			//}
		}else {
			return this.valueMethod.apply( this.valuebox );
		}
	//	return this._value();
	},	
	
	getText: function(){
		return this._text();
	},
	focus: function(){
		if (this.options.disabled || this.options.readonly || this.options.isLabel) return false;
		this.element.focus();
	},
	_keyEvent: function( keyEvent, event ) {
		if ( !this.ismultiLineLabel || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},
	_removeLabel: function( e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
			curItem = $(e.target).closest( "li.coral-textboxlist-item" ),
			lastItem = $(e.target).closest( "li.coral-textboxlist-item:last" );
		inputLi.insertAfter( lastItem );
		var indexOfInputLi = inputLi.index();
		var indexOfItem = curItem.index();
		var index = indexOfItem;
		if ( indexOfItem > indexOfInputLi ) {
			index = indexOfItem - 1;
		}
		var texts = this.getText().split( "," );
		texts.splice( index, 1 );
		curItem.remove();
		var values = this.getValue().split( "," );
		values.splice( index, 1 );
		this.selectedItems.splice( index, 1 );
		this.selectedItem = null;
		//this.valuebox.val( values.join(",") );
		/*this.setValue( {
			value: values.join(","), 
			changed: true,
			removed: index
		});*/
		this.setValue( values.join(","), true );
		if(typeof this.options.source == "string" ){
			this.setText( texts.join(",") );
		}
		//this._change( e );
		this._moveInput( "last", e );
		this.element.val("");
		this.element.focus();
	},
	_moveInput: function( direction, e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" );
		var curItem = $(e.target).closest( "li.coral-textboxlist-item" );
		var lastItem = $(inputLi).closest( "li.coral-textboxlist-inputLi" ).nextAll("li.coral-textboxlist-item").last();

		switch ( direction ) {
		case 'left':
			inputLi.insertBefore( curItem );
			this.element.val("");
			this.element.focus();
			break;
		case 'right':
			inputLi.insertAfter( curItem );
			this.element.val("");
			this.element.focus();
			break;
		case 'last':
			inputLi.insertAfter( lastItem );
			this.element.val("");
			break;
		}
	},
	_moveItem: function( direction, e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" );
		if ( direction == "left" && inputLi.prev().length && $( inputLi.find( "input" ) ).caret() == 0 ) {
			this.element.val("");
			inputLi.prev().focus();
		}
		if ( direction == "right" && inputLi.next().length && $( inputLi.find( "input" ) ).caret() == inputLi.find( "input" ).val().length ) {
			this.element.val("");
			inputLi.next().focus();
		}
	}
});
$.extend( $.coral.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term , valueField, textField, searchField) {
		var that = this;
		var matcher = new RegExp( $.coral.autocomplete.escapeRegex( term ), "i" );
		if ( searchField ) {
			return $.grep( array, function( value ) {
				var r = matcher.test( value[textField] || value[valueField] || value );
				var sarr = searchField.split( "," );
				for( var i = 0; i < sarr.length; i ++ ){
					if ( !r && value[sarr[i]] ) {
						r = matcher.test( value[sarr[i]] );
						if ( r ) break;
					}
				}
				return r;
				/*if ( !r && value[searchField] ) {
					r = matcher.test( value[searchField] );
				}
				return r;*/
			});
		}
		return $.grep( array, function( value ) {
			return matcher.test( value[textField] || value[valueField] || value[searchField] || value );
		});
	}
});
$.component( "coral.autocomplete", $.coral.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
});

var autocomplete = $.coral.autocomplete;
})( jQuery );



/*!
 * 组件库4.0： 窗体
 *
 * 依赖JS文件:
 *	jquery.coral.core.js
 *	jquery.coral.component.js
 *	jquery.coral.mouse.js
 *  jquery.coral.button.js
 *	jquery.coral.draggable.js
 *	jquery.coral.position.js
 *	jquery.coral.resizable.js
 */
(function( $, undefined ) {

var sizeRelatedOptions = {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},
	resizableRelatedOptions = {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},
	timer = null;

$.component("coral.dialog", {
	version: "4.0.1",
	castProperties : ["buttons"],
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		closeOnEscape: true,
		closeText: "关闭",
		closeButtonClass: "cui-icon-cross2",
		closable: true,// 是否可关闭，出现关闭图标
		loadtext: "加载中，请耐心等候 ...", // 20141230 - haibo lee
		maximumText: "最大化",
		maximizable: false,// 是否出现最大化按钮
		maximized: false, // default maxized or not
		restoreWidth: 200,
		restoreHeight: 200,
		dialogClass: "",
		draggable: true,
		hide: null,
		height: "auto",
		percent: false,
		manualResize: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		zIndex: null,
		timeOut: 0,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",
			using: function(pos) {
				var topOffset = $(this).css(pos).offset().top;
				if (topOffset < 0) {
					$(this).css("top", pos.top - topOffset);
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		subTitle:null,
		type: null, //消息类型："info" "warn" "error" "question"
		wtype: "dialog", //窗体类型："dialog" "message" "alert" "confirm"
		message: null,
		width: 300,
		url: "",
		reLoadOnOpen: false,
		postData: [],
		asyncType: "post",//Ajax 的 http 请求模式
		/*titleFormat: function(titles) {
			var title = titles.split('-');
			var title1 = "<span class='coral-dialog-mainTitle'>"+title[0]+"</span>";
			var title2 = "<span class='coral-dialog-subTitle'>"+title[1]+"</span>";
			return title1+title2;
		},*/
		// 事件
		beforeClose: null,
		onCreate: null,
		onClose: null,
		onDrag: null,
		onDragStart: null,
		onDragStop: null,
		onFocus: null,
		onLoad: null,
		onLoadError: null,
		onOpen: null,
		onResize: null,
		onResizeStart: null,
		onResizeStop: null,
		onConfirm: null,
		onCancel : null,
		focusInput : false
		
	},

	_create: function() {
		var that = this;
		var re =/^(\d|[1-9]\d|100)%$/;
		if (re.test(this.options.height)) {
			this.options.percent = this.options.height;
			this.options.height = this._percentToPx();
		}
		
		if ($.inArray(this.options.wtype, ["dialog", "message", "alert", "confirm"]) < 0) {
			this.options.wtype = "dialog";
		}
		
		if (this.options.wtype !== "dialog") {
			this.options.minHeight = null;
		}
		this.originalCss = {
			display: this.element[0].style.display,
			width: this.element[0].style.width,
			minHeight: this.element[0].style.minHeight,
			maxHeight: this.element[0].style.maxHeight,
			height: this.element[0].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr("title");
		this.options.title = this.options.title || this.originalTitle;
		this.originalsubTitle = this.element.attr("subTitle");
		this.options.subTitle = this.options.subTitle || this.originalsubTitle;
		this._createWrapper();
		var contentCls = this.options.isMessage ? "alert-box" : "coral-dialog-content";
		this.element
			.show()
			.removeAttr("title")
			.addClass(contentCls + " coral-component-content")
			.appendTo(this.uiDialog);
		
		if (this.options.wtype !== "dialog") {
			this.uiDialog.addClass("coral-messager");
		}

		switch (this.options.wtype) {
			case "alert":
				this._createTitlebar();
				this._createButtonPanel();
				break;
			case "message":
				//this.element.find(".coral-messager-box").addClass("messager-only");
				break;
			case "confirm":
				this._createTitlebar();
				this._createButtonPanel();
				break;
			case "dialog":
				this._createTitlebar();
				this._createButtonPanel();
		}
		
		if (this.options.draggable && $.fn.draggable) {
			this._makeDraggable();
		}
		if (this.options.resizable && $.fn.resizable) {
			this._makeResizable();
		}
		this._isOpen = false;
		this._trackFocus();
	},

	_init: function() {
		if (this.options.autoOpen) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if (typeof element == "string" && element == "parent"){
			return this.originalPosition.parent;
		}
		if (element && (element.jquery || element.nodeType)) {
			return $(element);
		}
		return this.document.find(element || "body").eq(0);
	},
	/**
	 * 强制销毁dialog
	 */
	forceDestroy: function() {
		var that = this;
		this._destroy(true);
	},
	_destroy: function(forceDestroy) {
		var next,
			originalPosition = this.originalPosition;
		this._destroyOverlay();
		this.element
			.removeUniqueId()
			.removeClass("coral-dialog-content coral-component-content")
			.css(this.originalCss)
			.detach();

		this.uiDialog.stop(true, true).remove();
		
		if (!forceDestroy) {
			if (this.originalTitle) {
				this.element.attr("title", this.originalTitle);
			}
			next = originalPosition.parent.children().eq(originalPosition.index);
			if (next.length && next[0] !== this.element[0]) {
				next.before(this.element);
			} else {
				originalPosition.parent.append(this.element);
			}
		}
	},

	component: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function(event) {
		var activeElement,
			that = this,
			next,
			originalPosition = this.originalPosition;
		
		if (this.options.reLoadOnOpen) {
			this.loaded = false;
		}
		
		if (!this._isOpen || this._trigger("beforeClose", event) === false) {
			return;
		}
		// dialog must remove first then clear the content
		// or the flash method call is undefined, the flash can not be destroy.
		//关闭就销毁
		if (that.options.destroyOnClose) {
			that.element.html("");
		}
		//有url的情况下才销毁 autoDestroy为true说明
		if (that.options.url != "" && that.options.reLoadOnOpen && that.options.autoDestroy) {
			that.element.html("");
		}
		// hide first, or it will influence the auto fit
		// it must be hide first, then move the dialog to the original position
		// or it will be overflow the parent dom, and chrome will has scroll bar
		this._hide(this.uiDialog, this.options.hide, function() {
			next = originalPosition.parent.children().eq(originalPosition.index);
			if (next.length && next[0] !== that.element[0]) {
				next.before(that.uiDialog);
			} else {
				originalPosition.parent.append(that.uiDialog);
			}
			
			that._isOpen = false;
			that._focusedElement = null;
			that._destroyOverlay();
			that._untrackInstance();
			if ($.inArray(that.options.wtype, ["dialog","alert","confirm"]) > -1) {
				if (that.opener.length && that.opener[0].tagName.toLowerCase() != "object" && 
						!that.opener.filter(":focusable").focus().length) {
					// support: IE9
					// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
					try {
						activeElement = that.document[0].activeElement;
						
						// Support: IE9, IE10
						// If the <body> is blurred, IE will switch windows, see #4520
						if (activeElement && activeElement.nodeName.toLowerCase() !== "body") {
							
							// Hiding a focused element doesn't trigger blur in WebKit
							// so in case we have nothing to focus on, explicitly blur the active element
							// https://bugs.webkit.org/show_bug.cgi?id=47182
							$(activeElement).blur();
						}
					} catch (error) {}
				}
			}

			if ("dialog" !== that.options.wtype) {
				that.element.remove();
			}
			that._trigger("onClose", event);
		});	
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function(event, silent) {
		var moved = false,
		zIndicies = this.uiDialog.siblings(".coral-front:visible").map(function() {
			return +$( this ).css("z-index");
		}).get(),
		zIndexMax = Math.max.apply(null, zIndicies);
		
		if (zIndexMax >= +this.uiDialog.css("z-index")) {
			this.uiDialog.css("z-index", zIndexMax + 1);
			moved = true;
		}
		
		if (moved && !silent) {
			this._trigger("onFocus", event);
		}
		return moved;
	},

	open: function() {
		var that = this,
			eventData = {
				panel: that.element
			};
		this.uiDialog.appendTo(this._appendTo());
		var canRequest = this.options.url && !that.loaded;
		if (canRequest) {
			$(that.element).loading({
				position:   "overlay",
				text:       "加载中，请耐心等候！"
			});
			that.loaded = true;
			$.ajax({
				url: this.options.url,
				type: this.options.asyncType,
				dataType: "html" ,
				data: this.options.postData,
				success: function(data, st, xhr) {
					$(that.element).loading("hide");
					that.element.html(data);
					$(that.element).loading({
						text:       "渲染中，请耐心等候！",
						position:   "overlay"
					});
					if ($.coral.openTag == true) {
						$.parser.parse(that.element);
					}
					$(that.element).loading("hide");
					//that.hideLoading(); // loading end
					that._trigger ("onLoad", null, eventData);
					$.coral.refreshAllComponent(that.element);
				},
				error: function(xhr,st,err) {
					that._trigger ("onLoadError", null, [{xhr:xhr,st:st,err:err}]);
				},
				beforeSend: function(xhr, settings ) {
					
				}
			});
		}
		timer = null;
		if (this._isOpen) {
			if (this._moveToTop()) {
				if ($.inArray(that.options.wtype, ["dialog","alert", "confirm"]) > -1) {
					this._focusTabbable();
				}
			}
			return;
		}
		this._isOpen = true;
		this.opener = $(this.document[0].activeElement);

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop(null, true);
		
		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if (this.overlay) {
			this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
		}
		
		this._show (this.uiDialog, this.options.show, function() {
			if ($.inArray(that.options.wtype, ["dialog","alert", "confirm"]) > -1) {
				that._focusTabbable();
			}
			if (!canRequest) {
				$.coral.refreshAllComponent(that.element);//added 
			}
			that._trigger("onFocus");
		});
		// Track the dialog immediately upon openening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();
		
		this._trigger("onOpen");
		
		if (!isNaN(this.options.timeOut) && this.options.timeOut > 0) {
			timer = setTimeout(_close, that.options.timeOut);
			
			this.uiDialog.hover(function() {
				if (timer) {
					clearTimeout(timer);
				}
			}, function() {
				timer = setTimeout(_close, that.options.timeOut);
			});
		}
		
		function _close () {
			that.close();
		}
	},

	_focusTabbable: function() {
		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		
		var hasFocus = this._focusedElement;
		if (this.options.focusInput === true) {
			this._focusFirst();
			return;
		}
		if (!hasFocus) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if (!hasFocus.length) {
			hasFocus = this.element.find(":tabbable");
		}
		if (!hasFocus.length && this.uiDialogButtonPane) {
			hasFocus = this.uiDialogButtonPane.find(":tabbable");
		}
		if (!hasFocus.length && this.uiDialogTitlebarClose) {
			hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
		}
		if (!hasFocus.length) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq(0).focus();
	},
	_findFields : function(){
		return $.coral.findComponent(".ctrl-form-element", this.element);
	},
	_focusFirst: function() {
		var that = this,
			fields = this._findFields();
		
		for (var i in fields) {
			var instance = fields[i];
			
			if (fields[i] instanceof Array) {
				if (true == $(instance[0].element)[instance[0].name]("focus")) return;
			} else {
				if (instance.focus && true == instance.focus()) return;		
			}
		}
	},
	_keepFocus: function(event) {
		function checkFocus() {
			var activeElement = this.document[0].activeElement,
				isActive = this.uiDialog[0] === activeElement ||
					$.contains(this.uiDialog[0], activeElement);
			if (!isActive) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call(this);
		this._delay(checkFocus);
	},

	_createWrapper: function() {
		this.uiDialog = $("<div>")
			.addClass("coral-dialog coral-component coral-component-content coral-corner-all coral-front " +
				this.options.dialogClass)
			.hide()
			.attr({
				tabIndex: -1,
				role: "dialog"
			})
			//.appendTo( this._appendTo() );
			.appendTo( this.element.parent() );
		if (this.options.zIndex) {
			this.uiDialog.css("z-index", this.options.zIndex);
		}

		this._on(this.uiDialog, {
			keydown: function(event) {
				if (this.options.closeOnEscape && !event.isDefaultPrevented() && 
						event.keyCode && event.keyCode === $.coral.keyCode.ESCAPE) {
					event.preventDefault();
					this.close(event);
					return;
				}

				if (event.keyCode !== $.coral.keyCode.TAB || event.isDefaultPrevented()) {
					return;
				}
				var tabbables = this.uiDialog.find(":tabbable"),
					first = tabbables.filter(":first"),
					last  = tabbables.filter(":last");

				if ((event.target === last[0] || event.target === this.uiDialog[0] ) && 
						!event.shiftKey) {
					this._delay(function() {
						first.focus();
					});
					event.preventDefault();
				} else if ((event.target === first[0] || event.target === this.uiDialog[0]) && 
						event.shiftKey) {
					this._delay(function() {
						last.focus();
					});
					event.preventDefault();
				}
			},
			mousedown: function (event) {
				if ( this._moveToTop(event)) {
					this._focusTabbable();
				}
			}
		});

		if (!this.element.find("[aria-describedby]").length) {
			this.uiDialog.attr({
				"aria-describedby": this.element.uniqueId().attr("id")
			});
		}
	},
	_createTitlebar: function() {
		var options = this.options,
			uiDialogTitle;
			
		this.uiDialogTitlebar = $("<div>")
			.addClass ("coral-dialog-titlebar coral-component-header coral-corner-all coral-helper-clearfix")
			.prependTo(this.uiDialog);
		this.uiDialogToolbar = $("<div>")
			.addClass ("coral-dialog-toolbar coral-corner-all coral-helper-clearfix")
			.appendTo (this.uiDialogTitlebar);
		this._on(this.uiDialogTitlebar, {
			mousedown: function(event) {
				if (!$(event.target).closest(".coral-dialog-toolbar-close") && 
					!$( event.target ).closest(".coral-dialog-toolbar-maximum")) {
					this.uiDialog.focus();
				}
			}
		});
		
		if (this.options.maximizable) {
			// 添加 最大化 功能
			this.uiDialogTitlebarMaximum = $("<button type='button'></button>")
				.button({
					label: this.options.maximumText,
					icons: {
						primary: "cui-icon-enlarge7"
					},
					text: false
				})
				.addClass("coral-dialog-toolbar-maximum")
				.appendTo(this.uiDialogToolbar);
			this._on(this.uiDialogTitlebarMaximum, {
				click: function(event) {
					event.preventDefault();
					if (!this.uiDialog.hasClass( "coral-dialog-maximum")) {
						this.maximize();
					} else {
						this.restore();	
					}
					$.coral.refreshAllComponent(this.element);
					this._trigger("onMaximize", null, {
						"width": $(window).outerWidth(),
						"height": $(window).outerHeight()
					} );
				}
			});
		}
		
		// support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)	
		if (this.options.closable) {
			this.uiDialogTitlebarClose = $("<button type='button'></button>")
				.button({
					label: this.options.closeText,
					icons: {
						primary: this.options.closeButtonClass
					},
					text: false
				})
				.addClass("coral-dialog-toolbar-close")
				.appendTo(this.uiDialogToolbar);
			this._on(this.uiDialogTitlebarClose, {
				click: function(event) {
					var $this = $(event.target); 
					$this.removeClass("coral-state-hover");
					event.preventDefault();
					this.close( event );
				}
			});
		}
		
		uiDialogTitle = $("<span>")
			.uniqueId()
			.addClass("coral-dialog-title")
			.prependTo( this.uiDialogTitlebar );
		this._title( uiDialogTitle );
		
		uiDialogsubTitle = $("<span>")
			.uniqueId()
			.addClass("coral-dialog-subTitle")
			.prependTo( this.uiDialogTitlebar );
	
		this._subTitle( uiDialogsubTitle );
		this.uiDialog.attr({
			"aria-labelledby": uiDialogTitle.attr("id")
		});
		// 初始化时，最大化 dialog
		if (this.options.maximizable && this.options.maximized) {
			this.maximize();
			$.coral.refreshAllComponent( this.element );
		}
	},
	
	maximize: function(isInit){
		var options = this.options;
		options.restoreHeight = options.height;
		options.restoreWidth = options.width;
		$(this.element).dialog("option", "width", "100%");
		$(this.element).dialog("option", "height", "100%");
		this.uiDialog.addClass("coral-dialog-maximum");
		this.uiDialogTitlebarMaximum
			.find(".cui-icon-enlarge7")
			.removeClass("cui-icon-enlarge7")
			.addClass("cui-icon-shrink7");
	},
	
	minimize: function(){
		//TODO: minimize
	},
	
	restore: function(){
		var that = this,
		options = this.options;
		
		$(that.element).dialog("option", "width", options.restoreWidth);
		$(that.element).dialog("option", "height", options.restoreHeight);
		that.uiDialog.removeClass("coral-dialog-maximum");
		that.uiDialogTitlebarMaximum.find(".cui-icon-shrink7").removeClass("cui-icon-shrink7").addClass("cui-icon-enlarge7");
	},	
	
	_title: function( title ) {
		var formatterEvent = $.coral.toFunction(this.options.titleFormat);
		if ( !this.options.title ) {
			title.html("&#160;");
		}
		if (formatterEvent) {
			title.html( formatterEvent.call(this.element, this.options.title) );
		} else {
			title.text( this.options.title );
		}
	},
	
	_subTitle: function(subTitle){
		if( !this.options.subTitle ) {
			subTitle.html("&#160;");
		}
		subTitle.text( this.options.subTitle );
	},
	
	_createButtonPanel: function() {
		this.uiDialogButtonPane = $("<div>")
			.addClass("coral-dialog-buttonpane coral-component-content coral-helper-clearfix");

		this.uiButtonSet = $("<div>")
			.addClass("coral-dialog-buttonset")
			.appendTo( this.uiDialogButtonPane );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons,
			cancelEvent = $.noop,
			confirmEvent= $.noop;

		// 删除已有的按钮区
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();
		
		if ( $.isEmptyObject( buttons ) ) buttons = {};
		/*if (this.options.oncancel) {
			cancelEvent = function() { 
				that._trigger("onCancel");
				if (that._isOpen) that.close();
			};
			if ($.isArray( buttons )) {
				buttons.push({text : "取消", click: cancelEvent});
			} else {
				buttons["取消"] = cancelEvent;
			}
		}
		if (this.options.onConfirm) {
			confirmEvent = function() { 
				that._trigger("onConfirm");
				if (that._isOpen) that.close();
			};
			if ($.isArray( buttons )) {
				buttons.push({text : "确定", click: confirmEvent});
			} else {
				buttons["确定"] = confirmEvent;
			}
		}*/

		if ( ($.isArray( buttons ) && !buttons.length) ) {
			this.uiDialog.removeClass("coral-dialog-buttons");
			return;
		}
		var primary = true;
		$.each( buttons, function( name, props ) {
			var click, buttonOptions, btnPrimary = "coral-btn-primary";
			props = $.isFunction( props ) ? { click: props, text: name } : props;
			props = $.extend( { type: "button" }, props );
			
			click = props.click;
			props.click = function() {
				click.apply( that.element[0], arguments );
			};
			
			buttonOptions = {
				icons: props.icons,
				icons: props.cls,
				countdown: props.countdown,
				text: props.showText
			};
			if ( props.id ) {
				buttonOptions.id = props.id;
			}
			if(primary){
				buttonOptions = $.extend({},buttonOptions,{cls: btnPrimary + " " + props.cls});
			} else {
				buttonOptions = $.extend({},buttonOptions,{cls: props.cls});
			}
			delete props.icons;
			delete props.cls;
			delete props.showText;
			$( "<button></button>", props ).button( buttonOptions ).appendTo( that.uiButtonSet );
			primary = false;
		});
		
		this.uiDialog.addClass("coral-dialog-buttons");
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable({
			cancel: ".coral-dialog-content, .coral-dialog-toolbar-close",
			handle: ".coral-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				$( this ).addClass("coral-dialog-dragging");
				that._blockFrames();
				that._trigger( "onDragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "onDrag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();
				
				options.position = {
						my: "left top",
						at: "left" + (left >= 0 ? "+" : "") + left + " " +
							"top" + (top >= 0 ? "+" : "") + top,
						of: that.window
				};
				$( this ).removeClass("coral-dialog-dragging");
				that._unblockFrames();
				that._trigger( "onDragStop", event, filteredUi( ui ) );
			}
		});
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,
			position = this.uiDialog.css("position"),
			resizeHandles = typeof handles === "string" ?
				handles	:
				"n,e,s,w,se,sw,ne,nw";
		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable({
			cancel: ".coral-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				$( this ).addClass("coral-dialog-resizing");
				that.manualResize = true;
				that._blockFrames();
				that._trigger( "onResizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				$.coral.refreshAllComponent(that.element);
				that._trigger( "onResize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();
				
				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + (left >= 0 ? "+" : "") + left + " " +
						"top" + (top >= 0 ? "+" : "") + top,
					of: that.window
				};
				$( this ).removeClass("coral-dialog-resizing");
				that._unblockFrames();
				that._trigger( "onResizeStop", event, filteredUi( ui ) );
			}
		})
		.css( "position", position );
	},
	
	_trackFocus: function() {
		this._on(this.component(), {
			focusin: function(event) {
				this._makeFocusTarget();
				this._focusedElement = $(event.target);
			}
		});
	},
	
	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},
	
	_untrackInstance: function() {
		var instances = this._trackingInstances(),
		exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},
		
	_trackingInstances: function() {
		var instances = this.document.data( "coral-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "coral-dialog-instances", instances );
		}
		return instances;
	},
	
	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {
		var position = this.options.position,
			offset = [0,0],
			myAt = [],
			isVisible;
		
		if ( position ) {
			if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
				myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
				if ( myAt.length === 1 ) {
					myAt[1] = myAt[0];
				}

				$.each( [ "left", "top" ], function( i, offsetPosition ) {
					if ( +myAt[ i ] === myAt[ i ] ) {
						offset[ i ] = myAt[ i ];
						myAt[ i ] = offsetPosition;
					}
				});

				position = {
					my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
						myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
					at: myAt.join(" ")
				};
			}

			position = $.extend( {}, $.coral.dialog.prototype.options.position, position );
		} else {
			position = $.coral.dialog.prototype.options.position;
		}	

		isVisible = this.uiDialog.is(":visible");
		if ( !isVisible ) {
			this.uiDialog.show();
		}	
		if ( this.options.queue ) {
			$("#coral-msgBox").position( position );
		} else {
			this.uiDialog.position( position );		
		}
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		});

		// 如果元素是隐藏状态设置的尺寸，则不进行调整，打开的时候会重新调整的。
		if ( resize && !$( that.element ).is(":hidden") ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is(":data(coral-resizable)") ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "dialogClass" ) {
			uiDialog
				.removeClass( this.options.dialogClass )
				.addClass( value );
		}

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}
		
		if ( key === "maximumText" ) {
			this.uiDialogTitlebarMaximum.button({
				// 确保label为字符串
				label: "" + value
			});
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button({
				// 确保label为字符串
				label: "" + value
			});
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is(":data(coral-draggable)");
			if ( isDraggable && !value ) {
				uiDialog.draggable("destroy");
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {
			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is(":data(coral-resizable)");
			if ( isResizable && !value ) {
				uiDialog.resizable("destroy");
			}

			// currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find(".coral-dialog-title") );
		}
		if ( key === "subTitle" ) {
			this._subTitle( this.uiDialogTitlebar.find(".coral-dialog-subTitle") );
		}
	},

	_size: function() {
		// If the user has resized the dialog, the .coral-dialog and .coral-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		// 以防content里有其他的子元素高度撑开，所以此处先隐藏
		this.element.hide().css({
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		});

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css({
				height: "auto",
				width: options.width
			})
			.outerHeight();
		// 等到dialog拿到nonContent高度后，显示element。 
		this.element.show();
		
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css({
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			});
		} else { // 20150120 如果height为百分比形式，则先转化为px
			var re =/^(\d|[1-9]\d|100)%$/;
			if( re.test( this.options.height ) ){
				this.options.percent = this.options.height;
				this.element.height( Math.max( 0, this._percentToPx() - nonContentHeight ) );
			} else {
				this.element.height( Math.max( 0, this.options.height - nonContentHeight ) );
			}
		}

		if (this.uiDialog.is(":data(coral-resizable)") ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map(function() {
			var iframe = $( this );

			return $( "<div>" )
				.css({
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				})
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[0];
		});
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest(".coral-dialog").length ) {
			return true;
		}

		return !!$( event.target ).closest(".coral-datepicker").length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay(function() {
			isOpening = false;
		});
		
		if ( !this.document.data( "coral-dialog-overlays" ) ) {
		
			// Prevent use of anchors and inputs
			this._on( this.document, {
				focusin: function( event ) {
					if ( isOpening ) {
						return;
					}
			
					if ( !this._allowInteraction( event ) ) {
						event.preventDefault();
						
						var d = this.document.find( ".coral-dialog:visible:last .coral-dialog-content" )
											 .data( this.componentFullName );
						if (d && d._focusTabbable) {
							//d._focusTabbable();
							//TODO 注释掉的原因：在ie下面当点击dialog底部的按钮的时候，会产生聚焦异常，焦点不会停留在底部按钮区域
						}
					}
				}
			});
		}

		this.overlay = $("<div>")
			.addClass("coral-component-overlay coral-front")
			.appendTo( this._appendTo() );
		// -- 如果 appendTo 到非 body，position 不为 “fixed”
		if (this.options.appendTo != "body") {
			this.overlay.css({
				position: "relative"
			});
		}
		// --
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		});
		this.document.data( "coral-dialog-overlays",
			(this.document.data( "coral-dialog-overlays" ) || 0) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "coral-dialog-overlays" ) - 1;
			
			if ( !overlays ) {
				this.document
					.unbind( "focusin" )
					.removeData( "coral-dialog-overlays" );
			} else {
				this.document.data( "coral-dialog-overlays", overlays );
			}
			this.overlay.remove();
			this.overlay = null;
		}
	},
	// 按钮区面板
	buttonPanel : function () {
		return this.uiButtonSet;
	},
	// 隐藏对话框
	hide : function () {
		this._isOpen = false;
		this.component().hide();
	},
	_percentToPx : function(){
		var that = this,
			options = this.options,
			percent = options.percent,
			parent = $(window);
		
		maxHeight = parent.height() * parseInt(percent.substring(0, percent.length-1))/100;
		return maxHeight;
	},
	refresh : function(){
		var that = this,
			options = this.options,
			percent = options.percent;
		var re =/^(\d|[1-9]\d|100)%$/;
		if(re.test(percent)&&!options.manualResize){
			maxHeight = that._percentToPx();
			options.height = maxHeight;
			setTimeout(function(){
				$(that.element).dialog("option", "height", maxHeight);
			},0);
		} else {
			//$(that.element).dialog("option", "height", options.height);
		}
	}
	
});

}( jQuery ) );

/*!
 * 组件库4.0： 消息提示窗
 *
 * 依赖JS文件:
 *	jquery.coral.core.js
 *	jquery.coral.component.js
 *	jquery.coral.mouse.js
 *  jquery.coral.button.js
 *	jquery.coral.draggable.js
 *	jquery.coral.position.js
 *	jquery.coral.resizable.js
 *	jquery.coral.dailog.js
 */
(function( $, undefined ) {

$.messager = {
	/**
	 *  遮罩功能
	 */
	loading : {
		show: function($el) {
			if (! $el instanceof jQuery) {
				$el = $($el);
			}
			var loadingId = $el.attr("data-loading-id");
			if (!loadingId) {
				loadingId = new Date().getTime();
				$el.attr("data-loading-id", "loading_" + loadingId);
			}
			
			var $uiLoading = $("<div id='loading_"+ loadingId +"' class='coral-loading'><div class='coral-loading-zone'></div><span class='coral-loading-text'>加载中，请稍后...</span></div>");
			var $uiLoadingZone = $uiLoading.find(".coral-loading-zone");
			var $uiLoadingText = $uiLoading.find(".coral-loading-text");	
			
			$uiLoading.outerWidth($el.outerWidth());
			$uiLoading.outerHeight($el.outerHeight());
			$uiLoadingZone.outerWidth($el.outerWidth());
			$uiLoadingZone.outerHeight($el.outerHeight());
			
			$uiLoading.position({
				my: "left top",
				at: "left top",
				of: $el
			});	
			$(document.body).append($uiLoading);
			
			var loadingTextLeft = ( $uiLoading.outerWidth() - $uiLoadingText.outerWidth() ) / 2;
			$uiLoadingText.css({
				left: loadingTextLeft
			});
		},
		hide: function($el) {
			if (! $el instanceof jQuery) {
				$el = $($el);
			}
			var loadingId = $el.attr("data-loading-id");
			if (!loadingId) return;
			
			$("#" + loadingId).remove();
			$el.removeAttr("data-loading-id");
		}
	},
	_isType:function(options){
		var icons = "", typeCls = "",iconType,
			iconCls = options.iconCls,
			rep = $.inArray(options.cls, ["info", "success", "warning", "error", "question", "danger", "alert"]);
		if(options.cls && rep > -1){
			options.type = options.cls;
		}
		if(!options.type){
			options.type = "info";
		}
		var defaultIconCls = {
			warning: "cui-icon-warning2",
			danger: "cui-icon-cancel-circle2",
			error: "cui-icon-cancel-circle2",
			success: "cui-icon-checkmark4",
			alert: "cui-icon-notification2",
			info: "cui-icon-notification2",
			confirm:"cui-icon-question4"
		};
		if ( options.type == "alert" ) {
			typeCls = "coral-control-info ";
			iconType = defaultIconCls.alert;
		} else if ( options.type == "success" ) {
			typeCls = "coral-control-success ";
			iconType = defaultIconCls.success;
		} else if ( options.type =="danger" ) {
			typeCls = "coral-control-danger ";
			iconType = defaultIconCls.danger;
		} else if ( options.type =="info" ) {// info 用在message
			typeCls = "coral-control-info ";
			iconType = defaultIconCls.info;
		} else if ( options.type == "confirm" ) {
			typeCls = "coral-control-question ";
			iconType = defaultIconCls.confirm;
		}else if ( options.type == "warning" ) {
			typeCls = "coral-control-warning ";
			iconType = defaultIconCls.warning;
		}
		if(typeof iconCls === "boolean"){
			icons = iconCls === true ? 
					icons = "<span class='icon-control "+ typeCls + iconType +"'></span>" : "";
		}
		if(typeof iconCls === "string"){
			icons = "<span class='icon-control " + typeCls + options.iconCls +"'></span>";
		}
		return icons;
	},
	_init: function( dialog, options ){
		if( options.queue === true ){
			if ( !$("#coral-msgBox").length ) {
				$("<div id='coral-msgBox' class='queueMessage'></div>").appendTo("body");
			}
			options.appendTo = "#coral-msgBox";
		} 
		var icons = "", typeCls = "",iconType,
			iconCls = options.iconCls;
		if ( options.wtype == "messageBox" ) {
			dialog = $( "<div class='coral-messagerBox'>" +
				(options.iconCls || "") +
				"<span class='coral-messagerBox-content'>" +
				options.message + "</span></div>" ).appendTo( "body" );
		}else if ( options.wtype == "message" ) {
			icons = this._isType(options);
			var hasIcon = iconCls === false ? "" : "hasIcon ";
			dialog = $("<div class='"+ hasIcon + options.type +"' role='alert'>" +
					icons +
					"<span class='coral-alert-content'>" + options.message + "</span></div>").appendTo( "body" );
		}else if ( typeof options.message !== "undefined" && options.wtype != "message" ) {
			icons = this._isType(options);
			dialog = $( "<div class='coral-messager-body'><span class='coral-messager-box'><span class='hasIcon coral-messager-box-content'>" +
				icons +
				"<span class='coral-messager-content'>" +
				options.message + "</span></span></span></div>" ).appendTo( "body" );
		} 
		return dialog;
	},
	/**
	 * 非模式窗口消息提示
	 * 
	 * options: 设置参数
	 * type: 消息类型
	 * fn: 消息回调
	 */
	message : function ( options, msgType, fn ) {
		if (typeof options === "string" || typeof options === "boolean" || typeof options === "number") {
			options = {message: options.toString(), wtype: "message"};
		} 
		if ( !fn && typeof msgType === "function") {
			fn = msgType;
			msgType = "info";
		}
		if ( !msgType || $.inArray(msgType, ["info", "success", "warning", "error", "question", "danger", "alert"]) < 0) {
			msgType = "info";
		}
		// 默认$.error和默认的方法冲突，只能用$.danger
		if ( msgType == "error" ) {
			msgType = "danger";
		}
		options = options || {};
		options = $.extend( true, {
			autoOpen: true,
			title: "消息提示",
			isMessage: true,//区别消息框和对话框
			show: "slideDown",
			hide: "slideUp",
			modal: false,
			queue: false,
			onClose: fn,
			draggable: false,
			resizable: false,
			width: "auto",
			maxWidth: 600,
			wtype: "message",
			type: msgType,
			iconCls: true,
			timeOut: 2999
		}, $.message.defaults , $.messageQueue.defaults , options);
		
		var dialog = $.messager._init( dialog, options );
		dialog.css("max-width", options.maxWidth + "px");
		dialog.dialog(options);
		if (options.wtype === "message") {
			$.messager.messageInstances++;
			$.messager.messageHeights.push(dialog.outerHeight());
		}
	},
	messageBox: function( options, fn ) {
		/*if (typeof options === "string" && options == "close" ) {
			$(fn).dialog("close");
		}*/
		if (typeof options === "string" || typeof options === "boolean" || typeof options === "number") {
			options = {message: options.toString(), wtype: "messageBox"};
		} 
		options = options || {};
		options = $.extend( true, {
			autoOpen: true,
			title: "消息提示",
			show: "slideDown",
			hide: "slideUp",
			isMessage: true,//区别消息框和对话框
			modal: false,
			draggable: false,
			resizable: false,
			width: 200,
			wtype: "messageBox",
			timeOut: 2999
		}, $.messageBox.defaults , options);
		
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		return dialog;
	},
	messageQueue : function ( message, title, callback ) {
		var defaultTitle = "信息提示";
		var options = {};
		if (typeof message !== "string") {
			options = message || "";
			options.queue = true;
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if (typeof title === "function") {
			callback = title;
			title = defaultTitle;
		}
		if (title === undefined) {
			title = defaultTitle;
		}
		options = $.extend(true, {
			iconCls:true,
			queue:true,
			message: message.toString(),
			title: title.toString()
		}, $.messageQueue.defaults, options);
		$.messager.message( options );
		options.wtype = "message";
	},
	messageToast:function(message, title, callback){
		var defaultTitle = "信息提示";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			autoOpen: true,
			modal: false,
			show: "slideDown",
			hide: "slideUp",
			message: message.toString(),
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			draggable: false,
			resizable: false,
			iconCls:true,
			width: "auto",
			wtype: "message",
			timeOut: 2999
		}, $.messageToast.defaults, options );
		options.wtype = "message";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	// 模式窗口消息提示
	alert : function( message, title, callback ) {
		var defaultTitle = "信息提示";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			modal: true,
			message: message.toString(),
			timeOut: 0,
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			width: 300,
			icons: "cui-icon-warning2",
			iconCls:true,
			wtype: "alert"
		}, $.alert.defaults, options );
		
		if ((options.timeOut <= 0 || isNaN(options.timeOut)) && !options.buttons) {
			options.buttons = {
				"确定": function() {						
					$( this ).dialog( "close" );
					if (typeof callback === "function") {
						callback(true);
					}
					return true;
				}
			};
		}
		options.wtype = "alert";
		options.type = "alert";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	//错误提示窗口
	danger : function(message, title, callback){
		var defaultTitle = "错误提示";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			modal: true,
			message: message.toString(),
			timeOut: 0,
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			width: 300,
			iconCls:true,
			icons: "cui-icon-cancel-circle2",
			wtype: "danger"
		}, $.danger.defaults, options );
		
		if ((options.timeOut <= 0 || isNaN(options.timeOut)) && !options.buttons) {
			options.buttons = {
				"确定": function() {						
					$( this ).dialog( "close" );
					if (typeof callback === "function") {
						callback(true);
					}
					return true;
				}
			};
		}
		options.wtype = "danger";
		options.type = "danger";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	//success
	success : function(message, title, callback){
		var defaultTitle = "Success";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			modal: true,
			message: message.toString(),
			timeOut: 0,
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			width: 300,
			iconCls:true,
			icons: "cui-icon-checkmark4",
			wtype: "success"
		}, $.success.defaults, options );
		
		if ((options.timeOut <= 0 || isNaN(options.timeOut)) && !options.buttons) {
			options.buttons = {
				"确定": function() {						
					$( this ).dialog( "close" );
					if (typeof callback === "function") {
						callback(true);
					}
					return true;
				}
			};
		}
		options.wtype = "success";
		options.type = "success";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	//确认窗口
	confirm : function(message, title, callback){
		var okText = "确定",
			cancelText = "取消",
			buttons = {}, options = {},
		    defaultTitle = "信息提示";
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
			okText = options.okText ? options.okText : okText;
			cancelText = options.cancelText ? options.cancelText : cancelText;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			autoOpen: true,
			title: "确认提示",
			message: message.toString(),
			title: title.toString(),
			iconCls:true,
			isMessage: true,//区别消息框和对话框
			width: 300,
			show: "slideDown",
			modal: true,
			icons: "cui-icon-question4",
			buttons: buttons
		}, $.confirm.defaults, options);
		buttons[okText] = function() {
			$( this ).dialog( "close" );
			if (typeof callback === "function") {
				callback(true);
			}
			return false;
		};
		buttons[cancelText] = function() {
			$( this ).dialog( "close" );
			if (typeof callback === "function") {
				callback(false);
			}
			return false;
		};
		options.type = "confirm";
		options.wtype= "confirm";
		var dialog = $.messager._init( dialog, options );
			dialog.dialog(options);
	
		return dialog;
	}
};
/*$.fn["messageBox"] = function ( options ) {
    return this.each(function () {
        if ( options && "hide" !== options ) {
    		$.messageBox( options );
        } else {
            if( "hide" === options ) { 
            	$(this).dialog("close"); 
            } else { 
            	$(this).dialog("open"); 
            }
        }
    });
};*/
$.messager.messageInstances = 0;
$.messager.messageHeights = [];
// 简化使用方式
$.message = $.messager.message;
$.messageQueue = $.messager.messageQueue;
$.messageBox = $.messager.messageBox;
$.messageToast = $.messager.messageToast;
$.alert = $.messager.alert;
$.danger = $.messager.danger;
$.success = $.messager.success;
$.confirm = $.messager.confirm;
$.message.defaults = {
	position: {
		my: "top",
		at: "top top+50",
		of: window
	}
};
$.messageQueue.defaults = {
	position: {
		my: "top",
		at: "top top+50",
		of: window
	}
};
$.messageBox.defaults = {
	position: {
		my: "right bottom",
		at: "right bottom",
		of: window
	}
};
$.messageToast.defaults = {
		position: {
			my: "top",
			at: "top top+50",
			of: window
		}
	};
$.alert.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
$.danger.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
$.success.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
$.confirm.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
}( jQuery ) );

/**
 *	Coral 4.0： form
 *
 * 	Depends:
 *		jquery.coral.core.js
 *		jquery.coral.component.js
 *
 */
( function ( $, undefined ) {
	"use strict";	
	$.component( "coral.form",{
		version: "4.0.2",
		options: {
			disabled: null,
			ajaxSubmit: false, //Defines if to submit form with Ajax.
			novalidate: false, // false to validate the form
			context: "",
			separator: ",", //获取form数据，多选时返回的对象是分割符分割的字符串，其中的分隔符。
			container: "tooltip", // tooltip, popover, default
			requires: null,
			excluded: [":disabled", ":hidden", ":not(:visible)"],  // ":disabled,:hidden,:not(:visible)" 校验的时候排除不检验的元素
			errTipsType: "first", // "all", "first", "none"  显示全部校验提示，显示第一个，全部不显示
			onCreate: null,
			url: "",
			postData: {},
			target: "",
			focusFirst: false, // load之后focus第一个form元素
			showRequiredMark: null,
			hideRequiredMark: null,
			onChange: null,
			triggers: {
			},
			exclude: false // true 则排除 form 内的表单元素不校验
		},
		//创建组件
		_create: function () {
			var that = this;
			//创建组件外围元素
			this._initElement();
			this._bindEvents();
			
			$.data( this.element, "modifiedData", {} );
			$.data( this.element, "originalData", this._getForm() );
			
			this.element.validate({
				excluded: this.options.excluded,
				errorMode: this.options.errorMode,
				showRequiredMark: this.options.showRequiredMark,
				hideRequiredMark: this.options.hideRequiredMark
			});
			if (this.options.focusFirst) {
				this._focusFirst();
			}
			//只有一个输入框的时候，会刷新页面，所以在加上一个隐藏的输入框
			this.element.append($("<input type='text' style='display:none;'></input>"));
		},
		/**
		 * get Fields of form
		 */
		_getFields: function() {
			return this.element.find( ".ctrl-form-element" );
		},
		/**
		 * 获取校验组件的类型
		 * @param el 组件jquery对象
		 * @return {string} 组件类型
		 */
		_getFieldType: function(el) {
			var classArray = $(el)[0].className.split(" "),
				type = "";
	
			for ( var item in classArray ) {
				if ( classArray[item].indexOf( "coral-validation-" ) >=  0 ) {
					type = classArray[item].substr( classArray[item].indexOf( "coral-validation-" ) + 17 );
					return type;
				}
			}
			
			return null;
		},
		/**
		 * 绑定事件
		 */
		_bindEvents: function() {
			var that = this,
				opts = this.options,
				$fields = this._getFields();			
			
			$fields.each( function(index, field) {
				var $field = $(field);
				var	type = that._getFieldType($field);
				/*var triggers = ["onchange"];
				// 绑定触发校验的事件
				var events = $.map( triggers, function(item) {
                    return type + item + ".formonchange";
                }).join(" ");*/
				
				// 绑定组件的校验方法
				$field.off(".formonchange").on( type + "onchange.formonchange", function( event, ui ) {
					if (event.type.indexOf("onchange") != -1) {
						var name = $(this)[type]("option", "name"),
							value = $(this)[type]("getValue"),
							changeData = {};

						changeData[name] = value;
						that.updateCoralData(changeData);
						that._trigger("onChange", null, {field:this, type:type});
					}
				});
			});
		},
		//组件初始化
		_initElement: function () {
			var options = this.options;
			//添加组件外围元素
			this.element.addClass( options.cls );
			this.element.appendTo( this.uiBorder );
			this.element.addClass( "coral-form-default" );
			
			if ( options.id !== "" ) {
				this.element.attr( "id", options.id );
			}
			if ( options.name !== "" ) {
				this.element.attr( "name", options.name );
			}
			if ( options.action !== "") {
				this.element.attr( "action", options.action );
			}
			if ( options.method !== "" ) {
				this.element.attr( "method", options.method );
			}				
			if ( options.target !== "" ) {
				this.element.attr( "target", options.target );
			}		
			if ( options.context != "" ) {
				this.element.attr( "context", options.context );
			} else {
				this.element.attr( "context", "body" );
			}
			// 处理form下的label的颜色
			// this._initRequires();			
		},
		initRequires: function () {
			this._initRequires();
		},
		// 处理校验组件前面的 label 的颜色。
		_initRequires: function () {
			var 	that = this,
					requiredEls = this.element.find($("[class*='coral-validation-']")).parent(":visible").find($("[class*='coral-validation-']"));
			
			requiredEls.each( function () {
				var className = this.className, 
					coralType = "",
					clsArray = className.split(" ");
				
				for ( var item in clsArray ) {
					if ( clsArray[item].indexOf( "coral-validation-" ) >=  0 ) {
						coralType = clsArray[item].substr( clsArray[item].indexOf( "coral-validation-" ) + 17 );
						break;
					}
				}
				
				var required = $(this)[coralType]("option", "required"); 
				
				if ( typeof  required === "boolean" && required ) {
					if (coralType=="datepicker" ) {
						$(this)[coralType]("component", $(this)).parent("td").prev().addClass("require");
					}  else {
						$(this)[coralType]("component").parent("td").prev().addClass("require");						
					}
				}
			});
		},
		/**
		 * 根据选择器参数，获取组件类型
		 */
		_getCoralType: function (selector) {
			var 	clsArray = $(selector)[0].className.split(" "),
					coralType = "";
			
			for ( var item in clsArray ) {
				if ( clsArray[item].indexOf( "coral-validation-" ) >=  0 ) {
					coralType = clsArray[item].substr( clsArray[item].indexOf( "coral-validation-" ) + 17 );
					return coralType;
				}
			}
		},
		/**
		 * 校验组件动态改变 required = true 属性时，设置前面label的颜色为红色
		 */
		showRequire: function( selector) {
			var $el = $(selector),
				coralType = this._getCoralType( selector );
			
			$el[coralType]("component").parent("td").prev().addClass("require");
		},
		/**
		 * 校验组件动态改变 required = false 属性时，恢复前面label的颜色
		 */
		hideRequire: function( selector) {
			var $el = $(selector),
				coralType = this._getCoralType( selector );
			
			$el[coralType]("component").parent("td").prev().removeClass("require");
		},
		//设置属性处理
		_setOption: function( key, value ) {
			//默认属性不允许更改
			if (key == "id" || key == "name") {
				return;
			}
			
			this._super(key, value );
			
			return ;
		},
		/**
		 * 组件值初始化或取得默认值时候调用的方法
		 * coralData: {
		 * 	  "name": "value" // value = String "v1" || Array ["v1", "v2", "v3"]
		 * }
		 */
		saveOriginalCoralData: function ( coralData ) {
			var that = this;
			
			$.each ( coralData, function ( key, val ) {
				that._updateCoralData("original", key, val);
			});	
			
			return ;
		},
		/**
		 * 组件值更改的时候调用的方法
		 * coralData: {
		 * 	  "name": "value" // value = String "v1" || Array ["v1", "v2", "v3"]
		 * }
		 */
		updateCoralData: function ( coralData ) {
			var that = this;
			
			$.each ( coralData, function( key, val ) {
				that._updateCoralData( "modified", key, val );
			});		
			
			return ;
		},
		_updateCoralData: function ( dataType, key, val ) {
			var data = $.data( this.element, dataType + "Data" );
				
			data[key] = val;
			
			$.data( this.element, dataType + "Data", data );
			
			return ;
		},
		// 原生获取 form 序列化方法
		serialize: function () {
			return $(this.element).serialize();
		},
		//  原生获取 form json 对象方法
		serializeArray: function () {
			return $(this.element).serializeArray();
		},
		// modifiedData undefined 应该和false同样的效果，undefined不应该和true一个效果
		modifiedData: function ( isSerialize ) {
			if ( ( typeof isSerialize == "boolean" && isSerialize ) ) {
				return this._getSerialize( "modified" );
			} else {
				return $.data( this.element, "modifiedData" );
			} 
		},
		// originalData undefined 应该和false同样的效果，undefined不应该和true一个效果
		originalData: function ( isSerialize ) {
			if ( ( typeof isSerialize == "boolean" && isSerialize) ) {
				return this._getSerialize( "original" );
			} else {
				return $.data( this.element, "originalData" );
			}
		},
		// formData undefined 应该和false同样的效果，undefined不应该和true一个效果
		/**
		 * 取得表单的数据
		 * */
		formData: function () {
			return this._getForm();
		},
		/**
		 * 取得表单的数据
		 * */
		getData: function () {
			return this.formData();
		},
		//获取 modified/original 序列化字符串
		_getSerialize: function ( dataType ) {
			var data = $.data( this.element, dataType + "Data" ),
				serializeStr = "";
			$.each( data, function ( key, val) {
				if ( typeof val != "Object") {
					serializeStr += key + "=" + val + "&";
				} else {
					for ( var i in val ) {
						serializeStr += key + "=" + val[i] + "&"; 
					}
				}			
			});
			return serializeStr.substr( 0, serializeStr.length - 1 );
		},
		// 获取 form 元素数据对象，多选，复选情况下，用分隔符 separator 分割
		_getForm: function() {
			var	that = this,
				coralEl = {},
				nomarlEl = {},
				arr = $( this.element ).serializeArray();
			
			$( this.element ).find(".ctrl-form-element").each(function(){
				var type = $(this).attr("component-role"),
					name = $(this)[type]("option", "name");
				if (name) {
					if (type !== "checkbox") {
						if (coralEl[name]) {
							coralEl[name] = coralEl[name] + that.options.separator + $(this)[type]("getValue");
						} else {
							coralEl[name] = $(this)[type]("getValue");
						}
					} else {
						// checkbox组件处理了name重复的问题
						coralEl[name] = $(this)[type]("getValue");
					}
				}
			});
			$( arr ).each( function(index, item) {
				if (item.name) {
					// 如果是组件的name，则跳过。
					if (typeof(coralEl[item.name]) === "undefined") {
						// 如果是非组件的name，重复的name，则逗号分隔。
						if (nomarlEl[item.name]) {
							nomarlEl[item.name] = nomarlEl[item.name] + that.options.separator + item.value;
						} else {
							nomarlEl[item.name] = item.value;
						}
					}
				}
			});
			$.extend(coralEl, nomarlEl);
			return coralEl;
		}, 
		/*//获取 form Json格式
		_getFormJson: function () {
			var serializeObj = {},
				array = $( this.element ).serializeArray();

			$( array ).each( function () {
				if( serializeObj[this.name] ) {
					if ( $.isArray( serializeObj[this.name] ) ) {
						serializeObj[this.name].push( this.value );
					} else {
						serializeObj[this.name] = [serializeObj[this.name], this.value];
					}
				} else {
					serializeObj[this.name] = this.value;	
				}
			});
			
			return serializeObj;
		},*/
		_loadData: function ( data ) {
			var that = this;
	
			this._updateData( data, "modified" );
			this._updateData( data, "original" );
			
			if ( typeof data == "object" ) {
				$.each ( data, function ( i, d ) {
					if ( !that._loadCoralData( i, d ) ) {
						that._loadNormalData( i, d );
					}
				});
			}
		},
		_loadCoralData: function ( key, value ) {
			var that = this;
			value = value == null? "":value;
			var coralData = that._getCoralFormData();
			var isFind =  false;
			for ( var i in coralData ) {
				var item = coralData[i];
				var ctype = item.coralType;
				switch ( ctype ) {
					case "radio": 
						if ( key == item.name ) {
							isFind =  true;				
							if ( item.el[ctype]("option", "value") == value && value != null ) {
								item.el[ctype]( "check" );
							} else {
								item.el[ctype]( "uncheck" );
							}		
						}
						break;
					case "radiolist": 
						if ( key == item.name ) {
							isFind =  true;	
							if (value == null ) value = "";	
							item.el[ctype]( "setValue", value );
						}
						break;
					case "checkbox":
						if ( key == item.name ) {
							isFind =  true;	
							if ( value == null ) {
								value = [""];
							}
							if ( typeof value != "object" ) {
								if (typeof value === "string" ) {
									value = value.split(that.options.separator); // 给出的分割符需要跟form的separator一致
								} else {
									value = [value];
								}
							}
							for ( var a in value ) {
								if ( item.el[ctype]("option", "value") == value[a] ) {
									item.el[ctype]( "check" );
									break;
								} else {
									item.el[ctype]( "uncheck" );
								}
							}											
						}
						break;
					case "checkboxlist":
						if ( key == item.name ) {
							isFind =  true;	
							if ( key == item.name ) {
								if ( value == null ) value = "";
								item.el[ctype]( "setValue", value );
							} 
						}
						break;
					case "combobox": 
					case "combotree":
					case "combogrid": 
						if ( key == item.name ) {
							isFind =  true;
							if ( typeof value != "object" ) {
								if (typeof value === "string" ) {
									value = value.split(that.options.separator); // 给出的分割符需要跟form的separator一致
								} else {
									value = [value];
								}
							}
							if ( value != null ) {
								item.el[ctype]( "setValues", value );
							}						
						}
						break;
					case "datepicker": 
						if ( key == item.name ) {
							isFind =  true;	
							if ( value != null ) {
								item.el[ctype]( "option", "value", value );
							}
						}
						break;
					case "autocomplete": 
					case "autocompletetree": 
						if ( key == item.name ) {
							isFind =  true;	
							if ( value != null ) {
								item.el[ctype]( "option", "value", value );
							}
						}
						break;
					default:
						if ( key == item.name ) {
							isFind =  true;	
							if ( value != null ) {
								item.el[ctype]( "option", "value", value );
							}
						}
						break;
				}
			}

			return isFind;
		},
		_loadNormalData: function ( key, value ) {
			var that = this,
				normalData = that._getNomalFormElements();
	
			for ( var i in normalData ) {
				if ( key == normalData[i].attr( "name" ) ) {
					if ( undefined != normalData[i].attr( "type" ) && "radio" == normalData[i].attr( "type" ) ) {
						if ( value == normalData[i].attr( "value" ) ) {
							normalData[i][0].checked = true;
						} else {
							continue;
						}
					} else {
						if ( typeof value === "string" && value.indexOf( that.options.separator ) != -1 ) {
							value = value.split( that.options.separator ); // 给出的分割符需要跟form的separator一致
						}
						$( that.element.find("[name=" + key + "]") ).val( value );
					}
				}
			}	
			return ;
		},
		_getAllFromElements: function () {
			return this.element.find("[name]");
		},
		_getCoralFormData: function () {
			var coralData = [];
			this.element.find( ".ctrl-form-element" ).each ( function () {
				var element = $(this), name = null, i = 0,
					tArr = ["radio", "checkbox", "combobox", "combotree", "combogrid", "datepicker", "checkboxlist", "radiolist", "autocomplete", "textboxlist", "autocompletetree"],
				    type = element.attr( "component-role");
				/*for (; i < tArr.length; i++) {
					type = tArr[i];
					if ( element.attr( "component-role") == type ) {*/
				name = element[type]( "option", "name" );
				if ( null != name ) {
					coralData.push({
						el: element,
						name: name,
						coralType: type
					});
				}
				//break;
					/*}
				}*/
			});
			return coralData;
		},
		_getCoralFormElements: function () {
			return this.element.find( ".coral-form-element" );
		},
		_getCoralNameJson: function () {
			var that = this,
				nameJson = {};
			that._getCoralFormElements().each ( function () {
				var componentRole = $( this ).attr( "component-role" );
				$( this )[ componentRole ]( "option", "name" ) && (nameJson[ name ] = componentRole);
			});
			return nameJson;
		},
		_getNomalFormElements: function () {
			var that = this,
				normalArray = [],
				nameJson = that._getCoralNameJson();
			that._getAllFromElements().each( function () {
				if ( ! nameJson[$( this ).attr( "name" )] ) {
					normalArray.push( $( this ) );
				}
			});
			return normalArray;
		},
		//根据load的新数据,更新数据
		_updateData: function ( data, dataType ) {
			var Data = $.data( this.element, dataType + "Data" );
			
			if ( typeof data == "object" ) {
				$.each( data, function ( i, d ) {
					if ( "original" == dataType && typeof Data[i] != "undefined" ) {
						Data[i] = d;
					} else if ( "modified" == dataType && typeof Data[i] != "undefined" ) {
						delete Data[i];
					}
				});
			}
		},
		resetData: function () {
			this.reset();
		},
		getErrors: function () {
			var errorElements = this.component().find(".coral-validate-error"),
			    errors = [];
			errorElements.each(function(){
				var el = $(this).find(".ctrl-form-element"),
				    type = $(el).attr("component-role"),
				    elementError = {};
				elementError.errorText = $(this).find(".coral-errorIcon").attr("data-errors");
				elementError.required = $(el)[type]("option","required");
				elementError.id = $(el)[type]("option","id");
				elementError.validType = $(el)[type]("option","validType");
				elementError.value = $(el)[type]("getValue");
				elementError.element = el[0];
				elementError.requiredMsg = $(el)[type]("option","requiredMsg")||$.validate.options.requiredMsg;
				elementError.name = $(el)[type]("option","name");
				errors.push(elementError);
			})
			return errors;
		},
		reset: function () {
			var that = this;
			$( this.element ).find( ".ctrl-form-element" ).each(function(i){
				var type = $(this).attr( "component-role" );
				$(this)[ type ]( "reset" );
			});
			$.data( this.element, "modifiedData", {} );
		},
		_isExclud: function ( $component, excluded ) {
	    	 if ( !excluded ) {
	    		 return false;
	    	 }
	    	 
	    	 var length = excluded.length;
	         
	    	 for ( var i = 0; i < length; i++ ) {
	             if ( "string" === typeof excluded[i] && $component.is(excluded[i]) ){
	                 return true;
	             }
	         }
	    	 
	    	 return false;
	     },
		//clear
		clear: function (options) {
			var excluded = {};
			if (options && options.excluded && options.excluded instanceof Array) {
				for (var i in options.excluded) {
					var item = options.excluded[i];
					excluded[item] = item;
				}
			}

			$( this.element ).find( ".ctrl-form-element" ).each(function(i){
				var type = $(this).attr( "component-role" );
				if ( 
						($(this)[ type ]( "option", "readonly" ) && excluded["readonly"]) ||
						($(this)[ type ]( "option", "isLabel" ) && excluded["isLabel"]) ||
						($(this)[ type ]( "option", "disabled" ) && excluded["disabled"])
				 	) return ;
				
				switch (type) {
					case "radio":
					case "checkbox":
						$(this)[ type ]( "uncheck" );
						break;
					default:
						$(this)[ type ]("setValue", "");
						break;
				}
			});
			$.validate.clearErrors(this.element);
			$.data( this.element, "modifiedData", {} );
		},
		/**
		 * 根据url或者data重新加载form表单元素
		 */
		load: function ( url ) {
			var that = this,
				opts = {}, 
				data = [], 
				isUrl = false;
			if ( typeof( url ) !== "string" ) {
				// 传过来的是object，需要区别是data还是options
				// 如果是options，可能是options.data或者options.url ，否则才为data
				opts = url;
				if ( opts.data ) { //传进来的是options对象
					data = opts.data;
				} else if ( opts.url ) {// 传进来的是data对象
					url = opts.url;
					isUrl = true;
				} else {
					// url是object，且传进来的是data
					data = url;
				}
			} else {
				isUrl = true;
			}
			
			if ( isUrl ) {// url被重新设置过
				$.ajax({
					url: url,
					data: $.extend( true, {}, this.options.postData, opts.postData ),
					async: false,
					dataType: "json",
					success: function ( data ) {
						that._loadData( data );
						that._trigger( $.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [data] );
			/*			if (that.options.focusFirst) {
							that._focusFirst();
						}  */
					},
					error: function () {  
						that._trigger("onLoadError", null, []);
					}
				});
			} else {
				this._loadData( data );
				this._trigger( $.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [{content:data}] );
			/*if (that.options.focusFirst) {
				that._focusFirst();
			}  */
			}
		},
		/**
		 * 根据data对象重新加载form表单数据
		 */
		loadData: function ( data ) {
			this.load( data );
		},
		//提交表单
		/**
		 * TODO:submit 里面的postData是否要和loadData里面的postData区分开？
		 */
		submit: function ( opts ) {
			opts = opts || {};
			if ( false == this._trigger( $.isFunction( opts.onSubmit )?opts.onSubmit:"onSubmit", null, []) ) {
				return false;
			}
			if ( this.options.ajaxSubmit ) {
				$.ajax({
					type: 'post',
					url: $.extend( true, {}, this.options.url, opts.url ),
					data: $.extend( true, {}, this.options.postData, opts.postData, this.formData ),
					dataType: 'json',
					success: function(data) {
						this._trigger( $.isFunction( opts.onSuccess )?opts.onSuccess:"onSuccess", null, [{content:data}] );
					},
					error : function() {
					}
				});
			} else {
				if (  this.valid() ) {
					this.element.submit();
				} else {
					return false;
				}
			}
		},
		//校验方法
		valid: function () {
			if ( this.options.novalidate ) {
				return true;
			}
			return this.element.validate( "valid" );
		},
		// 统一去除校验组件的所有校验错误提示信息
		hideErrorTips: function () {
			$("div.coral-validate-state-error").remove();
		},
		/**
		 * focus form 的第一个可编辑form元素，优先focus 组件库表单元素
		 */
		_focusFirst: function() {
			/*
			if (this.options.focusFirst) {
				return;
			}
			var that = this,
				fields = this.findFields();
			
			for (var i in fields) {
				var instance = fields[i];
				
				if (fields[i] instanceof Array) {
					if ( true == $(instance[0].element)[instance[0].name]("focus") ) return;
				} else {
					if ( instance.focus && true == instance.focus() ) return;			
				}
			}
			
			// find normal form element
			var originalFields = this.element.find("[name]:not(:hidden,.ctrl-init,[readonly],[disabled])");
			if( originalFields.length ) {
				originalFields[0].focus();
			}*/
		},
		// 找到form下所有的组件元素
		findFields: function(){
			return $.coral.findComponent( ".ctrl-form-element", this.element );
		},
		setIsLabel: function(isSet){
			$.coral.setIslabel(isSet, this.element);
		},
		setReadOnly: function(isSet){
			$.coral.setReadOnly(isSet, this.element);
		},
		refresh: function(opts){	
			var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.component().parent();
			if ( heightStyle === "fill" ) {
				$.coral.fitParent(this.component(), true);
				maxHeight = parent.height();
				this.component().siblings( ":visible" ).each(function() {
					var elem = $( this ),
						position = elem.css( "position" );

					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxHeight -= elem.outerHeight( true );
				});
				this.element.height( Math.max( 0, maxHeight -
					this.element.innerHeight() + this.element.height() ) )
					//.css( "overflow", "auto" );
					.addClass( "coral-scroll" );
			} else if ( heightStyle === "auto" ) {
				this.element.height( "" );
			}
			$.coral.refreshAllComponent(this.element);
		}
	});
})(jQuery);

/*!
 * jQuery CORAL Tabs 4.0.1
 *
 *
 * Depends:
 *	jquery.coral.core.js
 *	jquery.coral.component.js
 */
(function( $, undefined ) {

$.component( "coral.tabs", {
	version: "4.0.1",
	delay: 300,
	options: {
		active: 0,
		collapsible: false,
		event: "click",
		loadonce: true,
		destroyAllonActive: false, // 默认激活某一个tab时，销毁其他tab的内容
		heightStyle: "content",
		hide: null,
		show: null,

		// 回调函数
		/*activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null,*/
		
		//附加
		//ajax请求方式
		method : 'GET',
		newbtn : false,
		name : null,
		
		onTabNew: null,
		onActivate : null,
		onLoad : null,
		beforeActivate: null,
		beforeLoad: null,
		beforeTabClose : null,
		onTabClose : null
	},

	_create: function() {
		var that = this,
			options = this.options;
			
		// 处理回调重命名
		//options.activate = options.onActivate;
		//options.load = options.onLoad;
		//options.beforeActivate = options.beforeActivate;
		//options.beforeLoad = options.beforeLoad;
		//处理属性
		if(options.method!=null && options.method!=""){
			options.method=(options.method+"").toUpperCase();
		}else{
			options.method="GET";
		}


		this.running = false;
		this.element
			.addClass( "coral-tabs ctrl-init ctrl-init-tabs coral-component coral-component-content coral-corner-all" )
			.toggleClass( "coral-tabs-collapsible", options.collapsible )

		this._processTabs();
		//lihaibo add begin
		if ( typeof options.newbtn == "boolean" && options.newbtn ) {
			this.addnewbtn();
		}
		//lihaibo add end
		options.active = this._initialActive();
		
		// 通过设置class来禁用tabs
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".coral-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				})
			) ).sort();
		}
		// 检查长度，避免初始化一个空列表发生错误
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
		if(this.element.hasClass("coral-tabs-bottom")){
			$( ".coral-tabs-bottom .coral-tabs-nav, .coral-tabs-bottom .coral-tabs-nav > *" ).removeClass( "coral-corner-all coral-corner-top" ).addClass( "coral-corner-bottom" );
		} else if(this.element.hasClass("coral-tabs-right")){
			this.element.addClass( "coral-tabs-right coral-helper-clearfix" ).removeClass( "coral-corner-top" ).addClass( "coral-corner-left" );
		}else if(this.element.hasClass("coral-tabs-left")){
			this.element.removeClass( "coral-corner-top" ).addClass( "coral-tabs-left coral-helper-clearfix coral-corner-left" );
		}
	},
	_isLocal: (function() {
		var rhash = /#.*$/;
		
		return function( anchor ) {
			var anchorUrl, locationUrl;

			// support: IE7
			// IE7 doesn't normalize the href property when set via script (#9317)
			anchor = anchor.cloneNode( false );
		
			
			// modify by mengshuai begin
			return anchor.hash.length > 1 &&
			anchor.href.indexOf("#")!=-1;
			// modify by mengshuai end
			
			
			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	})(),
	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {
			// 检查URL中fragment的表示
			if ( locationHash ) {
				this.tabs.each(function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				});
			}
			// 通过检查class确定tab被标记为激活的
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".coral-state-active" ) );
			}
			// 没有激活的tab，设置为false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}
		// 处理数字：负数，越界
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// 不允许折叠的: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
			case $.coral.keyCode.RIGHT:
			case $.coral.keyCode.DOWN:
				selectedIndex++;
				break;
			case $.coral.keyCode.UP:
			case $.coral.keyCode.LEFT:
				goingForward = false;
				selectedIndex--;
				break;
			case $.coral.keyCode.END:
				selectedIndex = this.anchors.length - 1;
				break;
			case $.coral.keyCode.HOME:
				selectedIndex = 0;
				break;
			case $.coral.keyCode.SPACE:
				// 只能活动的，不能颠倒
				event.preventDefault();
				clearTimeout( this.activating );
				this._activate( selectedIndex );
				return;
			case $.coral.keyCode.ENTER:
				// Toggle (cancel delayed activation, allow collapsing)
				event.preventDefault();
				clearTimeout( this.activating );
				// 判断是否为collapse或activate
				this._activate( selectedIndex === this.options.active ? false : selectedIndex );
				return;
			default:
				return;
		}

		// 聚焦弹出的tab, 基于按键按下
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// 预防control键自动活动
		if ( !event.ctrlKey ) {
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay(function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up移动交到到当前tab
		if ( event.ctrlKey && event.keyCode === $.coral.keyCode.UP ) {
			event.preventDefault();
			this.active.focus();
		}
	},

	// Alt+page up/down 移动焦点到 前一个/下一个 tab (活动的)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.coral.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.coral.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).focus();
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			// _activate() 处理无效值 并更新this.options			
			if (typeof value === "string") {				
				this._activate( this._getIndex ( value) );
			} else {
				this._activate( value );
			}	
			return ;
		}
		
		if ( key === "disabled" ) {
			// 不使用 组件工厂的disabled
			this._setupDisabled( value );
			return;
		}

		this._super( key, value);

		if ( key === "collapsible" ) {
			this.element.toggleClass( "coral-tabs-collapsible", value );
			// 设置collapsible: false 为翻转; 打开第一个panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_tabId: function( tab ) {
		return tab.attr( "aria-controls" ) || "coral-tabs-" + getNextTabId();
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// 通过html class属性取得tabs是否为禁用
		// 这个将会改变_refresh()中的一个布尔值
		options.disabled = $.map( lis.filter( ".coral-state-disabled" ), function( tab ) {
			return lis.index( tab );
		});

		this._processTabs();

		// 翻转的 或者没有tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();
		// 已激活完成的
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
			// 其余tabs将被禁用
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();
			// 激活先前一个tabs
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}
		// 将会发生激活
		} else {
			// 确定激活的tabsIndex为正确的
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		var $this=this;
		this._setupDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr({
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		});
		
		
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr({
				"aria-hidden": "true"
			});

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.addClass( "coral-tabs-active coral-state-active" )
				.attr({
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				});
			this._getPanelForTab( this.active )
				.show()
				.attr({
					"aria-hidden": "false"
				});
		}
	},
	//增加Tab
	add: function(option) {
		option=option||{};
		var disabled = this.options.disabled, // 禁用则忽略操作
		panelId = null,
		tabId = option.tabId,
		li = null,
		label = option.label, 
		ariaControls = option.ariaControls, 
		isUrl = false,
		href = option.href,
		closeable=option.closeable==undefined?false:option.closeable,
		closespan=closeable===true?"<span class='coral-closable cui-icon-cross2'></span>":"",
		content = option.content;
		if ( disabled === true ) {
			return;
		}
		//lihaibo add begin
		if ( typeof this.options.newbtn == "boolean" && this.options.newbtn ) {
			this.tablist.find( "> li:last").remove();
		}		
		//lihaibo add end
		//获得uuid
		if( ariaControls ){
			panelId = ariaControls;
		} else if ( typeof href === "undefined" ) {
			panelId = $( {} ).uniqueId()[ 0 ].id;
		} else {
			panelId = href;
			if (panelId.indexOf("#") == 0) {
				panelId = panelId.substr(1);
			}else{
				isUrl = true;
			}
		}
		tabId = tabId ? "id=" + tabId : "";
		var tabTemplate="<li " + tabId +"><a href='#{href}'>"+label+"</a>{closespan}</li>";	
		
		tabTemplate=tabTemplate.replace( /\{closespan\}/g,closespan);	
		
		if (!isUrl) {
			li = $( tabTemplate.replace( /#\{href\}/g, "#" + panelId ));
		} else {
			li = $( tabTemplate.replace( /#\{href\}/g, panelId ));
			this.component().find( ">.coral-tabs-nav" ).append( li );
			this.component().tabs( "refresh" );
			return ;
		}
		if(ariaControls){
			li.attr("aria-controls",ariaControls);
		}
		//添加操作
		this.component().find( ">.coral-tabs-nav" ).append( li );
		// modify by mengshuai begin
		// for tabs at bottom the content must before the nav
		if(this.element.hasClass("coral-tabs-bottom")){
			this.component().find( ">.coral-tabs-nav" ).before( "<div id='" + panelId + "'>"+content+"</div>" );
		}else{
			this.component().append( "<div id='" + panelId + "'>"+content+"</div>" );
		}
		// modify by mengshuai end
      	this.component().tabs( "refresh" );
      	//lihaibo add begin
      	if ( typeof this.options.newbtn == "boolean" && this.options.newbtn ) {
      		this.addnewbtn();
		}	
      	//lihaibo add end
	},
	//删除Tab
	remove : function(index){
		//禁用则忽略操作
		if ( this.options.disabled ) return;
				
		if (index instanceof Array) { // array of index or id
			for (var i in index) {
				this._remove(index[i]);
			}
			this._refresh();
		} else {
			this._remove(index);
		} 
	},
	_remove: function(index) {
		var removeIndex;
		
		if ( typeof index == "undefined" ) {
			removeIndex = this.options.active;
		} else if ( typeof index == "string" ) {
			removeIndex = this.getIndexById(index);
		} else {
			removeIndex = index;
		}
		
		var removeId=this._getList().find( "> li:has(a[href])" ).eq(removeIndex).attr("aria-controls");
		//删除操作
		this.component().find("li[aria-controls='"+removeId+"']").remove();
		this.component().find("div#"+removeId).remove();
	},
	//lihaibo add begin
	addnewbtn: function () {
		var that = this;
		var newbtn = $("<li class='coral-tabs-newbtn coral-corner-top'><a class='coral-tabs-anchor'><span class='cui-icon-plus-circle2'></span></a></li>");
		newbtn.unbind("click").bind("click", function ( event ) {
			if ( true === that.options.disabled ) {
				return ;
			}
			that._trigger("onTabNew", null, []);
		});
		this.tablist.append(newbtn);
		that._hoverable( newbtn );
	},
	//lihaibo add end
	_processTabs: function() {
		var that = this;
		
		this.tablist = this._getList()
		.addClass( "coral-tabs-nav coral-helper-reset coral-helper-clearfix coral-component-header coral-corner-all" )
		.attr( "role", "tablist" )

		// Prevent users from focusing disabled tabs via click
		.delegate( "> li", "mousedown" + this.eventNamespace, function( event ) {
			if ( $( this ).is( ".coral-state-disabled" ) ) {
				event.preventDefault();
			}
		})

		// support: IE <9
		// Preventing the default action in mousedown doesn't prevent IE
		// from focusing the element, so if the anchor gets focused, blur.
		// We don't have to worry about focusing the previously focused
		// element since clicking on a non-focusable element should focus
		// the body anyway.
		.delegate( ".coral-tabs-anchor", "focus" + this.eventNamespace, function() {
			if ( $( this ).closest( "li" ).is( ".coral-state-disabled" ) ) {
				this.blur();
			}
		});

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.addClass( "coral-state-default coral-corner-top" )
			.attr({
				role: "tab",
				tabIndex: -1
			});
		
		this.anchors = this.tabs.map(function() {
				return $( "a", this )[ 0 ];
			})
			.addClass( "coral-tabs-anchor" )
			.attr({
				role: "presentation",
				tabIndex: -1
			});

		this.panels = $();

		this.anchors.each(function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			tab.find(".coral-closable").addClass("cui-icon-cross2");
			// 内嵌 tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );
			// 远程 tab
			} else {
				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					// modify by mengshuai begin
					if(that.element.hasClass("coral-tabs-bottom")){
						panel.insertBefore( that.panels[ i - 1 ] || that.tablist );
					}else{
						panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
					}
					// modify by mengshuai end
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "coral-tabs-aria-controls", originalAriaControls );
			}
			tab.attr({
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			});
			panel.attr( "aria-labelledby", anchorId );
		});

		this.panels
			.addClass( "coral-tabs-panel coral-component-content coral-corner-bottom" )
			.attr( "role", "tabpanel" );
	},
	// allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( ">ol,>ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.addClass( "coral-tabs-panel coral-component-content coral-corner-bottom" )
			.data( "coral-tabs-destroy", true );
	},

	_setupDisabled: function( disabled ) {
		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// 禁用 tabs
		for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				$( li )
					.addClass( "coral-state-disabled" )
					.attr( "aria-disabled", "true" );
			} else {
				$( li )
					.removeClass( "coral-state-disabled" )
					.removeAttr( "aria-disabled" );
			}
		}

		this.options.disabled = disabled;
	},

	_setupEvents: function( event ) {
		var that = this;
		var events = {};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ).add(this.tabs.children("span.cui-icon-cross2")) );
		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		});
		this._on( this.anchors, events );
		this._on( this.tabs.children("span.coral-closable"), { click: "_tabClose" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},
	_tabClose: function(e){
		var that = this;
		if ( that.options.disabled === true ) {return;	}
		
		var closeTab = $(e.target),
			currentTab = closeTab.closest( "li" ),
			panelId = currentTab.attr( "aria-controls" ),
			currentPanel=that._getPanelForTab(currentTab),
			eventData={"currentTab":currentTab,"currentPanel":currentPanel,"panelId":panelId};
		// trigger beforeTabClose
		if(that._trigger("beforeTabClose",e,eventData) === false)return;
		
		currentTab.remove();
 		that.element.find( "#" + panelId ).remove();
  		
  		// trigger onTabClose
  		that._trigger("onTabClose",e,eventData);
  		
  		that.refresh();
	},
	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
		 	maxWidth,
		 	isVertival = false,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			$.coral.fitParent(this.component(), true);
			maxHeight = parent.height();
			maxWidth = parent.width();
			maxHeight -= this.element.outerHeight() - this.element.height();
			// added .not("script") by @haibo lee
			this.element.siblings( ":visible" ).not("script").each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight(  );
			});

			this.element.children().not( this.panels ).each(function() {
				// add by mengshuai begin
				// if tabs is vertical then do not minus the height of nav 
				if($(this).parent().hasClass("coral-tabs-right")||$(this).parent().hasClass("coral-tabs-left")){
					var position =  $( this ).css( "position" );
					isVertival = true;
					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxWidth -= $( this ).outerWidth( true );
					return;
				}
				// add by mengshuai end
				maxHeight -= $( this ).outerHeight( true );
			});
			
			this.panels.each(function() {
				// if panel has border then minus the border
				var border = $( this ).outerHeight() - $( this ).innerHeight();
				$( this ).height( Math.max( 0, maxHeight - border -
					$( this ).innerHeight() + $( this ).height() ) );
			})
			//.css( "overflow", "auto" );
			.addClass( "coral-scroll" );
			if(isVertival){
				var nav = this.element.children("ul");
				nav.height(Math.max( 0, maxHeight -
						nav.innerHeight() + nav.height() ));
			}
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each(function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
				$( this ).width("");
			}).height( maxHeight );
		}
		this.panels.each(function() {
			if ($(this).is(":visible")) {
				$.coral.refreshAllComponent($( this ));
			}
		});
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "coral-state-disabled" ) ||
				// tab已加载完毕
				tab.hasClass( "coral-tabs-loading" ) ||
				// 动画中不能切换
				this.running ||
				// 单击活动header，但不会翻转
				( clickedIsActive && !options.collapsible ) ||
				// 允许取消激活
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// 处理选中的tab的show/hide 
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "onActivate", event, eventData );
			$.coral.refreshAllComponent(toShow);
		}

		function show() {
			eventData.newTab.closest( "li" ).addClass( "coral-tabs-active coral-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}
		// 处理 隐藏，显示，完成
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				eventData.oldTab.closest( "li" ).removeClass( "coral-tabs-active coral-state-active" );
				show();
			});
		} else {
			eventData.oldTab.closest( "li" ).removeClass( "coral-tabs-active coral-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr({
			"aria-selected": "false",
			"aria-expanded": "false"
		});
		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr({
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		});
	},
	_activate: function( index ) {
		//如果没有该索引
		if ( index == -1 ) {
			return ;
		}
		var anchor, active = this._findActive( index );
		// 尝试激活已激活的panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}
		// 尝试翻转，模仿点击当前活动的header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".coral-tabs-anchor" )[ 0 ];
		this._eventHandler({
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		});
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},
	/**
	 * 
	 * @param index : href
	 * @returns index
	 */
	_getIndex: function( index ) {
		// 给用户选择提供一个href字符串，来代替数字索引
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
		}

		return index;
	},
	/**
	 * 根据 index 获取 id
	 */
	getIdByIndex: function ( index ) {
		var lis = this.tablist.children("li").filter( function() {
			return $(this).hasClass("coral-state-default");
		});
		return lis.eq( index ).attr( "aria-controls" );
	}, 
	/**
	 * 根据 id 获取 index 
	 */
	getIndexById: function ( id ) {
		var lis = this.tablist.children("li").filter( function() {
			return $(this).hasClass("coral-state-default");
		});
		return lis.index( lis.filter( "[aria-controls$='" + id + "']" ) );
	},
	getIndexByTabId: function ( id ) {
		 var lis = this.tablist.children("li").filter( function() {
			 return $(this).hasClass("coral-state-default");
		 });
		 return lis.index( lis.filter( "#" + id ) );
	},
	/**
	 * 获取 tabs 的所有 tab 的 id 列表
	 * @returns {Array}
	 */
	getAllTabId: function () {
		return this.getPanelIds();
	},
	getPanelIds: function(){
		var idList = [];

		this.tabs.filter( "[aria-controls]" ).each( function() {
			var id = $( this ).attr( "aria-controls" );
			
			if ( "" != id ) {
				idList.push( id );
			}
		});
		
		return idList;
	},
	getTabIds: function(){
		var idList = [];
		var lis = this.tablist.children("li").each( function() {
			var id = $( this ).attr( "id" );
			
			if ( "" != id ) {
				idList.push( id );
			}
		});
		return idList;
	},
	getTabEl: function(){
		var lis = this.tablist.children("li.coral-state-default");
		return lis;
	},
	getPanelEl: function(){
        // TODO
		return {};
	},
	getLength: function(){
	    return this.tabs.find( "[aria-controls]" ).length;
	},
	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.element.removeClass( "coral-tabs coral-component coral-component-content coral-corner-all coral-tabs-collapsible" );

		this.tablist
			.removeClass( "coral-tabs-nav coral-helper-reset coral-helper-clearfix coral-component-header coral-corner-all" )
			.removeAttr( "role" );

		this.anchors
			.removeClass( "coral-tabs-anchor" )
			.removeAttr( "role" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();

		this.tablist.unbind( this.eventNamespace );
		
		this.tabs.add( this.panels ).each(function() {
			if ( $.data( this, "coral-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this )
					.removeClass( "coral-state-default coral-state-active coral-state-disabled " +
						"coral-corner-top coral-corner-bottom coral-component-content coral-state-active coral-tabs-panel" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-live" )
					.removeAttr( "aria-busy" )
					.removeAttr( "aria-selected" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "role" );
			}
		});

		this.tabs.each(function() {
			var li = $( this ),
				prev = li.data( "coral-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "coral-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		});

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				});
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				});
			}
		}
		this._setupDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setupDisabled( disabled );
	},
	// 20150116 destroyAllonActive 属性为true时，点击tab时，移除其他tab内容 移除其他tab panel内的dom 元素
	_destroyOtherTabs: function( index ) {
		var id = this._getList().find( "> li:has(a[href])" ).eq(index).attr("aria-controls");
		
		this.component().children("div:not(#" + id + ")").children().remove();
	},
	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".coral-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			};		
		// 20150116 destroyAllonActive 属性为true时，点击tab时，移除其他tab内容
		if ( this.options.destroyAllonActive ) {
			that._destroyOtherTabs( index );
		}
		// 非远程 lihaibo changed begin
		if ( that._isLocal( anchor[ 0 ] ) || $.data( anchor[0], "cache") ) {
			return ;
		} else if ( this.options.loadonce ) {
			$.data( anchor[0], "cache", true);
		}
		//lihaibo changed end

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );
		// 支持: jQuery <1.8
		// jQuery <1.8 在beforeSend方法被取消后返回false
		// 但是1.8起，$.ajax()通常返回jqXHR 
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			tab.addClass( "coral-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.success(function( response ) {
					// 支持: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						panel.html( response );
						if( $.coral.openTag === true ){
							$.parser.parse(panel);
						}
						that._trigger( "onLoad", event, eventData );
					}, 1 );
				})
				.complete(function( jqXHR, status ) {
					// 支持: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						if ( status === "abort" ) {
							that.panels.stop( false, true );
						}

						tab.removeClass( "coral-tabs-loading" );
						panel.removeAttr( "aria-busy" );

						if ( jqXHR === that.xhr ) {
							delete that.xhr;
						}
					}, 1 );
				});
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {
			url: anchor.attr( "href" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
			},
			// 修改ajax请求方式
			type : that.options.method
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	},
	getPanelForTab: function( tab ) {
		return this._getPanelForTab( tab );
	}
});

})( jQuery );

/**
 * 组件库4.0：树
 * 
 * 依赖JS文件:
 * jquery.parser.js
 * 
 * 
 */

(function($, undefined ){
	
$.extend($.coral, { tree: { version: "4.0.2" } });
	
//树组件静态常量
var _final = {
	className: {
		BUTTON: "button",
		LEVEL: "level",
		ICO_LOADING: "ico_loading",
		SWITCH: "switch"
	},
	event: {
		NODECREATED: "tree_nodeCreated",
		CLICK: "tree_click",
		EXPAND: "tree_expand",
		COLLAPSE: "tree_collapse",
		ASYNC_SUCCESS: "tree_async_success",
		ASYNC_ERROR: "tree_async_error",
		REMOVE: "tree_remove",
		CHECK: "tree_check",
		DRAG: "tree_drag",
		DROP: "tree_drop",
		RENAME: "tree_rename",
		DRAGMOVE:"tree_dragmove"
	},
	id: {
		A: "_a",
		ICON: "_ico",
		SPAN: "_span",
		SWITCH: "_switch",
		UL: "_ul",
		CHECK: "_check",
		EDIT: "_edit",
		INPUT: "_input",
		REMOVE: "_remove"
	},
	line: {
		ROOT: "root",
		ROOTS: "roots",
		CENTER: "center",
		BOTTOM: "bottom",
		NOLINE: "noline",
		LINE: "line"
	},
	folder: {
		OPEN: "open",
		CLOSE: "close",
		DOCU: "docu"
	},
	node: {
		CURSELECTED: "curSelectedNode",
		CURSELECTED_EDIT: "curSelectedNode_Edit",
		TMPTARGET_TREE: "tmpTargetTree",
		TMPTARGET_NODE: "tmpTargetNode"
	},		
	checkbox: {
		STYLE: "checkbox",
		DEFAULT: "chk",
		DISABLED: "disable",
		FALSE: "false",
		TRUE: "true",
		FULL: "full",
		PART: "part",
		FOCUS: "focus"
	},
	radio: {
		STYLE: "radio",
		TYPE_ALL: "all",
		TYPE_LEVEL: "level"
	},
	move: {
		TYPE_INNER: "inner",
		TYPE_PREV: "prev",
		TYPE_NEXT: "next"
	}
},
//树组件属性
_option = {
	treeId: "",//Tree的唯一标识，初始化后，等于 用户定义的 Tree 容器的 id 属性值。
	treeObj: null,//Tree 容器的 jQuery 对象
	//view
	clickExpand: false,
	disabled: false,
	addDiyDom: null,//用于在节点上固定显示用户自定义控件
	autoCancelSelected: true,//点击节点时，按下 Ctrl 或 Cmd 键是否允许取消选择操作
	dblClickExpand: true,//双击节点时，是否自动展开父节点的标识
	expandSpeed: "fast",//节点展开、折叠时的动画速度，设置方法同 JQuery 动画效果中 speed 参数
	fontCss: {},//个性化文字样式，只针对 Tree 在节点上显示的<A>对象。
	nameIsHTML: false,//设置 name 属性是否支持 HTML 脚本
	selectedMulti: true,//设置是否允许同时选中多个节点
	showIcon: true,//设置 Tree 是否显示节点的图标
	showLine: true,//设置 Tree 是否显示节点之间的连线
	showTitle: true,//设置 Tree 是否显示节点的 title 提示信息(即节点 DOM 的 title 属性)
	txtSelectedEnable: false,//设置 Tree 是否允许可以选择 Tree DOM 内的文本
	rootInNode : false,//是否在data属性中提取根节点
	showRootNode : true,//是否显示根节点
	rootNode: false,//设置根节点 boolean或者json节点类型 如果是true则将树的nodes的根作为根节点，如果是json，则将传进来的node作为根节点
	//$.tree._key
	keyChildren: "children",//Tree 节点数据中保存子节点数据的属性名称
	keyName: "name",//Tree 节点数据保存节点名称的属性名称
	keyTitle: "",//Tree 节点数据保存节点提示信息的属性名称
	keyUrl: "url",//Tree 节点数据保存节点链接的目标 URL 的属性名称
	//$.tree._simpleData
	simpleDataEnable: false,//Nodes 数据是否采用简单数据模式
	simpleDataIdKey: "id",//节点数据中保存唯一标识的属性名称
	simpleDataPIdKey: "pId",//节点数据中保存其父节点唯一标识的属性名称
	simpleDataRootPId: null,//用于修正根节点父节点数据，即 pIdKey 指定的属性值
	//$.tree._keep
	keepParent: false,//Tree 的节点父节点属性锁，是否始终保持 isParent = true
	keepLeaf: false,//Tree 的节点叶子节点属性锁，是否始终保持 isParent = false
	//async
	asyncEnable: false,//设置 Tree 是否开启异步加载模式
	asyncContentType: "application/x-www-form-urlencoded",//Ajax 提交参数的数据类型
	asyncType: "post",//Ajax 的 http 请求模式
	asyncDataType: "text",//Ajax 获取的数据类型
	asyncUrl: "",//Ajax 获取数据的 URL 地址
	asyncAutoParam: [],//异步加载时需要自动提交父节点属性的参数
	asyncOtherParam: [],//Ajax 请求提交的静态参数键值对
	asyncDataFilter: null,//用于对 Ajax 返回数据进行预处理的函数
	
	//多选树属性
	checkable: false,//设置 Tree 的节点上是否显示 checkbox / radio
	autoCheckTrigger: false,//设置自动关联勾选时是否触发 beforeCheck / onCheck 事件回调函数
	chkStyle: _final.checkbox.STYLE,//勾选框类型(checkbox 或 radio）
	nocheckInherit: false,//当父节点设置 nocheck = true 时，设置子节点是否自动继承 nocheck = true 
	chkDisabledInherit: false,//当父节点设置 chkDisabled = true 时，设置子节点是否自动继承 chkDisabled = true 
	radioType: _final.radio.TYPE_LEVEL,//radio 的分组范围 level / all
	chkboxType: {//勾选 checkbox 对于父子节点的关联关系
		"Y": "ps",
		"N": "ps"
	},
	//$.tree._key
	keyChecked: "checked",//Tree 节点数据中保存 check 状态的属性名称
	//可编辑状态的属性
	editable: false,//设置 Tree 是否处于编辑状态
	editNameSelectAll: false,//节点编辑名称 input 初次显示时,设置 txt 内容是否为全选状态
	showRemoveBtn: true,//设置是否显示删除按钮
	showRenameBtn: true,//设置是否显示编辑名称按钮
	removeTitle: "remove",//删除按钮的 Title 辅助信息
	renameTitle: "rename",//编辑名称按钮的 Title 辅助信息
	//edit.drag
	dragStyle: "line", //"line" 拖动节点时的提示方式，是箭头提示还是线形提示
	dragAutoExpandTrigger: false,//拖拽时父节点自动展开是否触发 onExpand 事件回调函数
	dragIsCopy: true,//拖拽时, 设置是否允许复制节点
	dragIsMove: true,//拖拽时, 设置是否允许移动节点
	dragPrev: true,//拖拽到目标节点时，设置是否允许移动到目标节点前面的操作
	dragNext: true,//拖拽到目标节点时，设置是否允许移动到目标节点后面的操作
	dragInner: true,//拖拽到目标节点时，设置是否允许成为目标节点的子节点
	dragMinMoveSize: 5,//判定是否拖拽操作的最小位移值 (单位：px)
	dragBorderMax: 10,//拖拽节点成为根节点时的 Tree 内边界范围 (单位：px)
	dragBorderMin: -5,//拖拽节点成为根节点时的 Tree 外边界范围 (单位：px)
	dragMaxShowNodeNum: 5,//拖拽多个兄弟节点时，浮动图层中显示的最大节点数
	dragAutoOpenTime: 500,//拖拽时父节点自动展开的延时间隔
	//view
	addHoverDom: null,//用于当鼠标移动到节点上时，显示用户自定义控件
	removeHoverDom: null,//用于当鼠标移出节点时，隐藏用户自定义控件
	//回调函数
	beforeDrag:null,//用于捕获节点被拖拽之前的事件回调函数，并且根据返回值确定是否允许开启拖拽操作
	beforeDragOpen:null,//用于捕获拖拽节点移动到折叠状态的父节点后，即将自动展开该父节点之前的事件回调函数，并且根据返回值确定是否允许自动展开操作
	beforeDrop:null,//用于捕获节点拖拽操作结束之前的事件回调函数，并且根据返回值确定是否允许此拖拽操作
	beforeEditName:null,//用于捕获节点编辑按钮的 click 事件，并且根据返回值确定是否允许进入名称编辑状态
	beforeReName:null,//用于捕获节点编辑名称结束,更新节点名称数据之前的事件回调函数
	onDrag:null,//用于捕获节点被拖拽的事件回调函数
	onDragMove:null,//用于捕获节点被拖拽过程中移动的事件回调函数
	onDrop:null,//用于捕获节点拖拽操作结束的事件回调函数
	onReName:null,//用于捕获节点编辑名称结束之后的事件回调函数
	
	//callback
	beforeCheck:null,//用于捕获 勾选 或 取消勾选 之前的事件回调函数，并且根据返回值确定是否允许 勾选 或 取消勾选 
	onCheck:null,//用于捕获 checkbox / radio 被勾选 或 取消勾选的事件回调函数
	
	//callback
	beforeAsync:null,//用于捕获异步加载之前的事件回调函数，Tree 根据返回值确定是否允许进行异步加载
	beforeClick:null,//用于捕获单击节点之前的事件回调函数，并且根据返回值确定是否允许单击操作
	beforeDblClick:null,//用于捕获 Tree 上鼠标双击之前的事件回调函数，并且根据返回值确定触发 onDblClick 事件回调函数
	beforeRightClick:null,//用于捕获 Tree 上鼠标右键点击之前的事件回调函数，并且根据返回值确定触发 onRightClick 事件回调函数
	beforeMouseDown:null,//用于捕获 Tree 上鼠标按键按下之前的事件回调函数，并且根据返回值确定触发 onMouseDown 事件回调函数
	beforeMouseUp:null,//用于捕获 Tree 上鼠标按键松开之前的事件回调函数，并且根据返回值确定触发 onMouseUp 事件回调函数
	beforeExpand:null,//用于捕获父节点展开之前的事件回调函数，并且根据返回值确定是否允许展开操作
	beforeCollapse:null,//用于捕获父节点折叠之前的事件回调函数，并且根据返回值确定是否允许折叠操作
	beforeRemove:null,//用于捕获节点被删除之前的事件回调函数，并且根据返回值确定是否允许删除操作

	onLoadError:null,//用于捕获异步加载出现异常错误的事件回调函数
	onLoad:null,//用于捕获异步加载正常结束的事件回调函数
	onNodeCreated:null,//用于捕获节点生成 DOM 后的事件回调函数
	onClick:null,//用于捕获节点被点击的事件回调函数
	onDblClick:null,//用于捕获 Tree 上鼠标双击之后的事件回调函数
	onRightClick:null,//用于捕获 Tree 上鼠标右键点击之后的事件回调函数
	onMouseDown:null,//用于捕获 Tree 上鼠标按键按下后的事件回调函数
	onMouseUp:null,//用于捕获 Tree 上鼠标按键松开后的事件回调函数
	onExpand:null,//用于捕获节点被展开的事件回调函数
	onCollapse:null,//用于捕获节点被折叠的事件回调函数
	onRemove:null//用于捕获删除节点之后的事件回调函数
		
};

$.tree = {
	//树组件使用root来保存全部数据
	//普通树初始化root
	_coreInitRoot : function (setting) {
		var root = $.tree._getRoot(setting);
		if (!root) {
			root ={};
			$.tree._setRoot(setting, root);
		}
		root[setting.keyChildren] = [];
		root.expandTriggerFlag = false;
		root.curSelectedList = [];
		root.noSelection = true;
		root.createdNodes = [];
		root.zId = 0;
		root._ver = (new Date()).getTime();
	},
	//多选树初始化root
	_checkInitRoot : function (setting) {
		var root = $.tree._getRoot(setting);
		root.radioCheckedList = [];
	},
	//可编辑树初始化root
	_editInitRoot : function (setting) {
		var root = $.tree._getRoot(setting), roots = $.tree._getRoots();
		root.curEditNode = null;
		root.curEditInput = null;
		root.curHoverNode = null;
		root.dragFlag = 0;
		root.dragNodeShowBefore = [];
		root.dragMaskList = new Array();
		roots.showHoverDom = true;
	},
	//普通树初始化cache
	_coreInitCache : function(setting) {
		var cache = $.tree._getCache(setting);
		if (!cache) {
			cache = {};
			$.tree._setCache(setting, cache);
		}
		cache.nodes = [];
		cache.doms = [];
	},
	//多选树初始化cache
	_checkInitCache : function(treeId) {},
	//可编辑树初始化cache
	_editInitCache : function(treeId) {},
	//普通树绑定事件
	_coreBindEvent : function(setting) {
		var treeObj = setting.treeObj,
		cache = consts.event;
		treeObj.bind(cache.NODECREATED, function (event, treeId, node) {
			$.tree._apply(setting.onNodeCreated, [event, treeId, node]);
		});

		treeObj.bind(cache.CLICK, function (event, srcEvent, treeId, node, clickFlag) {
			$.tree._apply(setting.onClick, [srcEvent, treeId, node, clickFlag]);
		});

		treeObj.bind(cache.EXPAND, function (event, treeId, node) {
			$.tree._apply(setting.onExpand, [event, treeId, node]);
		});

		treeObj.bind(cache.COLLAPSE, function (event, treeId, node) {
			$.tree._apply(setting.onCollapse, [event, treeId, node]);
		});

		treeObj.bind(cache.ASYNC_SUCCESS, function (event, treeId, node, msg) {
			$.tree._apply(setting.onLoad, [event, treeId, node, msg]);
		});

		treeObj.bind(cache.ASYNC_ERROR, function (event, treeId, node, XMLHttpRequest, textStatus, errorThrown) {
			$.tree._apply(setting.onLoadError, [event, treeId, node, XMLHttpRequest, textStatus, errorThrown]);
		});

		treeObj.bind(cache.REMOVE, function (event, treeId, treeNode) {
			$.tree._apply(setting.onRemove, [event, treeId, treeNode]);
		});
	},
	//多选树绑定事件
	_checkBindEvent : function(setting) {
		var treeObj = setting.treeObj,
		cache = consts.event;
		treeObj.bind(cache.CHECK, function (event, srcEvent, treeId, node) {
			event.srcEvent = srcEvent;
			$.tree._apply(setting.onCheck, [event, treeId, node]);
		});
	},
	//可编辑树绑定事件
	_editBindEvent : function(setting) {
		var treeObj = setting.treeObj;
		var cache = consts.event;
		treeObj.bind(cache.RENAME, function (event, treeId, treeNode, isCancel) {
			$.tree._apply(setting.onReName, [event, treeId, treeNode, isCancel]);
		});

		treeObj.bind(cache.DRAG, function (event, srcEvent, treeId, treeNodes) {
			$.tree._apply(setting.onDrag, [srcEvent, treeId, treeNodes]);
		});

		treeObj.bind(cache.DRAGMOVE,function(event, srcEvent, treeId, treeNodes){
			$.tree._apply(setting.onDragMove,[srcEvent, treeId, treeNodes]);
		});

		treeObj.bind(cache.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {
			$.tree._apply(setting.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);
		});
	},
	//普通树松绑事件
	_coreUnbindEvent : function(setting) {
		var treeObj = setting.treeObj,
		cache = consts.event;
		treeObj.unbind(cache.NODECREATED)
		.unbind(cache.CLICK)
		.unbind(cache.EXPAND)
		.unbind(cache.COLLAPSE)
		.unbind(cache.ASYNC_SUCCESS)
		.unbind(cache.ASYNC_ERROR)
		.unbind(cache.REMOVE);
	},
	//多选树松绑事件
	_checkUnbindEvent : function(setting) {
		var treeObj = setting.treeObj;
		var cache = consts.event;
		treeObj.unbind(cache.CHECK);
	},
	//可编辑树松绑事件
	_editUnbindEvent : function(setting) {
		var treeObj = setting.treeObj;
		var cache = consts.event;
		treeObj.unbind(cache.RENAME);
		treeObj.unbind(cache.DRAG);
		treeObj.unbind(cache.DRAGMOVE);
		treeObj.unbind(cache.DROP);
	},
	//普通树代理事件
	_coreEventProxy : function(event) {
		var target = event.target,
		setting = $.tree._getSetting(event.data.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if ($.tree._eqs(event.type, "mousedown")) {
			treeEventType = "mousedown";
		} else if ($.tree._eqs(event.type, "mouseup")) {
			treeEventType = "mouseup";
		} else if ($.tree._eqs(event.type, "contextmenu")) {
			treeEventType = "contextmenu";
		} else if ($.tree._eqs(event.type, "click")) {
			if ($.tree._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.SWITCH) !== null) {
				tId = $.tree._getNodeMainDom(target).id;
				nodeEventType = "switchNode";
			} else {
				tmp = $.tree._getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
				if (tmp) {
					tId = $.tree._getNodeMainDom(tmp).id;
					nodeEventType = "clickNode";
				}
			}
		} else if ($.tree._eqs(event.type, "dblclick")) {
			treeEventType = "dblclick";
			tmp = $.tree._getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = $.tree._getNodeMainDom(tmp).id;
				nodeEventType = "switchNode";
			}
		}
		if (treeEventType.length > 0 && tId.length == 0) {
			tmp = $.tree._getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {tId = $.tree._getNodeMainDom(tmp).id;}
		}
		// event to node
		if (tId.length>0) {
			node = $.tree._getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "switchNode" :
					if (!node.isParent) {
						nodeEventType = "";
					} else if ($.tree._eqs(event.type, "click")
						|| ($.tree._eqs(event.type, "dblclick") && $.tree._apply(setting.dblClickExpand, [setting.treeId, node], setting.dblClickExpand))) {
						nodeEventCallback = $.tree._onSwitchNode;
					} else {
						nodeEventType = "";
					}
					break;
				case "clickNode" :
					nodeEventCallback = $.tree._onClickNode;
					break;
			}
		}
		// event to Tree
		switch (treeEventType) {
			case "mousedown" :
				treeEventCallback = $.tree._onTreeMousedown;
				break;
			case "mouseup" :
				treeEventCallback = $.tree._onTreeMouseup;
				break;
			case "dblclick" :
				treeEventCallback = $.tree._onTreeDblclick;
				break;
			case "contextmenu" :
				treeEventCallback = $.tree._onTreeContextmenu;
				break;
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//多选树代理事件
	_checkEventProxy : function(e) {
		var target = e.target,
		setting = $.tree._getSetting(e.data.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null;

		if ($.tree._eqs(e.type, "mouseover")) {
			if (setting.checkable && $.tree._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = $.tree._getNodeMainDom(target).id;
				nodeEventType = "mouseoverCheck";
			}
		} else if ($.tree._eqs(e.type, "mouseout")) {
			if (setting.checkable && $.tree._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = $.tree._getNodeMainDom(target).id;
				nodeEventType = "mouseoutCheck";
			}
		} else if ($.tree._eqs(e.type, "click")) {
			if (setting.checkable && $.tree._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = $.tree._getNodeMainDom(target).id;
				nodeEventType = "checkNode";
			}
		}
		if (tId.length>0) {
			node = $.tree._getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "checkNode" :
					nodeEventCallback = $.tree._onCheckNode;
					break;
				case "mouseoverCheck" :
					nodeEventCallback = $.tree._onMouseoverCheck;
					break;
				case "mouseoutCheck" :
					nodeEventCallback = $.tree._onMouseoutCheck;
					break;
			}
		}
		var proxyResult = {
			stop: nodeEventType === "checkNode",
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//可编辑树代理事件
	_editEventProxy : function(e) {
		var target = e.target,
		setting = $.tree._getSetting(e.data.treeId),
		relatedTarget = e.relatedTarget,
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if ($.tree._eqs(e.type, "mouseover")) {
			tmp = $.tree._getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = $.tree._getNodeMainDom(tmp).id;
				nodeEventType = "hoverOverNode";
			}
		} else if ($.tree._eqs(e.type, "mouseout")) {
			tmp = $.tree._getMDom(setting, relatedTarget, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (!tmp) {
				tId = "remove";
				nodeEventType = "hoverOutNode";
			}
		} else if ($.tree._eqs(e.type, "mousedown")) {
			tmp = $.tree._getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = $.tree._getNodeMainDom(tmp).id;
				nodeEventType = "mousedownNode";
			}
		}
		if (tId.length>0) {
			node = $.tree._getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "mousedownNode" :
					nodeEventCallback = $.tree._onMousedownNode;
					break;
				case "hoverOverNode" :
					nodeEventCallback = $.tree._onHoverOverNode;
					break;
				case "hoverOutNode" :
					nodeEventCallback = $.tree._onHoverOutNode;
					break;
			}
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//多选树节点前插入dom元素
	_beforeA : function(setting, node, html) {
		var checkedKey = setting.keyChecked;
		if (setting.checkable) {
			$.tree._makeChkFlag(setting, node);
			html.push("<span ID='", node.tId, consts.id.CHECK, "' class='", $.tree._makeChkClass(setting, node), "' treeNode", consts.id.CHECK, (node.nocheck === true?" style='display:none;'":""),"></span>");
		}
	},
	
	//普通树初始化节点
	_coreInitNode : function(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!node) return;
		var r = $.tree._getRoot(setting),
		childKey = setting.keyChildren;
		node.level = level;
		node.tId = setting.treeId + "_" + (++r.zId);
		node.parentTId = parentNode ? parentNode.tId : null;
		node.open = (typeof node.open == "string") ? $.tree._eqs(node.open, "true") : !!node.open;
		if (node[childKey] && node[childKey].length > 0) {
			node.isParent = true;
			node.zAsync = true;
		} else {
			node.isParent = (typeof node.isParent == "string") ? $.tree._eqs(node.isParent, "true") : !!node.isParent;
			node.open = (node.isParent && !setting.asyncEnable) ? node.open : false;
			node.zAsync = !node.isParent;
		}
		node.isFirstNode = isFirstNode;
		node.isLastNode = isLastNode;
		node.getParentNode = function() {return $.tree._getNodeCache(setting, node.parentTId);};
		node.getPreNode = function() {return $.tree._getPreNode(setting, node);};
		node.getNextNode = function() {return $.tree._getNextNode(setting, node);};
		node.isAjaxing = false;
		$.tree._fixPIdKeyValue(setting, node);
	},
	
	//多选树初始化节点
	_checkInitNode : function(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!node) return;
		var checkedKey = setting.keyChecked;
		if (typeof node[checkedKey] == "string") node[checkedKey] = $.tree._eqs(node[checkedKey], "true");
		node[checkedKey] = !!node[checkedKey];
		node.checkedOld = node[checkedKey];
		if (typeof node.nocheck == "string") node.nocheck = $.tree._eqs(node.nocheck, "true");
		node.nocheck = !!node.nocheck || (setting.nocheckInherit && parentNode && !!parentNode.nocheck);
		if (typeof node.chkDisabled == "string") node.chkDisabled = $.tree._eqs(node.chkDisabled, "true");
		node.chkDisabled = !!node.chkDisabled || (setting.chkDisabledInherit && parentNode && !!parentNode.chkDisabled);
		if (typeof node.halfCheck == "string") node.halfCheck = $.tree._eqs(node.halfCheck, "true");
		node.halfCheck = !!node.halfCheck;
		node.check_Child_State = -1;
		node.check_Focus = false;
		node.getCheckStatus = function() {return $.tree._getCheckStatus(setting, node);};

		if (setting.chkStyle == consts.radio.STYLE && setting.radioType == consts.radio.TYPE_ALL && node[checkedKey] ) {
			var r = $.tree._getRoot(setting);
			r.radioCheckedList.push(node);
		}
	},
	//可编辑树初始化节点
	_editInitNode : function(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!node) return;
		node.isHover = false;
		node.editNameFlag = false;
	},
	//更新 TreeObj, 增加部分多选树的工具方法
	_checkTreeTools : function(setting, treeTools) {
		treeTools.checkNode = function(node, checked, checkTypeFlag, callbackFlag) {
			var checkedKey = this.setting.keyChecked;
			if (node.chkDisabled === true) return;
			if (checked !== true && checked !== false) {
				checked = !node[checkedKey];
			}
			callbackFlag = !!callbackFlag;

			if (node[checkedKey] === checked && !checkTypeFlag) {
				return;
			} else if (callbackFlag && $.tree._apply(this.setting.beforeCheck, [this.setting.treeId, node], true) == false) {
				return;
			}
			if ($.tree._uCanDo(this.setting) && this.setting.checkable && node.nocheck !== true) {
				node[checkedKey] = checked;
				var checkObj = $$(node, consts.id.CHECK, this.setting);
				if (checkTypeFlag || this.setting.chkStyle === consts.radio.STYLE) $.tree._checkNodeRelation(this.setting, node);
				$.tree._setChkClass(this.setting, checkObj, node);
				$.tree._repairParentChkClassWithSelf(this.setting, node);
				if (callbackFlag) {
					this.setting.treeObj.trigger(consts.event.CHECK, [null, this.setting.treeId, node]);
				}
			}
		}

		treeTools.checkAllNodes = function(checked) {
			$.tree._repairAllChk(this.setting, !!checked);
		}

		treeTools.getCheckedNodes = function(checked) {
			var childKey = this.setting.keyChildren;
			checked = (checked !== false);
			return $.tree._getTreeCheckedNodes(this.setting, $.tree._getRoot(this.setting)[childKey], checked);
		}

		treeTools.getChangeCheckedNodes = function() {
			var childKey = this.setting.keyChildren;
			return $.tree._getTreeChangeCheckedNodes(this.setting, $.tree._getRoot(this.setting)[childKey]);
		}

		treeTools.setChkDisabled = function(node, disabled, inheritParent, inheritChildren) {
			disabled = !!disabled;
			inheritParent = !!inheritParent;
			inheritChildren = !!inheritChildren;
			$.tree._repairSonChkDisabled(this.setting, node, disabled, inheritChildren);
			$.tree._repairParentChkDisabled(this.setting, node.getParentNode(), disabled, inheritParent);
		}

		var _updateNode = treeTools.updateNode;
		treeTools.updateNode = function(node, checkTypeFlag) {
			if (_updateNode) _updateNode.apply(treeTools, arguments);
			if (!node || !this.setting.checkable) return;
			var nObj = $$(node, this.setting);
			if (nObj.get(0) && $.tree._uCanDo(this.setting)) {
				var checkObj = $$(node, consts.id.CHECK, this.setting);
				if (checkTypeFlag == true || this.setting.chkStyle === consts.radio.STYLE) $.tree._checkNodeRelation(this.setting, node);
				$.tree._setChkClass(this.setting, checkObj, node);
				$.tree._repairParentChkClassWithSelf(this.setting, node);
			}
		}
	},
	//更新 TreeObj, 增加部分可编辑树的工具方法
	_editTreeTools : function(setting, treeTools) {
		treeTools.cancelEditName = function(newName) {
			var root = $.tree._getRoot(this.setting);
			if (!root.curEditNode) return;
			$.tree._cancelCurEditNode(this.setting, newName?newName:null, true);
		}
		treeTools.copyNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return null;
			if (targetNode && !targetNode.isParent && this.setting.keepLeaf && moveType === consts.move.TYPE_INNER) return null;
			var _this = this,
				newNode = $.tree._clone(node);
			if (!targetNode) {
				targetNode = null;
				moveType = consts.move.TYPE_INNER;
			}
			if (moveType == consts.move.TYPE_INNER) {
				function copyCallback() {
					$.tree._addNodes(_this.setting, targetNode, [newNode], isSilent);
				}

				if ($.tree._canAsync(this.setting, targetNode)) {
					$.tree._asyncNode(this.setting, targetNode, isSilent, copyCallback);
				} else {
					copyCallback();
				}
			} else {
				$.tree._addNodes(this.setting, targetNode.parentNode, [newNode], isSilent);
				$.tree._moveNode(this.setting, targetNode, newNode, moveType, false, isSilent);
			}
			return newNode;
		}
		treeTools.editName = function(node) {
			if (!node || !node.tId || node !== $.tree._getNodeCache(this.setting, node.tId)) return;
			if (node.parentTId) $.tree._expandCollapseParentNode(this.setting, node.getParentNode(), true);
			$.tree._editNode(this.setting, node)
		}
		treeTools.moveNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return node;
			if (targetNode && !targetNode.isParent && this.setting.keepLeaf && moveType === consts.move.TYPE_INNER) {
				return null;
			} else if (targetNode && ((node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER) || $$(node, this.setting).find("#" + targetNode.tId).length > 0)) {
				return null;
			} else if (!targetNode) {
				targetNode = null;
			}
			var _this = this;
			function moveCallback() {
				$.tree._moveNode(_this.setting, targetNode, node, moveType, false, isSilent);
			}
			if ($.tree._canAsync(this.setting, targetNode) && moveType === consts.move.TYPE_INNER) {
				$.tree._asyncNode(this.setting, targetNode, isSilent, moveCallback);
			} else {
				moveCallback();
			}
			return node;
		}
		treeTools.setEditable = function(editable) {
			this.setting.editable = editable;
			return this.refresh();
		}
	},
	
	//method of operate data
	_addNodeCache: function(setting, node) {
		$.tree._getCache(setting).nodes[$.tree._getNodeCacheId(node.tId)] = node;
	},
	_getNodeCacheId: function(tId) {
		return tId.substring(tId.lastIndexOf("_")+1);
	},
	_addNodesData: function(setting, parentNode, nodes) {
		var childKey = setting.keyChildren;
		if (!parentNode[childKey]) parentNode[childKey] = [];
		if (parentNode[childKey].length > 0) {
			parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;
			$.tree._setNodeLineIcos(setting, parentNode[childKey][parentNode[childKey].length - 1]);
		}
		parentNode.isParent = true;
		// rootNode根节点设置了为true，并且不显示根节点的时候需要处理node
		// TODO: rootNode 为数组的时候reload是否会报错
		/*if( setting.isInit && !setting.showRootNode && setting.rootNode ){
			var children = (nodes.length&&nodes[0][childKey])?nodes[0][childKey]:[];
			if ( children.length > 0 )
				parentNode[childKey] = parentNode[childKey].concat(children);
		} else {
			parentNode[childKey] = parentNode[childKey].concat(nodes);
		}*/
		parentNode[childKey] = parentNode[childKey].concat(nodes);
	},
	_addSelectedNode: function(setting, node) {
		var root = $.tree._getRoot(setting);
		if (!$.tree._isSelectedNode(setting, node)) {
			root.curSelectedList.push(node);
		}
	},
	_addCreatedNode: function(setting, node) {
		if (!!setting.onNodeCreated || !!setting.addDiyDom) {
			var root = $.tree._getRoot(setting);
			root.createdNodes.push(node);
		}
	},

	_fixPIdKeyValue: function(setting, node) {
		if (setting.simpleDataEnable) {
			node[setting.simpleDataPIdKey] = node.parentTId ? node.getParentNode()[setting.simpleDataIdKey] : setting.simpleDataRootPId;
		}
	},
	_getAfterA: function(setting, node, array) {
		for (var i=0, j=_init.afterA.length; i<j; i++) {
			_init.afterA[i].apply(this, arguments);
		}
	},
	_getBeforeA: function(setting, node, array) {
		for (var i=0, j=_init.beforeA.length; i<j; i++) {
			_init.beforeA[i].apply(this, arguments);
		}
	},
	_getInnerAfterA: function(setting, node, array) {
		for (var i=0, j=_init.innerAfterA.length; i<j; i++) {
			_init.innerAfterA[i].apply(this, arguments);
		}
	},
	_getInnerBeforeA: function(setting, node, array) {
		for (var i=0, j=_init.innerBeforeA.length; i<j; i++) {
			_init.innerBeforeA[i].apply(this, arguments);
		}
	},
	_getCache: function(setting) {
		return caches[setting.treeId];
	},
	_getNextNode: function(setting, node) {
		if (!node) return null;
		var childKey = setting.keyChildren,
		p = node.parentTId ? node.getParentNode() : $.tree._getRoot(setting);
		for (var i=0, l=p[childKey].length-1; i<=l; i++) {
			if (p[childKey][i] === node) {
				return (i==l ? null : p[childKey][i+1]);
			}
		}
		return null;
	},
	_getNodeByParam: function(setting, nodes, key, value) {
		if (!nodes || !key) return null;
		var childKey = setting.keyChildren;
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i][key] == value) {
				return nodes[i];
			}
			var tmp = $.tree._getNodeByParam(setting, nodes[i][childKey], key, value);
			if (tmp) return tmp;
		}
		return null;
	},
	_getNodeCache: function(setting, tId) {
		if (!tId) return null;
		var n = caches[setting.treeId].nodes[$.tree._getNodeCacheId(tId)];
		return n ? n : null;
	},
	_getNodeName: function(setting, node) {
		var nameKey = setting.keyName;
		return "" + node[nameKey];
	},
	_getNodeTitle: function(setting, node) {
		var t = setting.keyTitle === "" ? setting.keyName : setting.keyTitle;
		return "" + node[t];
	},
	_getNodes: function(setting) {
		return $.tree._getRoot(setting)[setting.keyChildren];
	},
	_getNodesByParam: function(setting, nodes, key, value) {
		if (!nodes || !key) return [];
		var childKey = setting.keyChildren,
		result = [];
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i][key] == value) {
				result.push(nodes[i]);
			}
			result = result.concat($.tree._getNodesByParam(setting, nodes[i][childKey], key, value));
		}
		return result;
	},
	_getNodesByParamFuzzy: function(setting, nodes, key, value) {
		if (!nodes || !key) return [];
		var childKey = setting.keyChildren,
		result = [];
		value = value.toLowerCase();
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (typeof nodes[i][key] == "string" && nodes[i][key].toLowerCase().indexOf(value)>-1) {
				result.push(nodes[i]);
			}
			result = result.concat($.tree._getNodesByParamFuzzy(setting, nodes[i][childKey], key, value));
		}
		return result;
	},
	_getNodesByFilter: function(setting, nodes, filter, isSingle, invokeParam) {
		if (!nodes) return (isSingle ? null : []);
		var childKey = setting.keyChildren,
		result = isSingle ? null : [];
		for (var i = 0, l = nodes.length; i < l; i++) {
			if ($.tree._apply(filter, [nodes[i], invokeParam], false)) {
				if (isSingle) {return nodes[i];}
				result.push(nodes[i]);
			}
			var tmpResult = $.tree._getNodesByFilter(setting, nodes[i][childKey], filter, isSingle, invokeParam);
			if (isSingle && !!tmpResult) {return tmpResult;}
			result = isSingle ? tmpResult : result.concat(tmpResult);
		}
		return result;
	},
	_getPreNode: function(setting, node) {
		if (!node) return null;
		var childKey = setting.keyChildren,
		p = node.parentTId ? node.getParentNode() : $.tree._getRoot(setting);
		for (var i=0, l=p[childKey].length; i<l; i++) {
			if (p[childKey][i] === node) {
				return (i==0 ? null : p[childKey][i-1]);
			}
		}
		return null;
	},
	_getRadioCheckedList: function(setting) {
		var checkedList = $.tree._getRoot(setting).radioCheckedList;
		for (var i=0, j=checkedList.length; i<j; i++) {
			if(!$.tree._getNodeCache(setting, checkedList[i].tId)) {
				checkedList.splice(i, 1);
				i--; j--;
			}
		}
		return checkedList;
	},
	_getCheckStatus: function(setting, node) {
		if (!setting.checkable || node.nocheck || node.chkDisabled) return null;
		var checkedKey = setting.keyChecked,
		r = {
			checked: node[checkedKey],
			half: node.halfCheck ? node.halfCheck : (setting.chkStyle == consts.radio.STYLE ? (node.check_Child_State === 2) : (node[checkedKey] ? (node.check_Child_State > -1 && node.check_Child_State < 2) : (node.check_Child_State > 0)))
		};
		return r;
	},
	_getTreeCheckedNodes: function(setting, nodes, checked, results) {
		if (!nodes) return [];
		var childKey = setting.keyChildren,
		checkedKey = setting.keyChecked,
		onlyOne = (checked && setting.chkStyle == consts.radio.STYLE && setting.radioType == consts.radio.TYPE_ALL);
		results = !results ? [] : results;
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] == checked) {
				results.push(nodes[i]);
				if(onlyOne) {
					break;
				}
			}
			$.tree._getTreeCheckedNodes(setting, nodes[i][childKey], checked, results);
			if(onlyOne && results.length > 0) {
				break;
			}
		}
		return results;
	},
	_getTreeChangeCheckedNodes: function(setting, nodes, results) {
		if (!nodes) return [];
		var childKey = setting.keyChildren,
		checkedKey = setting.keyChecked;
		results = !results ? [] : results;
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] != nodes[i].checkedOld) {
				results.push(nodes[i]);
			}
			$.tree._getTreeChangeCheckedNodes(setting, nodes[i][childKey], results);
		}
		return results;
	},
	_getRoot: function(setting) {
		return setting ? roots[setting.treeId] : null;
	},
	_getRoots: function() {
		return roots;
	},
	_getSetting: function(treeId) {
		return settings[treeId];
	},
	_getSettings: function() {
		return settings;
	},
	_getTreeTools: function(treeId) {
		var r = this._getRoot(this._getSetting(treeId));
		return r ? r.treeTools : null;
	},
	_initCache: function(setting) {
		for (var i=0, j=_init.caches.length; i<j; i++) {
			_init.caches[i].apply(this, arguments);
		}
	},
	_initNode: function(setting, level, node, parentNode, preNode, nextNode) {
		for (var i=0, j=_init.nodes.length; i<j; i++) {
			_init.nodes[i].apply(this, arguments);
		}
	},
	_initRoot: function(setting) {
		for (var i=0, j=_init.roots.length; i<j; i++) {
			_init.roots[i].apply(this, arguments);
		}
	},
	_isSelectedNode: function(setting, node) {
		var root = $.tree._getRoot(setting);
		for (var i=0, j=root.curSelectedList.length; i<j; i++) {
			if(node === root.curSelectedList[i]) return true;
		}
		return false;
	},
	_removeNodeCache: function(setting, node) {
		var childKey = setting.keyChildren;
		if (node[childKey]) {
			for (var i=0, l=node[childKey].length; i<l; i++) {
				arguments.callee(setting, node[childKey][i]);
			}
		}
		$.tree._getCache(setting).nodes[$.tree._getNodeCacheId(node.tId)] = null;
	},
	_removeSelectedNode: function(setting, node) {
		var root = $.tree._getRoot(setting);
		for (var i=0, j=root.curSelectedList.length; i<j; i++) {
			if(node === root.curSelectedList[i] || !$.tree._getNodeCache(setting, root.curSelectedList[i].tId)) {
				root.curSelectedList.splice(i, 1);
				i--;j--;
			}
		}
	},
	_setCache: function(setting, cache) {
		caches[setting.treeId] = cache;
	},
	_setRoot: function(setting, root) {
		roots[setting.treeId] = root;
	},
	_setTreeTools: function(setting, treeTools) {
		for (var i=0, j=_init.treeTools.length; i<j; i++) {
			_init.treeTools[i].apply(this, arguments);
		}
	},
	_makeChkFlag: function(setting, node) {
		if (!node) return;
		var childKey = setting.keyChildren,
		checkedKey = setting.keyChecked,
		chkFlag = -1;
		if (node[childKey]) {
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				var cNode = node[childKey][i];
				var tmp = -1;
				if (setting.chkStyle == consts.radio.STYLE) {
					if (cNode.nocheck === true || cNode.chkDisabled === true) {
						tmp = cNode.check_Child_State;
					} else if (cNode.halfCheck === true) {
						tmp = 2;
					} else if (cNode[checkedKey]) {
						tmp = 2;
					} else {
						tmp = cNode.check_Child_State > 0 ? 2:0;
					}
					if (tmp == 2) {
						chkFlag = 2; break;
					} else if (tmp == 0){
						chkFlag = 0;
					}
				} else if (setting.chkStyle == consts.checkbox.STYLE) {
					if (cNode.nocheck === true || cNode.chkDisabled === true) {
						tmp = cNode.check_Child_State;
					} else if (cNode.halfCheck === true) {
						tmp = 1;
					} else if (cNode[checkedKey] ) {
						tmp = (cNode.check_Child_State === -1 || cNode.check_Child_State === 2) ? 2 : 1;
					} else {
						tmp = (cNode.check_Child_State > 0) ? 1 : 0;
					}
					if (tmp === 1) {
						chkFlag = 1; break;
					} else if (tmp === 2 && chkFlag > -1 && i > 0 && tmp !== chkFlag) {
						chkFlag = 1; break;
					} else if (chkFlag === 2 && tmp > -1 && tmp < 2) {
						chkFlag = 1; break;
					} else if (tmp > -1) {
						chkFlag = tmp;
					}
				}
			}
		}
		node.check_Child_State = chkFlag;
	},
	_setSonNodeLevel: function(setting, parentNode, node) {
		if (!node) return;
		var childKey = setting.keyChildren;
		node.level = (parentNode)? parentNode.level + 1 : 0;
		if (!node[childKey]) return;
		for (var i = 0, l = node[childKey].length; i < l; i++) {
			if (node[childKey][i]) $.tree._setSonNodeLevel(setting, node, node[childKey][i]);
		}
	},
	_transformToArrayFormat: function (setting, nodes) {
		if (!nodes) return [];
		var childKey = setting.keyChildren,
		r = [];
		if ($.tree._isArray(nodes)) {
			for (var i=0, l=nodes.length; i<l; i++) {
				r.push(nodes[i]);
				if (nodes[i][childKey])
					r = r.concat($.tree._transformToArrayFormat(setting, nodes[i][childKey]));
			}
		} else {
			r.push(nodes);
			if (nodes[childKey])
				r = r.concat($.tree._transformToArrayFormat(setting, nodes[childKey]));
		}
		return r;
	},
	_transformToTreeFormat: function(setting, sNodes) {
		var i,l,
		key = setting.simpleDataIdKey,
		parentKey = setting.simpleDataPIdKey,
		childKey = setting.keyChildren;
		if (!key || key=="" || !sNodes) return [];

		if ($.tree._isArray(sNodes)) {
			var r = [];
			var tmpMap = [];
			for (i=0, l=sNodes.length; i<l; i++) {
				tmpMap[sNodes[i][key]] = sNodes[i];
			}
			for (i=0, l=sNodes.length; i<l; i++) {
				if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
					if (!tmpMap[sNodes[i][parentKey]][childKey])
						tmpMap[sNodes[i][parentKey]][childKey] = [];
					tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
				} else {
					r.push(sNodes[i]);
				}
			}
			return r;
		}else {
			return [sNodes];
		}
	},


	//以下是事件代理方法
	_bindEvent: function(setting) {
		for (var i=0, j=_init.bind.length; i<j; i++) {
			_init.bind[i].apply(this, arguments);
		}
	},
	_unbindEvent: function(setting) {
		for (var i=0, j=_init.unbind.length; i<j; i++) {
			_init.unbind[i].apply(this, arguments);
		}
	},
	_bindTree: function(setting) {
		var eventParam = {
			treeId: setting.treeId
		},
		treeObj = setting.treeObj;
		if (!setting.txtSelectedEnable) {
			// for can't select text
			treeObj.bind('selectstart', function(e){
				var node
				var n = e.originalEvent.srcElement.nodeName.toLowerCase();
				return (n === "input" || n === "textarea" );
			}).css({
				"-moz-user-select":"-moz-none"
			});
		}
		treeObj.bind('click', eventParam, $.tree._proxy);
		treeObj.bind('dblclick', eventParam, $.tree._proxy);
		treeObj.bind('mouseover', eventParam, $.tree._proxy);
		treeObj.bind('mouseout', eventParam, $.tree._proxy);
		treeObj.bind('mousedown', eventParam, $.tree._proxy);
		treeObj.bind('mouseup', eventParam, $.tree._proxy);
		treeObj.bind('contextmenu', eventParam, $.tree._proxy);
	},
	_unbindTree: function(setting) {
		var treeObj = setting.treeObj;
		treeObj.unbind('click', $.tree._proxy);
		treeObj.unbind('dblclick', $.tree._proxy);
		treeObj.unbind('mouseover', $.tree._proxy);
		treeObj.unbind('mouseout', $.tree._proxy);
		treeObj.unbind('mousedown', $.tree._proxy);
		treeObj.unbind('mouseup', $.tree._proxy);
		treeObj.unbind('contextmenu', $.tree._proxy);
	},
	_doProxy: function(e) {
		var results = [];
		for (var i=0, j=_init.proxys.length; i<j; i++) {
			var proxyResult = _init.proxys[i].apply(this, arguments);
			results.push(proxyResult);
			if (proxyResult.stop) {
				break;
			}
		}
		return results;
	},
	_proxy: function(e) {
		var setting = $.tree._getSetting(e.data.treeId);
		if (!$.tree._uCanDo(setting, e)) return true;
		var results = $.tree._doProxy(e),
		r = true, x = false;
		for (var i=0, l=results.length; i<l; i++) {
			var proxyResult = results[i];
			if (proxyResult.nodeEventCallback) {
				x = true;
				r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
			}
			if (proxyResult.treeEventCallback) {
				x = true;
				r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
			}
		}
		return r;
	},
	//method of event handler
	_onSwitchNode: function (event, node) {
		var setting = $.tree._getSetting(event.data.treeId);
		if (node.open) {
			if ($.tree._apply(setting.beforeCollapse, [setting.treeId, node], true) == false) return true;
			$.tree._getRoot(setting).expandTriggerFlag = true;
			$.tree._switchNode(setting, node);
		} else {
			if ($.tree._apply(setting.beforeExpand, [setting.treeId, node], true) == false) return true;
			$.tree._getRoot(setting).expandTriggerFlag = true;
			$.tree._switchNode(setting, node);
		}
		return true;
	},
	_onClickNode: function (event, node) {
		var setting = $.tree._getSetting(event.data.treeId),
		clickFlag = ( (setting.autoCancelSelected && (event.ctrlKey || event.metaKey)) && $.tree._isSelectedNode(setting, node)) ? 0 : (setting.autoCancelSelected && (event.ctrlKey || event.metaKey) && setting.selectedMulti) ? 2 : 1;
		if ($.tree._apply(setting.beforeClick, [setting.treeId, node, clickFlag], true) == false) return true;
		if (clickFlag === 0) {
			$.tree._cancelPreSelectedNode(setting, node);
		} else {
			$.tree._selectNode(setting, node, clickFlag === 2);
		}
		setting.treeObj.trigger(consts.event.CLICK, [event, setting.treeId, node, clickFlag]);
		if ( setting.clickExpand ){
			$(setting.treeObj).tree("expandNode", node, null, null, null, true);
		}
		return true;
	},
	_onTreeMousedown: function(event, node) {
		var setting = $.tree._getSetting(event.data.treeId);
		if ($.tree._apply(setting.beforeMouseDown, [setting.treeId, node], true)) {
			$.tree._apply(setting.onMouseDown, [event, setting.treeId, node]);
		}
		return true;
	},
	_onTreeMouseup: function(event, node) {
		var setting = $.tree._getSetting(event.data.treeId);
		if ($.tree._apply(setting.beforeMouseUp, [setting.treeId, node], true)) {
			$.tree._apply(setting.onMouseUp, [event, setting.treeId, node]);
		}
		return true;
	},
	_onTreeDblclick: function(event, node) {
		var setting = $.tree._getSetting(event.data.treeId);
		if ($.tree._apply(setting.beforeDblClick, [setting.treeId, node], true)) {
			$.tree._apply(setting.onDblClick, [event, setting.treeId, node]);
		}
		return true;
	},
	_onTreeContextmenu: function(event, node) {
		var setting = $.tree._getSetting(event.data.treeId);
		if ($.tree._apply(setting.beforeRightClick, [setting.treeId, node], true)) {
			$.tree._apply(setting.onRightClick, [event, setting.treeId, node]);
		}
		return (typeof setting.onRightClick) != "function";
	},
	_onCheckNode: function (event, node) {
		if (node.chkDisabled === true) return false;
		var setting = $.tree._getSetting(event.data.treeId),
		checkedKey = setting.keyChecked;
		if ($.tree._apply(setting.beforeCheck, [setting.treeId, node], true) == false) return true;
		node[checkedKey] = !node[checkedKey];
		$.tree._checkNodeRelation(setting, node);
		var checkObj = $$(node, consts.id.CHECK, setting);
		$.tree._setChkClass(setting, checkObj, node);
		$.tree._repairParentChkClassWithSelf(setting, node);
		setting.treeObj.trigger(consts.event.CHECK, [event, setting.treeId, node]);
		return true;
	},
	_onMouseoverCheck: function(event, node) {
		if (node.chkDisabled === true) return false;
		var setting = $.tree._getSetting(event.data.treeId),
		checkObj = $$(node, consts.id.CHECK, setting);
		node.check_Focus = true;
		$.tree._setChkClass(setting, checkObj, node);
		return true;
	},
	_onMouseoutCheck: function(event, node) {
		if (node.chkDisabled === true) return false;
		var setting = $.tree._getSetting(event.data.treeId),
		checkObj = $$(node, consts.id.CHECK, setting);
		node.check_Focus = false;
		$.tree._setChkClass(setting, checkObj, node);
		return true;
	},
	_onHoverOverNode: function(event, node) {
		var setting = $.tree._getSetting(event.data.treeId),
		root = $.tree._getRoot(setting);
		if (root.curHoverNode != node) {
			$.tree._onHoverOutNode(event);
		}
		root.curHoverNode = node;
		$.tree._addHoverDom(setting, node);
	},
	_onHoverOutNode: function(event, node) {
		var setting = $.tree._getSetting(event.data.treeId),
		root = $.tree._getRoot(setting);
		if (root.curHoverNode && !$.tree._isSelectedNode(setting, root.curHoverNode)) {
			$.tree._removeTreeDom(setting, root.curHoverNode);
			root.curHoverNode = null;
		}
	},
	_onMousedownNode: function(eventMouseDown, _node) {
		var i,l,
		setting = $.tree._getSetting(eventMouseDown.data.treeId),
		root = $.tree._getRoot(setting), roots = $.tree._getRoots();
		//右击鼠标不能拖、拽
		if (eventMouseDown.button == 2 || !setting.editable || (!setting.dragIsCopy && !setting.dragIsMove)) return true;

		//节点名称处于可编辑状态下不能拖、拽
		var target = eventMouseDown.target,
		_nodes = $.tree._getRoot(setting).curSelectedList,
		nodes = [];
		if (!$.tree._isSelectedNode(setting, _node)) {
			nodes = [_node];
		} else {
			for (i=0, l=_nodes.length; i<l; i++) {
				if (_nodes[i].editNameFlag && $.tree._eqs(target.tagName, "input") && target.getAttribute("treeNode"+consts.id.INPUT) !== null) {
					return true;
				}
				nodes.push(_nodes[i]);
				if (nodes[0].parentTId !== _nodes[i].parentTId) {
					nodes = [_node];
					break;
				}
			}
		}

		$.tree._editNodeBlur = true;
		$.tree._cancelCurEditNode(setting);

		var doc = $(setting.treeObj.get(0).ownerDocument),
		body = $(setting.treeObj.get(0).ownerDocument.body), curNode, tmpArrow, tmpTarget,
		isOtherTree = false,
		targetSetting = setting,
		sourceSetting = setting,
		preNode, nextNode,
		preTmpTargetNodeId = null,
		preTmpMoveType = null,
		tmpTargetNodeId = null,
		moveType = consts.move.TYPE_INNER,
		mouseDownX = eventMouseDown.clientX,
		mouseDownY = eventMouseDown.clientY,
		startTime = (new Date()).getTime();

		if ($.tree._uCanDo(setting)) {
			doc.bind("mousemove", _docMouseMove);
		}
		function _docMouseMove(event) {
			//避免拖拽节点后，再次点击节点
			if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.dragMinMoveSize
				&& Math.abs(mouseDownY - event.clientY) < setting.dragMinMoveSize) {
				return true;
			}
			var i, l, tmpNode, tmpDom, tmpNodes,
			childKey = setting.keyChildren;
			body.css("cursor", "pointer");

			if (root.dragFlag == 0) {
				if ($.tree._apply(setting.beforeDrag, [setting.treeId, nodes], true) == false) {
					_docMouseUp(event);
					return true;
				}

				for (i=0, l=nodes.length; i<l; i++) {
					if (i==0) {
						root.dragNodeShowBefore = [];
					}
					tmpNode = nodes[i];
					if (tmpNode.isParent && tmpNode.open) {
						$.tree._expandCollapseNode(setting, tmpNode, !tmpNode.open);
						root.dragNodeShowBefore[tmpNode.tId] = true;
					} else {
						root.dragNodeShowBefore[tmpNode.tId] = false;
					}
				}

				root.dragFlag = 1;
				roots.showHoverDom = false;
				$.tree._showIfameMask(setting, true);

				//sort
				var isOrder = true, lastIndex = -1;
				if (nodes.length>1) {
					var pNodes = nodes[0].parentTId ? nodes[0].getParentNode()[childKey] : $.tree._getNodes(setting);
					tmpNodes = [];
					for (i=0, l=pNodes.length; i<l; i++) {
						if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {
							if (isOrder && lastIndex > -1 && (lastIndex+1) !== i) {
								isOrder = false;
							}
							tmpNodes.push(pNodes[i]);
							lastIndex = i;
						}
						if (nodes.length === tmpNodes.length) {
							nodes = tmpNodes;
							break;
						}
					}
				}
				if (isOrder) {
					preNode = nodes[0].getPreNode();
					nextNode = nodes[nodes.length-1].getNextNode();
				}

				//设置节点为选中状态
				curNode = $$("<ul class='treeDragUL'></ul>", setting);
				for (i=0, l=nodes.length; i<l; i++) {
					tmpNode = nodes[i];
					tmpNode.editNameFlag = false;
					$.tree._selectNode(setting, tmpNode, i>0);
					$.tree._removeTreeDom(setting, tmpNode);

					if (i > setting.dragMaxShowNodeNum-1) {
						continue;
					}

					tmpDom = $$("<li id='"+ tmpNode.tId +"_tmp'></li>", setting);
					tmpDom.append($$(tmpNode, consts.id.A, setting).clone());
					tmpDom.css("padding", "0");
					tmpDom.children("#" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);
					curNode.append(tmpDom);
					if (i == setting.dragMaxShowNodeNum-1) {
						tmpDom = $$("<li id='"+ tmpNode.tId +"_moretmp'><a>  ...  </a></li>", setting);
						curNode.append(tmpDom);
					}
				}
				curNode.attr("id", nodes[0].tId + consts.id.UL + "_tmp");
				curNode.addClass(setting.treeObj.attr("class"));
				curNode.appendTo(body);

				tmpArrow = $$("<span class='tmpTreeMove_arrow'></span>", setting);
				tmpArrow.attr("id", "treeMove_arrow_tmp");
				tmpArrow.appendTo(body);

				setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);
			}

			if (root.dragFlag == 1) {
				if (tmpTarget && tmpArrow.attr("id") == event.target.id && tmpTargetNodeId && (event.clientX + doc.scrollLeft()+2) > ($("#" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left)) {
					var xT = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget);
					event.target = (xT.length > 0) ? xT.get(0) : event.target;
				} else if (tmpTarget) {
					tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
					if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
						.removeClass(consts.node.TMPTARGET_NODE + "_" + _final.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _final.move.TYPE_INNER);
				}
				tmpTarget = null;
				tmpTargetNodeId = null;

				//在多选树中判断拖、拽
				isOtherTree = false;
				targetSetting = setting;
				var settings = $.tree._getSettings();
				for (var s in settings) {
					if (settings[s].treeId && settings[s].editable && settings[s].treeId != setting.treeId
						&& (event.target.id == settings[s].treeId || $(event.target).parents("#" + settings[s].treeId).length>0)) {
						isOtherTree = true;
						targetSetting = settings[s];
					}
				}

				var docScrollTop = doc.scrollTop(),
				docScrollLeft = doc.scrollLeft(),
				treeOffset = targetSetting.treeObj.offset(),
				scrollHeight = targetSetting.treeObj.get(0).scrollHeight,
				scrollWidth = targetSetting.treeObj.get(0).scrollWidth,
				dTop = (event.clientY + docScrollTop - treeOffset.top),
				dBottom = (targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop),
				dLeft = (event.clientX + docScrollLeft - treeOffset.left),
				dRight = (targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft),
				isTop = (dTop < setting.dragBorderMax && dTop > setting.dragBorderMin),
				isBottom = (dBottom < setting.dragBorderMax && dBottom > setting.dragBorderMin),
				isLeft = (dLeft < setting.dragBorderMax && dLeft > setting.dragBorderMin),
				isRight = (dRight < setting.dragBorderMax && dRight > setting.dragBorderMin),
				isTreeInner = dTop > setting.dragBorderMin && dBottom > setting.dragBorderMin && dLeft > setting.dragBorderMin && dRight > setting.dragBorderMin,
				isTreeTop = (isTop && targetSetting.treeObj.scrollTop() <= 0),
				isTreeBottom = (isBottom && (targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height()+10) >= scrollHeight),
				isTreeLeft = (isLeft && targetSetting.treeObj.scrollLeft() <= 0),
				isTreeRight = (isRight && (targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width()+10) >= scrollWidth);

				if (event.target && $.tree._isChildOrSelf(event.target, targetSetting.treeId)) {
					//获取树节点中  <li> 元素dom
					var targetObj = event.target;
					while (targetObj && targetObj.tagName && !$.tree._eqs(targetObj.tagName, "li") && targetObj.id != targetSetting.treeId) {
						targetObj = targetObj.parentNode;
					}

					var canMove = true;
					//不能移动到自身，或自身的子节点中
					for (i=0, l=nodes.length; i<l; i++) {
						tmpNode = nodes[i];
						if (targetObj.id === tmpNode.tId) {
							canMove = false;
							break;
						} else if ($$(tmpNode, setting).find("#" + targetObj.id).length > 0) {
							canMove = false;
							break;
						}
					}
					if (canMove && event.target && $.tree._isChildOrSelf(event.target, targetObj.id + consts.id.A)) {
						tmpTarget = $(targetObj);
						tmpTargetNodeId = targetObj.id;
					}
				}

				//鼠标移动到树组件区域
				tmpNode = nodes[0];
				if (isTreeInner && $.tree._isChildOrSelf(event.target, targetSetting.treeId)) {
					//判断鼠标移动至根节点
					if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || (!isOtherTree && tmpNode.parentTId))) {
						tmpTarget = targetSetting.treeObj;
					}
					//自动滚动到顶部
					if (isTop) {
						targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()-10);
					} else if (isBottom)  {
						targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()+10);
					}
					if (isLeft) {
						targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()-10);
					} else if (isRight) {
						targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+10);
					}
					//auto scroll left
					if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {
						targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+ tmpTarget.offset().left - targetSetting.treeObj.offset().left);
					}
				}

				curNode.css({
					"top": (event.clientY + docScrollTop + 3) + "px",
					"left": (event.clientX + docScrollLeft + 3) + "px"
				});

				var dX = 0;
				var dY = 0;
				if (tmpTarget && tmpTarget.attr("id")!=targetSetting.treeId) {
					var tmpTargetNode = tmpTargetNodeId == null ? null: $.tree._getNodeCache(targetSetting, tmpTargetNodeId),
					isCopy = ((event.ctrlKey || event.metaKey) && setting.dragIsMove && setting.dragIsCopy) || (!setting.dragIsMove && setting.dragIsCopy),
					isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),
					isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),
					isInner = (tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId),
					canPrev = (isCopy || !isNext) && $.tree._apply(targetSetting.dragPrev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.dragPrev),
					canNext = (isCopy || !isPrev) && $.tree._apply(targetSetting.dragNext, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.dragNext),
					canInner = (isCopy || !isInner) && !(targetSetting.keepLeaf && !tmpTargetNode.isParent) && $.tree._apply(targetSetting.dragInner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.dragInner);
					if (!canPrev && !canNext && !canInner) {
						tmpTarget = null;
						tmpTargetNodeId = "";
						moveType = consts.move.TYPE_INNER;
						tmpArrow.css({
							"display":"none"
						});
						if (window.TreeMoveTimer) {
							clearTimeout(window.TreeMoveTimer);
							window.TreeMoveTargetNodeTId = null
						}
					} else {
						var tmpTargetA = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget),
						tmpNextA = tmpTargetNode.isLastNode ? null : $("#" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),
						tmpTop = tmpTargetA.offset().top,
						tmpLeft = tmpTargetA.offset().left,
						prevPercent = canPrev ? (canInner ? 0.25 : (canNext ? 0.5 : 1) ) : -1,
						nextPercent = canNext ? (canInner ? 0.75 : (canPrev ? 0.5 : 0) ) : -1,
						dY_percent = (event.clientY + docScrollTop - tmpTop)/tmpTargetA.height();
						if ((prevPercent==1 ||dY_percent<=prevPercent && dY_percent>=-.2) && canPrev) {
							dX = 1 - tmpArrow.width();
							dY = tmpTop - tmpArrow.height()/2;
							moveType = consts.move.TYPE_PREV;
						} else if ((nextPercent==0 || dY_percent>=nextPercent && dY_percent<=1.2) && canNext) {
							dX = 1 - tmpArrow.width();
							dY = (tmpNextA == null || (tmpTargetNode.isParent && tmpTargetNode.open)) ? (tmpTop + tmpTargetA.height() - tmpArrow.height()/2) : (tmpNextA.offset().top - tmpArrow.height()/2);
							moveType = consts.move.TYPE_NEXT;
						}else {								
							dX = 5 - tmpArrow.width();
							dY = tmpTop;
							moveType = consts.move.TYPE_INNER;								
						}
						tmpArrow.css({
							"display":"block",
							"top": dY + "px",
							"left": (tmpLeft + dX) + "px"
						});
						// 如果dragStyle配置为线形的提示，则显示线性 begin lihaibo added
						if (setting.dragStyle == "line") {
							if ( consts.move.TYPE_INNER == moveType) {
								tmpArrow.removeClass("preNext_line").addClass("inner_line");
							} else {
								tmpArrow.removeClass("inner_line").addClass("preNext_line");
							}
						}
						// 如果dragStyle配置为线形的提示，则显示线性 end
						tmpTargetA.addClass(consts.node.TMPTARGET_NODE + "_" + moveType);

						if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {
							startTime = (new Date()).getTime();
						}
						if (tmpTargetNode && tmpTargetNode.isParent && moveType == consts.move.TYPE_INNER) {
							var startTimer = true;
							if (window.TreeMoveTimer && window.TreeMoveTargetNodeTId !== tmpTargetNode.tId) {
								clearTimeout(window.TreeMoveTimer);
								window.TreeMoveTargetNodeTId = null;
							}else if (window.TreeMoveTimer && window.TreeMoveTargetNodeTId === tmpTargetNode.tId) {
								startTimer = false;
							}
							if (startTimer) {
								window.TreeMoveTimer = setTimeout(function() {
									if (moveType != consts.move.TYPE_INNER) return;
									if (tmpTargetNode && tmpTargetNode.isParent && !tmpTargetNode.open && (new Date()).getTime() - startTime > targetSetting.dragAutoOpenTime
										&& $.tree._apply(targetSetting.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {
										$.tree._switchNode(targetSetting, tmpTargetNode);
										if (targetSetting.dragAutoExpandTrigger) {
											targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);
										}
									}
								}, targetSetting.dragAutoOpenTime+50);
								window.TreeMoveTargetNodeTId = tmpTargetNode.tId;
							}
						}
					}
				} else {
					moveType = consts.move.TYPE_INNER;
					if (tmpTarget && $.tree._apply(targetSetting.dragInner, [targetSetting.treeId, nodes, null], !!targetSetting.dragInner)) {
						tmpTarget.addClass(consts.node.TMPTARGET_TREE);
					} else {
						tmpTarget = null;
					}
					tmpArrow.css({
						"display":"none"
					});
					if (window.TreeMoveTimer) {
						clearTimeout(window.TreeMoveTimer);
						window.TreeMoveTargetNodeTId = null;
					}
				}
				preTmpTargetNodeId = tmpTargetNodeId;
				preTmpMoveType = moveType;

				setting.treeObj.trigger(consts.event.DRAGMOVE, [event, setting.treeId, nodes]);
			}
			return false;
		}

		doc.bind("mouseup", _docMouseUp);
		function _docMouseUp(event) {
			if (window.TreeMoveTimer) {
				clearTimeout(window.TreeMoveTimer);
				window.TreeMoveTargetNodeTId = null;
			}
			preTmpTargetNodeId = null;
			preTmpMoveType = null;
			doc.unbind("mousemove", _docMouseMove);
			doc.unbind("mouseup", _docMouseUp);
			doc.unbind("selectstart", _docSelect);
			body.css("cursor", "auto");
			if (tmpTarget) {
				tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
				if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
						.removeClass(consts.node.TMPTARGET_NODE + "_" + _final.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _final.move.TYPE_INNER);
			}
			$.tree._showIfameMask(setting, false);

			roots.showHoverDom = true;
			if (root.dragFlag == 0) return;
			root.dragFlag = 0;

			var i, l, tmpNode;
			for (i=0, l=nodes.length; i<l; i++) {
				tmpNode = nodes[i];
				if (tmpNode.isParent && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {
					$.tree._expandCollapseNode(setting, tmpNode, !tmpNode.open);
					delete root.dragNodeShowBefore[tmpNode.tId];
				}
			}

			if (curNode) curNode.remove();
			if (tmpArrow) tmpArrow.remove();

			var isCopy = ((event.ctrlKey || event.metaKey) && setting.dragIsMove && setting.dragIsCopy) || (!setting.dragIsMove && setting.dragIsCopy);
			if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId==nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {
				tmpTarget = null;
			}
			if (tmpTarget) {
				var dragTargetNode = tmpTargetNodeId == null ? null: $.tree._getNodeCache(targetSetting, tmpTargetNodeId);
				if ($.tree._apply(setting.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) {
					$.tree._selectNodes(sourceSetting, nodes);
					return;
				}
				var newNodes = isCopy ? $.tree._clone(nodes) : nodes;

				function dropCallback() {
					if (isOtherTree) {
						if (!isCopy) {
							for(var i=0, l=nodes.length; i<l; i++) {
								$.tree._removeNode(setting, nodes[i]);
							}
						}
						if (moveType == consts.move.TYPE_INNER) {
							$.tree._addNodes(targetSetting, dragTargetNode, newNodes);
						} else {
							$.tree._addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
							if (moveType == consts.move.TYPE_PREV) {
								for (i=0, l=newNodes.length; i<l; i++) {
									$.tree._moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
								}
							} else {
								for (i=-1, l=newNodes.length-1; i<l; l--) {
									$.tree._moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
								}
							}
						}
					} else {
						if (isCopy && moveType == consts.move.TYPE_INNER) {
							$.tree._addNodes(targetSetting, dragTargetNode, newNodes);
						} else {
							if (isCopy) {
								$.tree._addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
							}
							if (moveType != consts.move.TYPE_NEXT) {
								for (i=0, l=newNodes.length; i<l; i++) {
									$.tree._moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
								}
							} else {
								for (i=-1, l=newNodes.length-1; i<l; l--) {
									$.tree._moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
								}
							}
						}
					}
					$.tree._selectNodes(targetSetting, newNodes);
					$$(newNodes[0], setting).focus().blur();

					setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);
				}

				if (moveType == consts.move.TYPE_INNER && $.tree._canAsync(targetSetting, dragTargetNode)) {
					$.tree._asyncNode(targetSetting, dragTargetNode, false, dropCallback);
				} else {
					dropCallback();
				}

			} else {
				$.tree._selectNodes(sourceSetting, nodes);
				setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);
			}
		}

		doc.bind("selectstart", _docSelect);
		function _docSelect() {
			return false;
		}

		//Avoid FireFox's Bug
		//If Tree Div CSS set 'overflow', so drag node outside of Tree, and event.target is error.
		if(eventMouseDown.preventDefault) {
			eventMouseDown.preventDefault();
		}
		return true;
	},
	
	//以下是树组件工具方法
	_apply: function(fun, param, defaultValue) {			
		if( fun == defaultValue && !$.isFunction(fun) ) {
			return defaultValue;
		}
		
		if( typeof(fun) =="undefined" || fun == null){
			return defaultValue;
		}
		
		var _fn = $.coral.toFunction(fun);
		
		if (!$.isFunction(_fn)) {
			return defaultValue;
		}
		var ret = _fn.apply(coralTree, param ? param : []);
		return typeof(ret)=="undefined"?defaultValue:ret;
	},
	_canAsync: function(setting, node) {
		var childKey = setting.keyChildren;
		return (setting.asyncEnable && node && node.isParent && !(node.zAsync || (node[childKey] && node[childKey].length > 0)));
	},
	_clone: function (obj){
		if (obj === null) return null;
		var o = $.tree._isArray(obj) ? [] : {};
		for(var i in obj){
			o[i] = (obj[i] instanceof Date) ? new Date(obj[i].getTime()) : (typeof obj[i] === "object" ? arguments.callee(obj[i]) : obj[i]);
		}
		return o;
	},
	_eqs: function(str1, str2) {
		return str1.toLowerCase() === str2.toLowerCase();
	},
	_isArray: function(arr) {
		return Object.prototype.toString.apply(arr) === "[object Array]";
	},
	_$: function(node, exp, setting) {
		if (!!exp && typeof exp != "string") {
			setting = exp;
			exp = "";
		}
		if (typeof node == "string") {
			return $(node, setting ? setting.treeObj.get(0).ownerDocument : null);
		} else {
			return $("#" + node.tId + exp, setting ? setting.treeObj : null);
		}
	},
	_getMDom: function (setting, curDom, targetExpr) {
		if (!curDom) return null;
		while (curDom && curDom.id !== setting.treeId) {
			for (var i=0, l=targetExpr.length; curDom.tagName && i<l; i++) {
				if ($.tree._eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {
					return curDom;
				}
			}
			curDom = curDom.parentNode;
		}
		return null;
	},
	_getNodeMainDom: function(target) {
		return ($(target).parent("li").get(0) || $(target).parentsUntil("li").parent().get(0));
	},
	_isChildOrSelf: function(dom, parentId) {
		return ( $(dom).closest("#" + parentId).length> 0 );
	},
	_uCanDo: function(setting, e) {
		return true;
	},
	_getAbs: function (obj) {
		var oRect = obj.getBoundingClientRect(),
		scrollTop = document.body.scrollTop+document.documentElement.scrollTop,
		scrollLeft = document.body.scrollLeft+document.documentElement.scrollLeft;
		return [oRect.left+scrollLeft,oRect.top+scrollTop];
	},
	_inputFocus: function(inputObj) {
		if (inputObj.get(0)) {
			inputObj.focus();
			$.tree._setCursorPosition(inputObj.get(0), inputObj.val().length);
		}
	},
	_inputSelect: function(inputObj) {
		if (inputObj.get(0)) {
			inputObj.focus();
			inputObj.select();
		}
	},
	_setCursorPosition: function(obj, pos){
		if(obj.setSelectionRange) {
			obj.focus();
			obj.setSelectionRange(pos,pos);
		} else if (obj.createTextRange) {
			var range = obj.createTextRange();
			range.collapse(true);
			range.moveEnd('character', pos);
			range.moveStart('character', pos);
			range.select();
		}
	},
	_showIfameMask: function(setting, showSign) {
		var root = $.tree._getRoot(setting);
		//clear full mask
		while (root.dragMaskList.length > 0) {
			root.dragMaskList[0].remove();
			root.dragMaskList.shift();
		}
		if (showSign) {
			//show mask
			var iframeList = $$("iframe", setting);
			for (var i = 0, l = iframeList.length; i < l; i++) {
				var obj = iframeList.get(i),
				r = $.tree._getAbs(obj),
				dragMask = $$("<div id='treeMask_" + i + "' class='treeMask' style='top:" + r[1] + "px; left:" + r[0] + "px; width:" + obj.offsetWidth + "px; height:" + obj.offsetHeight + "px;'></div>", setting);
				dragMask.appendTo($$("body", setting));
				root.dragMaskList.push(dragMask);
			}
		}
	},
	//以下是操作树形结构中dom元素的方法
	_addNodes: function(setting, parentNode, newNodes, isSilent) {
		if (setting.keepLeaf && parentNode && !parentNode.isParent) {
			return;
		}
		if (!$.tree._isArray(newNodes)) {
			newNodes = [newNodes];
		}
		if (setting.simpleDataEnable) {
			newNodes = $.tree._transformToTreeFormat(setting, newNodes);
		}
		if (parentNode) {
			var target_switchObj = $$(parentNode, consts.id.SWITCH, setting),
			target_icoObj = $$(parentNode, consts.id.ICON, setting),
			target_ulObj = $$(parentNode, consts.id.UL, setting);

			if (!parentNode.open) {
				$.tree._replaceSwitchClass(parentNode, target_switchObj, consts.folder.CLOSE);
				$.tree._replaceIcoClass(parentNode, target_icoObj, consts.folder.CLOSE);
				parentNode.open = false;
				target_ulObj.css({
					"display": "none"
				});
			}

			$.tree._addNodesData(setting, parentNode, newNodes);
			$.tree._createNodes(setting, parentNode.level + 1, newNodes, parentNode);
			if (!isSilent) {
				$.tree._expandCollapseParentNode(setting, parentNode, true);
			}
		} else {
			$.tree._addNodesData(setting, $.tree._getRoot(setting), newNodes);
			$.tree._createNodes(setting, 0, newNodes, null);
		}
	},
	_appendNodes: function(setting, level, nodes, parentNode, initFlag, openFlag) {
		if (!nodes) return [];
		var html = [],
		childKey = setting.keyChildren;
		for (var i = 0, l = nodes.length; i < l; i++) {
			var node = nodes[i];
			if (initFlag) {
				var tmpPNode = (parentNode) ? parentNode: $.tree._getRoot(setting),
				tmpPChild = tmpPNode[childKey],
				isFirstNode = ((tmpPChild.length == nodes.length) && (i == 0)),
				isLastNode = (i == (nodes.length - 1));
				$.tree._initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);
				$.tree._addNodeCache(setting, node);
			}

			var childHtml = [];
			if (node[childKey] && node[childKey].length > 0) {
				//make child html first, because checkType
				childHtml = $.tree._appendNodes(setting, level + 1, node[childKey], node, initFlag, openFlag && node.open);
			}
			if (openFlag) {

				$.tree._makeDOMNodeMainBefore(html, setting, node);
				$.tree._makeDOMNodeLine(html, setting, node);
				$.tree._getBeforeA(setting, node, html);
				$.tree._makeDOMNodeNameBefore(html, setting, node);
				$.tree._getInnerBeforeA(setting, node, html);
				$.tree._makeDOMNodeIcon(html, setting, node);
				$.tree._getInnerAfterA(setting, node, html);
				$.tree._makeDOMNodeNameAfter(html, setting, node);
				$.tree._getAfterA(setting, node, html);
				if (node.isParent && node.open) {
					$.tree._makeUlHtml(setting, node, html, childHtml.join(''));
				}
				$.tree._makeDOMNodeMainAfter(html, setting, node);
				$.tree._addCreatedNode(setting, node);
			}
		}
		return html;
	},
	_appendParentULDom: function(setting, node) {
		var html = [],
		nObj = $$(node, setting);
		if (!nObj.get(0) && !!node.parentTId) {
			$.tree._appendParentULDom(setting, node.getParentNode());
			nObj = $$(node, setting);
		}
		var ulObj = $$(node, consts.id.UL, setting);
		if (ulObj.get(0)) {
			ulObj.remove();
		}
		var childKey = setting.keyChildren,
		childHtml = $.tree._appendNodes(setting, node.level+1, node[childKey], node, false, true);
		$.tree._makeUlHtml(setting, node, html, childHtml.join(''));
		nObj.append(html.join(''));
	},
	/**
	 * :TODO: 为了不改变结构，临时添加opts参数，待以后改进。
	 */
	_asyncNode: function(setting, node, isSilent, callback, opts) {
		var opts = opts || {};
		var i, l;
		var isInit = setting.isInit;
		if (node && !node.isParent) {
			$.tree._apply(callback);
			return false;
		} else if (node && node.isAjaxing) {
			return false;
		} else if ($.tree._apply(setting.beforeAsync, [setting.treeId, node], true) == false) {
			$.tree._apply(callback);
			return false;
		}
		if (node) {
			node.isAjaxing = true;
			var icoObj = $$(node, consts.id.ICON, setting);
			icoObj.attr({"style":"", "class":consts.className.BUTTON + " " + consts.className.ICO_LOADING});
		}

		var tmpParam = {},
			asyncOtherParam = opts.asyncOtherParam || setting.asyncOtherParam;
		//通过标签传递的参数为字符串类型，需要转换为一个数组对象
		//var autoParams = (new Function('return ' + setting.asyncAutoParam))();
		var autoParams = setting.asyncAutoParam.split(",");
		var isInit = setting.isInit;
		for (i = 0, l = autoParams.length; node && i < l; i++) {
			var pKey = autoParams[i].split("="), spKey = pKey;
			if (pKey.length>1) {
				spKey = pKey[1];
				pKey = pKey[0];
			}
			tmpParam[spKey] = node[pKey];
		}
		if ($.tree._isArray(asyncOtherParam)) {
			for (i = 0, l = asyncOtherParam.length; i < l; i += 2) {
				tmpParam[asyncOtherParam[i]] = asyncOtherParam[i + 1];
			}
		} else {
			for (var p in asyncOtherParam) {
				tmpParam[p] = asyncOtherParam[p];
			}
		}

		var _tmpV = $.tree._getRoot(setting)._ver,
			asyncUrl = $.tree._apply(setting.asyncUrl, [setting.treeId, node], setting.asyncUrl);
		$.ajax({
			contentType: setting.asyncContentType,
			type: setting.asyncType,
			url: asyncUrl,
			data: tmpParam,
			dataType: setting.asyncDataType,
			success: function(msg) {
				if (_tmpV != $.tree._getRoot(setting)._ver) {
					return;
				}
				var newNodes = [];
				try {
					if (!msg || msg.length == 0) {
						newNodes = [];
					} else if (typeof msg == "string") {
						newNodes = eval("(" + msg + ")");
					} else {
						newNodes = msg;
					}
				} catch(err) {
					newNodes = msg;
				}

				if (node) {
					node.isAjaxing = null;
					node.zAsync = true;
				}

				$.tree._setNodeLineIcos(setting, node);
				if (newNodes && newNodes !== "") {
					if ( isInit ){
						newNodes = $.tree._createRootNodes(setting,newNodes);
					}
					newNodes = $.tree._apply(setting.asyncDataFilter, [setting.treeId, node, newNodes], newNodes);
					$.tree._addNodes(setting, node, !!newNodes ? $.tree._clone(newNodes) : [], !!isSilent);
				} else {
					if ( isInit ){
						newNodes = $.tree._createRootNodes(setting,newNodes);
					}
					$.tree._addNodes(setting, node, rootNodes, !!isSilent);
				}
				if ( opts.onLoad ) {
					$.tree._apply( opts.onLoad, [setting.treeId, node, msg]);
				} else {
					setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);
				}
				$.tree._apply(callback);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				if (_tmpV != $.tree._getRoot(setting)._ver) {
					return;
				}
				if (node) node.isAjaxing = null;
				$.tree._setNodeLineIcos(setting, node);
				setting.treeObj.trigger(consts.event.ASYNC_ERROR, [setting.treeId, node, XMLHttpRequest, textStatus, errorThrown]);
			}
		});
		return true;
	},
	_addEditBtn: function(setting, node) {
		if (node.editNameFlag || $$(node, consts.id.EDIT, setting).length > 0) {
			return;
		}
		if (!$.tree._apply(setting.showRenameBtn, [setting.treeId, node], setting.showRenameBtn)) {
			return;
		}
		var aObj = $$(node, consts.id.A, setting),
		editStr = "<span class='" + consts.className.BUTTON + " edit' id='" + node.tId + consts.id.EDIT + "' title='"+$.tree._apply(setting.renameTitle, [setting.treeId, node], setting.renameTitle)+"' treeNode"+consts.id.EDIT+" style='display:none;'></span>";
		aObj.append(editStr);

		$$(node, consts.id.EDIT, setting).bind('click',
			function() {
				if (!$.tree._uCanDo(setting) || $.tree._apply(setting.beforeEditName, [setting.treeId, node], true) == false) return false;
				$.tree._editNode(setting, node);
				return false;
			}
			).show();
	},
	_addRemoveBtn: function(setting, node) {
		if (node.editNameFlag || $$(node, consts.id.REMOVE, setting).length > 0) {
			return;
		}
		if (!$.tree._apply(setting.showRemoveBtn, [setting.treeId, node], setting.showRemoveBtn)) {
			return;
		}
		var aObj = $$(node, consts.id.A, setting),
		removeStr = "<span class='" + consts.className.BUTTON + " remove' id='" + node.tId + consts.id.REMOVE + "' title='"+$.tree._apply(setting.removeTitle, [setting.treeId, node], setting.removeTitle)+"' treeNode"+consts.id.REMOVE+" style='display:none;'></span>";
		aObj.append(removeStr);

		$$(node, consts.id.REMOVE, setting).bind('click',
			function() {
				if (!$.tree._uCanDo(setting) || $.tree._apply(setting.beforeRemove, [setting.treeId, node], true) == false) return false;
				$.tree._removeNode(setting, node);
				setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
				return false;
			}
			).bind('mousedown',
			function(eventMouseDown) {
				return true;
			}
			).show();
	},
	_addHoverDom: function(setting, node) {
		if ($.tree._getRoots().showHoverDom) {
			node.isHover = true;
			if (setting.editable) {
				$.tree._addEditBtn(setting, node);
				$.tree._addRemoveBtn(setting, node);
			}
			$.tree._apply(setting.addHoverDom, [setting.treeId, node]);
		}
	},
	
	_cancelPreSelectedNode: function (setting, node) {
		var list = $.tree._getRoot(setting).curSelectedList;
		for (var i=0, j=list.length-1; j>=i; j--) {
			if (!node || node === list[j]) {
				$$(list[j], consts.id.A, setting).removeClass(consts.node.CURSELECTED);
				if (node) {
					$.tree._removeSelectedNode(setting, node);
					break;
				}
			}
		}
		if (!node) $.tree._getRoot(setting).curSelectedList = [];
	},
	_createNodeCallback: function(setting) {
		if (!!setting.onNodeCreated || !!setting.addDiyDom) {
			var root = $.tree._getRoot(setting);
			while (root.createdNodes.length>0) {
				var node = root.createdNodes.shift();
				$.tree._apply(setting.addDiyDom, [setting.treeId, node]);
				if (!!setting.onNodeCreated) {
					setting.treeObj.trigger(consts.event.NODECREATED, [setting.treeId, node]);
				}
			}
		}
	},
	/**
	 * @param setting
	 * @param nodes
	 * 
	 * @returns nodes 新构造的树节点（可能带有根节点）
	 */
	_createRootNodes: function( setting, nodes ) {
		//if ( setting.isInit ) {
		if(setting.showRootNode == true){
			//指定根节点的情况
			if ( setting.rootNode && typeof ( setting.rootNode ) !== "boolean" ) {
				setting.rootNode.children = nodes;
				nodes = [setting.rootNode];		
			}
		} else //showRootNode == false: 隐藏根节点
		{
			//如果rootNode为true，则根节点在nodes中取得
			//且根节点只有一层的时候 
			//且children必须大于1
			if ( typeof ( setting.rootNode ) == "boolean" && 
				setting.rootNode ) {
				if ( nodes.length >= 1 ) {
					if ( nodes[0].children && nodes[0].children.length > 0 ) {
						nodes = nodes[0].children;
					} else {
						nodes = [];
					}
				}
			}
		}
		//}
		return nodes;
	},
	/**
	 * @param setting
	 * @param level
	 * @param nodes
	 * @param parentNode
	 * 
	 */
	_createNodes: function( setting, level, nodes, parentNode ) {
		//初始化的时候处理根节点的显示或者隐藏
		//nodes = $.tree._createRootNodes(setting, nodes );
		
		if (!nodes || nodes.length == 0) return;
		var root = $.tree._getRoot(setting),
		childKey = setting.keyChildren,
		openFlag = !parentNode || parentNode.open || !!$$(parentNode[childKey][0], setting).get(0);
		root.createdNodes = [];
		var treeHtml = $.tree._appendNodes(setting, level, nodes, parentNode, true, openFlag);
		if (!parentNode) {
			setting.treeObj.append(treeHtml.join(''));
		} else {
			var ulObj = $$(parentNode, consts.id.UL, setting);
			if (ulObj.get(0)) {
				ulObj.append(treeHtml.join(''));
			}
		}
		// // 20140108 lihaibo added
		setting.isInit = false;
		// // 20140108 lihaibo added
		$.tree._createNodeCallback(setting);
	},
	_checkNodeRelation: function(setting, node) {
		var pNode, i, l,
		childKey = setting.keyChildren,
		checkedKey = setting.keyChecked,
		r = consts.radio;
		if (setting.chkStyle == r.STYLE) {
			var checkedList = $.tree._getRadioCheckedList(setting);
			if (node[checkedKey]) {
				if (setting.radioType == r.TYPE_ALL) {
					for (i = checkedList.length-1; i >= 0; i--) {
						pNode = checkedList[i];
						if (pNode[checkedKey] && pNode != node) {
							pNode[checkedKey] = false;
							checkedList.splice(i, 1);

							$.tree._setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);
							if (pNode.parentTId != node.parentTId) {
								$.tree._repairParentChkClassWithSelf(setting, pNode);
							}
						}
					}
					checkedList.push(node);
				} else {
					var parentNode = (node.parentTId) ? node.getParentNode() : $.tree._getRoot(setting);
					for (i = 0, l = parentNode[childKey].length; i < l; i++) {
						pNode = parentNode[childKey][i];
						if (pNode[checkedKey] && pNode != node) {
							pNode[checkedKey] = false;
							$.tree._setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);
						}
					}
				}
			} else if (setting.radioType == r.TYPE_ALL) {
				for (i = 0, l = checkedList.length; i < l; i++) {
					if (node == checkedList[i]) {
						checkedList.splice(i, 1);
						break;
					}
				}
			}

		} else {
			if (node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.chkboxType.Y.indexOf("s") > -1)) {
				$.tree._setSonNodeCheckBox(setting, node, true);
			}
			if (!node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.chkboxType.N.indexOf("s") > -1)) {
				$.tree._setSonNodeCheckBox(setting, node, false);
			}
			if (node[checkedKey] && setting.chkboxType.Y.indexOf("p") > -1) {
				$.tree._setParentNodeCheckBox(setting, node, true);
			}
			if (!node[checkedKey] && setting.chkboxType.N.indexOf("p") > -1) {
				$.tree._setParentNodeCheckBox(setting, node, false);
			}
		}
	},
	_cancelCurEditNode: function (setting, forceName, isCancel) {
		var root = $.tree._getRoot(setting),
		nameKey = setting.keyName,
		node = root.curEditNode;

		if (node) {
			var inputObj = root.curEditInput,
			newName = forceName ? forceName:(isCancel ? node[nameKey]: inputObj.val());
			if ($.tree._apply(setting.beforeReName, [setting.treeId, node, newName, isCancel], true) === false) {
				return false;
			} else {
				node[nameKey] = newName;
				setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node, isCancel]);
			}
			var aObj = $$(node, consts.id.A, setting);
			aObj.removeClass(consts.node.CURSELECTED_EDIT);
			inputObj.unbind();
			$.tree._setNodeName(setting, node);
			node.editNameFlag = false;
			root.curEditNode = null;
			root.curEditInput = null;
			$.tree._selectNode(setting, node, false);
		}
		root.noSelection = true;
		return true;
	},
	_editNode: function(setting, node) {
		var root = $.tree._getRoot(setting);
		$.tree._editNodeBlur = false;
		if ($.tree._isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
			setTimeout(function() {$.tree._inputFocus(root.curEditInput);}, 0);
			return;
		}
		var nameKey = setting.keyName;
		node.editNameFlag = true;
		$.tree._removeTreeDom(setting, node);
		$.tree._cancelCurEditNode(setting);
		$.tree._selectNode(setting, node, false);
		$$(node, consts.id.SPAN, setting).html("<input type=text class='rename' id='" + node.tId + consts.id.INPUT + "' treeNode" + consts.id.INPUT + " >");
		var inputObj = $$(node, consts.id.INPUT, setting);
		inputObj.attr("value", node[nameKey]);
		if (setting.editNameSelectAll) {
			$.tree._inputSelect(inputObj);
		} else {
			$.tree._inputFocus(inputObj);
		}

		inputObj.bind('blur', function(event) {
			if (!$.tree._editNodeBlur) {
				$.tree._cancelCurEditNode(setting);
			}
		}).bind('keydown', function(event) {
			if (event.keyCode=="13") {
				$.tree._editNodeBlur = true;
				$.tree._cancelCurEditNode(setting);
			} else if (event.keyCode=="27") {
				$.tree._cancelCurEditNode(setting, null, true);
			}
		}).bind('click', function(event) {
			return false;
		}).bind('dblclick', function(event) {
			return false;
		});

		$$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED_EDIT);
		root.curEditInput = inputObj;
		root.noSelection = false;
		root.curEditNode = node;
	},
	_destroy: function(setting) {
		if (!setting) return;
		$.tree._initCache(setting);
		$.tree._initRoot(setting);
		$.tree._unbindTree(setting);
		$.tree._unbindEvent(setting);
		setting.treeObj.empty();
		delete settings[setting.treeId];
	},
	_expandCollapseNode: function(setting, node, expandFlag, animateFlag, callback) {
		var root = $.tree._getRoot(setting),
		childKey = setting.keyChildren;
		if (!node) {
			$.tree._apply(callback, []);
			return;
		}
		if (root.expandTriggerFlag) {
			var _callback = callback;
			callback = function(){
				if (_callback) _callback();
				if (node.open) {
					setting.treeObj.trigger(consts.event.EXPAND, [setting.treeId, node]);
				} else {
					setting.treeObj.trigger(consts.event.COLLAPSE, [setting.treeId, node]);
				}
			};
			root.expandTriggerFlag = false;
		}
		if (!node.open && node.isParent && ((!$$(node, consts.id.UL, setting).get(0)) || (node[childKey] && node[childKey].length>0 && !$$(node[childKey][0], setting).get(0)))) {
			$.tree._appendParentULDom(setting, node);
			$.tree._createNodeCallback(setting);
		}
		if (node.open == expandFlag) {
			$.tree._apply(callback, []);
			return;
		}
		var ulObj = $$(node, consts.id.UL, setting),
		switchObj = $$(node, consts.id.SWITCH, setting),
		icoObj = $$(node, consts.id.ICON, setting);

		if (node.isParent) {
			node.open = !node.open;
			if (node.iconOpen && node.iconClose) {
				icoObj.attr("style", $.tree._makeNodeIcoStyle(setting, node));
			}

			if (node.open) {
				$.tree._replaceSwitchClass(node, switchObj, consts.folder.OPEN);
				$.tree._replaceIcoClass(node, icoObj, consts.folder.OPEN);
				if (animateFlag == false || setting.expandSpeed == "") {
					ulObj.show();
					$.tree._apply(callback, []);
				} else {
					if (node[childKey] && node[childKey].length > 0) {
						ulObj.slideDown(setting.expandSpeed, callback);
					} else {
						ulObj.show();
						$.tree._apply(callback, []);
					}
				}
			} else {
				$.tree._replaceSwitchClass(node, switchObj, consts.folder.CLOSE);
				$.tree._replaceIcoClass(node, icoObj, consts.folder.CLOSE);
				if (animateFlag == false || setting.expandSpeed == "" || !(node[childKey] && node[childKey].length > 0)) {
					ulObj.hide();
					$.tree._apply(callback, []);
				} else {
					ulObj.slideUp(setting.expandSpeed, callback);
				}
			}
		} else {
			$.tree._apply(callback, []);
		}
	},
	_expandCollapseParentNode: function(setting, node, expandFlag, animateFlag, callback) {
		if (!node) return;
		if (!node.parentTId) {
			$.tree._expandCollapseNode(setting, node, expandFlag, animateFlag, callback);
			return;
		} else {
			$.tree._expandCollapseNode(setting, node, expandFlag, animateFlag);
		}
		if (node.parentTId) {
			$.tree._expandCollapseParentNode(setting, node.getParentNode(), expandFlag, animateFlag, callback);
		}
	},
	_expandCollapseSonNode: function(setting, node, expandFlag, animateFlag, callback) {
		var root = $.tree._getRoot(setting),
		childKey = setting.keyChildren,
		treeNodes = (node) ? node[childKey]: root[childKey],
		selfAnimateSign = (node) ? false : animateFlag,
		expandTriggerFlag = $.tree._getRoot(setting).expandTriggerFlag;
		$.tree._getRoot(setting).expandTriggerFlag = false;
		if (treeNodes) {
			for (var i = 0, l = treeNodes.length; i < l; i++) {
				if (treeNodes[i]) $.tree._expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign);
			}
		}
		$.tree._getRoot(setting).expandTriggerFlag = expandTriggerFlag;
		$.tree._expandCollapseNode(setting, node, expandFlag, animateFlag, callback );
	},
	_makeDOMNodeIcon: function(html, setting, node) {
		var nameStr = $.tree._getNodeName(setting, node),
		name = setting.nameIsHTML ? nameStr : nameStr.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
		if ( setting.formatter ) {
			name = $.tree._apply(setting.formatter,[setting,node,name],setting.formatter);
		}
		html.push("<span id='", node.tId, consts.id.ICON,
			"' title='' treeNode", consts.id.ICON," class='", $.tree._makeNodeIcoClass(setting, node),
			"' style='", $.tree._makeNodeIcoStyle(setting, node), "'></span><span id='", node.tId, consts.id.SPAN,
			"'>",name,"</span>");
	},
	_makeDOMNodeLine: function(html, setting, node) {
		html.push("<span id='", node.tId, consts.id.SWITCH,	"' title='' class='", $.tree._makeNodeLineClass(setting, node), "' treeNode", consts.id.SWITCH,"></span>");
	},
	_makeDOMNodeMainAfter: function(html, setting, node) {
		html.push("</li>");
	},
	/*_makeDOMNodeMainBefore: function(html, setting, node) {
		html.push("<li id='", node.tId, "' class='", consts.className.LEVEL, node.level,"' tabindex='0' hidefocus='true' treenode>");
	},*/
	_makeDOMNodeMainBefore: function(html, setting, node) {
		html.push("<li ", (node.hidden ? "style='display:none;' " : ""), "id='", node.tId, "' class='", consts.className.LEVEL, node.level,"' tabindex='0' hidefocus='true' treenode>");
	},
	_makeDOMNodeNameAfter: function(html, setting, node) {
		html.push("</a>");
	},
	_makeDOMNodeNameBefore: function(html, setting, node) {
		var title = $.tree._getNodeTitle(setting, node),
		url = $.tree._makeNodeUrl(setting, node),
		fontcss = $.tree._makeNodeFontCss(setting, node),
		fontStyle = [];
		for (var f in fontcss) {
			fontStyle.push(f, ":", fontcss[f], ";");
		}
		html.push("<a id='", node.tId, consts.id.A, "' class='", consts.className.LEVEL, node.level,"' treeNode", consts.id.A," onclick=\"", (node.click || ''),
			"\" ", ((url != null && url.length > 0) ? "href='" + url + "'" : ""), " target='",$.tree._makeNodeTarget(node),"' style='", fontStyle.join(''),
			"'");
		if ($.tree._apply(setting.showTitle, [setting.treeId, node], setting.showTitle) && title) {html.push("title='", title.replace(/'/g,"&#39;").replace(/</g,'&lt;').replace(/>/g,'&gt;'),"'");}
		html.push(">");
	},
	_makeNodeFontCss: function(setting, node) {
		var fontCss = $.tree._apply(setting.fontCss, [setting.treeId, node], setting.fontCss);
		return (fontCss && ((typeof fontCss) != "function")) ? fontCss : {};
	},
	_makeNodeIcoClass: function(setting, node) {
		var icoCss = ["ico"];
		if (!node.isAjaxing) {
			icoCss[0] = (node.iconSkin ? node.iconSkin + "_" : "") + icoCss[0];
			if (node.isParent) {
				icoCss.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
			} else {
				icoCss.push(consts.folder.DOCU);
			}
		}
		return consts.className.BUTTON + " " + icoCss.join('_');
	},
	_makeNodeIcoStyle: function(setting, node) {
		var icoStyle = [];
		if (!node.isAjaxing) {
			var icon = (node.isParent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon;
			if (icon) icoStyle.push("background:url(", icon, ") 0 0 no-repeat;");
			if (setting.showIcon == false || !$.tree._apply(setting.showIcon, [setting.treeId, node], true)) {
				icoStyle.push("width:0px;height:0px;");
			}
		}
		return icoStyle.join('');
	},
	_makeNodeLineClass: function(setting, node) {
		var lineClass = [];
		if (setting.showLine) {
			if (node.level == 0 && node.isFirstNode && node.isLastNode) {
				lineClass.push(consts.line.ROOT);
			} else if (node.level == 0 && node.isFirstNode) {
				lineClass.push(consts.line.ROOTS);
			} else if (node.isLastNode) {
				lineClass.push(consts.line.BOTTOM);
			} else {
				lineClass.push(consts.line.CENTER);
			}
		} else {
			lineClass.push(consts.line.NOLINE);
		}
		if (node.isParent) {
			lineClass.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
		} else {
			lineClass.push(consts.folder.DOCU);
		}
		return $.tree._makeNodeLineClassEx(node) + lineClass.join('_');
	},
	_makeNodeLineClassEx: function(node) {
		return consts.className.BUTTON + " " + consts.className.LEVEL + node.level + " " + consts.className.SWITCH + " ";
	},
	_makeNodeTarget: function(node) {
		return (node.target || "_blank");
	},
	_makeNodeUrl: function(setting, node) {
		var urlKey = setting.keyUrl;
		return node[urlKey] ? node[urlKey] : null;
	},
	_makeUlHtml: function(setting, node, html, content) {
		html.push("<ul id='", node.tId, consts.id.UL, "' class='", consts.className.LEVEL, node.level, " ", $.tree._makeUlLineClass(setting, node), "' style='display:", (node.open ? "block": "none"),"'>");
		html.push(content);
		html.push("</ul>");
	},
	_makeUlLineClass: function(setting, node) {
		return ((setting.showLine && !node.isLastNode) ? consts.line.LINE : "");
	},
	_makeChkClass: function(setting, node) {
		var checkedKey = setting.keyChecked,
		c = consts.checkbox, r = consts.radio,
		fullStyle = "";
		if (node.chkDisabled === true) {
			fullStyle = c.DISABLED;
		} else if (node.halfCheck) {
			fullStyle = c.PART;
		} else if (setting.chkStyle == r.STYLE) {
			fullStyle = (node.check_Child_State < 1)? c.FULL:c.PART;
		} else {
			fullStyle = node[checkedKey] ? ((node.check_Child_State === 2 || node.check_Child_State === -1) ? c.FULL:c.PART) : ((node.check_Child_State < 1)? c.FULL:c.PART);
		}
		var chkName = setting.chkStyle + "_" + (node[checkedKey] ? c.TRUE : c.FALSE) + "_" + fullStyle;
		chkName = (node.check_Focus && node.chkDisabled !== true) ? chkName + "_" + c.FOCUS : chkName;
		return consts.className.BUTTON + " " + c.DEFAULT + " " + chkName;
	},
	
	_moveNode: function(setting, targetNode, node, moveType, animateFlag, isSilent) {
		var root = $.tree._getRoot(setting),
		childKey = setting.keyChildren;
		if (targetNode == node) return;
		if (setting.keepLeaf && targetNode && !targetNode.isParent && moveType == consts.move.TYPE_INNER) return;
		var oldParentNode = (node.parentTId ? node.getParentNode(): root),
		targetNodeIsRoot = (targetNode === null || targetNode == root);
		if (targetNodeIsRoot && targetNode === null) targetNode = root;
		if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;
		var targetParentNode = (targetNode.parentTId ? targetNode.getParentNode() : root);

		if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {
			moveType = consts.move.TYPE_INNER;
		}

		if (moveType == consts.move.TYPE_INNER) {
			if (targetNodeIsRoot) {
				//根节点的父TId是 null
				node.parentTId = null;
			} else {
				if (!targetNode.isParent) {
					targetNode.isParent = true;
					targetNode.open = !!targetNode.open;
					$.tree._setNodeLineIcos(setting, targetNode);
				}
				node.parentTId = targetNode.tId;
			}
		}

		//移动节点 Dom元素
		var targetObj, target_ulObj;
		if (targetNodeIsRoot) {
			targetObj = setting.treeObj;
			target_ulObj = targetObj;
		} else {
			if (!isSilent && moveType == consts.move.TYPE_INNER) {
				$.tree._expandCollapseNode(setting, targetNode, true, false);
			} else if (!isSilent) {
				$.tree._expandCollapseNode(setting, targetNode.getParentNode(), true, false);
			}
			targetObj = $$(targetNode, setting);
			target_ulObj = $$(targetNode, consts.id.UL, setting);
			if (!!targetObj.get(0) && !target_ulObj.get(0)) {
				var ulstr = [];
				$.tree._makeUlHtml(setting, targetNode, ulstr, '');
				targetObj.append(ulstr.join(''));
			}
			target_ulObj = $$(targetNode, consts.id.UL, setting);
		}
		var nodeDom = $$(node, setting);
		if (!nodeDom.get(0)) {
			nodeDom = $.tree._appendNodes(setting, node.level, [node], null, false, true).join('');
		} else if (!targetObj.get(0)) {
			nodeDom.remove();
		}
		if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {
			target_ulObj.append(nodeDom);
		} else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {
			targetObj.before(nodeDom);
		} else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {
			targetObj.after(nodeDom);
		}

		//移动节点后，更新相关节点的数据
		var i,l,
		tmpSrcIndex = -1,
		tmpTargetIndex = 0,
		oldNeighbor = null,
		newNeighbor = null,
		oldLevel = node.level;
		if (node.isFirstNode) {
			tmpSrcIndex = 0;
			if (oldParentNode[childKey].length > 1 ) {
				oldNeighbor = oldParentNode[childKey][1];
				oldNeighbor.isFirstNode = true;
			}
		} else if (node.isLastNode) {
			tmpSrcIndex = oldParentNode[childKey].length -1;
			oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];
			oldNeighbor.isLastNode = true;
		} else {
			for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {
				if (oldParentNode[childKey][i].tId == node.tId) {
					tmpSrcIndex = i;
					break;
				}
			}
		}
		if (tmpSrcIndex >= 0) {
			oldParentNode[childKey].splice(tmpSrcIndex, 1);
		}
		if (moveType != consts.move.TYPE_INNER) {
			for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {
				if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;
			}
		}
		if (moveType == consts.move.TYPE_INNER) {
			if (!targetNode[childKey]) targetNode[childKey] = new Array();
			if (targetNode[childKey].length > 0) {
				newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];
				newNeighbor.isLastNode = false;
			}
			targetNode[childKey].splice(targetNode[childKey].length, 0, node);
			node.isLastNode = true;
			node.isFirstNode = (targetNode[childKey].length == 1);
		} else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {
			targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
			newNeighbor = targetNode;
			newNeighbor.isFirstNode = false;
			node.parentTId = targetNode.parentTId;
			node.isFirstNode = true;
			node.isLastNode = false;

		} else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {
			targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
			newNeighbor = targetNode;
			newNeighbor.isLastNode = false;
			node.parentTId = targetNode.parentTId;
			node.isFirstNode = false;
			node.isLastNode = true;

		} else {
			if (moveType == consts.move.TYPE_PREV) {
				targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
			} else {
				targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
			}
			node.parentTId = targetNode.parentTId;
			node.isFirstNode = false;
			node.isLastNode = false;
		}
		$.tree._fixPIdKeyValue(setting, node);
		$.tree._setSonNodeLevel(setting, node.getParentNode(), node);

		//更新被移动的节点数据
		$.tree._setNodeLineIcos(setting, node);
		$.tree._repairNodeLevelClass(setting, node, oldLevel)

		//更新被移动节点的原来父节点的 dom 元素
		if (!setting.keepParent && oldParentNode[childKey].length < 1) {
			//如果原来的父节点没有子节点元素
			oldParentNode.isParent = false;
			oldParentNode.open = false;
			var tmp_ulObj = $$(oldParentNode, consts.id.UL, setting),
			tmp_switchObj = $$(oldParentNode, consts.id.SWITCH, setting),
			tmp_icoObj = $$(oldParentNode, consts.id.ICON, setting);
			$.tree._replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);
			$.tree._replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);
			tmp_ulObj.css("display", "none");

		} else if (oldNeighbor) {
			//原来的相邻节点
			$.tree._setNodeLineIcos(setting, oldNeighbor);
		}

		//新的相邻节点
		if (newNeighbor) {
			$.tree._setNodeLineIcos(setting, newNeighbor);
		}

		//移动后更新 checkbox / radio
		if (!!setting.check && setting.checkable && $.tree._repairChkClass) {
			$.tree._repairChkClass(setting, oldParentNode);
			$.tree._repairParentChkClassWithSelf(setting, oldParentNode);
			if (oldParentNode != node.parent)
				$.tree._repairParentChkClassWithSelf(setting, node);
		}

		//移动后展开父节点
		if (!isSilent) {
			$.tree._expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);
		}
	},
	_removeChildNodes: function(setting, node) {
		if (!node) return;
		var childKey = setting.keyChildren,
		nodes = node[childKey];
		if (!nodes) return;

		for (var i = 0, l = nodes.length; i < l; i++) {
			$.tree._removeNodeCache(setting, nodes[i]);
		}
		$.tree._removeSelectedNode(setting);
		delete node[childKey];

		if (!setting.keepParent) {
			node.isParent = false;
			node.open = false;
			var tmp_switchObj = $$(node, consts.id.SWITCH, setting),
			tmp_icoObj = $$(node, consts.id.ICON, setting);
			$.tree._replaceSwitchClass(node, tmp_switchObj, consts.folder.DOCU);
			$.tree._replaceIcoClass(node, tmp_icoObj, consts.folder.DOCU);
			$$(node, consts.id.UL, setting).remove();
		} else {
			$$(node, consts.id.UL, setting).empty();
		}
	},
	// lihaibo add
	_showNode: function(setting, node, options) {
		node.hidden = false;
		$.tree._initShowForExCheck(setting, node);
		$$(node, setting).show();
		
		if ( typeof options !== "undefined" && typeof options.showParents !== "undefined" && options.showParents && null !== node.getParentNode() ) {
			$.tree._showNode (setting, node.getParentNode(), options);
		}
	},
	_initShowForExCheck: function(setting, n) {
		if (!n.hidden && setting.checkable) {
			if(typeof n._nocheck != "undefined") {
				n.nocheck = n._nocheck;
				delete n._nocheck;
			}
			if ($.tree._setChkClass) {
				var checkObj = $$(n, consts.id.CHECK, setting);
				$.tree._setChkClass(setting, checkObj, n);
			}
			if ($.tree._repairParentChkClassWithSelf) {
				$.tree._repairParentChkClassWithSelf(setting, n);
			}
		}
	},
	_showNodes: function(setting, nodes, options) {
		if (!nodes || nodes.length == 0) {
			return;
		}
		var pList = {}, i, j;
		for (i=0, j=nodes.length; i<j; i++) {
			var n = nodes[i];
			if (!pList[n.parentTId]) {
				var pn = n.getParentNode();
				pList[n.parentTId] = (pn === null) ? $.tree._getRoot(setting) : n.getParentNode();
			}
			$.tree._showNode(setting, n, options);
		}
		for (var tId in pList) {
			var children = pList[tId][setting.keyChildren];
			$.tree._setFirstNodeForShow(setting, children);
			$.tree._setLastNodeForShow(setting, children);
		}
	},
	_setFirstNodeForShow: function(setting, nodes) {
		var n,i,j, first, old;
		for(i=0, j=nodes.length; i<j; i++) {
			n = nodes[i];
			if (!first && !n.hidden && n.isFirstNode) {
				first = n;
				break;
			} else if (!first && !n.hidden && !n.isFirstNode) {
				n.isFirstNode = true;
				first = n;
				$.tree._setNodeLineIcos(setting, n);
			} else if (first && n.isFirstNode) {
				n.isFirstNode = false;
				old = n;
				$.tree._setNodeLineIcos(setting, n);
				break;
			} else {
				n = null;
			}
		}
		return {"new":first, "old":old};
	},
	_setLastNodeForShow: function(setting, nodes) {
		var n,i,j, last, old;
		for (i=nodes.length-1; i>=0; i--) {
			n = nodes[i];
			if (!last && !n.hidden && n.isLastNode) {
				last = n;
				break;
			} else if (!last && !n.hidden && !n.isLastNode) {
				n.isLastNode = true;
				last = n;
				$.tree._setNodeLineIcos(setting, n);
			} else if (last && n.isLastNode) {
				n.isLastNode = false;
				old = n;
				$.tree._setNodeLineIcos(setting, n);
				break;
			} else {
				n = null;
			}
		}
		return {"new":last, "old":old};
	},
	_hideNode: function(setting, node, options) {
		node.hidden = true;
		node.isFirstNode = false;
		node.isLastNode = false;
		$.tree._initHideForExCheck(setting, node);
		$.tree._cancelPreSelectedNode(setting, node);
		$$(node, setting).hide();
	},
	_initHideForExCheck: function(setting, n) {
		if (n.hidden && setting.checkable) {
			if(typeof n._nocheck == "undefined") {
				n._nocheck = !!n.nocheck
				n.nocheck = true;
			}
			n.check_Child_State = -1;
			if ($.tree._repairParentChkClassWithSelf) {
				$.tree._repairParentChkClassWithSelf(setting, n);
			}
		}
	},
	_hideNodes: function(setting, nodes, options) {
		if (!nodes || nodes.length == 0) {
			return;
		}
		var pList = {}, i, j;
		for (i=0, j=nodes.length; i<j; i++) {
			var n = nodes[i];
			if ((n.isFirstNode || n.isLastNode) && !pList[n.parentTId]) {
				var pn = n.getParentNode();
				pList[n.parentTId] = (pn === null) ? $.tree._getRoot(setting) : n.getParentNode();
			}
			$.tree._hideNode(setting, n, options);
		}
		for (var tId in pList) {
			var children = pList[tId][setting.keyChildren];
			$.tree._setFirstNodeForHide(setting, children);
			$.tree._setLastNodeForHide(setting, children);
		}
	},
	_setFirstNodeForHide: function(setting, nodes) {
		var n,i,j;
		for (i=0, j=nodes.length; i<j; i++) {
			n = nodes[i];
			if (n.isFirstNode) {
				break;
			}
			if (!n.hidden && !n.isFirstNode) {
				n.isFirstNode = true;
				$.tree._setNodeLineIcos(setting, n);
				break;
			} else {
				n = null;
			}
		}
		return n;
	},
	_setLastNodeForHide: function(setting, nodes) {
		var n,i;
		for (i=nodes.length-1; i>=0; i--) {
			n = nodes[i];
			if (n.isLastNode) {
				break;
			}
			if (!n.hidden && !n.isLastNode) {
				n.isLastNode = true;
				$.tree._setNodeLineIcos(setting, n);
				break;
			} else {
				n = null;
			}
		}
		return n;
	},
	// lihaibo add end
	_setFirstNode: function(setting, parentNode) {
		var childKey = setting.keyChildren, childLength = parentNode[childKey].length;
		if ( childLength > 0) {
			parentNode[childKey][0].isFirstNode = true;
		}
	},
	_setLastNode: function(setting, parentNode) {
		var childKey = setting.keyChildren, childLength = parentNode[childKey].length;
		if ( childLength > 0) {
			parentNode[childKey][childLength - 1].isLastNode = true;
		}
	},
	_removeNode: function(setting, node) {
		var root = $.tree._getRoot(setting),
		childKey = setting.keyChildren,
		parentNode = (node.parentTId) ? node.getParentNode() : root;

		node.isFirstNode = false;
		node.isLastNode = false;
		node.getPreNode = function() {return null;};
		node.getNextNode = function() {return null;};

		if (!$.tree._getNodeCache(setting, node.tId)) {
			return;
		}

		$$(node, setting).remove();
		$.tree._removeNodeCache(setting, node);
		$.tree._removeSelectedNode(setting, node);

		for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
			if (parentNode[childKey][i].tId == node.tId) {
				parentNode[childKey].splice(i, 1);
				break;
			}
		}
		$.tree._setFirstNode(setting, parentNode);
		$.tree._setLastNode(setting, parentNode);

		var tmp_ulObj,tmp_switchObj,tmp_icoObj,
		childLength = parentNode[childKey].length;

		//删除节点后更新原来的父节点
		if (!setting.keepParent && childLength == 0) {
			//如果原来的父节点没有子节点
			parentNode.isParent = false;
			parentNode.open = false;
			tmp_ulObj = $$(parentNode, consts.id.UL, setting);
			tmp_switchObj = $$(parentNode, consts.id.SWITCH, setting);
			tmp_icoObj = $$(parentNode, consts.id.ICON, setting);
			$.tree._replaceSwitchClass(parentNode, tmp_switchObj, consts.folder.DOCU);
			$.tree._replaceIcoClass(parentNode, tmp_icoObj, consts.folder.DOCU);
			tmp_ulObj.css("display", "none");

		} else if (setting.showLine && childLength > 0) {
			//如果原来的父节点有子节点
			var newLast = parentNode[childKey][childLength - 1];
			tmp_ulObj = $$(newLast, consts.id.UL, setting);
			tmp_switchObj = $$(newLast, consts.id.SWITCH, setting);
			tmp_icoObj = $$(newLast, consts.id.ICON, setting);
			if (parentNode == root) {
				if (parentNode[childKey].length == 1) {
					//如果移除的是树的根节点，并且该树只有这一个根节点时
					$.tree._replaceSwitchClass(newLast, tmp_switchObj, consts.line.ROOT);
				} else {
					var tmp_first_switchObj = $$(parentNode[childKey][0], consts.id.SWITCH, setting);
					$.tree._replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, consts.line.ROOTS);
					$.tree._replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
				}
			} else {
				$.tree._replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
			}
			tmp_ulObj.removeClass(consts.line.LINE);
		}
	},
	_replaceIcoClass: function(node, obj, newName) {
		if (!obj || node.isAjaxing) return;
		var tmpName = obj.attr("class");
		if (tmpName == undefined) return;
		var tmpList = tmpName.split("_");
		switch (newName) {
			case consts.folder.OPEN:
			case consts.folder.CLOSE:
			case consts.folder.DOCU:
				tmpList[tmpList.length-1] = newName;
				break;
		}
		obj.attr("class", tmpList.join("_"));
	},
	_replaceSwitchClass: function(node, obj, newName) {
		if (!obj) return;
		var tmpName = obj.attr("class");
		if (tmpName == undefined) return;
		var tmpList = tmpName.split("_");
		switch (newName) {
			case consts.line.ROOT:
			case consts.line.ROOTS:
			case consts.line.CENTER:
			case consts.line.BOTTOM:
			case consts.line.NOLINE:
				tmpList[0] = $.tree._makeNodeLineClassEx(node) + newName;
				break;
			case consts.folder.OPEN:
			case consts.folder.CLOSE:
			case consts.folder.DOCU:
				tmpList[1] = newName;
				break;
		}
		obj.attr("class", tmpList.join("_"));
		if (newName !== consts.folder.DOCU) {
			obj.removeAttr("disabled");
		} else {
			obj.attr("disabled", "disabled");
		}
	},
	
	_repairAllChk: function(setting, checked) {
		if (setting.checkable && setting.chkStyle === consts.checkbox.STYLE) {
			var checkedKey = setting.keyChecked,
			childKey = setting.keyChildren,
			root = $.tree._getRoot(setting);
			for (var i = 0, l = root[childKey].length; i<l ; i++) {
				var node = root[childKey][i];
				if (node.nocheck !== true && node.chkDisabled !== true) {
					node[checkedKey] = checked;
				}
				$.tree._setSonNodeCheckBox(setting, node, checked);
			}
		}
	},
	_repairChkClass: function(setting, node) {
		if (!node) return;
		$.tree._makeChkFlag(setting, node);
		if (node.nocheck !== true) {
			var checkObj = $$(node, consts.id.CHECK, setting);
			$.tree._setChkClass(setting, checkObj, node);
		}
	},
	_repairParentChkClass: function(setting, node) {
		if (!node || !node.parentTId) return;
		var pNode = node.getParentNode();
		$.tree._repairChkClass(setting, pNode);
		$.tree._repairParentChkClass(setting, pNode);
	},
	_repairParentChkClassWithSelf: function(setting, node) {
		if (!node) return;
		var childKey = setting.keyChildren;
		if (node[childKey] && node[childKey].length > 0) {
			$.tree._repairParentChkClass(setting, node[childKey][0]);
		} else {
			$.tree._repairParentChkClass(setting, node);
		}
	},
	_repairSonChkDisabled: function(setting, node, chkDisabled, inherit) {
		if (!node) return;
		var childKey = setting.keyChildren;
		if (node.chkDisabled != chkDisabled) {
			node.chkDisabled = chkDisabled;
		}
		$.tree._repairChkClass(setting, node);
		if (node[childKey] && inherit) {
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				var sNode = node[childKey][i];
				$.tree._repairSonChkDisabled(setting, sNode, chkDisabled, inherit);
			}
		}
	},
	_repairParentChkDisabled: function(setting, node, chkDisabled, inherit) {
		if (!node) return;
		if (node.chkDisabled != chkDisabled && inherit) {
			node.chkDisabled = chkDisabled;
		}
		$.tree._repairChkClass(setting, node);
		$.tree._repairParentChkDisabled(setting, node.getParentNode(), chkDisabled, inherit);
	},
	
	_selectNode: function(setting, node, addFlag) {
		if (!addFlag) {
			$.tree._cancelPreSelectedNode(setting);
		}
		$$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED);
		$.tree._addSelectedNode(setting, node);
	},
	_setNodeFontCss: function(setting, treeNode) {
		var aObj = $$(treeNode, consts.id.A, setting),
		fontCss = $.tree._makeNodeFontCss(setting, treeNode);
		if (fontCss) {
			aObj.css(fontCss);
		}
	},
	_setNodeLineIcos: function(setting, node) {
		if (!node) return;
		var switchObj = $$(node, consts.id.SWITCH, setting),
		ulObj = $$(node, consts.id.UL, setting),
		icoObj = $$(node, consts.id.ICON, setting),
		ulLine = $.tree._makeUlLineClass(setting, node);
		if (ulLine.length==0) {
			ulObj.removeClass(consts.line.LINE);
		} else {
			ulObj.addClass(ulLine);
		}
		switchObj.attr("class", $.tree._makeNodeLineClass(setting, node));
		if (node.isParent) {
			switchObj.removeAttr("disabled");
		} else {
			switchObj.attr("disabled", "disabled");
		}
		icoObj.removeAttr("style");
		icoObj.attr("style", $.tree._makeNodeIcoStyle(setting, node));
		icoObj.attr("class", $.tree._makeNodeIcoClass(setting, node));
	},
	_setNodeName: function(setting, node) {
		var title = $.tree._getNodeTitle(setting, node),
		nObj = $$(node, consts.id.SPAN, setting);
		nObj.empty();
		var names = "";
		if ( setting.formatter ) {
			names = $.tree._apply(setting.formatter,[setting,node],setting.formatter);
		} else {
			names = $.tree._getNodeName(setting, node);
		}
		if (setting.nameIsHTML) {
			nObj.html(names);
		} else {
			nObj.text(names);
		}
		if ($.tree._apply(setting.showTitle, [setting.treeId, node], setting.showTitle)) {
			var aObj = $$(node, consts.id.A, setting);
			aObj.attr("title", !title ? "" : title);
		}
	},
	_setNodeTarget: function(setting, node) {
		var aObj = $$(node, consts.id.A, setting);
		aObj.attr("target", $.tree._makeNodeTarget(node));
	},
	_setNodeUrl: function(setting, node) {
		var aObj = $$(node, consts.id.A, setting),
		url = $.tree._makeNodeUrl(setting, node);
		if (url == null || url.length == 0) {
			aObj.removeAttr("href");
		} else {
			aObj.attr("href", url);
		}
	},
	_switchNode: function(setting, node) {
		if (node.open || !$.tree._canAsync(setting, node)) {
			$.tree._expandCollapseNode(setting, node, !node.open);
		} else if (setting.asyncEnable) {
			if (!$.tree._asyncNode(setting, node)) {
				$.tree._expandCollapseNode(setting, node, !node.open);
				return;
			}
		} else if (node) {
			$.tree._expandCollapseNode(setting, node, !node.open);
		}
	},
	



	_setChkClass: function(setting, obj, node) {
		if (!obj) return;
		if (node.nocheck === true) {
			obj.hide();
		} else {
			obj.show();
		}
        obj.attr('class', $.tree._makeChkClass(setting, node));
	},
	_setParentNodeCheckBox: function(setting, node, value, srcNode) {
		var childKey = setting.keyChildren,
		checkedKey = setting.keyChecked,
		checkObj = $$(node, consts.id.CHECK, setting);
		if (!srcNode) srcNode = node;
		$.tree._makeChkFlag(setting, node);
		if (node.nocheck !== true && node.chkDisabled !== true) {
			node[checkedKey] = value;
			$.tree._setChkClass(setting, checkObj, node);
			if (setting.autoCheckTrigger && node != srcNode) {
				setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
			}
		}
		if (node.parentTId) {
			var pSign = true;
			if (!value) {
				var pNodes = node.getParentNode()[childKey];
				for (var i = 0, l = pNodes.length; i < l; i++) {
					if ((pNodes[i].nocheck !== true && pNodes[i].chkDisabled !== true && pNodes[i][checkedKey])
					|| ((pNodes[i].nocheck === true || pNodes[i].chkDisabled === true) && pNodes[i].check_Child_State > 0)) {
						pSign = false;
						break;
					}
				}
			}
			if (pSign) {
				$.tree._setParentNodeCheckBox(setting, node.getParentNode(), value, srcNode);
			}
		}
	},
	_setSonNodeCheckBox: function(setting, node, value, srcNode) {
		if (!node) return;
		var childKey = setting.keyChildren,
		checkedKey = setting.keyChecked,
		checkObj = $$(node, consts.id.CHECK, setting);
		if (!srcNode) srcNode = node;

		var hasDisable = false;
		if (node[childKey]) {
			for (var i = 0, l = node[childKey].length; i < l && node.chkDisabled !== true; i++) {
				var sNode = node[childKey][i];
				$.tree._setSonNodeCheckBox(setting, sNode, value, srcNode);
				if (sNode.chkDisabled === true) hasDisable = true;
			}
		}

		if (node != $.tree._getRoot(setting) && node.chkDisabled !== true) {
			if (hasDisable && node.nocheck !== true) {
				$.tree._makeChkFlag(setting, node);
			}
			if (node.nocheck !== true && node.chkDisabled !== true) {
				node[checkedKey] = value;
				if (!hasDisable) node.check_Child_State = (node[childKey] && node[childKey].length > 0) ? (value ? 2 : 0) : -1;
			} else {
				node.check_Child_State = -1;
			}
			$.tree._setChkClass(setting, checkObj, node);
			if (setting.autoCheckTrigger && node != srcNode && node.nocheck !== true && node.chkDisabled !== true) {
				setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
			}
		}

	},



	_removeEditBtn: function(setting, node) {
		$$(node, consts.id.EDIT, setting).unbind().remove();
	},
	_removeRemoveBtn: function(setting, node) {
		$$(node, consts.id.REMOVE, setting).unbind().remove();
	},
	_removeTreeDom: function(setting, node) {
		node.isHover = false;
		$.tree._removeEditBtn(setting, node);
		$.tree._removeRemoveBtn(setting, node);
		$.tree._apply(setting.removeHoverDom, [setting.treeId, node]);
	},
	_repairNodeLevelClass: function(setting, node, oldLevel) {
		if (oldLevel === node.level) return;
		var liObj = $$(node, setting),
		aObj = $$(node, consts.id.A, setting),
		ulObj = $$(node, consts.id.UL, setting),
		oldClass = consts.className.LEVEL + oldLevel,
		newClass = consts.className.LEVEL + node.level;
		liObj.removeClass(oldClass);
		liObj.addClass(newClass);
		aObj.removeClass(oldClass);
		aObj.addClass(newClass);
		ulObj.removeClass(oldClass);
		ulObj.addClass(newClass);
	},
	_selectNodes : function(setting, nodes) {
		for (var i=0, l=nodes.length; i<l; i++) {
			$.tree._selectNode(setting, nodes[i], i>0);
		}
	}
};		
	
var settings = {}, roots = {}, caches = {},
_init = {
	bind: [$.tree._coreBindEvent,$.tree._checkBindEvent,$.tree._editBindEvent],
	unbind: [$.tree._coreUnbindEvent,$.tree._checkUnbindEvent,$.tree._editUnbindEvent],
	caches: [$.tree._coreInitCache,$.tree._checkInitCache,$.tree._editInitCache],
	nodes: [$.tree._coreInitNode,$.tree._checkInitNode,$.tree._editInitNode],
	proxys: [$.tree._checkEventProxy,$.tree._coreEventProxy,$.tree._editEventProxy],
	roots: [$.tree._coreInitRoot,$.tree._checkInitRoot,$.tree._editInitRoot],
	beforeA: [$.tree._beforeA],
	afterA: [],
	innerBeforeA: [],
	innerAfterA: [],
	treeTools: [$.tree._checkTreeTools,$.tree._editTreeTools]
};
//定义树，并提供常用方法
$.coral.tree = {
	//lihaibo add begin
	componentName: "tree",
	//lihaibo add end
	consts : _final,
	//根据 treeId 获取 Tree 对象的方法
	getTreeObj: function(treeId) {
		var o = $.tree._getTreeTools(treeId);
		return o ? o : null;
	},
	//销毁 Tree 的方法
	destroy: function(treeId) {
		if (!!treeId && treeId.length > 0) {
			$.tree._destroy($.tree._getSetting(treeId));
		} else {
			for(var s in settings) {
				$.tree._destroy(settings[s]);
			}
		}
	},
	//Tree 初始化方法，创建 Tree 必须使用此方法
	init: function(obj, optionData, nodeData) {
		//添加tree组件样式
		if(!obj.hasClass("coral-tree")) obj.addClass("coral-tree");
		if ( optionData.clickExpand ){
			_option.clickExpand = true;
			_option.dblClickExpand = false;
		}
		var setting = $.tree._clone(_option);
		//兼容 “事件大小写” 写法 
		/*if($.migrate && optionData && $.migrate[this.componentName]) {
			optionData = $.extend(true, {}, optionData, $.migrate[this.componentName](optionData));
		}*/
		$.extend(true, setting, optionData);
		setting.treeId = $(obj).uniqueId().attr("id");
		setting.treeObj = obj;
		setting.treeObj.empty();
		settings[setting.treeId] = setting;
		
		if ( setting.cls ){
			$( obj ).addClass( setting.cls );
		}
		if ( setting.componentCls ){
			$( obj ).addClass( setting.componentCls );
		}
		//For some older browser,(e.g., ie6)
		if(typeof document.body.style.maxHeight === "undefined") {
			setting.expandSpeed = "";
		}
		$.tree._initRoot(setting);
		var root = $.tree._getRoot(setting),
		childKey = setting.keyChildren;
		nodeData = nodeData ? $.tree._clone($.tree._isArray(nodeData)? nodeData : [nodeData]) : [];
		nodeData = $.tree._createRootNodes(setting, nodeData );
		if (setting.simpleDataEnable) {
			root[childKey] = $.tree._transformToTreeFormat(setting, nodeData);
		} else {
			root[childKey] = nodeData;
		}
		$.tree._initCache(setting);
		$.tree._unbindTree(setting);
		$.tree._bindTree(setting);
		$.tree._unbindEvent(setting);
		$.tree._bindEvent(setting);

		var treeTools = {
			// setting 配置数据
			setting: setting,
			option: function( key, value ) {
				var options = key,
					parts,
					curOption,
					i;

				if ( arguments.length === 0 ) {
					// TODO: check the options is reference
					// don't return a reference to the internal hash
					return $.extend( {}, treeTools.setting );
				}

				if ( typeof key === "string" ) {
					// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
					options = {};
					parts = key.split( "." );
					key = parts.shift();
					if ( parts.length ) {
						curOption = options[ key ] = $.extend( {}, treeTools.setting[ key ] );
						for ( i = 0; i < parts.length - 1; i++ ) {
							curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
							curOption = curOption[ parts[ i ] ];
						}
						key = parts.pop();
						if ( arguments.length === 1 ) {
							return curOption[ key ] === undefined ? null : curOption[ key ];
						}
						curOption[ key ] = value;
					} else {
						if ( arguments.length === 1 ) {
							return treeTools.setting[ key ] === undefined ? null : treeTools.setting[ key ];
						}
						options[ key ] = value;
					}
				}
				
				

				this._setOptions( options );

				return this;
			},
			_setOptions: function( options ) {
				var key;

				for ( key in options ) {
					this._setOption( key, options[ key ] );
				}

				return this;
			},
			_setOption: function( key, value ) {
				treeTools.setting[ key ] = value;
				if ( key === "disabled" ) {
					if ( value ) {
						$("#"+setting.treeId).prepend("<div class='coral-state-disabled tree-disabled'></div>");
					}else{
						$("#"+setting.treeId+" .tree-disabled").remove();
					}
				}
				return this;
			},
			disable: function(){
				return treeTools._setOptions({ disabled: true });
			},
			enable: function(){
				return treeTools._setOptions({ disabled: false });
			},
			//添加节点
			addNodes: function(parentNode, newNodes, isSilent) {
				if (!newNodes) return null;
				if (!parentNode) parentNode = null;
				if (parentNode && !parentNode.isParent && setting.keepLeaf) return null;
				var xNewNodes = $.tree._clone($.tree._isArray(newNodes)? newNodes: [newNodes]);
				function addCallback() {
					$.tree._addNodes(setting, parentNode, xNewNodes, (isSilent==true));
				}

				if ($.tree._canAsync(setting, parentNode)) {
					$.tree._asyncNode(setting, parentNode, isSilent, addCallback);
				} else {
					addCallback();
				}
				return xNewNodes;
			},
			//取消节点的选中状态
			cancelSelectedNode: function(node) {
				$.tree._cancelPreSelectedNode(setting, node);
			},
			//销毁 Tree 的方法
			destroy: function() {
				$.tree._destroy(setting);
			},
			
			//展开 / 折叠 全部节点
			expandAll: function(expandFlag) {
				expandFlag = !!expandFlag;
				$.tree._expandCollapseSonNode(setting, null, expandFlag, true);
				return expandFlag;
			},
			//展开 / 折叠 指定的节点
			expandNode: function(node, expandFlag, sonSign, focus, callbackFlag) {
				if (!node || !node.isParent) return null;
				if (expandFlag !== true && expandFlag !== false) {
					expandFlag = !node.open;
				}
				callbackFlag = !!callbackFlag;

				if (callbackFlag && expandFlag && ($.tree._apply(setting.beforeExpand, [setting.treeId, node], true) == false)) {
					return null;
				} else if (callbackFlag && !expandFlag && ($.tree._apply(setting.beforeCollapse, [setting.treeId, node], true) == false)) {
					return null;
				}
				if (expandFlag && node.parentTId) {
					$.tree._expandCollapseParentNode(setting, node.getParentNode(), expandFlag, false);
				}
				if (expandFlag === node.open && !sonSign) {
					return null;
				}

				$.tree._getRoot(setting).expandTriggerFlag = callbackFlag;
				if (!$.tree._canAsync(setting, node) && sonSign) {
					$.tree._expandCollapseSonNode(setting, node, expandFlag, true, function() {
						if (focus !== false) {try{$$(node, setting).focus().blur();}catch(e){}}
					});
				} else {
					node.open = !expandFlag;
					$.tree._switchNode(this.setting, node);
					if (focus !== false) {try{$$(node, setting).focus().blur();}catch(e){}}
				}
				return expandFlag;
			},
			//获取 Tree 的全部节点数据
			getNodes: function() {
				return $.tree._getNodes(setting);
			},
			//根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象
			getNodeByParam: function(key, value, parentNode) {
				if (!key) return null;
				return $.tree._getNodeByParam(setting, parentNode?parentNode[setting.keyChildren]:$.tree._getNodes(setting), key, value);
			},
			//根据 Tree 的唯一标识 tId 快速获取节点 JSON 数据对象
			getNodeByTId: function(tId) {
				return $.tree._getNodeCache(setting, tId);
			},
			//根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象集合
			getNodesByParam: function(key, value, parentNode) {
				if (!key) return null;
				return $.tree._getNodesByParam(setting, parentNode?parentNode[setting.keyChildren]:$.tree._getNodes(setting), key, value);
			},
			//根据节点数据的属性搜索，获取条件模糊匹配的节点数据 JSON 对象集合
			getNodesByParamFuzzy: function(key, value, parentNode) {
				if (!key) return null;
				return $.tree._getNodesByParamFuzzy(setting, parentNode?parentNode[setting.keyChildren]:$.tree._getNodes(setting), key, value);
			},
			//根据自定义规则搜索节点数据 JSON 对象集合 或 单个节点数据
			getNodesByFilter: function(filter, isSingle, parentNode, invokeParam) {
				isSingle = !!isSingle;
				if (!filter || (typeof filter != "function")) return (isSingle ? null : []);
				return $.tree._getNodesByFilter(setting, parentNode?parentNode[setting.keyChildren]:$.tree._getNodes(setting), filter, isSingle, invokeParam);
			},
			//获取某节点在同级节点中的序号（从0开始）
			getNodeIndex: function(node) {
				if (!node) return null;
				var childKey = setting.keyChildren,
				parentNode = (node.parentTId) ? node.getParentNode() : $.tree._getRoot(setting);
				for (var i=0, l = parentNode[childKey].length; i < l; i++) {
					if (parentNode[childKey][i] == node) return i;
				}
				return -1;
			},
			//获取 Tree 当前被选中的节点数据集合
			getSelectedNodes: function() {
				var r = [], list = $.tree._getRoot(setting).curSelectedList;
				for (var i=0, l=list.length; i<l; i++) {
					r.push(list[i]);
				}
				return r;
			},
			//是否选中节点
			isSelectedNode: function(node) {
				return $.tree._isSelectedNode(setting, node);
			},
			//强行异步加载父节点的子节点
			reAsyncChildNodes: function(parentNode, reloadType, isSilent, opts) {
				if (!this.setting.asyncEnable) return;
				var isRoot = !parentNode;
				if (isRoot) {
					parentNode = $.tree._getRoot(setting);
				}
				if (reloadType=="refresh") {
					var childKey = this.setting.keyChildren;
					for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {
						$.tree._removeNodeCache(setting, parentNode[childKey][i]);
					}
					$.tree._removeSelectedNode(setting);
					parentNode[childKey] = [];
					if (isRoot) {
						this.setting.treeObj.empty();
					} else {
						var ulObj = $$(parentNode, consts.id.UL, setting);
						ulObj.empty();
					}
				}
				$.tree._asyncNode(this.setting, isRoot? null:parentNode, !!isSilent, null, opts);
			},
			// 是reAsyncChildNodes的数组reload版
			reLoadChildNodes: function(parentNode, reloadType, isSilent, newNodes) {
				//if (this.setting.asyncEnable) return;
				var isRoot = !parentNode;
				if (isRoot) {
					parentNode = $.tree._getRoot(setting);
				}
				if (reloadType=="refresh") {
					var childKey = this.setting.keyChildren;
					for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {
						$.tree._removeNodeCache(setting, parentNode[childKey][i]);
					}
					$.tree._removeSelectedNode(setting);
					parentNode[childKey] = [];
					if (isRoot) {
						this.setting.treeObj.empty();
					} else {
						var ulObj = $$(parentNode, consts.id.UL, setting);
						ulObj.empty();
					}
				}
				if ( this.setting.isInit ){
					newNodes = $.tree._createRootNodes(this.setting,newNodes);
				}
				treeTools.addNodes(isRoot? null:parentNode, newNodes, !!isSilent);
			},
			//刷新 Tree 
			refresh: function() {
				this.setting.treeObj.empty();
				var root = $.tree._getRoot(setting),
				nodes = root[setting.keyChildren]
				$.tree._initRoot(setting);
				root[setting.keyChildren] = nodes
				$.tree._initCache(setting);
				$.tree._createNodes(setting, 0, root[setting.keyChildren]);
			},
			/**
			 * 重载 Tree，支持数组
			 * 
			 * url不能传进来，因为如果是异步树，点击节点的时候则会请求之前的url
			 */
			reload: function(opts) {
				this.setting.isInit = true;
				if(opts){// 有参数的时候
					opts = opts || {};
					var that = this,
						nodes = [], 
						isUrl = false;
					if ( typeof( opts ) !== "string" ) {
						// 传过来的是object，需要区别是data还是options
						// 如果是options，可能是options.data或者options.url ，否则才为data
						if ( opts.data ) { //传进来的是options对象
							nodes = opts.data;
						} else {
							if(opts instanceof Array){
								nodes = opts;
							} else {
								if ( opts.asyncUrl ) {
									this.setting.asyncUrl = opts.asyncUrl;
								}
								isUrl = true;
							}
						}
					} else {
						isUrl = true;
						this.setting.asyncUrl = opts;
					}
					if ( isUrl && this.setting.asyncEnable) {
						treeTools.reAsyncChildNodes( null, "refresh", null, opts );
					} else {
						treeTools.reLoadChildNodes( null, "refresh", null, nodes );
						$.tree._apply(opts.onLoad, [null, this.setting.treeId]);
						if ( opts.onLoad ) {
							$.tree._apply( opts.onLoad, [setting.treeId, null, nodes]);
						} else {
							setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, null, nodes]);
						}
					}
				} else if ( this.setting.asyncEnable ){// 无参数的时候
					opts = opts || {};
					treeTools.reAsyncChildNodes( null, "refresh", null, opts );
				}
			},
			//清空某父节点的子节点
			removeChildNodes: function(node) {
				if (!node) return null;
				var childKey = setting.keyChildren,
				nodes = node[childKey];
				$.tree._removeChildNodes(setting, node);
				return nodes ? nodes : null;
			},	
			// 初始化搜索引擎，创建拼音搜索索引
			/**
			 * key 如： 
			 * dataArr 如： [{id:'1', name:'节点1'},{id:'2', name:'节点2'}]
			 */
			_pinyinEngine: function () {
				return new pinyinEngine();
			},
			_pinyinSetCache: function (engine, key, dataArr) {
				
				for (var i in dataArr) {
					// @param	{Array}	标签
					// @param	{Any}	被索引的内容
					engine.setCache ([dataArr[i][key]], dataArr[i]);
				}
				
				return engine;
			},
			_pinyinSearch: function (engine, keyword, callback) {
				var dataResult = [];
				
				engine.search (keyword, function (data) {
					dataResult.push (data);
				});
				
				callback (dataResult);
			},
			// lihaibo add  exhide.js
			/**
			 * keysObj ({id:testId, name:testName, ... })
			 */				
			filterNodesByParam:  function (keysObj) {
				var that = this,
					nodes = that.getNodes(),
					nodesArr = [],
					nodesFilter = [];
				
				that.expandAll (true);
				nodesArr = that.transformToArray (nodes);	
				var engine = that._pinyinEngine ();
					engine = that._pinyinSetCache (engine, "name", nodesArr);						
				that.hideNodes (nodesArr);
				
				if ( typeof keysObj === "object" ) {
					$.each( keysObj, function (k, v) {
						//nodesFilter = nodesFilter.concat( that.getNodesByParamFuzzy (k, v) );
						if (k == "name") {
							that._pinyinSearch(engine, v, function (dataFilter) { that.showNodes (dataFilter, {showParents: true});	});
						}  
					});
				}
			},
			showNodes: function(nodes, options) {
				$.tree._showNodes(setting, nodes, options);
			},
			showNode: function(node, options) {
				if (!node) {
					return;
				}
				$.tree._showNodes(setting, [node], options);
			},
			hideNodes: function(nodes, options) {
				$.tree._hideNodes(setting, nodes, options);
			},
			hideNode: function(node, options) {
				if (!node) {
					return;
				}
				$.tree._hideNodes(setting, [node], options);
			},
			// lihaibo add end
			//删除节点
			removeNode: function(node, callbackFlag) {
				if (!node) return;
				callbackFlag = !!callbackFlag;
				if (callbackFlag && $.tree._apply(setting.beforeRemove, [setting.treeId, node], true) == false) return;
				$.tree._removeNode(setting, node);
				if (callbackFlag) {
					this.setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
				}
			},
			//选中指定节点
			selectNode: function(node, addFlag) {
				if (!node) return;
				if ($.tree._uCanDo(setting)) {
					addFlag = setting.selectedMulti && addFlag;
					if (node.parentTId) {
						$.tree._expandCollapseParentNode(setting, node.getParentNode(), true, false, function() {
							/*try{$$(node, setting).focus().blur();}catch(e){}*/
						});
					} else {
						/*try{$$(node, setting).focus().blur();}catch(e){}*/
					}
					$.tree._selectNode(setting, node, addFlag);
				}
			},
			//将简单 Array 格式数据转换为 Tree 使用的标准 JSON 嵌套数据格式
			transformToTreeNodes: function(simpleNodes) {
				return $.tree._transformToTreeFormat(setting, simpleNodes);
			},
			//将 Tree 使用的标准 JSON 嵌套格式的数据转换为简单 Array 格式
			transformToArray: function(nodes) {
				return $.tree._transformToArrayFormat(setting, nodes);
			},
			//更新某节点数据，主要用于该节点显示属性的更新
			updateNode : function(node, checkTypeFlag) {
				if (!node) return;
				var nObj = $$(node, setting);
				if (nObj.get(0) && $.tree._uCanDo(setting)) {
					$.tree._setNodeName(setting, node);
					$.tree._setNodeTarget(setting, node);
					$.tree._setNodeUrl(setting, node);
					$.tree._setNodeLineIcos(setting, node);
					$.tree._setNodeFontCss(setting, node);
				}
			}
		}
		root.treeTools = treeTools;
		$.tree._setTreeTools(setting, treeTools);
		if ( setting.disabled ){
			treeTools.disable();
		}else{
			treeTools.enable();
		}
		// // 20140108 lihaibo added
		setting.isInit = true;
		setting.dataLoaded = false;
		setting.rootReload = true;
		// // 20140108 lihaibo added
		if (root[childKey] && root[childKey].length > 0) {
			$.tree._createNodes(setting, 0, root[childKey]);
			setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, null, root[childKey]]);
		} else if (setting.asyncEnable && setting.asyncUrl && setting.asyncUrl !== '') {
			$.tree._asyncNode(setting);	
		}
		return treeTools;
	}
};

var coralTree = $.coral.tree,
$$ = $.tree._$,
consts = coralTree.consts;


// override 多选树复写部分普通树的方法
var _createNodes = $.tree._createNodes;
$.tree._createNodes = function(setting, level, nodes, parentNode) {
	if (_createNodes) _createNodes.apply($.tree, arguments);
	if (!nodes) return;
	//checkTree
	//$.tree._repairParentChkClassWithSelf(setting, parentNode);
	//editTree
	if ($.tree._repairParentChkClassWithSelf) {
		$.tree._repairParentChkClassWithSelf(setting, parentNode);
	}
}
var _removeNode = $.tree._removeNode;
$.tree._removeNode = function(setting, node) {
	var parentNode = node.getParentNode();
	if (_removeNode) _removeNode.apply($.tree, arguments);
	if (!node || !parentNode) return;
	$.tree._repairChkClass(setting, parentNode);
	$.tree._repairParentChkClass(setting, parentNode);
}

var _appendNodes = $.tree._appendNodes;
$.tree._appendNodes = function(setting, level, nodes, parentNode, initFlag, openFlag) {
	var html = "";
	if (_appendNodes) {
		html = _appendNodes.apply($.tree, arguments);
	}
	if (parentNode) {
		$.tree._makeChkFlag(setting, parentNode);
	}
	return html;
}

//override 可编辑树复写部分普通树的方法
var _cancelPreSelectedNode = $.tree._cancelPreSelectedNode;
$.tree._cancelPreSelectedNode = function (setting, node) {
	var list = $.tree._getRoot(setting).curSelectedList;
	for (var i=0, j=list.length; i<j; i++) {
		if (!node || node === list[i]) {
			$.tree._removeTreeDom(setting, list[i]);
			if (node) break;
		}
	}
	if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply($.tree, arguments);
}

var _makeNodeUrl = $.tree._makeNodeUrl;
$.tree._makeNodeUrl = function(setting, node) {
	return setting.editable ? null : (_makeNodeUrl.apply($.tree, arguments));
}

var _removeNode1 = $.tree._removeNode;
$.tree._removeNode = function(setting, node) {
	var root = $.tree._getRoot(setting);
	if (root.curEditNode === node) root.curEditNode = null;
	if (_removeNode1) {
		_removeNode1.apply($.tree, arguments);
	}
}

var _selectNode = $.tree._selectNode;
$.tree._selectNode = function(setting, node, addFlag) {
	var root = $.tree._getRoot(setting);
	if ($.tree._isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
		return false;
	}
	if (_selectNode) _selectNode.apply($.tree, arguments);
	$.tree._addHoverDom(setting, node);
	return true;
}

var _uCanDo = $.tree._uCanDo;
$.tree._uCanDo = function(setting, e) {
	var root = $.tree._getRoot(setting);
	if (e && ($.tree._eqs(e.type, "mouseover") || $.tree._eqs(e.type, "mouseout") || $.tree._eqs(e.type, "mousedown") || $.tree._eqs(e.type, "mouseup"))) {
		return true;
	}
	if (root.curEditNode) {
		$.tree._editNodeBlur = false;
		root.curEditInput.focus();
	}
	return (!root.curEditNode) && (_uCanDo ? _uCanDo.apply($.tree, arguments) : true);
}
/**
 * isMethodCall
 * arg[0]: method
 * arg[1]: options
 * arg[2]: nodes
 * 
 * isInit
 * 
 * arg[0]: options
 * arg[1]: nodes
 * 
 */ 

$.fn.tree = function(options){
	//返回值
	var returnValue = this;
	if ( !this.length ) {
		return this;
	}
	//获取其他参数
	var otherArgs = Array.prototype.slice.call(arguments, 1);
	var args = Array.prototype.slice.call(arguments, 0);
	this.each(function() {
		var isMethodCall = typeof options === "string";
		options = options||{};
		//调用方法返回值
		var methodValue,
			parseOptions = $.parser.parseOptions( this, [], ['data','rootNode', 'chkboxType','formatter'] );
		
		_options = $.extend( {}, $.fn['tree'].defaults || {}, parseOptions );
		//调用方法
		if ( isMethodCall ) {

			var treeobj = $.coral.tree.getTreeObj($(this).attr("id"));
			methodValue = treeobj[options].
				apply(treeobj, [].concat(otherArgs));
			if(methodValue !== undefined){
				returnValue = methodValue;
			}
			return ;
		} else {
			//option为对象，并且参数个数为两个时，初始化树(不通过tag标签，直接用js初始化时)
			_options = $.extend( {}, _options, options );
			var node = args[1] || _options.data;
			$.coral.tree.init( $(this), _options , node );
		}
	});
	return returnValue;
};
})(jQuery);

	

/**
 * 组件库4.0：布局
 * 
 * 依赖JS文件:
 *  jquery.coral.core.js
 *  jquery.coral.component.js
 *  jquery.coral.parser.js
 *  jquery.coral.panel.js
 *	jquery.coral.resizable.js
 */
(function ($) {
"use strict";
	
$.component("coral.layout", {
	version: "4.1.4",
	options:{
		onCreate: null,
		fit : false
	},
	layoutPanelDefault: {
		region: null,
		split: false,
		collapsedSize: 28,
		minWidth: 10,
		minHeight: 10,
		maxWidth: 10000,
		maxHeight: 10000
	},	
	resizing: false,//当分割条在被拖动时,值为true
	_resizeLayout: function() {
		var that = this,
			el = this.element,
			layoutOptions = that.options,
			layoutPanels = that.panels,
			cc = $(el);
		if (el[0].tagName.toLowerCase() == "body") {
			this._fit();
		} else {
			layoutOptions.fit ? cc.css(this._fit()) : this._fit(false);
		}
		//设置中央panel的默认尺寸大小
		var centerPanelSize = {
			top: 0,
			left: 0,
			width: cc.width(),
			height: cc.height()
		};
		resizePanelVertical(this._isPanelVisible(layoutPanels.expandNorth) ? 
			layoutPanels.expandNorth : layoutPanels.north, "n");
		resizePanelVertical(this._isPanelVisible(layoutPanels.expandSouth) ? 
			layoutPanels.expandSouth : layoutPanels.south, "s");
		resizePanelHorizontal(this._isPanelVisible(layoutPanels.expandEast) ? 
			layoutPanels.expandEast : layoutPanels.east, "e");
		resizePanelHorizontal(this._isPanelVisible(layoutPanels.expandWest) ? 
			layoutPanels.expandWest : layoutPanels.west, "w");
		layoutPanels.center.panel("resize", centerPanelSize);
		function _getHeight(pp) {
			var _c = pp.panel("getOptions");
			return Math.min(Math.max(_c.height, _c.minHeight), _c.maxHeight);
		};
		function _getWidth(pp) {
			var _e = pp.panel("getOptions");
			return Math.min(Math.max(_e.width, _e.minWidth), _e.maxWidth);
		};
		//设置南、北panel尺寸大小
		function resizePanelVertical(pp, dir) {
			if (!pp.length || !that._isPanelVisible(pp)) {
				return;
			}
			var panelOpts = pp.panel("getOptions");
			var pHeight = _getHeight(pp);
			pp.panel("resize", {
				width : cc.width(),
				height : pHeight,
				left : 0,
				top : (dir == "n" ? 0 : cc.height() - pHeight)
			});
			centerPanelSize.height -= pHeight;
			if (dir == "n") {
				centerPanelSize.top += pHeight;
				if (!panelOpts.split && panelOpts.border) {
					centerPanelSize.top--;
				}
			}
			if (!panelOpts.split && panelOpts.border) {
				centerPanelSize.height++;
			}
		};
		//设置东、西panel尺寸大小
		function resizePanelHorizontal(pp, dir) {
			if (!pp.length || !that._isPanelVisible(pp)) {
				return;
			}
			var panelOpts = pp.panel("getOptions");
			var pWidth = _getWidth(pp);
			pp.panel("resize", {
				width : pWidth,
				height : centerPanelSize.height,
				left : (dir == "e" ? cc.width() - pWidth : 0),
				top : centerPanelSize.top
			});
			centerPanelSize.width -= pWidth;
			if (dir == "w") {
				centerPanelSize.left += pWidth;
				if (!panelOpts.split && panelOpts.border) {
					centerPanelSize.left--;
				}
			}
			if (!panelOpts.split && panelOpts.border) {
				centerPanelSize.width++;
			}
		};
	},
	_splitLayout: function (region, isSplit) {
		var p = $(this.element).layout("panel", region);
		p.panel("options").split = isSplit;
		var cls = "layout-split-" + region;
		var pElement = p.panel("panel").removeClass(cls);
		if (isSplit) {
			pElement.addClass(cls);
		}
		pElement.resizable({
			disabled : (!isSplit)
		});
		this._resizeLayout();
	},
	_create : function () {
		//layout对象初始化五个方向的panel对象
		this.panels = {
			center : $(),
			north : $(),
			south : $(),
			east : $(),
			west : $()
		};
		var that = this;
		var el = this.element;
		var cc = $(el);
		cc.addClass("coral-layout");
		//为layout中各个方向的div初始化panel
		function createLayoutPanels(cc) {
			cc.children("div").each(function() {
				var options = $.parser.parseOptions(this,[]);
				if ("north,south,east,west,center".indexOf(options.region) >= 0) {
					that._addPanel(el, options, this);
				}
			});
		};
		cc.children("form").length ? createLayoutPanels(cc.children("form")) : createLayoutPanels(cc);
		//layout中添加竖向和横向分割条div
		cc.append("<div class=\"coral-layout-split-proxy-h\"></div><div class=\"coral-layout-split-proxy-v\"></div>");
		//刷新layout中各个panel的尺寸大小
		this._resizeLayout();
		//初始化panel的折叠
		this._initCollapse();
	},
	_addPanel : function (el, options, ele) {
		var that = this;
		options.region = options.region || "center";
		var panels = this.panels;
		var cc = $(el);
		var dir = options.region;
		if (panels[dir].length) {
			return;
		}
		//panel元素对象
		var pp = $(ele);
		if (!pp.length) {
			pp = $("<div></div>").appendTo(cc);
		}
		//创建panel的options属性
		var setting = $.extend( {}, this.layoutPanelDefault, {
			width: (pp.length ? 
				parseInt(pp[0].style.width) || pp.outerWidth() : "auto"),
			height: (pp.length ? 
				parseInt(pp[0].style.height) || pp.outerHeight() : "auto"),
			doSize: false,
			collapsible: true,
			componentCls: ("coral-layout-panel coral-layout-panel-" + dir),
			bodyCls : "coral-layout-body",
			//初始化时展开的panel，onOpen回调中绑定_collapse方法
			onOpen : function() {
				var panelToolDiv = $(this).panel("header").children("div.coral-panel-tool");
				panelToolDiv.children("a.coral-panel-tool-collapse").hide();
				var panelBtnDirSet = {
					north : "up3",
					south : "down3",
					east : "right3",
					west : "left3"
				};
				if (!panelBtnDirSet[dir]) {
					return;
				}
				var arrowCls = "cui-icon-arrow-" + panelBtnDirSet[dir];
				var t = panelToolDiv.children("a." + arrowCls);
				if (!t.length) {
					t = $("<a href=\"javascript:void(0)\"></a>")
						.addClass("icon " + arrowCls)
						.appendTo(panelToolDiv);
				}
				// fixed: t已经存在，绑定不上事件
				t.unbind("click").bind("click", {
					dir: dir
				}, function(e) {
					that._collapse(e.data.dir);
					return false;
				});
				$(this).panel("getOptions").collapsible ? t.show() : t.hide();
			}
		}, options);
		// fixed: region是center的时候，split设置为true会报错。
		if (setting.region === "center") {
			setting.split = false;
		}
		pp.panel(setting);
		panels[dir] = pp;
		//panel之间是否有分割条
		var panelObj = pp.panel("component");
		var panelHandlesDirSet = {
			north: "s",
			south: "n",
			east: "w",
			west: "e"
		};
		if (pp.panel("option").split) {
			panelObj.addClass("coral-layout-split-" + dir);
		
			// 分割条拖动事件：
			// 使用resizable组件使得panel组件可拖放大小
			// layout: true，告知resizable组件中_mouseDrag方法在拖动时不改变
			// panel的大小，_mouseStop时才改变panel的大小
			panelObj.resizable($.extend({
				handles: (panelHandlesDirSet[dir] || ""),
				disabled : (!pp.panel("option").split),
				start: function(e) {
					that.resizing = true;
					if (dir == "north" || dir == "south") {
						var lSplit = $( ">div.coral-layout-split-proxy-v", el );
					} else {
						var lSplit = $( ">div.coral-layout-split-proxy-h", el );
					}
					var top = 0,
						pos = {
							display : "block"
						};
					if (dir == "north") {
						pos.top = parseInt( panelObj.css("top") ) + 
							panelObj.outerHeight() - lSplit.height();
						pos.left = parseInt( panelObj.css("left"));
						pos.width = panelObj.outerWidth();
						pos.height = lSplit.height();
					} else {
						if (dir == "south") {
							pos.top = parseInt( panelObj.css("top"));
							pos.left = parseInt( panelObj.css("left"));
							pos.width = panelObj.outerWidth();
							pos.height = lSplit.height();
						} else {
							if (dir == "east") {
								pos.top = parseInt(panelObj.css("top")) || 0;
								pos.left = parseInt(panelObj.css("left")) || 0;
								pos.width = lSplit.width();
								pos.height = panelObj.outerHeight();
							} else {
								if (dir == "west") {
									pos.top = parseInt(panelObj.css("top")) || 0;
									pos.left = panelObj.outerWidth()- lSplit.width();
									pos.width = lSplit.width();
									pos.height = panelObj.outerHeight();
								}
							}
						}
					}
					lSplit.css(pos);
					$("<div class=\"coral-layout-mask\"></div>")
						.css({
							left: 0,
							top: 0,
							width: cc.width(),
							height: cc.height()
						}).appendTo(cc);
				},
				resize: function(e) {
					if (dir == "north" || dir == "south") {
						var lSplit = $(">div.coral-layout-split-proxy-v", el);
						lSplit.css( "top", e.pageY - $(el).offset().top - 
							lSplit.height() / 2);
					} else {
						var lSplit = $(">div.coral-layout-split-proxy-h", el);
						lSplit.css("left", e.pageX - $(el).offset().left - 
							lSplit.width() / 2);
					}
					return false;
				},
				helper: "coral-resizable-helper",
				stop: function(e,ui) {
					cc.children("div.coral-layout-split-proxy-v,div.coral-layout-split-proxy-h").hide();
					pp.panel("resize", ui.size);
					that._resizeLayout();
					that.resizing = false;
					cc.find(">div.coral-layout-mask").remove();
				}
			}, options));
		}
	},
	// 删除region对应的panel（折叠与非折叠状态的panel）
	_remove: function (region) {
		var panels = this.panels;
		if (panels[region].length) {
			panels[region].panel("destroy");
			// destroy can't remove panel element
			$(panels[region]).remove();
			panels[region] = $();
			var expandRegion = "expand" + region.substring(0, 1).toUpperCase()
					+ region.substring(1);
			if (panels[expandRegion]) {
				panels[expandRegion].panel("destroy");
				// destroy can't remove panel element
				$(panels[region]).remove();
				panels[expandRegion] = undefined;
			}
		}
	},
	//折叠panel(折叠的panel与展开的panel是两个div)
	_collapse : function (region, speed) {
		var that = this,
			el = this.element;
		if (speed == undefined) {
			speed = "normal";
		}
		var panels = this.panels;
		var p = panels[region];
		var panelOpts = p.panel("getOptions");
		if (panelOpts.beforeCollapse.call(p) == false) {
			return;
		}
		
		var expandRegion = "expand" + region.substring(0, 1).toUpperCase()
				+ region.substring(1);
		if (!panels[expandRegion]) {
			panels[expandRegion] = _createCollapsedPanel(region);
			panels[expandRegion].panel("component").bind("click", function() {
				var styleC = _getStyleC();
				p.panel("expand", false).panel("open").panel(
					"resize", 
					styleC.collapse
				);
				p.panel("component").animate(
					styleC.expand, 
					function() {
						$(this).unbind(".layout").bind(
							"mouseleave.layout", 
							{region: region}, 
							function(e) {
								//当分割条在被拖动时，鼠标离开panel不触发折叠事件
								if (that.resizing == true) {
									return;
								}
								that._collapse(e.data.region);
							});
					});
				return false;
			});
		}
		var styleC = _getStyleC();
		if (!this._isPanelVisible(panels[expandRegion])) {
			panels.center.panel("resize", styleC.resizeC);
		}
		//折叠当前panel的动画效果
		p.panel("component").animate(styleC.collapse, speed, function() {
			p.panel("collapse", false).panel("close");
			panels[expandRegion].panel("open").panel("resize", styleC.expandP);
			$(this).unbind(".layout");
		});
		//创建折叠后的panel
		function _createCollapsedPanel(dir) {
			var iconClass;
			if (dir == "east") {
				iconClass = "cui-icon-arrow-left3";
			} else {
				if (dir == "west") {
					iconClass = "cui-icon-arrow-right3";
				} else {
					if (dir == "north") {
						iconClass = "cui-icon-arrow-down3";
					} else {
						if (dir == "south") {
							iconClass = "cui-icon-arrow-up3";
						}
					}
				}
			}
			var p = $("<div></div>").appendTo(el);
			p.panel($.extend( {}, that.layoutPanelDefault, {
				componentCls : ("coral-layout-expand coral-layout-expand-" + dir),
				title: "&nbsp;",
				closed: true,
				minWidth: 0,
				minHeight: 0,
				doSize: false,
				tools: [{
					iconCls: iconClass,
					handler: function() {
						//折叠后的panel，需要绑定_expand方法
						that._expand(region);
						return false;
					}
				}]
			}));
			p.panel("component").hover(function() {
				$(this).addClass("coral-layout-expand-over");
			}, function() {
				$(this).removeClass("coral-layout-expand-over");
			});
			return p;
		};
		//获得尺寸大小及位置
		function _getStyleC() {
			var cc = $(el);
			var centerOpt = panels.center.panel("getOptions");
			var collapsedSize = panelOpts.collapsedSize;
			if (region == "east") {
				var ww = centerOpt.width + panelOpts.width - collapsedSize;
				if (panelOpts.split || !panelOpts.border) {
					ww++;
				}
				return {
					resizeC: {
						width : ww
					},
					expand: {
						left : cc.width() - panelOpts.width
					},
					expandP: {
						top : centerOpt.top,
						left : cc.width() - collapsedSize,
						width : collapsedSize,
						height : centerOpt.height
					},
					collapse : {
						left : cc.width(),
						top : centerOpt.top,
						height : centerOpt.height
					}
				};
			} else {
				if (region == "west") {
					var ww = centerOpt.width + panelOpts.width - collapsedSize;
					if (panelOpts.split || !panelOpts.border) {
						ww++;
					}
					return {
						resizeC : {
							width : ww,
							left : collapsedSize - 1
						},
						expand : {
							left : 0
						},
						expandP : {
							left : 0,
							top : centerOpt.top,
							width : collapsedSize,
							height : centerOpt.height
						},
						collapse : {
							left : -panelOpts.width,
							top : centerOpt.top,
							height : centerOpt.height
						}
					};
				} else {
					if (region == "north") {
						var hh = centerOpt.height;
						if (!that._isPanelVisible(panels.expandNorth)) {
							hh += panelOpts.height - collapsedSize
									+ ((panelOpts.split || !panelOpts.border) ? 1 : 0);
						}
						panels.east.add(panels.west).add(panels.expandEast).add(
								panels.expandWest).panel("resize", {
							top : collapsedSize - 1,
							height : hh
						});
						return {
							resizeC : {
								top : collapsedSize - 1,
								height : hh
							},
							expand : {
								top : 0
							},
							expandP : {
								top : 0,
								left : 0,
								width : cc.width(),
								height : collapsedSize
							},
							collapse : {
								top : -panelOpts.height,
								width : cc.width()
							}
						};
					} else {
						if (region == "south") {
							var hh = centerOpt.height;
							if (!that._isPanelVisible(panels.expandSouth)) {
								hh += panelOpts.height - collapsedSize
										+ ((panelOpts.split || !panelOpts.border) ? 1 : 0);
							}
							panels.east.add(panels.west).add(panels.expandEast).add(
									panels.expandWest).panel("resize", {
								height : hh
							});
							return {
								resizeC : {
									height : hh
								},
								expand : {
									top : cc.height() - panelOpts.height
								},
								expandP : {
									top : cc.height() - collapsedSize,
									left : 0,
									width : cc.width(),
									height : collapsedSize
								},
								collapse : {
									top : cc.height(),
									width : cc.width()
								}
							};
						}
					}
				}
			}
		};
	},
	//展开panel
	_expand: function (region) {
		var that = this,
			el = this.element,
			panels = this.panels,
			p = panels[region],
			panelOpts = p.panel("getOptions");
		if (panelOpts.beforeExpand.call(p) == false) {
			return;
		}
		var styleE = getBeginEndPos();
		var expandRegion = "expand" + 
			region.substring(0, 1).toUpperCase() + 
			region.substring(1);
		if (panels[expandRegion]) {
			panels[expandRegion].panel("close");
			p.panel("component").stop(true, true);
			p.panel("expand", false).panel("open")
				.panel("resize", styleE.collapse);
			p.panel("component").animate(styleE.expand, function() {
				that._resizeLayout();
			});
		}
		//获得尺寸大小及位置
		function getBeginEndPos() {
			var cc = $(el);
			var centerOpt = panels.center.panel("getOptions");
			if (region == "east" && panels.expandEast) {
				return {
					collapse : {
						left : cc.width(),
						top : centerOpt.top,
						height : centerOpt.height
					},
					expand : {
						left : cc.width() - panels["east"].panel("getOptions").width
					}
				};
			} else {
				if (region == "west" && panels.expandWest) {
					return {
						collapse : {
							left : -panels["west"].panel("getOptions").width,
							top : centerOpt.top,
							height : centerOpt.height
						},
						expand : {
							left : 0
						}
					};
				} else {
					if (region == "north" && panels.expandNorth) {
						return {
							collapse : {
								top : -panels["north"].panel("getOptions").height,
								width : cc.width()
							},
							expand : {
								top : 0
							}
						};
					} else {
						if (region == "south" && panels.expandSouth) {
							return {
								collapse: {
									top: cc.height(),
									width: cc.width()
								},
								expand: {
									top: cc.height()
											- panels["south"].panel("getOptions").height
								}
							};
						}
					}
				}
			}
		};
	},
	_isPanelVisible: function (pp) {
		if (!pp) {
			return false;
		}
		if (pp.length) {
			return pp.panel("component").is(":visible");
		} else {
			return false;
		}
	},
	//layout初始化时，折叠collapse=true的panel
	_initCollapse: function () {
		var panels = this.panels;
		if (panels.east.length && panels.east.panel("getOptions").collapsed) {
			this._collapse("east", 0);
		}
		if (panels.west.length && panels.west.panel("getOptions").collapsed) {
			this._collapse("west", 0);
		}
		if (panels.north.length && panels.north.panel("getOptions").collapsed) {
			this._collapse("north", 0);
		}
		if (panels.south.length && panels.south.panel("getOptions").collapsed) {
			this._collapse("south", 0);
		}
	},
	//layout大小自适应外层html元素
	_fit: function (fit) {
		return $.coral.panel.fit(this.element, fit);
	},
	// 销毁layout
	_destroy: function () {
		//this.panels.north.panel("destroy");
		//this.panels.south.panel("destroy");
		//this.panels.west.panel("destroy");
		//this.panels.east.panel("destroy");
		//this.panels.center.panel("destroy");
		this.element.children().remove();
		this.element.detach();
	},
	// 刷新layout
	refresh: function() {
		this._resizeLayout();
	},
	// 获得layout中对应方位region的panel
	panel: function(region) {
		return this.panels[region];
	},
	// 折叠layout中对应方位region的panel
	collapse: function(region) {
		this._collapse(region);
	},
	// 展开layout中对应方位region的panel
	expand: function(region) {
		this._expand(region);
	},
	// 添加layout中对应方位region的panel
	add: function(options) {
		this._addPanel(this.element, options);
		this._resizeLayout();
		if (this.panels[options.region]
				.panel("getOptions").collapsed) {
			this._collapse(options.region, 0);
		}
	},
	//删除layout中对应方位region的panel
	remove: function(region) {
		this._remove(region);
		this._resizeLayout();
	},
	split: function(region) {
		this._splitLayout(region, true);
	},
	unsplit: function(region) {
		this._splitLayout(region, false);
	},
	//改变layout中对应方位region的大小
	resize: function(pos, region){
		// TODO:
		var props = pos;
		var el = this.element;
		if(region !== undefined){
			var pp = this.panels[region];
			var oldHeight = pp.panel('component').outerHeight();
			var oldWidth = pp.panel('component').outerWidth();
			pp.panel('resize', pos);
			var newHeight = pp.panel('component').outerHeight();
			var newWidth = pp.panel('component').outerWidth();
			
			props.height = $(el).height() + newHeight - oldHeight;
			props.width = $(el).width() + newWidth - oldWidth;
		}
		$(el).css(props);
		this._resizeLayout();
	}
});

})(jQuery);

/**
 * CoralUI BaseMenu component
 */
(function ($) {

    $.component("coral.basemenu", {
       
        options: {
             popup: false,
             trigger: null,
             my: 'left top',
             at: 'left bottom',
             of: null, /* menu定位依据的元素 */
             triggerEvent: 'click',
             data : null,//外部传入数据用于初始化
             onClick : null,//菜单鼠标点击回调方法
             onCreate : null,//父类中实现
             url : null,//数据调用的url
             method : null//url调用方式
        },
        _create: function() {
            if(this.options.popup) {
                this._initPopup();
            }
        },
        //如果目标ul下没有元素，而data下有数据，则将data数据添加到目标UL下
        //如果目标ul下没有元素，而url下有数据，则将url数据添加到目标UL下
        _generateULContent : function(){
        	var $this=this;
        	if(this.element.children().length==0 && this.options.data!=null){
        		var html="";
        		var data=(typeof this.options.data === "string")?$.parseJSON(this.options.data):this.options.data;
        		html=this._generateHTML(html,data);
        		if(html.length>7){
        			html=html.substring(4);
        			html=html.substring(0,html.length-5);
        		}
        		this.element.html(html);
        	}else if(this.element.children().length==0 && this.options.url!=null){
        		var html="";
	        	$.ajax({
					type: 'get',
					url:  $this.options.url,
					async : false,
					data: null,
					dataType: 'json',
					success: function(data){
						var html="";
						html=$this._generateHTML(html,data);
						if(html.length>7){
		        			html=html.substring(4);
		        			html=html.substring(0,html.length-5);
		        		}
		        		$this.element.html(html);
					},
					error: function(){
					}
				});
        	}
        },
        //根据data生成HTML
        _generateHTML : function(html,data){
        	html+="<ul>";
	        for(var i=0;i<data.length;i++){
	        	// modified by @lhb @20150317
	        	if (data[i].id != "") {
	        		html+="<li data-id=\""+data[i].id+"\">";
	        	} else {
	        		html+="<li>";
	        	}
				html+=this._generateANode(data[i]);
				var items=data[i].items;
				if(typeof items !== "undefined" && items instanceof Array && items.length>0 ){
					html=this._generateHTML(html,items);
				}
				html+="</li>"
			}
			html+="</ul>";
			return html;
        },
        //生成A元素
        _generateANode : function(node){
        	var str="<a";
			if(node.iconclass!=""){
				str+=" data-icon='"+node.iconclass+"'";
			}
			if(node.name!=""){
				str+=" data-name='"+node.name+"'";
			}
			if(node.disabled!=""){
				str+=" data-disabled='"+node.disabled+"'";
			}
			if(node.url!=""){
				/*if (node.response == "click") {
					str+="";
				} else {
					str+=" href='"+node.url+"'";
				}*/
				str+=" data-url='"+node.url+"'";
			}
			if(node.target!=""){
				str+=" data-target='"+node.target+"'";
			}
			str+=">";
			if(node.name!=""){
				str+=node.name;
			}
			str+="</a>";
			return str;
        },
        _initPopup: function() {
            var $this = this;
			//处理trigger类型转换
            this.options.trigger=typeof this.options.trigger==="string" ? $('#'+this.options.trigger):this.options.trigger;
            this.element.closest('.coral-menu').addClass('coral-menu-dynamic coral-shadow').appendTo(document.body);
            // 如果of属性定义，则定位于of，否则定位依据trigger
            this.positionConfig = {
                my: this.options.my,
                at: this.options.at,
                of: this.options.of ? this.options.of : this.options.trigger
            };

            this.options.trigger.on(this.options.triggerEvent + '.coral-menu', function(e) {
            	//禁用对trigger的事件触发
            	if($this.options.disabled===true)return ;
                var trigger = $(this);
                if($this.element.is(':visible')) {
                    $this.hide();
                }
                else {
                    $this.show();
                }
                
                e.preventDefault();
            });

            //hide overlay on document click
            $(document.body).on('click.coral-menu', function (e) {
                var popup = $this.element.closest('.coral-menu');
                if(popup.is(":hidden")) {
                    return;
                }

                //do nothing if mousedown is on trigger
                var target = $(e.target);
                if(target.is($this.options.trigger.get(0))||$this.options.trigger.has(target).length > 0) {
                    return;
                }

                //hide if mouse is outside of overlay except trigger
                var offset = popup.offset();
                if(e.pageX < offset.left ||
                    e.pageX > offset.left + popup.width() ||
                    e.pageY < offset.top ||
                    e.pageY > offset.top + popup.height()) {

                    $this.hide(e);
                }
            });

            //Hide overlay on resize
            $(window).on('resize.coral-menu', function() {
                if($this.element.closest('.coral-menu').is(':visible')) {
                    $this.align();
                }
            });
        },
                
        show: function() {
            this.align();
            this.element.closest('.coral-menu').css('z-index', ++$.coral.zindex).show();
        },

        hide: function() {
            this.element.closest('.coral-menu').fadeOut('fast');
        },

        align: function() {
            this.element.closest('.coral-menu').css({left:'', top:''}).position({
            	my: this.options.my,
                at: this.options.at,
                of: this.options.of ? this.options.of : this.options.trigger
            });
        },
        //方法调用
        _apply : function(callback,obj,datas){
        	if(typeof callback ==="string"){        		
				return window[callback].apply(obj, [datas]);
			}else if($.isFunction( callback )){
				return callback.apply(obj, [datas]);
			}
        },
        //设置每个菜单是否为禁用
        _setMenuItemLinkDisabled : function(menuitemLink){
        	if(menuitemLink.data('disabled')===true){
				menuitemLink.toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );
            }else{
             	menuitemLink.toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );
            }
        },
        //绑定菜单点击事件
        _bindMenuItemClick : function($this){
        	var click=$this.options.onClick;
            //if(click!=null){
            	$this.links.on('click',function(){
            		if($this.options.disabled===true)return ;
            		var datas={};
            		
            		if($(this).parent("li").attr("data-id")!=null){
            			datas.id=$(this).parent("li").attr("data-id");
            		}
            		if($(this).attr("data-target")!=null){
            			datas.target=$(this).attr("data-target");
            		}
            		if($(this).attr("data-name")!=null){
            			datas.name=$(this).attr("data-name");
            		}
            		/*if($(this).attr("href")!=null){
            			datas.href=$(this).attr("href");
            		}*/
            		if($(this).attr("data-url")!=null){
            			datas.url=$(this).attr("data-url");
            		}
            		if($(this).find(":checkbox,:radio").length>0){
            			datas.hasChk=true;
            			datas.checked=$(this).find(":checkbox,:radio").prop('checked');
            		}else{
            			datas.hasChk=false;
            		}
            		var event={
						target: $this,
						currentTarget: $this,
						preventDefault: $.noop
					}
					$this._trigger( "onClick", event, datas );
	            	//$this._apply(click,this,datas);
	            });
            //}
        },
        setActiveMenu : function(menuNames){
        	var $this = this;
        	if(menuNames==null || menuNames.length==0)return ;
        	
        	$.each(menuNames,function(){
        		var aEle=$this.element.find("[data-name='"+this+"']");
        		aEle.parent().addClass("coral-menuitem-current");
        	});
        },
        setCurrenMenu : function(menuNames){
        	if(menuNames==null || menuNames.length==0)return ;
        	this.element.find(">li>a").each(function() {
				var elem = $( this ),
					dn = elem.attr( "data-name" );

				if ( dn !== menuNames) {
					return;
				}
				elem.parent().addClass("coral-menuitem-current");
				$(this).parent().siblings().removeClass("coral-menuitem-current");
			});
        }
    });
})(jQuery);

$.component("coral.navigationmenu", $.coral.basemenu,{
	castProperties : ["title"],
	options: {
    	collapsible: true,
    	active: 0,
    	textAlign: "left",
    	role: "navigationmenu",
    	menus: "ul",
    	title: null,
    	icons: {
    		activeHeader: "cui-icon-arrow-down",
			header: "cui-icon-arrow-right2"
    	},
    	header: "> li > :first-child,> :not(li):even"
    },
    _activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		if ( active === this.active[ 0 ] ) {
			return;
		}

		active = active || this.active[ 0 ];

		this._eventHandler({
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		});
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},
	
	_setOption: function( key, value ){
		if ( key === "active" ) {
			this._activate( value );
			return;
		}
		this._super(key, value );
	},
	
    _create: function() {
    	var that = this;
        this._generateULContent();
    	
        this._render();
        
	    
        this.links = this.element.find('.coral-menuitem-link:not(.coral-state-disabled)');
        this._on({
			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .coral-navigationmenu-header": function( event ) {
				event.preventDefault();
			},
			// 第一级的处理
			"click .coral-menuitem-link": function( event ) {
				event.preventDefault();
				var target = $( event.target ).closest( ".coral-menuitem-link" ),
					parent = $( event.target ).closest( ".coral-menu-parent" );
				if ( parent.not( ".coral-state-disabled" ).length ) {
					
					parent.siblings().find(">ul").attr( "aria-expanded", false ).slideUp();
						parent.find(">.icon").removeClass( that.options.icons.activeHeader )
						.addClass( that.options.icons.header );
					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}
					var targetUl = parent.find(">ul");
					// Open submenu on click
					if ( !target.parent().hasClass( "coral-menu-parent") ){
						this.oldActive = this.active || $();
						this.active = target;
						this.oldActive.removeClass( "coral-state-highlight" );
						ui = { item: this.active, target: this.active.attr("href") };
						this.active.addClass( "coral-state-highlight" )
						this._trigger( "onSelect", event, ui );
					} else {
						if ( targetUl.attr( "aria-expanded" ) == "true" ){
							targetUl.attr( "aria-expanded", false ).slideUp();
						} else {
							targetUl.attr( "aria-expanded", true ).slideDown();
							parent.find(">.icon").removeClass( that.options.icons.header )
								.addClass( that.options.icons.activeHeader );
						}
					}
				}
			},
			"mouseenter .coral-menuitem-link": function( event ) {
				event.preventDefault();
				var target = $( event.target ).closest( ".coral-menuitem-link" );
				var parent = $( event.target ).closest( ".coral-menu-parent" );
				if ( parent.not( ".coral-state-disabled" ).length ) {
					
					if ( !target.parent().hasClass( "coral-menu-parent") ){
						target.addClass("coral-state-hover")
					}
					this._updateTitle();
				}
			},
			"mouseleave .coral-menuitem-link": function( event ) {
				event.preventDefault();
				var target = $( event.target ).closest( ".coral-menuitem-link" );
				var parent = $( event.target ).closest( ".coral-menu-parent" );
				if ( parent.not( ".coral-state-disabled" ).length ) {
					
					if ( !target.parent().hasClass( "coral-menu-parent") ){
						target.removeClass( "coral-state-hover" )
					}
				}
			}
        });
        
        this._super();
    },
    _updateTitle: function(){
    	this.element.find("li>a").each(function() {
			var elem = $( this ),
				dn = elem.find(".coral-menuitem-text").text();
			var widthDiv = $("<span style = 'visibility: hidden'>"+ dn +"</span>").appendTo("body");
			if(elem.width() < widthDiv.width()){
	    		elem.attr( "title", dn);
	    	}
			widthDiv.remove();
		});
    },
    _processPanels: function() {
    	 this.headers = this.element.find( this.options.header )
 		.addClass( "coral-navigationmenu-header coral-state-default" );
	},
    _render: function() {
    	var $this=this;
        this.element.addClass('coral-helper-reset coral-navigationmenu coral-menu').attr("role","navigationmenu");
        
        this.element.uniqueId();
        this.options.id = this.element.attr('id');

        this._processPanels();
        submenus = this.element.find( this.options.menus );
        submenus.filter( ":not(.coral-menu)" )
			.addClass( "coral-menu-list coral-helper-reset" )
			/*.hide()*/
			.attr({
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			})
			.each(function() {
				var menu = $( this ),
					item = menu.parent();
	
				item.attr( "aria-haspopup", "true" );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			});

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );
	
		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".coral-menu-item" ).each(function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				item.addClass( "coral-component-content coral-menu-divider" );
			}
		});
		
        this.element.find('li').each(function() {
	        var listItem = $(this),
		        menuitemLink = listItem.children('a'),
		        icon = menuitemLink.data('icon'),
		        level = typeof(listItem.parent().parent("li").attr("data-level"))=="undefined"?
		        		0:parseInt(listItem.parent().parent("li").attr("data-level"))+1;
	        menuitemLink.addClass('coral-menuitem-link coral-state-default coral-corner-all');
	        menuitemLink.contents().filter(function(i, item){
	        	if (item.tagName) return false;
	        	return true;
	        }).wrap("<span class='coral-menuitem-text'/>");
	        // coral-navigationmenu-item-inner控制item不换行，出现ellipsis
	        menuitemLink.html('<div class="coral-navigationmenu-item-inner">'+menuitemLink.html()+'</div>');
	        listItem.addClass('coral-menuitem coral-component coral-corner-all')
	        	.attr("data-level", level).addClass("level"+level);
	        /*if(icon) {
	        	menuitemLink.prepend('<span class="coral-menuitem-icon coral-icon ' + icon + '"></span>');
	        }*/
	        if(listItem.children('ul').length > 0) {
	        	//submenus = this.element.find( this.options.menus );
	        	var submenus = listItem.children('ul');
	            listItem.addClass('coral-menu-parent');
	            submenus.addClass('coral-menu-list coral-helper-reset');
	            menuitemLink.prepend('<span class="coral-navigationmenu-item-arrow cui-icon-arrow-down3"></span>');
	        } else if($this.options.textAlign == 'right'){
	           // menuitemLink.find(".coral-navigationmenu-item-inner").prepend('<span style="visibility:hidden;" class="coral-navigationmenu-item-arrow cui-icon-arrow-down3"></span>');
	        }
	        
	        if($this.options.textAlign == 'right'){
	            $("<span class='coral-empty' style='width:"+level*16+"px;height:"+16+"px;'></span>").prependTo(menuitemLink.find(".coral-navigationmenu-item-inner"));
	        }

        });
        
        var selector = ".coral-navigationmenu li > a[data-target=\'" + this.options.active + "\']," +
        " .coral-navigationmenu li > a[href=\'" + this.options.active + "\']";

        var active = $( selector );
        active.parents('ul').show();
        if( !active.parent().hasClass("coral-menu-parent")){
        	active.addClass("coral-state-highlight");
        	this.oldActive = active;
			this.active = active;
        }
    }
});
/*$.component("coral.panelmenu", $.coral.basemenu,{
    options: {
    	collapsible: true,
    	active: 0,
    	role: "panelmenu",
    	menus: "ul",
    	header: "> li > :first-child,> :not(li):even"
    },
    _activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		if ( active === this.active[ 0 ] ) {
			return;
		}

		active = active || this.active[ 0 ];

		this._eventHandler({
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		});
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},
	
    _create: function() {
        this._generateULContent();
    	
        this._render();
        
        this.links = this.element.find('.coral-menuitem-link:not(.coral-state-disabled)');
        this._on({
			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .coral-panelmenu-header": function( event ) {
				event.preventDefault();
			},
			"click .coral-panelmenu-header": function( event ) {
				var target = $( event.target );
				if ( target.not( ".coral-state-disabled" ).length ) {
					this.active = this.active || $( event.target ).closest( ".coral-menuitem" );
					
					target.siblings("[aria-expanded=true]").next().slideUp();
					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}
					target.attr( "aria-expanded", true ).next().slideDown();
					ui = { item: this.active };
					// Open submenu on click
					if ( target.has( ".coral-menu" ).length ) {
						//this.expand( event );
					} else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".coral-menu" ).length ) {

						// Redirect focus to the menu
						this._trigger( "onSelect", event, ui );

					}
				}
			},
			"click .coral-menuitem": function( event ) {
				var target = $( event.target );
				target = $( target ).closest( ".coral-menuitem-link" )
				if ( target.not( ".coral-state-disabled" ).length ) {
					if ( target.parent().hasClass( "coral-menu-parent") ){
						target.parent().find(">ul").slideDown();
					}
				}
			}
        });
       // this._bindEvents();
        
        this._super();
    },
    _processPanels: function() {
    	 this.headers = this.element.find( this.options.header )
 		.addClass( "coral-panelmenu-header coral-state-default" );
         this.headers.next()
 		.addClass( "coral-panelmenu-content" )
 		.filter(":not(.coral-panelmenu-content-active)")
 		.hide();
	},
    _render: function() {
    	var $this=this;
        this.element.addClass('coral-helper-reset coral-panelmenu coral-menu').attr("role","panelmenu");
        
        this.element.uniqueId();
        this.options.id = this.element.attr('id');

        this._processPanels();
        submenus = this.element.find( this.options.menus );
        submenus.filter( ":not(.coral-menu)" )
			.addClass( "coral-menu-list collapse coral-helper-reset" )
			.hide()
			.attr({
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			})
			.each(function() {
				var menu = $( this ),
					item = menu.parent(),
					submenuCarat = $( "<span>" )
						.addClass( "coral-menu-icon coral-icon " + icon )
						.data( "coral-menu-submenu-carat", true );
	
				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCarat );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			});
	
		menus = submenus.add( this.element );
		items = menus.find( this.options.items );
	
		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".coral-menu-item" ).each(function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				item.addClass( "coral-component-content coral-menu-divider" );
			}
		});
		
        this.element.find('li').each(function() {
	        var listItem = $(this),
	        menuitemLink = listItem.children('a'),
	        icon = menuitemLink.data('icon'),
	        level = typeof(listItem.parent().parent("li").attr("data-level"))=="undefined"?
	        		0:parseInt(listItem.parent().parent("li").attr("data-level"))+1;
	        
	        menuitemLink.addClass('coral-menuitem-link coral-state-default coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
	        
	        listItem.addClass('coral-menuitem coral-component coral-corner-all')
	        	.attr("data-level", level).addClass("level"+level);
	        if(icon) {
	        	menuitemLink.prepend('<span class="coral-menuitem-icon coral-icon ' + icon + '"></span>');
	        }
	        if(listItem.children('ul').length > 0) {
	        	//submenus = this.element.find( this.options.menus );
	        	var submenus = listItem.children('ul');
	            listItem.addClass('coral-menu-parent');
	            submenus.addClass('coral-menu-list collapse coral-helper-reset');
	            menuitemLink.prepend('<span style="float:left;" class="icon icon-arrow-down2"></span>');
	        } else {
	            menuitemLink.prepend('<span style="float:left;visibility:hidden;" class="icon icon-arrow-down2"></span>');
	        }
	        $("<span style='width:"+level*16+"px;height:"+level*16+"px;display:inline-block;float:left;'></span>").prependTo(menuitemLink);

        });
    }
});*/
/**
 * CoralUI Menu component
 */
(function ($) {
	var menu = $.component( "coral.menu", {
		version: "4.0.2",
		defaultElement: "<ul>",
		delay: 300,
		options: {
			icons: {
				submenu: "coral-icon-carat-1-e"
			},
			items: "> *",
			menus: "ul",
			position: {
				my: "left-1 top",
				at: "right top"
			},
			role: "menu",

			// callbacks
			onBlur: null,
			onFocus: null,
			onSelect: null
		},

		_create: function() {
			this.activeMenu = this.element;

			// Flag used to prevent firing of the click handler
			// as the event bubbles up through nested menus
			this.mouseHandled = false;
			this.element
				.uniqueId()
				.addClass( "coral-menu coral-component coral-component-content" )
				.toggleClass( "coral-menu-icons", !!this.element.find( ".coral-icon" ).length )
				.attr({
					role: this.options.role,
					tabIndex: 0
				});

			if ( this.options.disabled ) {
				this.element
					.addClass( "coral-state-disabled" )
					.attr( "aria-disabled", "true" );
			}

			this._on({
				// Prevent focus from sticking to links inside menu after clicking
				// them (focus should always stay on UL during navigation).
				"mousedown .coral-menu-item": function( event ) {
					event.preventDefault();
				},
				"click .coral-menu-item": function( event ) {
					var target = $( event.target );
					if ( !this.mouseHandled && target.not( ".coral-state-disabled" ).length ) {
						this.select( event );

						// Only set the mouseHandled flag if the event will bubble, see #9469.
						if ( !event.isPropagationStopped() ) {
							this.mouseHandled = true;
						}

						// Open submenu on click
						if ( target.has( ".coral-menu" ).length ) {
							this.expand( event );
						} else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".coral-menu" ).length ) {

							// Redirect focus to the menu
							this.element.trigger( "focus", [ true ] );

							// If the active item is on the top level, let it stay active.
							// Otherwise, blur the active item since it is no longer visible.
							if ( this.active && this.active.parents( ".coral-menu" ).length === 1 ) {
								clearTimeout( this.timer );
							}
						}
					}
				},
				"mouseenter .coral-menu-item": function( event ) {
					// Ignore mouse events while typeahead is active, see #10458.
					// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
					// is over an item in the menu
					if ( this.previousFilter ) {
						return;
					}
					var target = $( event.currentTarget );
					// Remove coral-state-active class from siblings of the newly focused menu item
					// to avoid a jump caused by adjacent elements both having a class with a border
					target.siblings( ".coral-state-active" ).removeClass( "coral-state-active" );
					this.focus( event, target );
				},
				mouseleave: "collapseAll",
				"mouseleave .coral-menu": "collapseAll",
				focus: function( event, keepActiveItem ) {
					// If there's already an active item, keep it active
					// If not, activate the first item
					var item = this.active || this.element.find( this.options.items ).eq( 0 );

					if ( !keepActiveItem ) {
						this.focus( event, item );
					}
				},
				blur: function( event ) {
					this._delay(function() {
						if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
							this.collapseAll( event );
						}
					});
				},
				keydown: "_keydown"
			});

			this.refresh();

			// Clicks outside of a menu collapse any open menus
			this._on( this.document, {
				click: function( event ) {
					if ( this._closeOnDocumentClick( event ) ) {
						this.collapseAll( event );
					}

					// Reset the mouseHandled flag
					this.mouseHandled = false;
				}
			});
		},

		_destroy: function() {
			// Destroy (sub)menus
			this.element
				.removeAttr( "aria-activedescendant" )
				.find( ".coral-menu" ).addBack()
					.removeClass( "coral-menu coral-component coral-component-content coral-menu-icons coral-front" )
					.removeAttr( "role" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-disabled" )
					.removeUniqueId()
					.show();

			// Destroy menu items
			this.element.find( ".coral-menu-item" )
				.removeClass( "coral-menu-item" )
				.removeAttr( "role" )
				.removeAttr( "aria-disabled" )
				.removeUniqueId()
				.removeClass( "coral-state-hover" )
				.removeAttr( "tabIndex" )
				.removeAttr( "role" )
				.removeAttr( "aria-haspopup" )
				.children().each( function() {
					var elem = $( this );
					if ( elem.data( "coral-menu-submenu-carat" ) ) {
						elem.remove();
					}
				});

			// Destroy menu dividers
			this.element.find( ".coral-menu-divider" ).removeClass( "coral-menu-divider coral-component-content" );
		},

		_keydown: function( event ) {
			var match, prev, character, skip,
				preventDefault = true;

			switch ( event.keyCode ) {
			case $.coral.keyCode.PAGE_UP:
				this.previousPage( event );
				break;
			case $.coral.keyCode.PAGE_DOWN:
				this.nextPage( event );
				break;
			case $.coral.keyCode.HOME:
				this._move( "first", "first", event );
				break;
			case $.coral.keyCode.END:
				this._move( "last", "last", event );
				break;
			case $.coral.keyCode.UP:
				this.previous( event );
				break;
			case $.coral.keyCode.DOWN:
				this.next( event );
				break;
			case $.coral.keyCode.LEFT:
				this.collapse( event );
				break;
			case $.coral.keyCode.RIGHT:
				if ( this.active && !this.active.is( ".coral-state-disabled" ) ) {
					this.expand( event );
				}
				break;
			case $.coral.keyCode.ENTER:
			case $.coral.keyCode.SPACE:
				this._activate( event );
				break;
			case $.coral.keyCode.ESCAPE:
				this.collapse( event );
				break;
			default:
				preventDefault = false;
				prev = this.previousFilter || "";
				character = String.fromCharCode( event.keyCode );
				skip = false;

				clearTimeout( this.filterTimer );

				if ( character === prev ) {
					skip = true;
				} else {
					character = prev + character;
				}

				match = this._filterMenuItems( character );
				match = skip && match.index( this.active.next() ) !== -1 ?
					this.active.nextAll( ".coral-menu-item" ) :
					match;

				// If no matches on the current filter, reset to the last character pressed
				// to move down the menu to the first item that starts with that character
				if ( !match.length ) {
					character = String.fromCharCode( event.keyCode );
					match = this._filterMenuItems( character );
				}

				if ( match.length ) {
					this.focus( event, match );
					this.previousFilter = character;
					this.filterTimer = this._delay(function() {
						delete this.previousFilter;
					}, 1000 );
				} else {
					delete this.previousFilter;
				}
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		},

		_activate: function( event ) {
			if ( !this.active.is( ".coral-state-disabled" ) ) {
				if ( this.active.is( "[aria-haspopup='true']" ) ) {
					this.expand( event );
				} else {
					this.select( event );
				}
			}
		},

		refresh: function() {
			var menus, items,
				that = this,
				icon = this.options.icons.submenu,
				submenus = this.element.find( this.options.menus );

			this.element.toggleClass( "coral-menu-icons", !!this.element.find( ".coral-icon" ).length );

			// Initialize nested menus
			submenus.filter( ":not(.coral-menu)" )
				.addClass( "coral-menu coral-component coral-component-content coral-front" )
				.hide()
				.attr({
					role: this.options.role,
					"aria-hidden": "true",
					"aria-expanded": "false"
				})
				.each(function() {
					var menu = $( this ),
						item = menu.parent(),
						submenuCarat = $( "<span>" )
							.addClass( "coral-menu-icon coral-icon " + icon )
							.data( "coral-menu-submenu-carat", true );

					item
						.attr( "aria-haspopup", "true" )
						.prepend( submenuCarat );
					menu.attr( "aria-labelledby", item.attr( "id" ) );
				});

			menus = submenus.add( this.element );
			items = menus.find( this.options.items );

			// Initialize menu-items containing spaces and/or dashes only as dividers
			items.not( ".coral-menu-item" ).each(function() {
				var item = $( this );
				if ( that._isDivider( item ) ) {
					item.addClass( "coral-component-content coral-menu-divider" );
				}
			});

			// Don't refresh list items that are already adapted
			items.not( ".coral-menu-item, .coral-menu-divider" )
				.addClass( "coral-menu-item" )
				.uniqueId()
				.attr({
					tabIndex: -1,
					role: this._itemRole()
				});

			// Add aria-disabled attribute to any disabled menu item
			items.filter( ".coral-state-disabled" ).attr( "aria-disabled", "true" );

			// If the active item has been removed, blur the menu
			if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				this.blur();
			}
		},

		_itemRole: function() {
			return {
				menu: "menuitem",
				listbox: "option"
			}[ this.options.role ];
		},

		_setOption: function( key, value ) {
			if ( key === "icons" ) {
				this.element.find( ".coral-menu-icon" )
					.removeClass( this.options.icons.submenu )
					.addClass( value.submenu );
			}
			if ( key === "disabled" ) {
				this.element
					.toggleClass( "coral-state-disabled", !!value )
					.attr( "aria-disabled", value );
			}
			this._super( key, value );
		},

		focus: function( event, item ) {
			var nested, focused;
			this.blur( event, event && event.type === "focus" );

			this._scrollIntoView( item );

			this.active = item.first();
			focused = this.active.addClass( "coral-state-focus" ).removeClass( "coral-state-active" );
			// Only update aria-activedescendant if there's a role
			// otherwise we assume focus is managed elsewhere
			if ( this.options.role ) {
				this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
			}

			// Highlight active parent menu item, if any
			this.active
				.parent()
				.closest( ".coral-menu-item" )
				.addClass( "coral-state-active" );

			if ( event && event.type === "keydown" ) {
				this._close();
			} else {
				this.timer = this._delay(function() {
					this._close();
				}, this.delay );
			}

			nested = item.children( ".coral-menu" );
			if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
				this._startOpening(nested);
			}
			this.activeMenu = item.parent();

			this._trigger( "onFocus", event, { item: item } );
		},

		_scrollIntoView: function( item ) {
			var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
			if ( this._hasScroll() ) {
				borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
				paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
				offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
				scroll = this.activeMenu.scrollTop();
				elementHeight = this.activeMenu.height();
				itemHeight = item.outerHeight();

				if ( offset < 0 ) {
					this.activeMenu.scrollTop( scroll + offset );
				} else if ( offset + itemHeight > elementHeight ) {
					this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
				}
			}
		},

		blur: function( event, fromFocus ) {
			if ( !fromFocus ) {
				clearTimeout( this.timer );
			}

			if ( !this.active ) {
				return;
			}

			this.active.removeClass( "coral-state-focus" );
			this.active = null;

			this._trigger( "onBlur", event, { item: this.active } );
		},

		_startOpening: function( submenu ) {
			clearTimeout( this.timer );

			// Don't open if already open fixes a Firefox bug that caused a .5 pixel
			// shift in the submenu position when mousing over the carat icon
			if ( submenu.attr( "aria-hidden" ) !== "true" ) {
				return;
			}

			this.timer = this._delay(function() {
				this._close();
				this._open( submenu );
			}, this.delay );
		},

		_open: function( submenu ) {
			var position = $.extend({
				of: this.active
			}, this.options.position );

			clearTimeout( this.timer );
			this.element.find( ".coral-menu" ).not( submenu.parents( ".coral-menu" ) )
				.hide()
				.attr( "aria-hidden", "true" );

			submenu
				.show()
				.removeAttr( "aria-hidden" )
				.attr( "aria-expanded", "true" )
				.position( position );
		},

		collapseAll: function( event, all ) {
			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				// If we were passed an event, look for the submenu that contains the event
				var currentMenu = all ? this.element :
					$( event && event.target ).closest( this.element.find( ".coral-menu" ) );

				// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
				if ( !currentMenu.length ) {
					currentMenu = this.element;
				}

				this._close( currentMenu );

				this.blur( event );
				this.activeMenu = currentMenu;
			}, this.delay );
		},

		// With no arguments, closes the currently active menu - if nothing is active
		// it closes all menus.  If passed an argument, it will search for menus BELOW
		_close: function( startMenu ) {
			if ( !startMenu ) {
				startMenu = this.active ? this.active.parent() : this.element;
			}

			startMenu
				.find( ".coral-menu" )
					.hide()
					.attr( "aria-hidden", "true" )
					.attr( "aria-expanded", "false" )
				.end()
				.find( ".coral-state-active" ).not( ".coral-state-focus" )
					.removeClass( "coral-state-active" );
		},

		_closeOnDocumentClick: function( event ) {
			return !$( event.target ).closest( ".coral-menu" ).length;
		},

		_isDivider: function( item ) {

			// Match hyphen, em dash, en dash
			return !/[^\-\u2014\u2013\s]/.test( item.text() );
		},

		collapse: function( event ) {
			var newItem = this.active &&
				this.active.parent().closest( ".coral-menu-item", this.element );
			if ( newItem && newItem.length ) {
				this._close();
				this.focus( event, newItem );
			}
		},

		expand: function( event ) {
			var newItem = this.active &&
				this.active
					.children( ".coral-menu " )
					.find( this.options.items )
					.first();

			if ( newItem && newItem.length ) {
				this._open( newItem.parent() );

				// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
				this._delay(function() {
					this.focus( event, newItem );
				});
			}
		},

		next: function( event ) {
			this._move( "next", "first", event );
		},

		previous: function( event ) {
			this._move( "prev", "last", event );
		},

		isFirstItem: function() {
			return this.active && !this.active.prevAll( ".coral-menu-item" ).length;
		},

		isLastItem: function() {
			return this.active && !this.active.nextAll( ".coral-menu-item" ).length;
		},

		_move: function( direction, filter, event ) {
			var next;
			if ( this.active ) {
				if ( direction === "first" || direction === "last" ) {
					next = this.active
						[ direction === "first" ? "prevAll" : "nextAll" ]( ".coral-menu-item" )
						.eq( -1 );
				} else {
					next = this.active
						[ direction + "All" ]( ".coral-menu-item" )
						.eq( 0 );
				}
			}
			if ( !next || !next.length || !this.active ) {
				next = this.activeMenu.find( this.options.items )[ filter ]();
			}

			this.focus( event, next );
		},

		nextPage: function( event ) {
			var item, base, height;

			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isLastItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.nextAll( ".coral-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base - height < 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.find( this.options.items )
					[ !this.active ? "first" : "last" ]() );
			}
		},

		previousPage: function( event ) {
			var item, base, height;
			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isFirstItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.prevAll( ".coral-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base + height > 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.find( this.options.items ).first() );
			}
		},

		_hasScroll: function() {
			return this.element.outerHeight() < this.element.prop( "scrollHeight" );
		},

		select: function( event ) {
			// TODO: It should never be possible to not have an active item at this
			// point, but the tests don't trigger mouseenter before click.
			this.active = this.active || $( event.target ).closest( ".coral-menu-item" );
			var ui = { item: this.active };
			if ( !this.active.has( ".coral-menu" ).length ) {
				this.collapseAll( event, true );
			}
			this._trigger( "onSelect", event, ui );
		},

		_filterMenuItems: function(character) {
			var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
				regex = new RegExp( "^" + escapedCharacter, "i" );

			return this.activeMenu
				.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".coral-menu-item" )
				.filter(function() {
					return regex.test( $.trim( $( this ).text() ) );
				});
		}
	});
    /*$.component("coral.menu", $.coral.basemenu, {
       
        options: {
             
        },
        
        _create: function() {
            this.element.addClass('coral-menu-list coral-helper-reset').
                    wrap('<div class="coral-menu coral-component coral-component-content coral-corner-all coral-helper-clearfix" />');
            
            this.element.children('li').each(function() {
                var listItem = $(this);
                
                if(listItem.children('h3').length > 0) {
                    listItem.addClass('coral-component-header coral-corner-all');
                }
                else {
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    var menuitemLink = listItem.children('a'),
                    icon = menuitemLink.data('icon');
                    
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="coral-menuitem-icon coral-icon ' + icon + '"></span>');
                    }
                }
            });
            
            this.menuitemLinks = this.element.find('.coral-menuitem-link:not(.coral-state-disabled)');

            this._bindEvents();
            
            this._super();
        },
            
        _bindEvents: function() {  
            var $this = this;

            this.menuitemLinks.on('mouseenter.coral-menu', function(e) {
                $(this).addClass('coral-state-hover');
            })
            .on('mouseleave.coral-menu', function(e) {
                $(this).removeClass('coral-state-hover');
            });

            if(this.options.popup) {
                this.menuitemLinks.on('click.coral-menu', function() {
                    $this.hide();
                });  
            }   
        }
    });*/
})(jQuery);

/**
 * CoralUI BreadCrumb component
 */
(function ($) {

    $.component("coral.breadcrumb", {
        
        _create: function() {
            this.element.wrap('<div class="coral-breadcrumb coral-module coral-component coral-component-header coral-helper-clearfix coral-corner-all" role="menu">');
            
            this.element.children('li').each(function(index) {
                var listItem = $(this);
                
                listItem.attr('role', 'menuitem');
                var menuitemLink = listItem.children('a');
                menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                if(index > 0)
                    listItem.before('<li class="coral-breadcrumb-chevron coral-icon coral-icon-triangle-1-e"></li>');
                else
                    menuitemLink.addClass('coral-icon coral-icon-home');
            });
        }
    });
})(jQuery);




/*
 * CoralUI TieredMenu component
 */
(function ($) {

    $.component("coral.tieredmenu", $.coral.basemenu, {
        
        options: {
            autoDisplay: true
        },
        
        _create: function() {
        	       	
        	this._generateULContent();
        	
            this._render();
            
            this.links = this.element.find('.coral-menuitem-link');

            this._bindEvents();
            
            this._super();
        },
         
        _render: function() {
        	var $this=this;
            this.element.addClass('coral-menu-list coral-helper-reset').
                    wrap('<div class="coral-tieredmenu coral-menu coral-component coral-component-content coral-corner-all coral-helper-clearfix" />');
            
            if (this.options.id){
            	this.element.parent().attr('id', this.options.id);
        	} else {
        		this.element.parent().uniqueId();
        		this.options.id = this.element.parent().attr('id');
        	}
            
            this.element.find('li').each(function() {
                    var listItem = $(this),
                    menuitemLink = listItem.children('a'),
                    icon = menuitemLink.data('icon');
                    //禁用个别菜单
                    $this._setMenuItemLinkDisabled(menuitemLink);
                     
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="coral-menuitem-icon coral-icon ' + icon + '"></span>');
                    }
                    
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    if(listItem.children('ul').length > 0) {
                        listItem.addClass('coral-menu-parent');
                        listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
                        menuitemLink.prepend('<span class="coral-icon coral-icon-triangle-1-e"></span>');
                    }
                
            
            });
        },
                
        _bindEvents: function() {        
            this._bindItemEvents();
        
            this._bindDocumentHandler();
        },
        /**
         * 为每个菜单绑定点击事件，覆盖父组件方法
         * @param $this {object} : current object
         * @param containRootLink {boolean} : 是否包含根菜单链接
         * @return ;
         */
        _bindMenuItemClick: function ($this, containRootLink) {
        	var rootLinks = [];
        	if (typeof containRootLink === "boolean" && !containRootLink) {
        		rootLinks = this.element.find('> .coral-menuitem > .coral-menuitem-link');
        	}
        	
        	$this.links.not(rootLinks).on('click', function() {
        		if ($this.options.disabled === true || $(this).hasClass("coral-state-disabled")) return ;
        		var datas={};
        		if($(this).parent("li").attr("data-id")!=null){
        			datas.id=$(this).parent("li").attr("data-id");
        		}
        		if($(this).attr("data-target")!=null){
        			datas.target=$(this).attr("data-target");
        		}
        		if($(this).attr("data-name")!=null){
        			datas.name=$(this).attr("data-name");
        		}
        		if($(this).attr("data-url")!=null){
        			datas.url=$(this).attr("data-url");
        		}
        		if($(this).find(":checkbox,:radio").length>0){
        			datas.hasChk=true;
        			datas.checked=$(this).find(":checkbox,:radio").prop('checked');
        		}else{
        			datas.hasChk=false;
        		}
        		var event={
					target: $this,
					currentTarget: $this,
					preventDefault: $.noop
				}
        		
				$this._trigger( "onClick", event, datas );
        		$this.hide();
            });
        },
        _bindItemEvents: function() {
            var $this = this;     
            
            this.links.on('mouseenter.coral-menu',function() {
            	if ($this.options.disabled === true|| $(this).hasClass("coral-state-disabled")) return ;
                var link = $(this),
	                menuitem = link.parent(),
	                autoDisplay = $this.options.autoDisplay,
	                activeSibling = menuitem.siblings('.coral-menuitem-active');
                
                if(activeSibling.length === 1) {
                    $this._deactivate(activeSibling);
                }
                if(autoDisplay||$this.active) {
                    if (menuitem.hasClass('coral-menuitem-active')) {
                        $this._reactivate(menuitem);
                    } else {
                        $this._activate(menuitem);
                    }  
                } else {
                    $this._highlight(menuitem);
                }
            });

            if(this.options.autoDisplay === false) {
                this.rootLinks = this.element.find('> .coral-menuitem > .coral-menuitem-link');
                this.rootLinks.data('primecoral-tieredmenu-rootlink', this.options.id).find('*').data('primecoral-tieredmenu-rootlink', this.options.id);

                this.rootLinks.on('click.coral-menu', function(e) {
                	if($this.options.disabled===true || $(this).hasClass("coral-state-disabled") )return ;
                    var link = $(this),
                    menuitem = link.parent(),
                    submenu = menuitem.children('ul.coral-menu-child');

                    if(submenu.length === 1) {
                        if(submenu.is(':visible')) {
                            $this.active = false;
                            $this._deactivate(menuitem);
                        }
                        else {                                        
                            $this.active = true;
                            $this._highlight(menuitem);
                            $this._showSubmenu(menuitem, submenu);
                        }
                    }
                    
            		var datas={};
            		if($(this).parent("li").attr("data-id")!=null){
            			datas.id=$(this).parent("li").attr("data-id");
            		}
            		if($(this).attr("data-target")!=null){
            			datas.target=$(this).attr("data-target");
            		}
            		if($(this).attr("data-name")!=null){
            			datas.name=$(this).attr("data-name");
            		}
            		if($(this).attr("data-url")!=null){
            			datas.url=$(this).attr("data-url");
            		}
            		if($(this).find(":checkbox,:radio").length>0){
            			datas.hasChk=true;
            			datas.checked=$(this).find(":checkbox,:radio").prop('checked');
            		} else {
            			datas.hasChk=false;
            		}
            		var event = {
						target: $this,
						currentTarget: $this,
						preventDefault: $.noop
					}
					$this._trigger( "onClick", event, datas );
            		// 如果li没有子元素，则隐藏
            		if (!$(this).parent("li").hasClass("coral-menu-parent")) {
            			$this.hide();
            		}
                });
                
                this._bindMenuItemClick($this,false);
            } else {
            	this._bindMenuItemClick($this,true);	
            }
            
            this.element.parent().find('ul.coral-menu-list').on('mouseleave.coral-menu', function(e) {
                if($this.activeitem) {
                    $this._deactivate($this.activeitem);
                }
           
                e.stopPropagation();
            });
        },
        /**
         * 根据父id或者根菜单的索引添加项
         * @param key { string, number } : 父id，根菜单index
         * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
         * @return ;
         */
        add: function (key, data) {
        	if ( (typeof key !== "string" && typeof key !== "number" && key !== null) || (typeof data !== "object" ) ) {
        		return;
        	}
        	
        	var that = this;
        	if (typeof key === "string" || key == null) {
        		this._addByParentId(key, data);
        	} else if (typeof key === "number") {
        		this._addByIndex(key, data);
        	}
        },
        /**
         * 根据父id添加项
         * @param pid { string } : 父id
         * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
         * @return ;
         */
        _addByParentId: function(pid, data) {
        	var that = this,
        		$pNode = this.element.find(".coral-menuitem").filter("[data-id$='" + pid + "']");
        	
        	if (!$pNode.length && pid !== null) {
        		return ; 
    		}
        	// 如果pid为null，则添加到根菜单下，否则根据pid添加
        	if (pid === null) {
        		this.element.append( this._getAddHTML(data,false) );
        		var $rootLinks = this._renderAddHTML();
        		this._bindAddItemEvents($rootLinks);
        		this._bindLinkRootEvents( $($rootLinks[0]) );
        	} else {
        		if (this._hasChildren($pNode)) {
        			$pNode.children("ul").append( this._getAddHTML(data,false) );
        		} else {
        			$pNode.append( this._getAddHTML(data, true) );
        		}
        		
        		var $links = this._renderAddHTML($pNode);
        		this._bindAddItemEvents($links);
        	}
        },
        
        /**
         * 生成添加项需要的html字符串
         * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
         * @param hasUL { boolean } : 是否创建ul元素
         * @return html { string } : 构造出来的要添加到页面中的html元素字符串
         */
        _getAddHTML: function(data, hasUL) {
        	var html = "";        	
        	// 如果data不是数组，先转换成数组
        	if ( !(data instanceof Array) ) {
        		data = [data];
        	}
        	if (typeof hasUL === "boolean" && hasUL) {
        		html+="<ul>";        		
        	}
	        for(var i=0;i<data.length;i++){
	        	if (data[i].id != "") {
	        		html+="<li data-id=\""+data[i].id+"\">";
	        	} else {
	        		html+="<li>";
	        	}
				html+=this._generateANode(data[i]);
				var items=data[i].items;
				if(items.length>0){
					html=this._generateHTML(html,items);
				}
				html+="</li>"
			}
	        if (typeof hasUL === "boolean" && hasUL) {
	        	html+="</ul>";		
        	}
			
			return html;
        },
        /**
         * 渲染生成的html
         * @param $pNode { jquery{} } : 找到的父元素li
         * @return  { jquery{} } : 返回$pNode下的所有a元素，以便后面绑定事件用
         */
        _renderAddHTML: function($pNode) {
        	var $this = this,
        		$links = this.element.find('li').not(".coral-menuitem");
        	
        	if( $pNode && !$pNode.children('ul').hasClass("coral-menu-list")) {
        		$pNode.addClass('coral-menu-parent');
        		$pNode.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
        		$pNode.children("a").prepend('<span class="coral-icon coral-icon-triangle-1-e"></span>');
            }
        	
        	$links.each(function() {
                    var listItem = $(this),
                    menuitemLink = listItem.children('a'),
                    icon = menuitemLink.data('icon');
                    //禁用个别菜单
                    $this._setMenuItemLinkDisabled(menuitemLink);
                     
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="coral-menuitem-icon coral-icon ' + icon + '"></span>');
                    }
                    
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    if(listItem.children('ul').length > 0) {
                        listItem.addClass('coral-menu-parent');
                        listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
                        menuitemLink.prepend('<span class="coral-icon coral-icon-triangle-1-e"></span>');
                    }
            });
            
            return $links.find('.coral-menuitem-link');
        },
        /**
         * 给根菜单绑定事件，用以显示子菜单
         * @param $rootLinks { jquery [{}] } : 根菜单a元素s
         * @return ;
         */
        _bindLinkRootEvents: function ($rootLinks) {
        	var $this = this;
        	$rootLinks.data('primecoral-tieredmenu-rootlink', this.options.id).find('*').data('primecoral-tieredmenu-rootlink', this.options.id);

        	$rootLinks.on('click.coral-menu', function(e) {
        		if($this.options.disabled === true || $(this).hasClass("coral-state-disabled") ) return ;
                var link = $(this),
                menuitem = link.parent(),
                submenu = menuitem.children('ul.coral-menu-child');

                if(submenu.length === 1) {
                    if(submenu.is(':visible')) {
                        $this.active = false;
                        $this._deactivate(menuitem);
                    } else {                                        
                        $this.active = true;
                        $this._highlight(menuitem);
                        $this._showSubmenu(menuitem, submenu);
                    }
                }
            });            
        },
        /**
         * 给新增的菜单项绑定事件
         * @param $$links { jquery [{}] } : 菜单a元素s
         * @return ;
         */
        _bindAddItemEvents: function($links) {
        	var $this = this;
        	
        	$links.on('click',function(){
        		if($this.options.disabled === true || $(this).hasClass("coral-state-disabled"))return ;
        		var datas = {};
        		if($(this).parent("li").attr("data-id")!=null){
        			datas.id=$(this).parent("li").attr("data-id");
        		}
        		if($(this).attr("data-target")!=null){
        			datas.target=$(this).attr("data-target");
        		}
        		if($(this).attr("data-name")!=null){
        			datas.name=$(this).attr("data-name");
        		}
        		if($(this).attr("data-url")!=null){
        			datas.url=$(this).attr("data-url");
        		}
        		if($(this).find(":checkbox,:radio").length>0){
        			datas.hasChk=true;
        			datas.checked=$(this).find(":checkbox,:radio").prop('checked');
        		} else {
        			datas.hasChk=false;
        		}
        		var event = {
					target: $this,
					currentTarget: $this,
					preventDefault: $.noop
				};        		
				$this._trigger( "onClick", event, datas );
				$this.hide();
            });
        	
        	$links.on('mouseenter',function() {
        		if($this.options.disabled===true || $(this).hasClass("coral-state-disabled") )return ;
                var link = $(this),
                menuitem = link.parent(),
                autoDisplay = $this.options.autoDisplay;
                
                var activeSibling = menuitem.siblings('.coral-menuitem-active');
                if(activeSibling.length === 1) {
                    $this._deactivate(activeSibling);
                }

                if(autoDisplay||$this.active) {
                    if(menuitem.hasClass('coral-menuitem-active')) {
                        $this._reactivate(menuitem);
                    } else {
                        $this._activate(menuitem);
                    }  
                } else {
                    $this._highlight(menuitem);
                }
            });            
            
            $links.parents("li").find('ul.coral-menu-list').on('mouseleave.coral-menu', function(e) {
                if ($this.activeitem) {
                    $this._deactivate($this.activeitem);
                }
           
                e.stopPropagation();
            });
        },
        /**
         * 判断菜单项li是否有子菜单
         * @param $li { jquery{} } : 要判断的菜单项li元素
         * @return { boolean } : true - 有子菜单；false - 无子菜单
         */        
        _hasChildren: function($li) {
        	if ($li.hasClass("coral-menu-parent")) {
        		return true;
        	} else {
        		return false;
        	}
        },
        /**
         * 获取根菜单个数
         * @return { number } : number of root menuItems
         */
        _getLength: function () {
        	return this.element.children("li").length;
        },
        /**
         * 根据根菜单索引添加项
         * @param index { number } : 根菜单索引
         * @return ;
         */
        _addByIndex: function(index, data) {
        	var that = this,
				idx = parseInt( index );
			
			if ( idx < 0 || idx > this._getLength() ) {				
				return ;
			}
			
			if (this._getLength() == 0 || idx == this._getLength() ) {
				this.element.append( this._getAddHTML(data,false) );
			} else {
				this.element.children("li:eq("+idx+")").before(this._getAddHTML(data,false));
			}
			
    		var $rootLinks = this._renderAddHTML();
    		this._bindAddItemEvents($rootLinks);
    		this._bindLinkRootEvents( $($rootLinks[0]) );
        },
        /**
         * 删除所有项
         * @return ;
         */
		remove: function ( ) {
			var node = this.element.children("li");
			
			if ( !node.length ) {
				return ;
			}
			
			node.remove();
		},
        /**
         * 根据id或者根菜单索引删除项
         * @param key { string,number } : id，根菜单索引
         * @return ;
         */
		removeItem: function ( key ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				this._removeById( key );
			} else {
				this._removeByIndex( key );
			}			
		},
		/**
		 * 根据id删除项
		 * @param id { string } : id
         * @return ;
		 */
		_removeById: function (id) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			if (!node.length) {
				return ;
			}
			// 如果父元素没有子元素，则将父元素也删除
			if (!node.siblings("li").length) {
				node.parent("ul").remove();
			} else {
				node.remove();
			}
		},
		/**
		 * 根据根菜单index删除项
		 * @param index { number } :根菜单索引
         * @return ;
		 */
		_removeByIndex: function ( index ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var $removeNode = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!$removeNode.length) {
				return ;
			}
			
			$removeNode.remove();
		},
		/**
	     * 根据id或者根菜单索引修改项的文本
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
		updateItem: function ( key, label ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				this._updateById( key, label );
			} else {
				this._updateByIndex( key, label );
			}
		},
		/**
		 * 根据id修改项的文本
		 * @param id { string } : id
         * @return ;
		 */
		_updateById: function ( id, label ) {
			var nodeUpdate = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			
			if ( !nodeUpdate.length ) {
				return ;
			}
			
			nodeUpdate.children(".coral-menuitem-link").children( ".coral-menuitem-text" ).html( label );	
		},
		/**
		 * 根据根菜单index修改项的文本
		 * @param index { number } :根菜单索引
         * @return ;
		 */
		_updateByIndex: function ( index, label ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var nodeUpdate = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!nodeUpdate.length) {
				return ;
			}
			
			nodeUpdate.children(".coral-menuitem-link").children( ".coral-menuitem-text" ).html( label );
		},
        _bindDocumentHandler: function() {
            var $this = this;

            $(document.body).on('click.coral-menu', function(e) {
                var target = $(e.target);
                if(target.data('primecoral-tieredmenu-rootlink') === $this.options.id) {
                    return;
                }
                    
                $this.active = false;

                $this.element.find('li.coral-menuitem-active').each(function() {
                    $this._deactivate($(this), true);
                });
            });
        },
        /**
         * 启用所有的菜单项
         * @return ;
         */
        enable: function() {
        	var node = this.element.find(".coral-menuitem");
			
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );
        },
        /**
	     * 根据id或者根菜单索引，启用
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
        enableItem: function(key) {
        	var that = this;
			
			if ( typeof key === "string" ) {
				this._enableItemById( key );
			} else {
				this._enableItemByIndex( key );
			}
        },
        /**
		 * 根据id，启用
		 * @param id { string } : id
         * @return ;
		 */
        _enableItemById: function(id) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
						
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );        	
        },
        /**
	     * 根据根菜单索引，启用
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
        _enableItemByIndex: function(index) {
        	var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );
        },
        /**
         * 禁用所有的菜单项
         * @return ;
         */
        disable: function() {
        	var node = this.element.find(".coral-menuitem");
			
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );
        },
        /**
	     * 根据id或者根菜单索引，禁用
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
        disableItem: function(key) {
        	var that = this;
			
			if ( typeof key === "string" ) {
				return this._disableItemById( key );
			} else {
				return this._disableItemByIndex( key );
			}
        },
        /**
		 * 根据id，禁用
		 * @param id { string } : id
         * @return ;
		 */
        _disableItemById: function(id) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
						
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );        	
        },
        /**
	     * 根据根菜单索引，禁用
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
        _disableItemByIndex: function(index) {
        	var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );
        },
        /**
         * 隐藏所有的菜单项
         * @return ;
         */
        hideAll: function () {
        	var node = this.element.children("li");
        	
        	if ( !node.length ) {
        		return ;
        	}
        	
        	node.hide();
        },
        /**
	     * 根据id或者根菜单索引，隐藏
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
        hideItem: function ( key ) {
        	var that = this;
        	
        	if ( typeof key === "string" ) {
        		return that._hideById( key );
        	} else {
        		return that._hideByIndex( key );
        	}
        },
        /**
		 * 根据id，隐藏
		 * @param id { string } : id
         * @return ;
		 */
        _hideById: function ( id ) {
        	var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			
			if ( !node.length ) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", true );
		},
		/**
	     * 根据根菜单索引，隐藏
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
		_hideByIndex: function ( index ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", true );
		},
		/**
         * 显示所有的菜单项
         * @return ;
         */
		showAll: function () {
			var node = this.element.children("li");
			
			if ( !node.length ) {
				return ;
			}
			
			node.show();
		},
		/**
	     * 根据id或者根菜单索引，显示
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
		showItem: function ( key ) {
			var that = this;
			
			if (typeof key === "string" ) {
				return that._showById(key);
			} else {
				return that._showByIndex(key);
			}
		},
		 /**
		 * 根据id，显示
		 * @param id { string } : id
         * @return ;
		 */
		_showById: function ( id ) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			
			if ( !node.length ) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", false );	
		},
		/**
	     * 根据根菜单索引，显示
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
		_showByIndex: function ( index ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", false );	
		},
        _deactivate: function(menuitem, animate) {
            this.activeitem = null;
            menuitem.children('a.coral-menuitem-link').removeClass('coral-state-hover');
            menuitem.removeClass('coral-menuitem-active');

            if(animate)
                menuitem.children('ul.coral-menu-child:visible').fadeOut('fast');
            else
                menuitem.children('ul.coral-menu-child:visible').hide();
        },

        _activate: function(menuitem) {
            this._highlight(menuitem);

            var submenu = menuitem.children('ul.coral-menu-child');
            if(submenu.length === 1) {
                this._showSubmenu(menuitem, submenu);
            }
        },

        _reactivate: function(menuitem) {
            this.activeitem = menuitem;
            var submenu = menuitem.children('ul.coral-menu-child'),
            activeChilditem = submenu.children('li.coral-menuitem-active:first'),
            _self = this;

            if(activeChilditem.length === 1) {
                _self._deactivate(activeChilditem);
            }
        },

        _highlight: function(menuitem) {
            this.activeitem = menuitem;
            menuitem.children('a.coral-menuitem-link').addClass('coral-state-hover');
            menuitem.addClass('coral-menuitem-active');
        },
                
        _showSubmenu: function(menuitem, submenu) {
        	// 如果子元素中都是隐藏的元素，则返回。
        	if (!submenu.children("li:not(.coral-tieredmenu-hidden)").length) return;
        	//禁用对trigger的事件触发
            if(this.options.disabled===true)return ;
            submenu.css({
                'left': menuitem.outerWidth(),
                'top': 0,
                'z-index': ++$.coral.zindex
            });

            submenu.show();
        }
            
    });

})(jQuery);

/**
 * CoralUI Menubar component
 */

(function ($) {

    $.component("coral.menubar", $.coral.tieredmenu, {
        
        options: {
            autoDisplay: true   
        },
        component: function(){
        	return this.element.parent();
        },
        _create: function() {
        	//this._generateULContent();
        	this._super();
        	// 继承 tieredmenu 父方法中给 parent 元素赋了跟 element 一样的 id。
            this.options.id = this.element.parent().removeAttr("id").uniqueId();
            this.element.parent().removeClass('coral-tieredmenu').addClass('coral-menubar');
            this.element.find(">li>ul").addClass('coral-dropdown-menu');
        },
        _showSubmenu: function(menuitem, submenu) {
            var win = $(window),
            submenuOffsetTop = null,
            submenuCSS = {
                'z-index': ++$.coral.zindex
            };

            if(menuitem.parent().hasClass('coral-menu-child')) {
                submenuCSS.left = menuitem.outerWidth();
                submenuCSS.top = 0; 
                submenuOffsetTop = menuitem.offset().top - win.scrollTop();
            } 
            else {
                submenuCSS.left = 0;
                submenuCSS.top = menuitem.outerHeight(); 
                submenuOffsetTop = menuitem.offset().top + submenuCSS.top - win.scrollTop();
            }

            //adjust height within viewport
            submenu.css('height', 'auto');
            if((submenuOffsetTop + submenu.outerHeight()) > win.height()) {
                submenuCSS.overflow = 'auto';
                submenuCSS.height = win.height() - (submenuOffsetTop + 20);
            }

            submenu.css(submenuCSS).show();
        }       
    });

})(jQuery);

/*
 * CoralUI SlideMenu component
 */

(function ($) {

    $.component("coral.slidemenu", $.coral.basemenu, {
                
        _create: function() {
        	//this.options.popup=false;
        	this._generateULContent();
            
            this._render();
        
            //elements
            this.rootList = this.element;
            this.content = this.element.parent();
            this.wrapper = this.content.parent();
            this.container = this.wrapper.parent();
            this.submenus = this.container.find('ul.coral-menu-list');
            
            this.links = this.element.find('a.coral-menuitem-link:not(.coral-state-disabled)');
            this.backward = this.wrapper.children('div.coral-slidemenu-backward');

            //config
            this.stack = [];
            this.jqWidth = this.container.width();

            var $this = this;

            if(!this.element.hasClass('coral-menu-dynamic')) {
                this._applyDimensions();
            }
            this._super();

            this._bindEvents();
        },
        
        _render: function() {
        	var $this=this;
            this.element.addClass('coral-menu-list coral-helper-reset').
                    wrap('<div class="coral-menu coral-slidemenu coral-component coral-component-content coral-corner-all coral-helper-clearfix"/>').
                    wrap('<div class="coral-slidemenu-wrapper" />').
                    after('<div class="coral-slidemenu-backward coral-component-header coral-corner-all coral-helper-clearfix">\n\
                    <span class="coral-icon coral-icon-triangle-1-w"></span>Back</div>').
                    wrap('<div class="coral-slidemenu-content" />');
            
            this.element.parent().uniqueId();
            this.options.id = this.element.parent().attr('id');
          
            this.element.find('li').each(function() {
                    var listItem = $(this),
                    menuitemLink = listItem.children('a'),
                    icon = menuitemLink.data('icon');
                     //禁用个别菜单
                    $this._setMenuItemLinkDisabled(menuitemLink);
                    
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="coral-menuitem-icon coral-icon ' + icon + '"></span>');
                    }
                    
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    if(listItem.children('ul').length > 0) {
                        listItem.addClass('coral-menu-parent');
                        listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
                        menuitemLink.prepend('<span class="coral-icon coral-icon-triangle-1-e"></span>');
                    }
                
            
            });
        },
              
        _bindEvents: function() {
            var $this = this;
            
            //为每个菜单绑定点击事件
            this._bindMenuItemClick($this)

            this.links.on('mouseenter.coral-menu',function() {
               $(this).addClass('coral-state-hover'); 
            })
            .on('mouseleave.coral-menu',function() {
               $(this).removeClass('coral-state-hover'); 
            })
            .on('click.coral-menu',function() {
               var link = $(this),
               submenu = link.next();

               if(submenu.length == 1) {
                   $this._forward(submenu);
               }
            });

            this.backward.on('click.coral-menu',function() {
                $this._back();
            });
       },

       _forward: function(submenu) {
            var $this = this;

            this._push(submenu);

            var rootLeft = -1 * (this._depth() * this.jqWidth);

            submenu.show().css({
                left: this.jqWidth
            });

            this.rootList.animate({
                left: rootLeft
            }, 300, 'easeInOutCirc', function() {
                if($this.backward.is(':hidden')) {
                    $this.backward.fadeIn('fast');
                }
            });
       },

       _back: function() {
            var $this = this,
            last = this._pop(),
            depth = this._depth();

            var rootLeft = -1 * (depth * this.jqWidth);

            this.rootList.animate({
                left: rootLeft
            }, 300, 'easeInOutCirc', function() {
                last.hide();

                if(depth === 0) {
                    $this.backward.fadeOut('fast');
                }
            });
       },

       _push: function(submenu) {
             this.stack.push(submenu);
       },
    
       _pop: function() {
             return this.stack.pop();
       },

       _last: function() {
            return this.stack[this.stack.length - 1];
        },

       _depth: function() {
            return this.stack.length;
        },

       _applyDimensions: function() {
            this.submenus.width(this.container.width());
            this.wrapper.height(this.rootList.outerHeight(true) + this.backward.outerHeight(true));
            this.content.height(this.rootList.outerHeight(true));
            this.rendered = true;
        },

       show: function() {                
            this.align();
            this.container.css('z-index', ++$.coral.zindex).show();

            if(!this.rendered) {
                this._applyDimensions();
            }
        }        
    });

})(jQuery);


/**
 * CoralUI Context Menu component
 */

(function ($) {

    $.component("coral.contextmenu", $.coral.tieredmenu, {
        
        options: {
            autoDisplay: true,
            target: null,
            event: 'contextmenu'
        },
        
        _create: function() {
        	//this._generateULContent();
            this._super();
            this.element.parent().removeClass('coral-tieredmenu').
                    addClass('coral-contextmenu coral-menu-dynamic coral-shadow coral-contextmenu');
            
            var $this = this;
			//处理如果是字符串的target属性
            this.options.target = typeof this.options.target==="string" ?$('#'+this.options.target):this.options.target
            this.options.target = this.options.target||$(document);

            if(!this.element.parent().parent().is(document.body)) {
                this.element.parent().appendTo('body');
            }
            
            this.options.target.on(this.options.event + '.coral-contextmenu' , function(e){
                    $this.show(e);
            });   
        },        

        _bindItemEvents: function() {
            this._super();

            var $this = this;

            //hide menu on item click
            this.links.bind('click', function() {
            	// lihaibo add
            	/*if ($(this).siblings("ul").length != 0) {
            		return ;
            	} */ 
            	//
            	if($(this).parent().hasClass("coral-menu-parent"))
            		return false;
            	$this._hide();
            });
        },

        _bindDocumentHandler: function() {
            var $this = this;

            //hide overlay when document is clicked
            $(document.body).bind('click.coral-contextmenu', function (e) {
                if($this.element.parent().is(":hidden")) {
                    return;
                }
                // lihaibo 注释                
                $this._hide();
                //
            });
        },

        show: function(e) { 
        	if(this.options.disabled===true){
        		e.preventDefault();
           		e.stopPropagation();
        		return;
        	}
            //hide other contextmenus if any
            $(document.body).children('.coral-contextmenu:visible').hide();

            var win = $(window),
            left = e.pageX,
            top = e.pageY,
            width = this.element.parent().outerWidth(),
            height = this.element.parent().outerHeight();

            //collision detection for window boundaries
            if((left + width) > (win.width())+ win.scrollLeft()) {
                left = left - width;
            }
            if((top + height ) > (win.height() + win.scrollTop())) {
                top = top - height;
            }

            if(this.options.beforeShow) {
                this.options.beforeShow.call(this);
            }

            this.element.parent().css({
                'left': left,
                'top': top,
                'z-index': ++$.coral.zindex
            }).show();

            e.preventDefault();
            e.stopPropagation();
        },

        _hide: function() {
            var $this = this;

            //hide submenus
            this.element.parent().find('li.coral-menuitem-active').each(function() {
                $this._deactivate($(this), true);
            });

            this.element.parent().fadeOut('fast');
        },

        isVisible: function() {
            return this.element.parent().is(':visible');
        },

        getTarget: function() {
            return this.jqTarget;
        }              
              
    });

})(jQuery);
/**
 * CoralUI NavigateMenuBase component
 */
(function ($) {

    $.component("coral.navigatemenubase", $.coral.basemenu, {
        
        options: {
            autoDisplay: true    
        },
        
        _create: function() {
        	       	
        	this._generateULContent();
        	
            this._render();
            
            this.links = this.element.find('.coral-menuitem-link:not(.coral-state-disabled)');

            this._bindEvents();
            
            this._super();
        },
                
        _render: function() {
        	var $this=this;
            this.element.addClass('coral-menu-list coral-helper-reset').
                    wrap('<div class="coral-tieredmenu coral-menu coral-component coral-component-content coral-corner-all coral-helper-clearfix" />');
            
            this.element.parent().uniqueId();
            this.options.id = this.element.parent().attr('id');
          
            this.element.find('li').each(function() {
                    var listItem = $(this),
                    menuitemLink = listItem.children('a'),
                    icon = menuitemLink.data('icon');
                    //禁用个别菜单
                    $this._setMenuItemLinkDisabled(menuitemLink);
                     
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="coral-menuitem-icon coral-icon ' + icon + '"></span>');
                    }
                    
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    if(listItem.children('ul').length > 0) {
                        listItem.addClass('coral-menu-parent');
                        //子菜单不会移动
                        listItem.css('position','static');
                        //子菜单宽度100%
     					listItem.children('ul').css('width','100%');
     					//子菜单底部对齐
     					//listItem.children('ul').css('margin-top','0px');
     					//子菜单横排
     					listItem.find('ul li').css('width','auto');
     					//子菜单A元素宽度自适应
     					listItem.find('ul li a').css('width','auto');
                        listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
                        menuitemLink.prepend('<span class="coral-icon coral-icon-triangle-1-e"></span>');
                    }
                
            
            });
        },
                
        _bindEvents: function() {        
            this._bindItemEvents();
        
            this._bindDocumentHandler();
        },
    
        _bindItemEvents: function() {
            var $this = this;
            
            //为每个菜单绑定点击事件
            this._bindMenuItemClick($this);

           
            this.links.on('mouseenter.coral-menu',function() {
            	if($this.options.disabled===true){
            		return ;
            	}
                var link = $(this),
                menuitem = link.parent(),
                autoDisplay = $this.options.autoDisplay;

                var activeSibling = menuitem.siblings('.coral-menuitem-active');
                if(activeSibling.length === 1) {
                    $this._deactivate(activeSibling);
                }

                if(autoDisplay||$this.active) {
                	
                    if(menuitem.hasClass('coral-menuitem-active')) {
                        $this._reactivate(menuitem);
                    }
                    else {
                        $this._activate(menuitem);
                    }  
                }
                else {
                    $this._highlight(menuitem);
                }
            });

            if(this.options.autoDisplay === false) {
                this.rootLinks = this.element.find('> .coral-menuitem > .coral-menuitem-link');
                this.rootLinks.data('primecoral-tieredmenu-rootlink', this.options.id).find('*').data('primecoral-tieredmenu-rootlink', this.options.id);

                this.rootLinks.on('click.coral-menu', function(e) {
                    var link = $(this),
                    menuitem = link.parent(),
                    submenu = menuitem.children('ul.coral-menu-child');

                    if(submenu.length === 1) {
                        if(submenu.is(':visible')) {
                            $this.active = false;
                            $this._deactivate(menuitem);
                        }
                        else {                                        
                            $this.active = true;
                            $this._highlight(menuitem);
                            $this._showSubmenu(menuitem, submenu);
                        }
                    }
                });
            }
            
            this.element.parent().find('ul.coral-menu-list').on('mouseleave.coral-menu', function(e) {
                if($this.activeitem) {
                	//禁止隐藏
                    //$this._deactivate($this.activeitem);

                }
                e.stopPropagation();
            });
        },
       
        _bindDocumentHandler: function() {
            var $this = this;

            $(document.body).on('click.coral-menu ', function(e) {
                var target = $(e.target);
                if(target.data('primecoral-tieredmenu-rootlink') === $this.options.id) {
                    return;
                }
                //如果点击checkbox不要隐藏菜单
                if(target.is("[type='checkbox']"))return ;  
                $this.active = false;

                $this.element.find('li.coral-menuitem-active').each(function() {
                	//fixmenu来隐藏
                	if($this.options.fixmenu==="false"){
                    	$this._deactivate($(this), true);
                	}
                });
            });
        },
    
        _deactivate: function(menuitem, animate) {
            this.activeitem = null;
            menuitem.children('a.coral-menuitem-link').removeClass('coral-state-hover');
            menuitem.removeClass('coral-menuitem-active');

            if(animate)
                menuitem.children('ul.coral-menu-child:visible').fadeOut('fast');
            else
                menuitem.children('ul.coral-menu-child:visible').hide();
        },

        _activate: function(menuitem) {
            this._highlight(menuitem);

            var submenu = menuitem.children('ul.coral-menu-child');
            if(submenu.length === 1) {
                this._showSubmenu(menuitem, submenu);
            }
        },

        _reactivate: function(menuitem) {
            this.activeitem = menuitem;
            var submenu = menuitem.children('ul.coral-menu-child'),
            activeChilditem = submenu.children('li.coral-menuitem-active:first'),
            _self = this;

            if(activeChilditem.length === 1) {
                _self._deactivate(activeChilditem);
            }
        },

        _highlight: function(menuitem) {
            this.activeitem = menuitem;
            menuitem.children('a.coral-menuitem-link').addClass('coral-state-hover');
            menuitem.addClass('coral-menuitem-active');
        },
                
        _showSubmenu: function(menuitem, submenu) {
        	//禁用对trigger的事件触发
            if(this.options.disabled===true)return ;
            submenu.css({
                'left': menuitem.outerWidth(),
                'top': 0,
                'z-index': ++$.coral.zindex
            });

            submenu.show();
        }
            
    });

})(jQuery);

/**
 * CoralUI Navigate menu component
 */
(function ($) {

    $.component("coral.navigatemenu",$.coral.navigatemenubase, {
        
        options: {
            autoDisplay: true,
            checkable : null,//是否支持多选
            fixmenu : null//是否固定底层菜单
        },
        //重写，递归调用改为只解析2层
        _generateHTML : function(html,data){
        	html+="<ul>";
	        for(var i=0;i<data.length;i++){
				html+="<li>"
				html+=this._generateANode(data[i]);
				var name=data[i].name;
				var items=data[i].items;
				if(items.length>0){
					html=this._generateLast(html,items,name);
				}
				html+="</li>"
			}
			html+="</ul>";
			return html;
        },
        //解析下层
        _generateLast : function(html,data,name){
        	html+="<ul>";
	        for(var i=0;i<data.length;i++){
				html+="<li>"
				html+=this._generateChbNode(data[i],name);
				html+="</li>"
			}
			html+="</ul>";
			return html;
        },
        //增加checkbox
        _generateChbNode : function(node,gname){
        	var str="<a";
			if(node.iconclass!=""){
				//str+=" data-icon='"+node.iconclass+"'";
			}
			if(node.name!=""){
				str+=" data-name='"+node.name+"'";
			}
			if(node.disabled!=""){
				str+=" data-disabled='"+node.disabled+"'";
			}
			if(node.url!=""){
				str+=" href='"+node.url+"'";
			}
			if(node.target!=""){
				str+=" target='"+node.target+"'";
			}
			str+=">";
			var checked=node.checked===true?"checked":"";
			var dis=node.disabled=="true"?"disabled=true":"";
			var chkstr="<input type='radio' "+dis+" name='"+gname+"' "+checked+" data-id='"+this.element[0].id+"_"+node.name+"'/>";
			if(this.options.checkable===true){
				chkstr="<input type='checkbox' "+dis+" "+checked+" data-id='"+this.element[0].id+"_"+node.name+"'/>";
			}
			str+=chkstr;
			if(node.name!=""){
				str+=node.name;
			}
			str+="</a>"
			return str;
        },
        _create: function() {
        	this._super();
            this.element.parent().removeClass('coral-tieredmenu').addClass('coral-navigatemenu');

            if(this.options.fixmenu!=="false"){
            	//设置主菜单的高度
            	var ulHeight=$(this.links[0]).parent(":first").find("ul").outerHeight();
            	var divHeight=this.element.parent().outerHeight();
            	this.element.parent().outerHeight(ulHeight+divHeight-3);
            }
            if(this.options.fixmenu!=="false"){
            	//激活第一个菜单
            	this._activate($(this.links[0]).parent());
            	//设置第一个菜单高度 修正ie8下高度为0px
            	$(this.links[0]).parent(":first").find("ul").css("height","auto");
            }
        },
        _showSubmenu: function(menuitem, submenu) {
            var win = $(window),
            submenuOffsetTop = null,
            submenuCSS = {
                'z-index': ++$.coral.zindex
            };

            if(menuitem.parent().hasClass('coral-menu-child')) {
                submenuCSS.left = menuitem.outerWidth();
                submenuCSS.top = 0; 
                submenuOffsetTop = menuitem.offset().top - win.scrollTop();
            } 
            else {
                submenuCSS.left = 0;
                submenuCSS.top = this.element.parent().outerHeight(); 
                submenuOffsetTop = menuitem.offset().top + submenuCSS.top - win.scrollTop();
            }

            //adjust height within viewport
            submenu.css('height', 'auto');
            if((submenuOffsetTop + submenu.outerHeight()) > win.height()) {
                submenuCSS.overflow = 'auto';
                submenuCSS.height = win.height() - (submenuOffsetTop + 20);
            }
            submenu.css(submenuCSS).show();
        },
        //勾选菜单
        check : function(name,checked){
			$("[data-id='"+this.element[0].id+"_"+name+"']").prop("checked",checked);
        }
    });
})(jQuery);

(function( $, undefined ) {

$.component( "coral.autocomplete", $.coral.inputbase,{
	version: "4.0.2",
	defaultElement: "<input>",
	castProperties : ["source","buttons","rootNode", "triggers"],
	options: {
		appendTo: "body",//如果放在dialog里面，会把dialog撑开。
		autoFocus: false,
		allowRepeat: false,
		asyncType: "post",
		delay: 300,
		maxLabelWidth : "auto" ,
		multiLineLabel: false,
		minLength: 0,
		minHeight: 1,
		height: "auto",
		multiple : false,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		value: "",
		text: "",
		forceSelection: false,
		defaultValue: "", // value separator text
		postMode:"value", // value, text, value-text
		required: false,
		showStar: true,
		separator: ",",
		buttons: [],
		errMsg: null,
		errMsgPosition: "leftBottom",
		panelHeight:"auto",
		maxPanelHeight: 200,
		iframePanel : false,
		isLabel: false,
		source: null,
		valueField: "value",
		textField: "label",
		searchField:"valueField",
		// callbacks
		onValidSuccess: null,
		onValidError: null,
		onChange: null,
		onBlur: null,
		onClose: null,
		onFocus: null,
		onOpen: null,
		oncancel:null,
		onResponse: null,
		onSearch: null,
		onSelect: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},

	requestIndex: 0,
	pending: 0,
	_create: function() {
		var that = this;
		this._prepareInit();
		this._initAutocomplete();
		this._initState();
		this._initSource();
		this._initData();
		this._bindEvent();
		this._setDefaultValue();
		this._setDefaultText();
		this.liveRegion = $( "<span>", {
				role: "status",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			})
			.addClass( "coral-helper-hidden-accessible" )
			.appendTo( this.document[ 0 ].body );

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the component is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
		if ( this.options.multiLineLabel ) {
			// TODO: 销毁的时候应该考虑easyText组件的销毁情况，待测试
			$( this.element ).easyText({
				minWidth:10,
				maxWidth:200,
				maxChars:60
			});
			// Clicks outside of a treePanel move the input element to the end
			this._on( this.document, {
				click: function( event ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					this._moveInput( "last", event );
				}
			});
		}
	},
	_prepareInit: function(){
		this.lastSelectedItem = {};
		this.selectedItems = [];
		
		this.isNewMenu = true;
	},
	_initAutocomplete: function(){
		var autocompleteCls = this.options.render == "tree"?"autocompletetree":"autocomplete";
		if ( this.options.iframePanel ){
			   this.iframePanel = $( "<iframe class='coral-autocomplete-iframePanel' style='position:absolute;display:none;'></iframe>" ).appendTo( "body" );
		}
		if ( this.options.multiLineLabel ) {
			var that = this, nodeName = this.element[ 0 ].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";
			this.ismultiLineLabel =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );
			
			this.autocompleteWrapper = $("<span class='coral-"+autocompleteCls+" coral-textboxlist coral-textbox'></span>").insertAfter(this.element);
			this.elementBorder = $("<span class='coral-textbox-border coral-corner-all'></span>").css({
				minHeight: this.options.minHeight  + "px",
				height: this.options.height,
				overflow: "auto"
			}).appendTo(this.autocompleteWrapper);
			// 下拉框显示值文本框
			this.valuebox = $("<input type='hidden'>").appendTo(this.elementBorder);
			this.valueMethod = this.valuebox[ isTextarea || isInput ? "val" : "text" ];
			this.textMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			
			this.element
				.addClass( "coral-validation-"+autocompleteCls+" coral-autocomplete-input coral-autocomplete-text coral-textbox-default" )
				.attr( "autocomplete", "off" );
			this.textboxlistUl = $( "<ul class='coral-textboxlist-ul'><li class='coral-textboxlist-inputLi'></li></ul>" );
			this.textboxlistUl.appendTo( this.elementBorder );
			this.element.appendTo( this.textboxlistUl.find( ".coral-textboxlist-inputLi" ) );
			if ( this.options.buttons.length > 0 ) {
				this._createButtonPanel();
			}
			// 初始化id，name，value
			if ( typeof this.element.attr("id") != "undefined" ) {
	    		this.options.id = this.element.attr("id");
	    	} else if ( this.options.id ){
	    		this.element.attr("id", this.options.id);
	    	}
			if ( typeof this.element.attr( "name" ) != "undefined" ) {
	    		this.options.name = this.element.attr( "name" ); // name属性加到hidden元素上
	    		this.valuebox.attr( "name", this.options.name );
	    		this.element.removeAttr( "name" );
	    	} else if ( this.options.name ) {
	    		this.valuebox.attr( "name", this.options.name );
	    	}
	
			if ( this.options.text ) {
				this.setText( this.options.text );
			}
			if ( $.trim( this.valuebox.val() ) != "" ) {
	    		this.options.value = this.valuebox.val();
	    	}
			if ( this.options.showPopup ) {
				
			}
		} else {
			var nodeName = this.element[ 0 ].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";
			this.ismultiLineLabel =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );
			
			this.autocompleteWrapper = $("<span class=\"coral-"+autocompleteCls+" coral-textbox\" style=\"border-width: 0;\"></span>").insertAfter(this.element);
			this.elementBorder = $("<span class=\"coral-textbox-border coral-corner-all\"></span>").css({
				minHeight: this.options.minHeight  + "px"
			}).appendTo(this.autocompleteWrapper);
			// 下拉框显示值文本框
			this.valuebox = $("<input type='hidden'>").appendTo(this.elementBorder);
			
			this.valueMethod = this.valuebox[ isTextarea || isInput ? "val" : "text" ];
			this.textMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			
			this.element
				.addClass( "coral-validation-"+autocompleteCls+" coral-autocomplete-input coral-autocomplete-text coral-textbox-default coral-form-element-autocomplete" )
				.attr( "autocomplete", "off" );
			
			this.element.appendTo( this.elementBorder );
			if ( this.options.buttons.length > 0 ) {
				this._createButtonPanel();
			}
			// 初始化id，name，value
			if ( typeof this.element.attr("id") != "undefined" ) {
	    		this.options.id = this.element.attr("id");
	    	} else if ( this.options.id ){
	    		this.element.attr("id", this.options.id);
	    	}
			if ( typeof this.element.attr( "name" ) != "undefined" ) {
	    		this.options.name = this.element.attr( "name" ); // name属性加到hidden元素上
	    		this.valuebox.attr( "name", this.options.name );
	    		this.element.removeAttr( "name" );
	    	} else if ( this.options.name ) {
	    		this.valuebox.attr( "name", this.options.name );
	    	}
	
			if ( this.options.text ) {
				this.setText( this.options.text );
			}
			if ( $.trim( this.valuebox.val() ) != "" ) {
	    		this.options.value = this.valuebox.val();
	    	}
		}
	},
	_initState: function(){
		if( this.element.prop("readonly") || this.options.readonly ){
    		this.options.readonly = true;
    		this.valuebox.prop( "readonly", true );
    		this.element.prop( "readonly", true );
    		this.component().addClass("coral-readonly");
    	}
		if ( this.options.isLabel ) {
			this.element.prop( "readonly", true );
			this.valuebox.prop( "readonly", true );
			this.component().addClass( "coral-isLabel" );
		}
	},
	reset : function() {
		this.setValue(this.originalValue);
	},
	_bindEvent: function(){
		// Some browsers only repeat  events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var that = this, 
			suppressKeyPress, suppressKeyPressRepeat, suppressInput;
		this._on( this.element, {
			"mouseenter" : function(e) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				that.autocompleteWrapper.addClass("coral-textbox-hover");
			},
			"mouseleave" : function(e) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				that.autocompleteWrapper.removeClass("coral-textbox-hover");
			},
			keyup: function( event ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				this._trigger( "onKeyUp", event, { } );
			},
			keydown: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.coral.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.LEFT:
					suppressKeyPress = true;
					this._moveItem( "left", event );
					break;
				case keyCode.RIGHT:
					suppressKeyPress = true;
					this._moveItem( "right", event );
					break;
				case keyCode.UP:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:
					// when menu is open and has focus
					if ( this.menu.active ) {
						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.ismultiLineLabel ) {
							// ??
							this.setValue( this.term, true );
						}
						this.close( event );
						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;
					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
				//this._change( event );
				this._trigger( "onKeyDown", event, { } );
			},
			keypress: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.ismultiLineLabel || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}
				if ( this.options.render == "tree" ) {
					return;
				}				
				// replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.coral.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				default:
					break;
				}
			},
			input: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				this.selectedItem = null;
				this.previous = this.getValue();
				this.component().addClass( "coral-state-focus" );
			},
			blur: function( event ) {
				this.component().removeClass( "coral-state-focus" );
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				// 非multiLineLabel不需要额外校验
				if ( !this.options.multiLineLabel ) {
					if ( this.options.multiple ) {
						
					} else {
						// 20150121 : value 无值时设置为输入值，text为空时，value也设置为空。
						if ( !this.options.forceSelection ) {
							if ( this.lastSelectedItem[this.options.textField] != this.element.val() ) {
								this.setValue( this.element.val(), true );
							}
						} else {
							// TODO: 检查输入的值是否是建议列表里面的值，如果不是则清空输入框和隐藏域
							// 如果是url
							// 如果是数组
							/*if ( !this.lastSelectedItem 
									|| this.getText() !== this.lastSelectedItem[this.options.textField] ) {
								this.setValue( "", true );
							}*/
							if ( this.options.render == "tree" ){
								
							}else{
								var grepArr = $.grep( this.responseItems, function( value0 ) {
									return value0[that.options.textField] == that.element.val();
								});
								if ( !grepArr.length ){
									this.setValue( "", true );
								} else {
									this.setValue( grepArr[0][that.options.valueField], true );
								}
							}
						}
					}
				}
				
				
				this._trigger( "onBlur", event, { item: this.selectedItem } );
			}
		});
		this._on( this.menu.element, {
			mousedown: function( event ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
				});

				// clicking on the scrollbar causes focus to shift to the body
				// but we can't detect a mouseup or a click immediately afterward
				// so we have to track the next mousedown and close the menu if
				// the user clicks somewhere outside of the autocomplete
				var menuElement = this.menu.element[ 0 ];
				if ( !$( event.target ).closest( ".coral-menu-item" ).length ) {
					this._delay(function() {
						var that = this;
						this.document.one( "mousedown", function( event ) {
							if ( event.target !== that.element[ 0 ] &&
									event.target !== menuElement &&
									!$.contains( menuElement, event.target ) ) {
								that.close();
							}
						});
					});
				}
			},
			menuonfocus: function( event, ui ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				var label, item;
				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						});

						return;
					}
				}

				item = ui.item.data( "coral-autocomplete-item" );
				if ( false !== this._trigger( "onFocus", event, { item: item } ) ) {
					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						/*if (this.options.postMode=="value") {
							this.setValue( item[this.options.valueField] );
						} else if (this.options.postMode=="text") {
							this.setValue( item[this.options.textField] );
						} else if (this.options.postMode=="value-text") {
							this.setValue( item[this.options.valueField] + "-"+ item[this.options.textField] );
						}*/
						// this._value( item[this.options.valueField] );
						//this._text( item[this.options.textField] );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item[this.options.valueField] ;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuonselect: function( event, ui ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				var item = ui.item.data( "coral-autocomplete-item" ),
					previous = this.previous;

				// only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {
					this.element.focus();
					this.previous = previous;
					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay(function() {
						this.previous = previous;
						this.selectedItem = item;
						that.lastSelectedItem = item;
					});
				}
				that.lastSelectedItem = item;
				this.selectedItem = item;
				//setValue()和setText(),先将原有的值删去，再加上选择的值
				if ( false !== this._trigger( "onSelect", event, { item: item } ) ) {
						var item = ui.item.data( "coral-autocomplete-item" );
						valueField = item[this.options.valueField];
						textField = item[this.options.textField];
						var value = that.getValue(),
						text = that.getText(),
						vv = value==""?[]:value.split(this.options.separator),
						vt = text==""?[]:text.split(this.options.separator);
						if ( that.options.multiple ) {
							if (this.options.postMode=="value") {
								if ( !this.options.allowRepeat && $.inArray(valueField, vv) > -1 ) {
									return ;
								}
								vv.push( valueField );
								vt.push( textField );
								this.setText(vt.join(this.options.separator));
								this.setValue(vv.join(this.options.separator), true);
							} 
							if (this.options.postMode=="text") {
								if ( !this.options.allowRepeat && $.inArray(textField, vt) > -1 ) {
									return ;
								}
								vt.push( textField );
								that.setValue(vt.join(this.options.separator), true );
							} 
							if (this.options.postMode=="value-text") {
								if ( !this.options.allowRepeat && $.inArray(valueField + "-"+textField, vv + "-" + vt) > -1 ) {
									return ;
								}
								vv.push( valueField );
								vt.push( textField );
								this.setValue(vv.join(this.options.separator) + "-"+ vt.join(this.options.separator), true );
							}
						} else{
							if (this.options.postMode=="value") {
								this.setText(item[this.options.textField], true );
								this.setValue(item[this.options.valueField], true );
							} 
							if (this.options.postMode=="text") {
								this.setValue(item[this.options.textField], true );
							} 
							if (this.options.postMode=="value-text") {
								this.setValue(item[this.options.valueField] + "-"+ item[this.options.textField], true );
							}
						}
				}
				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this.getText();
				this.close( event );
			}
		});
		if ( this.options.multiLineLabel ) {
			this._on( {
				"click .coral-label-close" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					this._removeLabel( e );
				},
				"click .coral-textboxlist-item" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					e.stopPropagation();
				},
				"click .coral-textbox-border" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					this.element.focus();
				},
				"mouseenter .coral-label-close" : function( e ){
					$( e.target ).addClass( "coral-label-close-hover" );
				},
				"mouseleave .coral-label-close" : function( e ){
					$( e.target ).removeClass( "coral-label-close-hover" );
				},
				"focus .coral-textboxlist-item" : function( e ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					$( e.target ).addClass( "coral-state-active" );
				},
				"blur .coral-textboxlist-item" : function( e ) {
					$( e.target ).removeClass( "coral-state-active" );
				},
				"keydown .coral-state-active" : function( e ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					var keyCode = $.coral.keyCode;
					switch ( e.keyCode ) {
					case keyCode.LEFT:
						//suppressKeyPress = true;
						this._moveInput( "left", e );
						break;
					case keyCode.RIGHT:
						//suppressKeyPress = true;
						this._moveInput( "right", e );
						break;
					case keyCode.BACKSPACE:
						this._removeLabel( e );
						break;
					case keyCode.DELETE:
						this._removeLabel( e );
						break;
					default:
						break;
					}
				}
			});
		}
	},
	_initData: function(){
		var that = this;
		var opts = this.options;
		this.menu = $( "<ul>" )
		.addClass( "coral-autocomplete-panel coral-front" )
		.appendTo( this._appendTo() )
		.menu({
			// disable ARIA support, the live region takes care of that
			role: null
		})
		.hide()
		.menu( "instance" );
		if ( isNaN( opts.panelHeight ) ) {
			$(".coral-autocomplete-panel").css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
			$(".coral-autocomplete-iframePanel").css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
		}
	},
	_setDefaultValue: function(){
		if (!this.options.value) {
			this.originalValue = "";
			return ;
		} else {
			this.setValue(this.options.value);
			this.originalValue = this.getValue();
		}
	},
	_setDefaultText: function(){
		if ( !this.options.text ) return ;
		this.setText( this.options.text );
	},
/*	_createButtonPanel: function() {
		this.uiDialogButtonPanel = $("<span class=\"coral-autocomplete-btn-icons coral-corner-right coral-buttonset\"></span>");
		this.elementBorder.append( this.uiDialogButtonPanel );
		this._createButtons();
		this.elementBorder.css( "padding-right", this.uiDialogButtonPanel.outerWidth() );
	},*/
/*	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons.concat();
		if ( $.isEmptyObject( buttons ) ) buttons = {};
		$.each( buttons, function(i) {
			var buttonOptions,
				addCls = "",
				removeCls = "",
				props = $.extend( { type: "button" }, {click: this.click} );
			var click = this.click || $.noop;
			props.click = function() {
				click.apply( that.element[0], arguments );
			};
			delete this.click;
			removeCls = "coral-corner-all";
			if ( i == ( buttons.length - 1 ) ) {
				addCls = "coral-corner-right"
			}
			$( "<button></button>", props ).button( this )
				.addClass(addCls).removeClass(removeCls).appendTo( that.uiDialogButtonPanel );
			this.click = click;
		});
	},*/
	getLastSelectedItem: function(){
		return this.lastSelectedItem;
	},
	
	_destroy: function() {
		clearTimeout( this.searching );
		this.element
			.removeClass( "coral-autocomplete-input" )
			.removeAttr( "autocomplete" );
		this.menu.element.remove();
		if(this.options.iframePanel){
			this.iframePanel.remove();
		}
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		var maxWidth = this.options.maxLabelWidth;
		if ( maxWidth != "auto" ) {
			maxWidth = maxWidth+"px";
		}

		this._super( key, value );
		
		if ( key === "isLabel" && typeof value === "boolean" ) {
			this.element.prop( "readonly", value );
			this.valuebox.prop( "readonly", value );
			this.component().removeClass( "coral-readonly" );	
			this.component().toggleClass( "coral-isLabel", value );
			if ( this.textboxlistUl ) {
				if( value ){
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width","");
				}else{
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width",maxWidth);
				}
			}
		}
		if ( key === "readonly" && typeof value === "boolean") {
			this.element.prop( "readonly", value );
			this.valuebox.prop( "readonly", value );
			this.component().removeClass( "coral-isLabel" );	
			this.component().toggleClass( "coral-readonly", value );
			if ( this.textboxlistUl ) {
				if( value ){
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width","");
				}else{
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width",maxWidth);
				}
			}
		}
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
		if ( key === "value") {
			this.setValue( value );
		}
		
	},
	
	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".coral-front" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},
	_filter: function( array, request, response ){
		response( $.coral.autocomplete.filter( array, request.term, this.options.valueField, this.options.textField ,this.options.searchField) );
	},
	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				that._filter( array, request, response );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				if ( this.element.attr("name") ){
					request[this.element.attr("name")] = request.term;
				}
				that.xhr = $.ajax({
					url: url,
					data: request,
					type: that.options.asyncType,
					dataType: "json",
					success: function( data ) {
						if ( that.options.render != "tree" ) {
							response( data );
						} else {
							$( that.menu.element ).tree("reload", data);
							response( data );
						}
					},
					error: function() {
						response([]);
					}
				});
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay(function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._term(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},
	_term: function(){
		if ( this.options.multiLineLabel ) {
			return this.element.val();
		}
		return this.getText();
	},
	search: function( text/*value*/, event ) {
		text = text != null ? text : this._term();
		// always save the actual value, not the one passed as an argument
		this.term = this._term();

		if ( text.length < this.options.minLength ||
			( this.options.minLength > 0 && $.trim( text ) == "" ) ) {
			return this.close( event );
		}

		if ( this._trigger( "onSearch", event ) === false ) {
			return;
		}

		return this._search( text );
	},

	_search: function( text ) {
		this.pending++;
		this.element.addClass( "coral-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: text }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy(function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this.element.removeClass( "coral-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "onResponse", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "onOpen" );
		} else {
			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {
		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			if(this.options.iframePanel){
				this.iframePanel.hide();
			}
			this.options.render != "tree" && this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "onClose", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this.getValue() ) {
			this._trigger( "onChange", event, { item: this.selectedItem,oldValue: this.previous,value: this.getValue(),text:this.getText(),lastSelectedItem: this.lastSelectedItem} );
		}
	},
	_normalize: function( items ) {
		var that = this;
		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ][this.options.textField] && items[ 0 ][this.options.valueField] ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			});
		});
	},

	_suggest: function( items ) {
		var ul = this.menu.element,nData;//.empty();
		var iframePanel = this.iframePanel || $();
		if ( this.options.render == "tree" ){
			//$( ul ).tree("addNodes", null, items);
			//$( ul ).tree("filterNodesByParam", {"name": "112"} );
		}else{
			this.menu.element.empty();
			this._renderMenu( ul, items );
			this.isNewMenu = true;
			this.menu.refresh();
		}
		this.responseItems = items;
		// size and position menu
		var height = ul.height();
		iframePanel.css("height",height);
		ul.show();
		iframePanel.show();
		var zIndicies = ul.siblings( ".coral-front:visible" ).map(function() {
				return +$( this ).css( "z-index" );
			}).get(),
			zIndexMax = Math.max.apply( null, zIndicies );
		if ( zIndexMax >= +ul.css( "z-index" ) ) {
			ul.css( "z-index", zIndexMax + 1 );
			iframePanel.css( "z-index", zIndexMax );
		}
		iframePanel.outerWidth(
				 Math.max(
						// Firefox wraps long text (possibly a rounding bug)
						// so we add 1px to avoid the wrapping (#7513)
						ul.width( "" ).outerWidth() + 1,
						this.elementBorder.outerWidth()
				 )
		);
		this._resizeMenu();
		ul.position( $.extend({
			of: this.elementBorder
		}, this.options.position ) );
		iframePanel.position( $.extend({
			of: this.elementBorder
		}, this.options.position ) );
		if ( this.options.autoFocus ) {
			this.menu.next();
		}
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		var iframePanel = this.iframePanel || $();
		ul.outerWidth( Math.max(
			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.elementBorder.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		});
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "coral-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		var text = item[this.options.textField];
		var attrName, restAttr = '', classes = !!item.hidden==true?"hidden":"";
		var _fn = $.coral.toFunction(this.options.formatter),nData;
		if($.isFunction(_fn)){
			text = _fn.apply(this.element[0], [{"item":item}]);
		}
		var itemattrFun = $.coral.toFunction(this.options.itemattr);
		if($.isFunction(itemattrFun)){
			var itemAttrObj = itemattrFun.apply( this.element[0], [{"item":item}]);
			if(!$.isEmptyObject( itemAttrObj )) {
				if (itemAttrObj.hasOwnProperty("style")) {
					style += itemAttrObj.style;
					delete itemAttrObj.style;
				}
				if (itemAttrObj.hasOwnProperty("class")) {
					classes += ' ' + itemAttrObj['class'];
					delete itemAttrObj['class'];
				}
				// dot't allow to change role attribute
				try { delete itemAttrObj.role; } catch(ra){}
				for (attrName in itemAttrObj) {
					if (itemAttrObj.hasOwnProperty(attrName)) {
						restAttr += ' ' + attrName + '=' + itemAttrObj[attrName];
					}
				}
			}
			return $('<li class="' + classes + '"' + restAttr + '>').text( text ).appendTo( ul );
			
		}else{
			return $( "<li>" ).addClass(classes).text( text ).appendTo( ul );
		}
		
	},
	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if (!this.options.multiLineLabel ) {
				this.setValue( "", true );
				this.setText( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	component: function() {
		return this.autocompleteWrapper;
	},
	/**
	 * set the lastSelectedItem 
	 **/
	_setLastSelectedItem: function(){
		var options = this.options;
		var value = this.getValue(),
			text = this.getText();
		// lastSelectedItem是引用模式，如果改变的值是空，会影响source里面的值。
		this.lastSelectedItem = {};
		this.lastSelectedItem[options.valueField] = value;
		this.lastSelectedItem[options.textField] = text;
	},
	
	/*_value: function( value, noChange ) {
		if ( this.options.multiLineLabel ) {
			var that = this;
			if ( value != "" && !value ) {
				return this.valuebox.val();
			}
			
			var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
				indexOfInputLi = inputLi.index(),
				index = indexOfInputLi,
				values = this.valuebox.val()==""?[]:this.valuebox.val().split( "," );
			if ( this.options.multiple ) {
				values.splice(index,0,value);
			} else {
				values = [];
				values.push( value );
			}
			
			if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
				var array = $( this.menu.element ).tree("transformToArray", this.options.source),
					texts = [],
					grepArr = $.grep( value.split( "," ), function( value0 ) {
						var ret = false;
						$.each(array, function(i){
							if ( value0 == array[i][that.options.valueField] ) {
								texts.push(array[i][that.options.textField]);
								return true;
							}
						});
						return ret;
					});
				if ( texts.length ){
					this.setText( texts );
				}
			} else if ( typeof this.options.source == "string" && this.selectedItem ) {
				this.setText(this.selectedItem[this.options.textField]);
			} else if ( $.trim( value ) == "" ) {
				this.setText(value);
			}
			this.valuebox.val( values.join( "," ) );
			!noChange && this._change(null);
		} else {
			return this.valueMethod.apply( this.valuebox, value );
		}
	},*/

	_text: function( text ) {
		var maxLabelWidth = this.options.maxLabelWidth,
		    readonly = this.options.readonly,
		    isLabel = this.options.isLabel;
		if ( this.options.multiLineLabel ) {
			if ( text != "" && !text ) {
				var texts = [];
				$.each( this.textboxlistUl.find( ".coral-textboxlist-item" ), function(){
					texts.push($( this ).text());
				} );
				return texts.join( "," );
			}
			var item = "";
			if ( text != "" && !(text instanceof Array) ) {
				text = text.split( this.options.separator );
			}
			if ( text instanceof Array ) {
				if ( maxLabelWidth == "auto" || isLabel || readonly ){
					$.each(text, function(i){
						text.splice(i,1,"<li tabindex='-1' class='coral-textboxlist-item'  title='"+this+"'>"+this+"<span class='coral-label-close cui-icon-cross2'></span></li>");
					});
				}else{
					$.each(text, function(i){
						text.splice(i,1,"<li tabindex='-1' class='coral-textboxlist-item'  style='  max-width:"+maxLabelWidth+"px;' title='"+this+"'>"+this+"<span class='coral-label-close cui-icon-cross2'></span></li>");
					});
				}
				item = text.join("");
			} else {
				if ( maxLabelWidth == "auto"|| isLabel || readonly){
					item = "<li tabindex='-1' class='coral-textboxlist-item'   title='"+this+"' >"+text+"<span class='coral-label-close  cui-icon-cross2'></span></li>";
				}else{
					item = "<li tabindex='-1' class='coral-textboxlist-item'  style='  max-width:"+maxLabelWidth+"px;' title='"+this+"' >"+text+"<span class='coral-label-close cui-icon-cross2'></span></li>";
				}
			}
			if ( text != "" ) {
				if ( this.options.multiple ) {
					this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
					this.textboxlistUl.find( ".coral-textboxlist-inputLi" ).before( item );
				} else {
					this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
					this.textboxlistUl.find( ".coral-textboxlist-inputLi" ).before( item );
				}
			} else {
				this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
			}
		} else {
			return this.textMethod.apply( this.element, arguments );
		}
		
		
	},
	getOldValue: function(){
		var opts = this.options,
		    valArr = [],
		    substr = [],
		    i = 0;
		if ( !this.currentValues ) return valArr;
		var substr = this.currentValues.split(",");
		for (; i <substr.length; i++) {
			var value = substr[i];
			valArr.push(value);
		}
		return valArr;
	},
	/**
	 * value: 设置的值。
	 * 
	 * changed：不对外开放，如果不传默认是false，内部调用，
	 * 如果需要出发onChange事件，则设置changed为true。
	 * 
	 */
	setValue: function ( opts, changed ) {
		var that = this,
			value, text,changed, removed;
		if ( typeof opts !== "string" ) {
			value = opts.value;
			changed = opts.changed;
			removed = opts.removed;
		} else {
			value = opts;
		}
		if ( this.options.multiLineLabel ) {
			this.element.val("");
			this.element.css({width:"10px"});//清空值并且 将宽度还原；否则会将元素的高度撑开
		}
		this.previous = this.getValue();
		// 多行标签模式的设置值，有多选的功能
		if ( this.options.multiLineLabel ) {
			var that = this;
			var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
				indexOfInputLi = inputLi.index(),
				index = indexOfInputLi,
				values = this.valuebox.val(value)==""?[]:this.valuebox.val(value);
				//this.setText("");
				if ( $.trim( value ) == "" ) {
					this.setText(value);
				} else if ( "text" === this.options.postMode ) {
					this.setText( value );
				} else if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
					
					var array = ( this.options.render == "tree" )?
							$( this.menu.element ).tree("transformToArray", this.options.source.concat()):this.options.source,
						texts = [],
						grepArr = $.grep( value.split( "," ), function( value0 ) {
							var ret = false;
							$.each(array, function(i){
								if ( value0 == array[i][that.options.valueField] ) {
									texts.push(array[i][that.options.textField]);
									return true;
								}
							});
							return ret;
						});
					
					if ( texts.length ){
						this.setText( texts );
					}
				} 
			//}
			if ( value == "" ) values = [];
			this.valuebox.val( value );
			this.currentValues = value;
		} else {
			// 不是标签模式，目前没有多选的功能
			// 设置text
			if ( $.trim( value ) == "" ) {
				this.setText(value);
			} else if ( "text" === this.options.postMode ) {
				this.setText( value );
			} /*else if ( typeof this.options.source == "string") {
				if (  this.selectedItem ) {
					this.setText(this.selectedItem[this.options.textField]);
				}
			} */
			else if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
				var array = ( this.options.render == "tree" )?
						$( this.menu.element ).tree("transformToArray", this.options.source.concat()):this.options.source,
					texts = [],
					grepArr = $.grep( value.split( "," ), function( value0 ) {
						var ret = false;
						$.each(array, function(i){
							if ( value0 == array[i][that.options.valueField] ) {
								texts.push(array[i][that.options.textField]);
								return true;
							}
						});
						return ret;
					});
				
				if ( texts.length ){
					this.setText( texts[0] );
				}
				/*} else if ( $.trim( value ) == "" ) {
					this.setText( value );
				}*/
			}
			this.valuebox.val( value );
			//this.setText( value );
			// 如果source是数组的时候 也直接赋值
		}
		changed && this._change(null);
	},
	
	setText: function (text) {
		this._text(text);
		this._setLastSelectedItem();
	},
	
	getValue: function(){
		if ( this.options.multiLineLabel ) {
			//if ( value != "" && !value ) {
			return this.valuebox.val();
			//}
		}else {
			return this.valueMethod.apply( this.valuebox );
		}
	//	return this._value();
	},	
	
	getText: function(){
		return this._text();
	},
	focus: function(){
		if (this.options.disabled || this.options.readonly || this.options.isLabel) return false;
		this.element.focus();
	},
	_keyEvent: function( keyEvent, event ) {
		if ( !this.ismultiLineLabel || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},
	_removeLabel: function( e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
			curItem = $(e.target).closest( "li.coral-textboxlist-item" ),
			lastItem = $(e.target).closest( "li.coral-textboxlist-item:last" );
		inputLi.insertAfter( lastItem );
		var indexOfInputLi = inputLi.index();
		var indexOfItem = curItem.index();
		var index = indexOfItem;
		if ( indexOfItem > indexOfInputLi ) {
			index = indexOfItem - 1;
		}
		var texts = this.getText().split( "," );
		texts.splice( index, 1 );
		curItem.remove();
		var values = this.getValue().split( "," );
		values.splice( index, 1 );
		this.selectedItems.splice( index, 1 );
		this.selectedItem = null;
		//this.valuebox.val( values.join(",") );
		/*this.setValue( {
			value: values.join(","), 
			changed: true,
			removed: index
		});*/
		this.setValue( values.join(","), true );
		if(typeof this.options.source == "string" ){
			this.setText( texts.join(",") );
		}
		//this._change( e );
		this._moveInput( "last", e );
		this.element.val("");
		this.element.focus();
	},
	_moveInput: function( direction, e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" );
		var curItem = $(e.target).closest( "li.coral-textboxlist-item" );
		var lastItem = $(inputLi).closest( "li.coral-textboxlist-inputLi" ).nextAll("li.coral-textboxlist-item").last();

		switch ( direction ) {
		case 'left':
			inputLi.insertBefore( curItem );
			this.element.val("");
			this.element.focus();
			break;
		case 'right':
			inputLi.insertAfter( curItem );
			this.element.val("");
			this.element.focus();
			break;
		case 'last':
			inputLi.insertAfter( lastItem );
			this.element.val("");
			break;
		}
	},
	_moveItem: function( direction, e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" );
		if ( direction == "left" && inputLi.prev().length && $( inputLi.find( "input" ) ).caret() == 0 ) {
			this.element.val("");
			inputLi.prev().focus();
		}
		if ( direction == "right" && inputLi.next().length && $( inputLi.find( "input" ) ).caret() == inputLi.find( "input" ).val().length ) {
			this.element.val("");
			inputLi.next().focus();
		}
	}
});
$.extend( $.coral.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term , valueField, textField, searchField) {
		var that = this;
		var matcher = new RegExp( $.coral.autocomplete.escapeRegex( term ), "i" );
		if ( searchField ) {
			return $.grep( array, function( value ) {
				var r = matcher.test( value[textField] || value[valueField] || value );
				var sarr = searchField.split( "," );
				for( var i = 0; i < sarr.length; i ++ ){
					if ( !r && value[sarr[i]] ) {
						r = matcher.test( value[sarr[i]] );
						if ( r ) break;
					}
				}
				return r;
				/*if ( !r && value[searchField] ) {
					r = matcher.test( value[searchField] );
				}
				return r;*/
			});
		}
		return $.grep( array, function( value ) {
			return matcher.test( value[textField] || value[valueField] || value[searchField] || value );
		});
	}
});
$.component( "coral.autocomplete", $.coral.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
});

var autocomplete = $.coral.autocomplete;
})( jQuery );



/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

(function() {

// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
});

$.extend( baseEasings, {
	Sine: function ( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function ( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function ( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
});

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
});

})();

/**
 * JRA: #CORALIV-727
 */
/*
SWFObject v2.2 <http://code.google.com/p/swfobject/> 
is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/
;var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;
if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;
X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);
ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0;}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");
if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)];}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac};
}(),k=function(){if(!M.w3){return;}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f();
}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false);}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);
f();}});if(O==top){(function(){if(J){return;}try{j.documentElement.doScroll("left");}catch(X){setTimeout(arguments.callee,0);return;}f();})();}}if(M.wk){(function(){if(J){return;
}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return;}f();})();}s(f);}}();function f(){if(J){return;}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));
Z.parentNode.removeChild(Z);}catch(aa){return;}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]();}}function K(X){if(J){X();}else{U[U.length]=X;}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false);
}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false);}else{if(typeof O.attachEvent!=D){i(O,"onload",Y);}else{if(typeof O.onload=="function"){var X=O.onload;
O.onload=function(){X();Y();};}else{O.onload=Y;}}}}}function h(){if(T){V();}else{H();}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);
aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");
M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)];}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return;}}X.removeChild(aa);Z=null;H();
})();}else{H();}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);
if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa);}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;
ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class");}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align");
}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value");
}}P(ai,ah,Y,ab);}else{p(ae);if(ab){ab(aa);}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z;}ab(aa);}}}}}function z(aa){var X=null;
var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y;}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z;}}}return X;}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312);
}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null;}else{l=ae;Q=X;}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310";
}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137";}j.title=j.title.slice(0,47)+" - Flash Player Installation";
var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac;
}else{ab.flashvars=ac;}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";
(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae);}else{setTimeout(arguments.callee,10);}})();}u(aa,ab,X);}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");
Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y);}else{setTimeout(arguments.callee,10);
}})();}else{Y.parentNode.replaceChild(g(Y),Y);}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML;}else{var Y=ab.getElementsByTagName(r)[0];
if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true));
}}}}}return aa;}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X;}if(aa){if(typeof ai.id==D){ai.id=Y;}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae];
}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"';}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"';}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />';
}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id);}else{var Z=C(r);Z.setAttribute("type",q);
for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac]);}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac]);
}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab]);}}aa.parentNode.replaceChild(Z,aa);X=Z;}}return X;}function e(Z,X,Y){var aa=C("param");
aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa);}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";
(function(){if(X.readyState==4){b(Y);}else{setTimeout(arguments.callee,10);}})();}else{X.parentNode.removeChild(X);}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null;
}}Y.parentNode.removeChild(Y);}}function c(Z){var X=null;try{X=j.getElementById(Z);}catch(Y){}return X;}function C(X){return j.createElement(X);}function i(Z,X,Y){Z.attachEvent(X,Y);
I[I.length]=[Z,X,Y];}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false;
}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return;}var aa=j.getElementsByTagName("head")[0];if(!aa){return;}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;
G=null;}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1];
}G=X;}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y);}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"));
}}}function w(Z,X){if(!m){return;}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y;}else{v("#"+Z,"visibility:"+Y);}}function L(Y){var Z=/[\\\"<>\.;]/;
var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y;}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;
for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2]);}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa]);}for(var Y in M){M[Y]=null;}M=null;for(var X in swfobject){swfobject[X]=null;
}swfobject=null;});}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;
w(ab,false);}else{if(Z){Z({success:false,id:ab});}}},getObjectById:function(X){if(M.w3){return z(X);}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};
if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al];}}aj.data=ab;
aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak];}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai];
}else{am.flashvars=ai+"="+Z[ai];}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true);}X.success=true;X.ref=an;}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);
return;}else{w(ah,true);}}if(ac){ac(X);}});}else{if(ac){ac(X);}}},switchOffAutoHideShow:function(){m=false;},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]};
},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X);}else{return undefined;}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y);
}},removeSWF:function(X){if(M.w3){y(X);}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X);}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;
if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1];}if(aa==null){return L(Z);}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)));
}}}return"";},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block";
}}if(E){E(B);}}a=false;}}};}();

/*
SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com

mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/

SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilzén and Mammon Media and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php
 
SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php
*/

var SWFUpload;
if (SWFUpload == undefined) {
	SWFUpload = function(a) {
		this.initSWFUpload(a)
	}
}
SWFUpload.prototype.initSWFUpload = function(b) {
	try {
		this.customSettings = {};
		this.settings = b;
		this.eventQueue = [];
		this.movieName = "SWFUpload_" + SWFUpload.movieCount++;
		this.movieElement = null;
		SWFUpload.instances[this.movieName] = this;
		this.initSettings();
		this.loadFlash();
		this.displayDebugInfo()
	} catch (a) {
		delete SWFUpload.instances[this.movieName];
		throw a
	}
};
SWFUpload.instances = {};
SWFUpload.movieCount = 0;
SWFUpload.version = "2.2.0 2009-03-25";
SWFUpload.QUEUE_ERROR = {
	QUEUE_LIMIT_EXCEEDED : -100,
	FILE_EXCEEDS_SIZE_LIMIT : -110,
	ZERO_BYTE_FILE : -120,
	INVALID_FILETYPE : -130
};
SWFUpload.UPLOAD_ERROR = {
	HTTP_ERROR : -200,
	MISSING_UPLOAD_URL : -210,
	IO_ERROR : -220,
	SECURITY_ERROR : -230,
	UPLOAD_LIMIT_EXCEEDED : -240,
	UPLOAD_FAILED : -250,
	SPECIFIED_FILE_ID_NOT_FOUND : -260,
	FILE_VALIDATION_FAILED : -270,
	FILE_CANCELLED : -280,
	UPLOAD_STOPPED : -290
};
SWFUpload.FILE_STATUS = {
	QUEUED : -1,
	IN_PROGRESS : -2,
	ERROR : -3,
	COMPLETE : -4,
	CANCELLED : -5
};
SWFUpload.BUTTON_ACTION = {
	SELECT_FILE : -100,
	SELECT_FILES : -110,
	START_UPLOAD : -120
};
SWFUpload.CURSOR = {
	ARROW : -1,
	HAND : -2
};
SWFUpload.WINDOW_MODE = {
	WINDOW : "window",
	TRANSPARENT : "transparent",
	OPAQUE : "opaque"
};
SWFUpload.completeURL = function(a) {
	if (typeof (a) !== "string" || a.match(/^https?:\/\//i) || a.match(/^\//)) {
		return a
	}
	var c = window.location.protocol + "//" + window.location.hostname
			+ (window.location.port ? ":" + window.location.port : "");
	var b = window.location.pathname.lastIndexOf("/");
	if (b <= 0) {
		path = "/"
	} else {
		path = window.location.pathname.substr(0, b) + "/"
	}
	return path + a
};
SWFUpload.prototype.initSettings = function() {
	this.ensureDefault = function(b, a) {
		this.settings[b] = (this.settings[b] == undefined) ? a
				: this.settings[b]
	};
	this.ensureDefault("upload_url", "");
	this.ensureDefault("preserve_relative_urls", false);
	this.ensureDefault("file_post_name", "Filedata");
	this.ensureDefault("post_params", {});
	this.ensureDefault("use_query_string", false);
	this.ensureDefault("requeue_on_error", false);
	this.ensureDefault("http_success", []);
	this.ensureDefault("assume_success_timeout", 0);
	this.ensureDefault("file_types", "*.*");
	this.ensureDefault("file_types_description", "All Files");
	this.ensureDefault("file_size_limit", 0);
	this.ensureDefault("file_upload_limit", 0);
	this.ensureDefault("file_queue_limit", 0);
	this.ensureDefault("flash_url", "swfupload.swf");
	this.ensureDefault("prevent_swf_caching", true);
	this.ensureDefault("button_image_url", "");
	this.ensureDefault("button_width", 1);
	this.ensureDefault("button_height", 1);
	this.ensureDefault("button_text", "");
	this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;");
	this.ensureDefault("button_text_top_padding", 0);
	this.ensureDefault("button_text_left_padding", 0);
	this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES);
	this.ensureDefault("button_disabled", false);
	this.ensureDefault("button_placeholder_id", "");
	this.ensureDefault("button_placeholder", null);
	this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW);
	this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW);
	this.ensureDefault("debug", false);
	this.settings.debug_enabled = this.settings.debug;
	this.settings.return_upload_start_handler = this.returnUploadStart;
	this.ensureDefault("swfupload_loaded_handler", null);
	this.ensureDefault("file_dialog_start_handler", null);
	this.ensureDefault("file_queued_handler", null);
	this.ensureDefault("file_queue_error_handler", null);
	this.ensureDefault("file_dialog_complete_handler", null);
	this.ensureDefault("upload_start_handler", null);
	this.ensureDefault("upload_progress_handler", null);
	this.ensureDefault("upload_error_handler", null);
	this.ensureDefault("upload_success_handler", null);
	this.ensureDefault("upload_complete_handler", null);
	this.ensureDefault("debug_handler", this.debugMessage);
	this.ensureDefault("custom_settings", {});
	this.customSettings = this.settings.custom_settings;
	if (!!this.settings.prevent_swf_caching) {
		this.settings.flash_url = this.settings.flash_url
				+ (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&")
				+ "preventswfcaching=" + new Date().getTime()
	}
	if (!this.settings.preserve_relative_urls) {
		this.settings.upload_url = SWFUpload
				.completeURL(this.settings.upload_url);
		this.settings.button_image_url = this.settings.button_image_url ? SWFUpload
				.completeURL(this.settings.button_image_url)
				: this.settings.button_image_url
	}
	delete this.ensureDefault
};
SWFUpload.prototype.loadFlash = function() {
	var a, b;
	if (document.getElementById(this.movieName) !== null) {
		throw "ID " + this.movieName
				+ " is already in use. The Flash Object could not be added"
	}
	a = document.getElementById(this.settings.button_placeholder_id)
			|| this.settings.button_placeholder;
	if (a == undefined) {
		throw "Could not find the placeholder element: "
				+ this.settings.button_placeholder_id
	}
	b = document.createElement("div");
	b.innerHTML = this.getFlashHTML();
	a.parentNode.replaceChild(b.firstChild, a);
	if (window[this.movieName] == undefined) {
		window[this.movieName] = this.getMovieElement()
	}
};
SWFUpload.prototype.getFlashHTML = function() {
	return [ '<object id="', this.movieName,
			'" type="application/x-shockwave-flash" data="',
			this.settings.flash_url, '" width="', this.settings.button_width,
			'" height="', this.settings.button_height, '" class="swfupload">',
			'<param name="wmode" value="', this.settings.button_window_mode,
			'" />', '<param name="movie" value="', this.settings.flash_url,
			'" />', '<param name="quality" value="high" />',
			'<param name="menu" value="false" />',
			'<param name="allowScriptAccess" value="sameDomain"/>',
			'<param name="flashvars" value="' + this.getFlashVars() + '" />',
			"</object>" ].join("")
};
SWFUpload.prototype.getFlashVars = function() {
	var b = this.buildParamString();
	var a = this.settings.http_success.join(",");
	return [ "movieName=", encodeURIComponent(this.movieName),
			"&amp;uploadURL=", encodeURIComponent(this.settings.upload_url),
			"&amp;useQueryString=",
			encodeURIComponent(this.settings.use_query_string),
			"&amp;requeueOnError=",
			encodeURIComponent(this.settings.requeue_on_error),
			"&amp;httpSuccess=", encodeURIComponent(a),
			"&amp;assumeSuccessTimeout=",
			encodeURIComponent(this.settings.assume_success_timeout),
			"&amp;params=", encodeURIComponent(b), "&amp;filePostName=",
			encodeURIComponent(this.settings.file_post_name),
			"&amp;fileTypes=", encodeURIComponent(this.settings.file_types),
			"&amp;fileTypesDescription=",
			encodeURIComponent(this.settings.file_types_description),
			"&amp;fileSizeLimit=",
			encodeURIComponent(this.settings.file_size_limit),
			"&amp;fileUploadLimit=",
			encodeURIComponent(this.settings.file_upload_limit),
			"&amp;fileQueueLimit=",
			encodeURIComponent(this.settings.file_queue_limit),
			"&amp;debugEnabled=",
			encodeURIComponent(this.settings.debug_enabled),
			"&amp;buttonImageURL=",
			encodeURIComponent(this.settings.button_image_url),
			"&amp;buttonWidth=",
			encodeURIComponent(this.settings.button_width),
			"&amp;buttonHeight=",
			encodeURIComponent(this.settings.button_height),
			"&amp;buttonText=", encodeURIComponent(this.settings.button_text),
			"&amp;buttonTextTopPadding=",
			encodeURIComponent(this.settings.button_text_top_padding),
			"&amp;buttonTextLeftPadding=",
			encodeURIComponent(this.settings.button_text_left_padding),
			"&amp;buttonTextStyle=",
			encodeURIComponent(this.settings.button_text_style),
			"&amp;buttonAction=",
			encodeURIComponent(this.settings.button_action),
			"&amp;buttonDisabled=",
			encodeURIComponent(this.settings.button_disabled),
			"&amp;buttonCursor=",
			encodeURIComponent(this.settings.button_cursor) ].join("")
};
SWFUpload.prototype.getMovieElement = function() {
	if (this.movieElement == undefined) {
		this.movieElement = document.getElementById(this.movieName)
	}
	if (this.movieElement === null) {
		throw "Could not find Flash element"
	}
	return this.movieElement
};
SWFUpload.prototype.buildParamString = function() {
	var c = this.settings.post_params;
	var b = [];
	if (typeof (c) === "object") {
		for ( var a in c) {
			if (c.hasOwnProperty(a)) {
				b.push(encodeURIComponent(a.toString()) + "="
						+ encodeURIComponent(c[a].toString()))
			}
		}
	}
	return b.join("&amp;")
};
SWFUpload.prototype.destroy = function() {
	try {
		this.cancelUpload(null, false);
		this.callFlash("Destroy");
		var a = null;
		a = this.getMovieElement();
		if (a && typeof (a.CallFunction) === "unknown") {
			for ( var c in a) {
				try {
					if (typeof (a[c]) === "function") {
						a[c] = null
					}
				} catch (e) {
				}
			}
			try {
				a.parentNode.removeChild(a)
			} catch (b) {
			}
		}
		window[this.movieName] = null;
		SWFUpload.instances[this.movieName] = null;
		delete SWFUpload.instances[this.movieName];
		this.movieElement = null;
		this.settings = null;
		this.customSettings = null;
		this.eventQueue = null;
		this.movieName = null;
		return true
	} catch (d) {
		return false
	}
};
SWFUpload.prototype.displayDebugInfo = function() {
	this.debug([
			"---SWFUpload Instance Info---\n",
			"Version: ",
			SWFUpload.version,
			"\n",
			"Movie Name: ",
			this.movieName,
			"\n",
			"Settings:\n",
			"\t",
			"upload_url:               ",
			this.settings.upload_url,
			"\n",
			"\t",
			"flash_url:                ",
			this.settings.flash_url,
			"\n",
			"\t",
			"use_query_string:         ",
			this.settings.use_query_string.toString(),
			"\n",
			"\t",
			"requeue_on_error:         ",
			this.settings.requeue_on_error.toString(),
			"\n",
			"\t",
			"http_success:             ",
			this.settings.http_success.join(", "),
			"\n",
			"\t",
			"assume_success_timeout:   ",
			this.settings.assume_success_timeout,
			"\n",
			"\t",
			"file_post_name:           ",
			this.settings.file_post_name,
			"\n",
			"\t",
			"post_params:              ",
			this.settings.post_params.toString(),
			"\n",
			"\t",
			"file_types:               ",
			this.settings.file_types,
			"\n",
			"\t",
			"file_types_description:   ",
			this.settings.file_types_description,
			"\n",
			"\t",
			"file_size_limit:          ",
			this.settings.file_size_limit,
			"\n",
			"\t",
			"file_upload_limit:        ",
			this.settings.file_upload_limit,
			"\n",
			"\t",
			"file_queue_limit:         ",
			this.settings.file_queue_limit,
			"\n",
			"\t",
			"debug:                    ",
			this.settings.debug.toString(),
			"\n",
			"\t",
			"prevent_swf_caching:      ",
			this.settings.prevent_swf_caching.toString(),
			"\n",
			"\t",
			"button_placeholder_id:    ",
			this.settings.button_placeholder_id.toString(),
			"\n",
			"\t",
			"button_placeholder:       ",
			(this.settings.button_placeholder ? "Set" : "Not Set"),
			"\n",
			"\t",
			"button_image_url:         ",
			this.settings.button_image_url.toString(),
			"\n",
			"\t",
			"button_width:             ",
			this.settings.button_width.toString(),
			"\n",
			"\t",
			"button_height:            ",
			this.settings.button_height.toString(),
			"\n",
			"\t",
			"button_text:              ",
			this.settings.button_text.toString(),
			"\n",
			"\t",
			"button_text_style:        ",
			this.settings.button_text_style.toString(),
			"\n",
			"\t",
			"button_text_top_padding:  ",
			this.settings.button_text_top_padding.toString(),
			"\n",
			"\t",
			"button_text_left_padding: ",
			this.settings.button_text_left_padding.toString(),
			"\n",
			"\t",
			"button_action:            ",
			this.settings.button_action.toString(),
			"\n",
			"\t",
			"button_disabled:          ",
			this.settings.button_disabled.toString(),
			"\n",
			"\t",
			"custom_settings:          ",
			this.settings.custom_settings.toString(),
			"\n",
			"Event Handlers:\n",
			"\t",
			"swfupload_loaded_handler assigned:  ",
			(typeof this.settings.swfupload_loaded_handler === "function")
					.toString(),
			"\n",
			"\t",
			"file_dialog_start_handler assigned: ",
			(typeof this.settings.file_dialog_start_handler === "function")
					.toString(),
			"\n",
			"\t",
			"file_queued_handler assigned:       ",
			(typeof this.settings.file_queued_handler === "function")
					.toString(),
			"\n",
			"\t",
			"file_queue_error_handler assigned:  ",
			(typeof this.settings.file_queue_error_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_start_handler assigned:      ",
			(typeof this.settings.upload_start_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_progress_handler assigned:   ",
			(typeof this.settings.upload_progress_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_error_handler assigned:      ",
			(typeof this.settings.upload_error_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_success_handler assigned:    ",
			(typeof this.settings.upload_success_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_complete_handler assigned:   ",
			(typeof this.settings.upload_complete_handler === "function")
					.toString(), "\n", "\t",
			"debug_handler assigned:             ",
			(typeof this.settings.debug_handler === "function").toString(),
			"\n" ].join(""))
};
SWFUpload.prototype.addSetting = function(b, c, a) {
	if (c == undefined) {
		return (this.settings[b] = a)
	} else {
		return (this.settings[b] = c)
	}
};
SWFUpload.prototype.getSetting = function(a) {
	if (this.settings[a] != undefined) {
		return this.settings[a]
	}
	return ""
};
SWFUpload.prototype.callFlash = function(functionName, argumentArray) {
	argumentArray = argumentArray || [];
	var movieElement = this.getMovieElement();
	var returnValue, returnString;
	try {
		returnString = movieElement.CallFunction('<invoke name="'
				+ functionName + '" returntype="javascript">'
				+ __flash__argumentsToXML(argumentArray, 0) + "</invoke>");
		returnValue = eval(returnString)
	} catch (ex) {
		throw "Call to " + functionName + " failed"
	}
	if (returnValue != undefined && typeof returnValue.post === "object") {
		returnValue = this.unescapeFilePostParams(returnValue)
	}
	return returnValue
};
SWFUpload.prototype.selectFile = function() {
	this.callFlash("SelectFile")
};
SWFUpload.prototype.selectFiles = function() {
	this.callFlash("SelectFiles")
};
SWFUpload.prototype.startUpload = function(a) {
	this.callFlash("StartUpload", [ a ])
};
SWFUpload.prototype.cancelUpload = function(a, b) {
	if (b !== false) {
		b = true
	}
	this.callFlash("CancelUpload", [ a, b ])
};
SWFUpload.prototype.stopUpload = function() {
	this.callFlash("StopUpload")
};
SWFUpload.prototype.getStats = function() {
	return this.callFlash("GetStats")
};
SWFUpload.prototype.setStats = function(a) {
	this.callFlash("SetStats", [ a ])
};
SWFUpload.prototype.getFile = function(a) {
	if (typeof (a) === "number") {
		return this.callFlash("GetFileByIndex", [ a ])
	} else {
		return this.callFlash("GetFile", [ a ])
	}
};
SWFUpload.prototype.addFileParam = function(a, b, c) {
	return this.callFlash("AddFileParam", [ a, b, c ])
};
SWFUpload.prototype.removeFileParam = function(a, b) {
	this.callFlash("RemoveFileParam", [ a, b ])
};
SWFUpload.prototype.setUploadURL = function(a) {
	this.settings.upload_url = a.toString();
	this.callFlash("SetUploadURL", [ a ])
};
SWFUpload.prototype.setPostParams = function(a) {
	this.settings.post_params = a;
	this.callFlash("SetPostParams", [ a ])
};
SWFUpload.prototype.addPostParam = function(a, b) {
	this.settings.post_params[a] = b;
	this.callFlash("SetPostParams", [ this.settings.post_params ])
};
SWFUpload.prototype.removePostParam = function(a) {
	delete this.settings.post_params[a];
	this.callFlash("SetPostParams", [ this.settings.post_params ])
};
SWFUpload.prototype.setFileTypes = function(a, b) {
	this.settings.file_types = a;
	this.settings.file_types_description = b;
	this.callFlash("SetFileTypes", [ a, b ])
};
SWFUpload.prototype.setFileSizeLimit = function(a) {
	this.settings.file_size_limit = a;
	this.callFlash("SetFileSizeLimit", [ a ])
};
SWFUpload.prototype.setFileUploadLimit = function(a) {
	this.settings.file_upload_limit = a;
	this.callFlash("SetFileUploadLimit", [ a ])
};
SWFUpload.prototype.setFileQueueLimit = function(a) {
	this.settings.file_queue_limit = a;
	this.callFlash("SetFileQueueLimit", [ a ])
};
SWFUpload.prototype.setFilePostName = function(a) {
	this.settings.file_post_name = a;
	this.callFlash("SetFilePostName", [ a ])
};
SWFUpload.prototype.setUseQueryString = function(a) {
	this.settings.use_query_string = a;
	this.callFlash("SetUseQueryString", [ a ])
};
SWFUpload.prototype.setRequeueOnError = function(a) {
	this.settings.requeue_on_error = a;
	this.callFlash("SetRequeueOnError", [ a ])
};
SWFUpload.prototype.setHTTPSuccess = function(a) {
	if (typeof a === "string") {
		a = a.replace(" ", "").split(",")
	}
	this.settings.http_success = a;
	this.callFlash("SetHTTPSuccess", [ a ])
};
SWFUpload.prototype.setAssumeSuccessTimeout = function(a) {
	this.settings.assume_success_timeout = a;
	this.callFlash("SetAssumeSuccessTimeout", [ a ])
};
SWFUpload.prototype.setDebugEnabled = function(a) {
	this.settings.debug_enabled = a;
	this.callFlash("SetDebugEnabled", [ a ])
};
SWFUpload.prototype.setButtonImageURL = function(a) {
	if (a == undefined) {
		a = ""
	}
	this.settings.button_image_url = a;
	this.callFlash("SetButtonImageURL", [ a ])
};
SWFUpload.prototype.setButtonDimensions = function(c, a) {
	this.settings.button_width = c;
	this.settings.button_height = a;
	var b = this.getMovieElement();
	if (b != undefined) {
		b.style.width = c + "px";
		b.style.height = a + "px"
	}
	this.callFlash("SetButtonDimensions", [ c, a ])
};
SWFUpload.prototype.setButtonText = function(a) {
	this.settings.button_text = a;
	this.callFlash("SetButtonText", [ a ])
};
SWFUpload.prototype.setButtonTextPadding = function(b, a) {
	this.settings.button_text_top_padding = a;
	this.settings.button_text_left_padding = b;
	this.callFlash("SetButtonTextPadding", [ b, a ])
};
SWFUpload.prototype.setButtonTextStyle = function(a) {
	this.settings.button_text_style = a;
	this.callFlash("SetButtonTextStyle", [ a ])
};
SWFUpload.prototype.setButtonDisabled = function(a) {
	this.settings.button_disabled = a;
	this.callFlash("SetButtonDisabled", [ a ])
};
SWFUpload.prototype.setButtonAction = function(a) {
	this.settings.button_action = a;
	this.callFlash("SetButtonAction", [ a ])
};
SWFUpload.prototype.setButtonCursor = function(a) {
	this.settings.button_cursor = a;
	this.callFlash("SetButtonCursor", [ a ])
};
SWFUpload.prototype.queueEvent = function(b, c) {
	if (c == undefined) {
		c = []
	} else {
		if (!(c instanceof Array)) {
			c = [ c ]
		}
	}
	var a = this;
	if (typeof this.settings[b] === "function") {
		this.eventQueue.push(function() {
			this.settings[b].apply(this, c)
		});
		setTimeout(function() {
			a.executeNextEvent()
		}, 0)
	} else {
		if (this.settings[b] !== null) {
			throw "Event handler " + b + " is unknown or is not a function"
		}
	}
};
SWFUpload.prototype.executeNextEvent = function() {
	var a = this.eventQueue ? this.eventQueue.shift() : null;
	if (typeof (a) === "function") {
		a.apply(this)
	}
};
SWFUpload.prototype.unescapeFilePostParams = function(c) {
	var e = /[$]([0-9a-f]{4})/i;
	var f = {};
	var d;
	if (c != undefined) {
		for ( var a in c.post) {
			if (c.post.hasOwnProperty(a)) {
				d = a;
				var b;
				while ((b = e.exec(d)) !== null) {
					d = d.replace(b[0], String.fromCharCode(parseInt("0x"
							+ b[1], 16)))
				}
				f[d] = c.post[a]
			}
		}
		c.post = f
	}
	return c
};
SWFUpload.prototype.testExternalInterface = function() {
	try {
		return this.callFlash("TestExternalInterface")
	} catch (a) {
		return false
	}
};
SWFUpload.prototype.flashReady = function() {
	var a = this.getMovieElement();
	if (!a) {
		this
				.debug("Flash called back ready but the flash movie can't be found.");
		return
	}
	this.cleanUp(a);
	this.queueEvent("swfupload_loaded_handler")
};
SWFUpload.prototype.cleanUp = function(f) {
    try {
        if (this.movieElement && typeof(f.CallFunction) === "unknown") {
            this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");
            for (var h in f) {
                try {
                    if (typeof(f[h]) === "function" && h[0] >= 'A' && h[0] <= 'Z') {
                        f[h] = null;
                    }
                } catch(e) {
                	
            	}
            }
        }
    } catch(g) {
    	
    };
    window.__flash__removeCallback = function(c, b) {
        try {
            if (c) {
                c[b] = null;
            }
        } catch(a) {}
    };
};

SWFUpload.prototype.fileDialogStart = function() {
	this.queueEvent("file_dialog_start_handler")
};
SWFUpload.prototype.fileQueued = function(a) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("file_queued_handler", a)
};
SWFUpload.prototype.fileQueueError = function(a, c, b) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("file_queue_error_handler", [a, c, b])
};
SWFUpload.prototype.fileDialogComplete = function(b, c, a) {
	this.queueEvent("file_dialog_complete_handler", [b, c, a])
};
SWFUpload.prototype.uploadStart = function(a) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("return_upload_start_handler", a)
};
SWFUpload.prototype.returnUploadStart = function(a) {
	var b;
	if (typeof this.settings.upload_start_handler === "function") {
		a = this.unescapeFilePostParams(a);
		b = this.settings.upload_start_handler.call(this, a)
	} else {
		if (this.settings.upload_start_handler != undefined) {
			throw "upload_start_handler must be a function"
		}
	}
	if (b === undefined) {
		b = true
	}
	b = !!b;
	this.callFlash("ReturnUploadStart", [b])
};
SWFUpload.prototype.uploadProgress = function(a, c, b) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("upload_progress_handler", [a, c, b])
};
SWFUpload.prototype.uploadError = function(a, c, b) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("upload_error_handler", [a, c, b])
};
SWFUpload.prototype.uploadSuccess = function(b, a, c) {
	b = this.unescapeFilePostParams(b);
	this.queueEvent("upload_success_handler", [b, a, c])
};
SWFUpload.prototype.uploadComplete = function(a) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("upload_complete_handler", a)
};
SWFUpload.prototype.debug = function(a) {
	this.queueEvent("debug_handler", a)
};
SWFUpload.prototype.debugMessage = function(c) {
	if (this.settings.debug) {
		var a, d = [];
		if (typeof c === "object" && typeof c.name === "string" && typeof c.message === "string") {
			for (var b in c) {
				if (c.hasOwnProperty(b)) {
					d.push(b + ": " + c[b])
				}
			}
			a = d.join("\n") || "";
			d = a.split("\n");
			a = "EXCEPTION: " + d.join("\nEXCEPTION: ");
			SWFUpload.Console.writeLine(a)
		} else {
			SWFUpload.Console.writeLine(c)
		}
	}
};
SWFUpload.Console = {};
SWFUpload.Console.writeLine = function(d) {
	var b, a;
	try {
		b = document.getElementById("SWFUpload_Console");
		if (!b) {
			a = document.createElement("form");
			document.getElementsByTagName("body")[0].appendChild(a);
			b = document.createElement("textarea");
			b.id = "SWFUpload_Console";
			b.style.fontFamily = "monospace";
			b.setAttribute("wrap", "off");
			b.wrap = "off";
			b.style.overflow = "auto";
			b.style.width = "700px";
			b.style.height = "350px";
			b.style.margin = "5px";
			a.appendChild(b)
		}
		b.value += d + "\n";
		b.scrollTop = b.scrollHeight - b.clientHeight
	} catch(c) {
		alert("Exception: " + c.name + " Message: " + c.message)
	}
};
/*
Uploadify v3.2.1
Copyright (c) 2012 Reactive Apps, Ronnie Garcia
Released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/

(function($) {

	// These methods can be called by adding them as the first argument in the uploadify plugin call
	var methods = {

		init : function(options, swfUploadOptions) {
			
			return this.each(function() {

				// Create a reference to the jQuery DOM object
				var $this = $(this);

				// Clone the original DOM object
				var $clone = $this.clone();

				// Setup the default options
				var settings = $.extend({
					// Required Settings
					id       : $this.attr('id'), // The ID of the DOM object
					swf      : 'swfupload.swf',  // The path to the uploadify SWF file
					uploader : 'swfupload.php',  // The path to the server-side upload script
					
					// Options
					auto            : true,               // Automatically upload files when added to the queue
					buttonClass     : '',                 // A class name to add to the browse button DOM object
					buttonCursor    : 'hand',             // The cursor to use with the browse button
					buttonImage     : null,               // (String or null) The path to an image to use for the Flash browse button if not using CSS to style the button
					buttonText      : 'SELECT FILES',     // The text to use for the browse button
					checkExisting   : false,              // The path to a server-side script that checks for existing files on the server
					debug           : false,              // Turn on swfUpload debugging mode
					fileObjName     : 'Filedata',         // The name of the file object to use in your server-side script
					fileSizeLimit   : 0,                  // The maximum size of an uploadable file in KB (Accepts units B KB MB GB if string, 0 for no limit)
					fileTypeDesc    : 'All Files',        // The description for file types in the browse dialog
					fileTypeExts    : '*.*',              // Allowed extensions in the browse dialog (server-side validation should also be used)
					height          : 30,                 // The height of the browse button
					itemTemplate    : false,              // The template for the file item in the queue
					method          : 'post',             // The method to use when sending files to the server-side upload script
					multi           : true,               // Allow multiple file selection in the browse dialog
					formData        : {},                 // An object with additional data to send to the server-side upload script with every file upload
					preventCaching  : true,               // Adds a random value to the Flash URL to prevent caching of it (conflicts with existing parameters)
					progressData    : 'percentage',       // ('percentage' or 'speed') Data to show in the queue item during a file upload
					queueID         : false,              // The ID of the DOM object to use as a file queue (without the #)
					queueSizeLimit  : 999,                // The maximum number of files that can be in the queue at one time
					removeCompleted : true,               // Remove queue items from the queue when they are done uploading
					removeTimeout   : 3,                  // The delay in seconds before removing a queue item if removeCompleted is set to true
					requeueErrors   : false,              // Keep errored files in the queue and keep trying to upload them
					successTimeout  : 30,                 // The number of seconds to wait for Flash to detect the server's response after the file has finished uploading
					uploadLimit     : 0,                  // The maximum number of files you can upload
					width           : 120,                // The width of the browse button
					
					// Events
					overrideEvents  : []             // (Array) A list of default event handlers to skip
					/*
					onCancel         // Triggered when a file is cancelled from the queue
					onClearQueue     // Triggered during the 'clear queue' method
					onDestroy        // Triggered when the uploadify object is destroyed
					onDialogClose    // Triggered when the browse dialog is closed
					onDialogOpen     // Triggered when the browse dialog is opened
					onDisable        // Triggered when the browse button gets disabled
					onEnable         // Triggered when the browse button gets enabled
					onFallback       // Triggered is Flash is not detected    
					onInit           // Triggered when Uploadify is initialized
					onQueueComplete  // Triggered when all files in the queue have been uploaded
					onSelectError    // Triggered when an error occurs while selecting a file (file size, queue size limit, etc.)
					onSelect         // Triggered for each file that is selected
					onSWFReady       // Triggered when the SWF button is loaded
					onUploadComplete // Triggered when a file upload completes (success or error)
					onUploadError    // Triggered when a file upload returns an error
					onUploadSuccess  // Triggered when a file is uploaded successfully
					onUploadProgress // Triggered every time a file progress is updated
					onUploadStart    // Triggered immediately before a file upload starts
					*/
				}, options);

				// Prepare settings for SWFUpload
				var swfUploadSettings = {
					assume_success_timeout   : settings.successTimeout,
					button_placeholder_id    : settings.id,
					button_width             : settings.width,
					button_height            : settings.height,
					button_text              : null,
					button_text_style        : null,
					button_text_top_padding  : 0,
					button_text_left_padding : 0,
					button_action            : (settings.multi ? SWFUpload.BUTTON_ACTION.SELECT_FILES : SWFUpload.BUTTON_ACTION.SELECT_FILE),
					button_disabled          : false,
					button_cursor            : (settings.buttonCursor == 'arrow' ? SWFUpload.CURSOR.ARROW : SWFUpload.CURSOR.HAND),
					button_window_mode       : SWFUpload.WINDOW_MODE.TRANSPARENT,
					debug                    : settings.debug,						
					requeue_on_error         : settings.requeueErrors,
					file_post_name           : settings.fileObjName,
					file_size_limit          : settings.fileSizeLimit,
					file_types               : settings.fileTypeExts,
					file_types_description   : settings.fileTypeDesc,
					file_queue_limit         : settings.queueSizeLimit,
					file_upload_limit        : settings.uploadLimit,
					flash_url                : settings.swf,					
					prevent_swf_caching      : settings.preventCaching,
					post_params              : settings.formData,
					upload_url               : settings.uploader,
					use_query_string         : (settings.method == 'get'),
					
					// Event Handlers 
					file_dialog_complete_handler : handlers.onDialogClose,
					file_dialog_start_handler    : handlers.onDialogOpen,
					file_queued_handler          : handlers.onSelect,
					file_queue_error_handler     : handlers.onSelectError,
					swfupload_loaded_handler     : settings.onSWFReady,
					upload_complete_handler      : handlers.onUploadComplete,
					upload_error_handler         : handlers.onUploadError,
					upload_progress_handler      : handlers.onUploadProgress,
					upload_start_handler         : handlers.onUploadStart,
					upload_success_handler       : handlers.onUploadSuccess
				}

				// Merge the user-defined options with the defaults
				if (swfUploadOptions) {
					swfUploadSettings = $.extend(swfUploadSettings, swfUploadOptions);
				}
				// Add the user-defined settings to the swfupload object
				swfUploadSettings = $.extend(swfUploadSettings, settings);
				
				// Detect if Flash is available
				var playerVersion  = swfobject.getFlashPlayerVersion();
				var flashInstalled = (playerVersion.major >= 9);

				if (flashInstalled) {
					// Create the swfUpload instance
					window['uploadify_' + settings.id] = new SWFUpload(swfUploadSettings);
					var swfuploadify = window['uploadify_' + settings.id];

					// Add the SWFUpload object to the elements data object
					$this.data('uploadify', swfuploadify);
					
					// Wrap the instance
					var $wrapper = $('<div />', {
						'id'    : settings.id,
						'class' : 'uploadify',
						'css'   : {
									'height'   : settings.height + 'px',
									'width'    : settings.width + 'px'
								  }
					});
					$('#' + swfuploadify.movieName).wrap($wrapper);
					// Recreate the reference to wrapper
					$wrapper = $('#' + settings.id);
					// Add the data object to the wrapper 
					$wrapper.data('uploadify', swfuploadify);

					// Create the button
					var $button = $('<div />', {
						'id'    : settings.id + '-button',
						'class' : 'uploadify-button ' + settings.buttonClass
					});
					if (settings.buttonImage) {
						$button.css({
							'background-image' : "url('" + settings.buttonImage + "')",
							'text-indent'      : '-9999px'
						});
					}
					$button.html('<span class="uploadify-button-text">' + settings.buttonText + '</span>')
					.css({
						'height'      : settings.height + 'px',
						'line-height' : settings.height + 'px',
						'width'       : settings.width + 'px'
					});
					// Append the button to the wrapper
					$wrapper.append($button);

					// Adjust the styles of the movie
					$('#' + swfuploadify.movieName).css({
						'position' : 'absolute',
						'z-index'  : 1
					});
					
					// Create the file queue
					if (!settings.queueID) {
						var $queue = $('<div />', {
							'id'    : settings.id + '-queue',
							'class' : 'uploadify-queue'
						});
						$wrapper.after($queue);
						swfuploadify.settings.queueID      = settings.id + '-queue';
						swfuploadify.settings.defaultQueue = true;
					}
					
					// Create some queue related objects and variables
					swfuploadify.queueData = {
						files              : {}, // The files in the queue
						filesSelected      : 0, // The number of files selected in the last select operation
						filesQueued        : 0, // The number of files added to the queue in the last select operation
						filesReplaced      : 0, // The number of files replaced in the last select operation
						filesCancelled     : 0, // The number of files that were cancelled instead of replaced
						filesErrored       : 0, // The number of files that caused error in the last select operation
						uploadsSuccessful  : 0, // The number of files that were successfully uploaded
						uploadsErrored     : 0, // The number of files that returned errors during upload
						averageSpeed       : 0, // The average speed of the uploads in KB
						queueLength        : 0, // The number of files in the queue
						queueSize          : 0, // The size in bytes of the entire queue
						uploadSize         : 0, // The size in bytes of the upload queue
						queueBytesUploaded : 0, // The size in bytes that have been uploaded for the current upload queue
						uploadQueue        : [], // The files currently to be uploaded
						errorMsg           : 'Some files were not added to the queue:'
					};

					// Save references to all the objects
					swfuploadify.original = $clone;
					swfuploadify.wrapper  = $wrapper;
					swfuploadify.button   = $button;
					swfuploadify.queue    = $queue;

					// Call the user-defined init event handler
					if (settings.onInit) settings.onInit.call($this, swfuploadify);

				} else {

					// Call the fallback function
					if (settings.onFallback) settings.onFallback.call($this);
					var uiBorder = settings.onNoflash.call($this);
					var warp = $("<div class='coral-uploader-button' style='height: 40px;'></div>").appendTo(uiBorder);
					var button = $("<input type='button'/>").appendTo(warp);
					button.button({
						id : settings.id + '-button',
						label : settings.buttonText,
						onClick : function() {
							alert("没有安装flash或flash版本过低");
						}
					})
				}
			});

		},

		// Stop a file upload and remove it from the queue 
		cancel : function(fileID, supressEvent) {

			var args = arguments;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings,
					delay        = -1;

				if (args[0]) {
					// Clear the queue
					if (args[0] == '*') {
						var queueItemCount = swfuploadify.queueData.queueLength;
						$('#' + settings.queueID).find('.uploadify-queue-item').each(function() {
							delay++;
							if (args[1] === true) {
								swfuploadify.cancelUpload($(this).attr('id'), false);
							} else {
								swfuploadify.cancelUpload($(this).attr('id'));
							}
							$(this).find('.data').removeClass('data').html(' - Cancelled');
							$(this).find('.uploadify-progress-bar').remove();
							$(this).delay(1000 + 100 * delay).fadeOut(500, function() {
								$(this).remove();
							});
							delete swfuploadify.queueData.files[fileID];// #CORALIV-727
						});
						swfuploadify.queueData.queueSize   = 0;
						swfuploadify.queueData.queueLength = 0;
						// Trigger the onClearQueue event
						if (settings.onClearQueue) settings.onClearQueue.call($this, queueItemCount);
					} else {
						for (var n = 0; n < args.length; n++) {
							swfuploadify.cancelUpload(args[n]);
							$('#' + args[n]).find('.data').removeClass('data').html(' - Cancelled');
							$('#' + args[n]).find('.uploadify-progress-bar').remove();
							$('#' + args[n]).delay(1000 + 100 * n).fadeOut(500, function() {
								$(this).remove();
							});
							delete swfuploadify.queueData.files[fileID];// #CORALIV-727
						}
					}
				} else {
					var item = $('#' + settings.queueID).find('.uploadify-queue-item').get(0);
					$item = $(item);
					swfuploadify.cancelUpload($item.attr('id'));
					$item.find('.data').removeClass('data').html(' - Cancelled');
					$item.find('.uploadify-progress-bar').remove();
					$item.delay(1000).fadeOut(500, function() {
						$(this).remove();
					});
					delete swfuploadify.queueData.files[fileID];// #CORALIV-727
				}
			});

		},

		// Revert the DOM object back to its original state
		destroy : function() {

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				// Destroy the SWF object and 
				swfuploadify.destroy();
				
				// Destroy the queue
				if (settings.defaultQueue) {
					$('#' + settings.queueID).remove();
				}
				
				// Reload the original DOM element
				$('#' + settings.id).replaceWith(swfuploadify.original);

				// Call the user-defined event handler
				if (settings.onDestroy) settings.onDestroy.call(this);

				delete swfuploadify;
			});

		},

		// Disable the select button
		disable : function(isDisabled) {
			
			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				// Call the user-defined event handlers
				if (isDisabled) {
					swfuploadify.button.addClass('disabled');
					if (settings.onDisable) settings.onDisable.call(this);
				} else {
					swfuploadify.button.removeClass('disabled');
					if (settings.onEnable) settings.onEnable.call(this);
				}

				// Enable/disable the browse button
				swfuploadify.setButtonDisabled(isDisabled);
			});

		},

		// Get or set the settings data
		settings : function(name, value, resetObjects) {

			var args        = arguments;
			var returnValue = value;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				if (typeof(args[0]) == 'object') {
					for (var n in value) {
						setData(n,value[n]);
					}
				}
				if (args.length === 1) {
					returnValue =  settings[name];
				} else {
					switch (name) {
						case 'uploader':
							swfuploadify.setUploadURL(value);
							break;
						case 'formData':
							if (!resetObjects) {
								value = $.extend(settings.formData, value);
							}
							swfuploadify.setPostParams(settings.formData);
							break;
						case 'method':
							if (value == 'get') {
								swfuploadify.setUseQueryString(true);
							} else {
								swfuploadify.setUseQueryString(false);
							}
							break;
						case 'fileObjName':
							swfuploadify.setFilePostName(value);
							break;
						case 'fileTypeExts':
							swfuploadify.setFileTypes(value, settings.fileTypeDesc);
							break;
						case 'fileTypeDesc':
							swfuploadify.setFileTypes(settings.fileTypeExts, value);
							break;
						case 'fileSizeLimit':
							swfuploadify.setFileSizeLimit(value);
							break;
						case 'uploadLimit':
							swfuploadify.setFileUploadLimit(value);
							break;
						case 'queueSizeLimit':
							swfuploadify.setFileQueueLimit(value);
							break;
						case 'buttonImage':
							swfuploadify.button.css('background-image', settingValue);
							break;
						case 'buttonCursor':
							if (value == 'arrow') {
								swfuploadify.setButtonCursor(SWFUpload.CURSOR.ARROW);
							} else {
								swfuploadify.setButtonCursor(SWFUpload.CURSOR.HAND);
							}
							break;
						case 'buttonText':
							$('#' + settings.id + '-button').find('.uploadify-button-text').html(value);
							break;
						case 'width':
							swfuploadify.setButtonDimensions(value, settings.height);
							break;
						case 'height':
							swfuploadify.setButtonDimensions(settings.width, value);
							break;
						case 'multi':
							if (value) {
								swfuploadify.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILES);
							} else {
								swfuploadify.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILE);
							}
							break;
					}
					settings[name] = value;
				}
			});
			
			if (args.length === 1) {
				return returnValue;
			}

		},

		// Stop the current uploads and requeue what is in progress
		stop : function() {

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify');

				// Reset the queue information
				swfuploadify.queueData.averageSpeed  = 0;
				swfuploadify.queueData.uploadSize    = 0;
				swfuploadify.queueData.bytesUploaded = 0;
				swfuploadify.queueData.uploadQueue   = [];

				swfuploadify.stopUpload();
			});

		},

		// Start uploading files in the queue
		upload : function() {

			var args = arguments;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify');

				// Reset the queue information
				swfuploadify.queueData.averageSpeed  = 0;
				swfuploadify.queueData.uploadSize    = 0;
				swfuploadify.queueData.bytesUploaded = 0;
				swfuploadify.queueData.uploadQueue   = [];
				
				// Upload the files
				if (args[0]) {
					if (args[0] == '*') {
						swfuploadify.queueData.uploadSize = swfuploadify.queueData.queueSize;
						swfuploadify.queueData.uploadQueue.push('*');
						swfuploadify.startUpload();
					} else {
						for (var n = 0; n < args.length; n++) {
							swfuploadify.queueData.uploadSize += swfuploadify.queueData.files[args[n]].size;
							swfuploadify.queueData.uploadQueue.push(args[n]);
						}
						swfuploadify.startUpload(swfuploadify.queueData.uploadQueue.shift());
					}
				} else {
					swfuploadify.startUpload();
				}

			});

		}

	}

	// These functions handle all the events that occur with the file uploader
	var handlers = {

		// Triggered when the file dialog is opened
		onDialogOpen : function() {
			// Load the swfupload settings
			var settings = this.settings;

			// Reset some queue info
			this.queueData.errorMsg       = 'Some files were not added to the queue:';
			this.queueData.filesReplaced  = 0;
			this.queueData.filesCancelled = 0;

			// Call the user-defined event handler
			if (settings.onDialogOpen) settings.onDialogOpen.call(this);
		},

		// Triggered when the browse dialog is closed
		onDialogClose :  function(filesSelected, filesQueued, queueLength) {
			// Load the swfupload settings
			var settings = this.settings;

			// Update the queue information
			this.queueData.filesErrored  = filesSelected - filesQueued;
			this.queueData.filesSelected = filesSelected;
			this.queueData.filesQueued   = filesQueued - this.queueData.filesCancelled;
			this.queueData.queueLength   = queueLength;

			// Run the default event handler
			if ($.inArray('onDialogClose', settings.overrideEvents) < 0) {
				if (this.queueData.filesErrored > 0) {
					alert(this.queueData.errorMsg);
				}
			}

			// Call the user-defined event handler
			if (settings.onDialogClose) settings.onDialogClose.call(this, this.queueData);

			// Upload the files if auto is true
			if (settings.auto) $('#' + settings.id).uploadify('upload', '*');
		},

		// Triggered once for each file added to the queue
		onSelect : function(file) {
			// Load the swfupload settings
			var settings = this.settings;

			// Check if a file with the same name exists in the queue
			var queuedFile = {};
			for (var n in this.queueData.files) {
				queuedFile = this.queueData.files[n];
				if (queuedFile.uploaded != true && queuedFile.name == file.name) {
					var replaceQueueItem = confirm('The file named "' + file.name + '" is already in the queue.\nDo you want to replace the existing item in the queue?');
					if (!replaceQueueItem) {
						this.cancelUpload(file.id);
						this.queueData.filesCancelled++;
						return false;
					} else {
						$('#' + queuedFile.id).remove();// #CORALIV-727
						delete this.queueData.files[n];
						this.cancelUpload(queuedFile.id);
						this.queueData.filesReplaced++;
					}
				}
			}

			// Get the size of the file
			var fileSize = Math.round(file.size / 1024);
			var suffix   = 'KB';
			if (fileSize > 1000) {
				fileSize = Math.round(fileSize / 1000);
				suffix   = 'MB';
			}
			var fileSizeParts = fileSize.toString().split('.');
			fileSize = fileSizeParts[0];
			if (fileSizeParts.length > 1) {
				fileSize += '.' + fileSizeParts[1].substr(0,2);
			}
			fileSize += suffix;
			
			// Truncate the filename if it's too long
			var fileName = file.name;
			if (fileName.length > 25) {
				fileName = fileName.substr(0,25) + '...';
			}

			// Create the file data object
			itemData = {
				'fileID'     : file.id,
				'instanceID' : settings.id,
				'fileName'   : fileName,
				'fileSize'   : fileSize
			}

			// Create the file item template
			if (settings.itemTemplate == false) {
				settings.itemTemplate = '<div id="${fileID}" class="uploadify-queue-item">\
					<div class="cancel">\
						<a href="javascript:$(\'#${instanceID}\').uploadify(\'cancel\', \'${fileID}\')">X</a>\
					</div>\
					<span class="fileName">${fileName} (${fileSize})</span><span class="data"></span>\
					<div class="uploadify-progress">\
						<div class="uploadify-progress-bar"><!--Progress Bar--></div>\
					</div>\
				</div>';
			}

			// Run the default event handler
			if ($.inArray('onSelect', settings.overrideEvents) < 0) {
				
				// Replace the item data in the template
				itemHTML = settings.itemTemplate;
				for (var d in itemData) {
					itemHTML = itemHTML.replace(new RegExp('\\$\\{' + d + '\\}', 'g'), itemData[d]);
				}

				// Add the file item to the queue
				$('#' + settings.queueID).append(itemHTML);
			}

			this.queueData.queueSize += file.size;
			this.queueData.files[file.id] = file;

			// Call the user-defined event handler
			if (settings.onSelect) settings.onSelect.apply(this, arguments);
		},

		// Triggered when a file is not added to the queue
		onSelectError : function(file, errorCode, errorMsg) {
			// Load the swfupload settings
			var settings = this.settings;

			// Run the default event handler
			if ($.inArray('onSelectError', settings.overrideEvents) < 0) {
				switch(errorCode) {
					case SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED:
						if (settings.queueSizeLimit > errorMsg) {
							this.queueData.errorMsg += '\nThe number of files selected exceeds the remaining upload limit (' + errorMsg + ').';
						} else {
							this.queueData.errorMsg += '\nThe number of files selected exceeds the queue size limit (' + settings.queueSizeLimit + ').';
						}
						break;
					case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" exceeds the size limit (' + settings.fileSizeLimit + ').';
						break;
					case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" is empty.';
						break;
					case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" is not an accepted file type (' + settings.fileTypeDesc + ').';
						break;
				}
			}
			if (errorCode != SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {
				delete this.queueData.files[file.id];
			}

			// Call the user-defined event handler
			if (settings.onSelectError) settings.onSelectError.apply(this, arguments);
		},

		// Triggered when all the files in the queue have been processed
		onQueueComplete : function() {
			if (this.settings.onQueueComplete) this.settings.onQueueComplete.call(this, this.settings.queueData);
		},

		// Triggered when a file upload successfully completes
		onUploadComplete : function(file) {
			// Load the swfupload settings
			var settings     = this.settings,
				swfuploadify = this;

			// Check if all the files have completed uploading
			var stats = this.getStats();
			this.queueData.queueLength = stats.files_queued;
			/*this.queueData.queueLength = '*';*/
			if (this.queueData.uploadQueue[0] == '*') {
				if (this.queueData.queueLength > 0) {
					this.startUpload();
				} else {
					this.queueData.uploadQueue = [];

					// Call the user-defined event handler for queue complete
					if (settings.onQueueComplete) settings.onQueueComplete.call(this, this.queueData);
				}
			} else {
				if (this.queueData.uploadQueue.length > 0) {
					this.startUpload(this.queueData.uploadQueue.shift());
				} else {
					this.queueData.uploadQueue = [];

					// Call the user-defined event handler for queue complete
					if (settings.onQueueComplete) settings.onQueueComplete.call(this, this.queueData);
				}
			}

			// Call the default event handler
			if ($.inArray('onUploadComplete', settings.overrideEvents) < 0) {
				if (settings.removeCompleted) {
					switch (file.filestatus) {
						case SWFUpload.FILE_STATUS.COMPLETE:
							setTimeout(function() { 
								if ($('#' + file.id)) {
									swfuploadify.queueData.queueSize   -= file.size;
									swfuploadify.queueData.queueLength -= 1;
									delete swfuploadify.queueData.files[file.id]
									$('#' + file.id).fadeOut(500, function() {
										$(this).remove();
									});
								}
							}, settings.removeTimeout * 1000);
							break;
						case SWFUpload.FILE_STATUS.ERROR:
							if (!settings.requeueErrors) {
								setTimeout(function() {
									if ($('#' + file.id)) {
										swfuploadify.queueData.queueSize   -= file.size;
										swfuploadify.queueData.queueLength -= 1;
										delete swfuploadify.queueData.files[file.id];
										$('#' + file.id).fadeOut(500, function() {
											$(this).remove();
										});
									}
								}, settings.removeTimeout * 1000);
							}
							break;
					}
				} else {
					file.uploaded = true;
				}
			}

			// Call the user-defined event handler
			if (settings.onUploadComplete) settings.onUploadComplete.call(this, file);
		},

		// Triggered when a file upload returns an error
		onUploadError : function(file, errorCode, errorMsg) {
			// Load the swfupload settings
			var settings = this.settings;

			// Set the error string
			var errorString = 'Error';
			switch(errorCode) {
				case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
					errorString = 'HTTP Error (' + errorMsg + ')';
					break;
				case SWFUpload.UPLOAD_ERROR.MISSING_UPLOAD_URL:
					errorString = 'Missing Upload URL';
					break;
				case SWFUpload.UPLOAD_ERROR.IO_ERROR:
					errorString = 'IO Error';
					break;
				case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
					errorString = 'Security Error';
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
					alert('The upload limit has been reached (' + errorMsg + ').');
					errorString = 'Exceeds Upload Limit';
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
					errorString = 'Failed';
					break;
				case SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND:
					break;
				case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
					errorString = 'Validation Error';
					break;
				case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
					errorString = 'Cancelled';
					this.queueData.queueSize   -= file.size;
					this.queueData.queueLength -= 1;
					if (file.status == SWFUpload.FILE_STATUS.IN_PROGRESS || $.inArray(file.id, this.queueData.uploadQueue) >= 0) {
						this.queueData.uploadSize -= file.size;
					}
					// Trigger the onCancel event
					if (settings.onCancel) settings.onCancel.call(this, file);
					delete this.queueData.files[file.id];
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
					errorString = 'Stopped';
					break;
			}

			// Call the default event handler
			if ($.inArray('onUploadError', settings.overrideEvents) < 0) {

				if (errorCode != SWFUpload.UPLOAD_ERROR.FILE_CANCELLED && errorCode != SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED) {
					$('#' + file.id).addClass('uploadify-error');
				}

				// Reset the progress bar
				$('#' + file.id).find('.uploadify-progress-bar').css('width','1px');

				// Add the error message to the queue item
				if (errorCode != SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND && file.status != SWFUpload.FILE_STATUS.COMPLETE) {
					$('#' + file.id).find('.data').html(' - ' + errorString);
				}
			}

			var stats = this.getStats();
			this.queueData.uploadsErrored = stats.upload_errors;

			// Call the user-defined event handler
			if (settings.onUploadError) settings.onUploadError.call(this, file, errorCode, errorMsg, errorString);
		},

		// Triggered periodically during a file upload
		onUploadProgress : function(file, fileBytesLoaded, fileTotalBytes) {
			// Load the swfupload settings
			var settings = this.settings;

			// Setup all the variables
			var timer            = new Date();
			var newTime          = timer.getTime();
			var lapsedTime       = newTime - this.timer;
			if (lapsedTime > 500) {
				this.timer = newTime;
			}
			var lapsedBytes      = fileBytesLoaded - this.bytesLoaded;
			this.bytesLoaded     = fileBytesLoaded;
			var queueBytesLoaded = this.queueData.queueBytesUploaded + fileBytesLoaded;
			var percentage       = Math.round(fileBytesLoaded / fileTotalBytes * 100);
			
			// Calculate the average speed
			var suffix = 'KB/s';
			var mbs = 0;
			var kbs = (lapsedBytes / 1024) / (lapsedTime / 1000);
			    kbs = Math.floor(kbs * 10) / 10;
			if (this.queueData.averageSpeed > 0) {
				this.queueData.averageSpeed = Math.floor((this.queueData.averageSpeed + kbs) / 2);
			} else {
				this.queueData.averageSpeed = Math.floor(kbs);
			}
			if (kbs > 1000) {
				mbs = (kbs * .001);
				this.queueData.averageSpeed = Math.floor(mbs);
				suffix = 'MB/s';
			}
			
			// Call the default event handler
			if ($.inArray('onUploadProgress', settings.overrideEvents) < 0) {
				if (settings.progressData == 'percentage') {
					$('#' + file.id).find('.data').html(' - ' + percentage + '%');
				} else if (settings.progressData == 'speed' && lapsedTime > 500) {
					$('#' + file.id).find('.data').html(' - ' + this.queueData.averageSpeed + suffix);
				}
				$('#' + file.id).find('.uploadify-progress-bar').css('width', percentage + '%');
			}

			// Call the user-defined event handler
			if (settings.onUploadProgress) settings.onUploadProgress.call(this, file, fileBytesLoaded, fileTotalBytes, queueBytesLoaded, this.queueData.uploadSize);
		},

		// Triggered right before a file is uploaded
		onUploadStart : function(file) {
			// Load the swfupload settings
			var settings = this.settings;

			var timer        = new Date();
			this.timer       = timer.getTime();
			this.bytesLoaded = 0;
			if (this.queueData.uploadQueue.length == 0) {
				this.queueData.uploadSize = file.size;
			}
			if (settings.checkExisting) {
				$.ajax({
					type    : 'POST',
					async   : false,
					url     : settings.checkExisting,
					data    : {filename: file.name},
					success : function(data) {
						if (data == 1) {
							var overwrite = confirm('A file with the name "' + file.name + '" already exists on the server.\nWould you like to replace the existing file?');
							if (!overwrite) {
								this.cancelUpload(file.id);
								$('#' + file.id).remove();
								if (this.queueData.uploadQueue.length > 0 && this.queueData.queueLength > 0) {
									if (this.queueData.uploadQueue[0] == '*') {
										this.startUpload();
									} else {
										this.startUpload(this.queueData.uploadQueue.shift());
									}
								}
							}
						}
					}
				});
			}

			// Call the user-defined event handler
			if (settings.onUploadStart) settings.onUploadStart.call(this, file); 
		},

		// Triggered when a file upload returns a successful code
		onUploadSuccess : function(file, data, response) {
			// Load the swfupload settings
			var settings = this.settings;
			var stats    = this.getStats();
			this.queueData.uploadsSuccessful = stats.successful_uploads;
			this.queueData.queueBytesUploaded += file.size;

			// Call the default event handler
			if ($.inArray('onUploadSuccess', settings.overrideEvents) < 0) {
				$('#' + file.id).find('.data').html(' - 上传完成');
			}

			// Call the user-defined event handler
			if (settings.onUploadSuccess) settings.onUploadSuccess.call(this, file, data, response); 
		}

	}

	$.fn.uploadify = function(method) {

		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return methods.init.apply(this, arguments);
		} else {
			$.error('The method ' + method + ' does not exist in $.uploadify');
		}

	}

})($);

/**
 *	Coral 4.0: uploader
 *
 *	Depends:
 *		jquery.coral.core.js
 *		jquery.coral.component.js
 *
 */
( function ( $, undefined ) {
	"use strict";	
	
	$.component ( "coral.uploader", {
		version: $.coral.version,
		castProperties : ["dataCustom", "formData", "overrideEvents", "buttons", "itemTemplate"],
		options: {				
			// Required Settings
			id: "", 														 	// The ID of the DOM object
			swf: $.coral.contextPath+'/jquery-cui/resource/swfupload.swf',  // The path to the uploadify SWF file
			uploader : "",  										  	// The path to the server-side upload script			
			// Options
			auto: true,               								    // Automatically upload files when added to the queue
			buttonClass: "",                 						// A class name to add to the browse button DOM object
			buttonCursor: "hand",         				    // The cursor to use with the browse button
			buttonImage: null,                              	// (String or null) The path to an image to use for the Flash browse button if not using CSS to style the button
			buttonText: "SELECT FILES",          	// The text to use for the browse button
			checkExisting: false,                           	// The path to a server-side script that checks for existing files on the server
			debug: false,                                        		//Turn on swfUpload debugging mode
			fileObjName: "Filedata",                     	// The name of the file object to use in your server-side script
			fileSizeLimit: 0,                                    		// The maximum size of an uploadable file in KB (Accepts units B KB MB GB if string, 0 for no limit)
			fileTypeDesc: "All Files",                    		// The description for file types in the browse dialog
			fileTypeExts: "*.*",              		       		// Allowed extensions in the browse dialog (server-side validation should also be used)
			heigh: 30,                                             		// The height of the browse button
			itemTemplate: false,                        		// The template for the file item in the queue
			method: "post",                                  		// The method to use when sending files to the server-side upload script
			multi: true,                                        		// Allow multiple file selection in the browse dialog
			formData: {},                                      		// An object with additional data to send to the server-side upload script with every file upload
			preventCaching: true,                     		// Adds a random value to the Flash URL to prevent caching of it (conflicts with existing parameters)
			progressData: "percentage",           		// ('percentage' or 'speed') Data to show in the queue item during a file upload
			queueID: false,                                 		// The ID of the DOM object to use as a file queue (without the #)
			queueSizeLimit: 999,                        		// The maximum number of files that can be in the queue at one time
			removeCompleted: true,                		// Remove queue items from the queue when they are done uploading
			removeTimeout: 3,                           		// The delay in seconds before removing a queue item if removeCompleted is set to true
			requeueError: false,                       		// Keep errored files in the queue and keep trying to upload them
			successTimeout: 30,                        		// The number of seconds to wait for Flash to detect the server's response after the file has finished uploading
			uploadLimit: 0,                                 		// The maximum number of files you can upload
			width: 120,                                        		// The width of the browse button	
			cls: "",
			displayStyle: "original", // original(原生的样式),custom(定制的带输入框的样式),
			emptyText: "请选择...",
			delay: 1000, //延迟dialog消失的时间
			buttons: null, //[{label: "上传",id: "uploader_btn_upload",click: function (e, ui) {} },{...}],"上传 upload,清空 clear" custom 模式下显示的buttons
			
			// Events
			overrideEvents  : [],             // (Array) A list of default event handlers to skip			
			onCancel: null, 					// Triggered when a file is cancelled from the queue
			onClearQueue : null,  			// Triggered during the 'clear queue' method
			onDestroy: null, 					// Triggered when the uploadify object is destroyed
			onDialogClose: null, 			// Triggered when the browse dialog is closed
			onDialogOpen: null, 			// Triggered when the browse dialog is opened
			onDisable: null, 					// Triggered when the browse button gets disabled
			onEnable: null, 					// Triggered when the browse button gets enabled
			onFallback: null, 					// Triggered is Flash is not detected
			onNoflash: null,
			onInit: null, 							// Triggered when Uploadify is initialized
			onQueueComplete: null, 	// Triggered when all files in the queue have been uploaded
			onSelectError: null, 		// Triggered when an error occurs while selecting a file (file size, queue size limit, etc.)
			onSelect: null, 			// Triggered for each file that is selected
			onNoFlash: null,			// Triggered for computer is Flash
			onSWFReady: null, 			// Triggered when the SWF button is loaded
			onUploadComplete: null, 	// Triggered when a file upload completes (success or error)
			onUploadError: null, 			// Triggered when a file upload returns an error
			onUploadSuccess: null, 		// Triggered when a file is uploaded successfully
			onUploadProgress: null, 	// Triggered every time a file progress is updated
			onUploadStart: null			// Triggered immediately before a file upload starts
		},
		_create: function() {
			var that = this;		
			that._initElement();
			//that._flashCheck();
			var isFlash = that._flashCheck();
			if(isFlash == false){
				that._trigger( "onNoFlash", null, [] );
			}
		},
		_initElement: function () {
			var that = this,
				opts = that.options,
				events = {};	

			// Initialize structure
			if(typeof that.element.attr("id") != "undefined") {
	    		opts.id = that.element.attr("id");
	    	} else if (opts.id){
	    		that.element.attr("id", opts.id);
	    	}		
			if(typeof that.element.attr("name") != "undefined") {
	    		opts.name = that.element.attr("name");
	    	} else if (opts.name) {
	    		that.element.attr("name", opts.name);
	    	}
			
			delete opts.id;			
			events = that.getEventsObj();
			
			opts = $.extend({}, opts, events);
			this._initUploder(opts);
			opts.id = that.element.attr("id");
		},
		//检测电脑（IE8）下是否安装了flash
	/*	_flashCheck: function(){
			var hasFlash = true;
			try {
				if (document.all) {
					var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
					if(!swf){
						hasFlash = false;
					}
				} else {
					var swf = navigator.plugins["Shockwave Flash"];
					if(!swf){
						hasFlash = false;
					}
				}
				return hasFlash;
			} catch (e){
				
				return hasFlash;
			}
		},*/
		_flashCheck: function(){
			var isIE = !-[1,];
			var hasFlash = true;
			if(isIE){
			    try{
			        var swf1 = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
			        hasFlash = true;
			    }
			    catch(e){
			        hasFlash = false;
			    }
			}
			else {
			    try{
			    	if(navigator.plugins && navigator.plugins.length > 0){
			    		var swf2 = navigator.plugins['Shockwave Flash'];
			    		if(swf2 == undefined){
			    			hasFlash = false;
			    		}
			    	}
			        else {
			        	hasFlash = true;
			        }
			    }
			    catch(e){
			    	hasFlash = false;
			    }
			}
			return hasFlash;
		},
		// methods
		component: function () {
			return this.uiUploader;
		},
		destroy: function () {
			this.uploader.uploadify( "destroy" );
		},
		disable: function (isDisabled) {
			this.uploader.uploadify( "disable", isDisabled );
		},
		settings: function (name, value, resetObjects) {
			this.uploader.uploadify( "settings", name, value, resetObjects);
		},
		stop: function () {
			this.uploader.uploadify( "stop" );
		},
		upload: function(option) {
			if ("original" == this.options.displayStyle || !this._isQueueDialog()) {
				this.uploader.uploadify("upload", option);
				return ;
			}
			
			if (this.select.length == 0) return;
			
			var that = this,
				id = this.element.attr("id");
			
			$("#" + id + "_queue").dialog("open");
		},
        getvalue: function(){
        	if (this.select.length == 0) alert( "none file");
        	return this.select.join(",");
        },
		cancel: function() {
			this.uploader.uploadify("cancel");
		},
		clear: function(option) {
			if ("custom" == this.options.displayStyle) {
				this.select = [];
				this.uiUploader.find(".coral-file").html("请选择...");
				this.uiUploader.find("object").attr("title","请选择...");
			}
			
			this.uploader.uploadify("cancel");
			this.clearQueue();
		},
		/**
		 * 清除队列文件
		**/
		clearQueue: function() {
			this.uploader.clearQueue() ;
		},
		uploadify: function () {
			return this.uploader ;
		},
		/**
			获取队列文件数据
		**/
		queueData: function() {
			return this.uploader.data("uploadify").queueData ;
		},
		/**
		 * 获取buttons数据结构
		 * @returns
		 */
		_getButtons: function () {
			if (typeof this.options.buttons === "object") return this.options.buttons;
			if (typeof this.options.buttons !== "string") return [];

			var that = this,
				opts = this.options,
				buttons = this.options.buttons,
				buttonsArr = [];
			
			var tempArr = $.trim( buttons ).split( "," );
			for ( var i in tempArr ) {
				var buttonItem = {},
					itemArr = tempArr[i].split(" ");				
				
				buttonItem.label = itemArr[0];
				buttonItem.click = itemArr[1];
				
				buttonsArr.push( buttonItem );
			}
				
			return buttonsArr;
		},
		/**
		 * callback click handler
		 */
		_triggerClick: function ( handler, event, data ) {
			var that = this;
			
			var _fn = $.coral.toFunction(handler);
			event = $.Event( event );
			
			return _fn.apply( that.element[0], [ event ].concat( data )); 
		},
		/**
		 * create buttons when the displayStyle is custom
		 */
		_createButtons: function() {
			var that = this,
				opts = this.options,
				buttons = this._getButtons();
			
			var $icons = $("<span class=\"coral-uploader-btn-icons coral-corner-right\"></span>");
			that.uiBorder.append( $icons );

			$.each ( buttons, function ( index, item ) {
				var label = item.label,
					id = item.id,
					handler = item.click,
					callbackData = {},
					$icon = $("<span class=\"coral-uploader-btn-ico icon coral-uploader-btn-textico\"></span>");
				
				if (label) {
					$icon.html(label);
					callbackData["label"] = label;
				}
				if (id) {
					$icon.attr("data-id", id);
					callbackData["id"] = id;
				}
				$icon.bind("click" + that.eventNamespace, function (e) {
					if ( that.options.disabled ) return;
					
					that._triggerClick( handler, e , callbackData );
				});				
				$icons.append($icon);
			});
		},
		/**
		 * initialize uploader
		 */
		_initUploder: function(options) {
			var that = this,
				id = that.element.attr("id");
			
			that.uiUploader = $( "<span class=\"coral-uploader\"></span>" );	
			that.uiBorder =  $( "<span class=\"coral-uploader-border coral-corner-all\"></span>" );
			that.uploader = $("<div id=\""+ id +"_uploader\"></div>");
			that.element.after( that.uiUploader );
			that.uiUploader.append(that.uiBorder);
			that.uiBorder.append(that.element);
			that.element.hide();
			
			if (options.displayStyle == "original") {	
				that.element.before( that.uploader );
				this.uploader.uploadify( options );
				return ;
			}
			
			this.uiUploader.addClass("coral-uploader-custom coral-textbox");
			this.uiBorder.addClass("coral-textbox-border");
			if (options.buttons) {
				this._createButtons();
			}
			that.select = [];			
			$(this.element).wrap("<span class=\"coral-file-default\"></span>")
				.before("<span class='coral-file'>" + options.emptyText + "</span>")
				.before( that.uploader );
			
			var opts = $.extend(options, {
				height: 28,
				width: 800
			});
			if (!opts.queueID) {
				$(this.element).before("<div id='" + id + "_queue'></div>");
				$("#" + id + "_queue").dialog({
					autoOpen: false,
					title: "上传",
					modal: false,
					resizable: false,
					onOpen: function () {
						that.uploader.uploadify("upload","*");
					}
				});
				options.queueID = id+"_queue";
				this.hasDialog = true; // 说明进度条在dialog中显示
			}
			that.uploader.uploadify(opts);			
		},	
		_isQueueDialog: function() {
			return this.hasDialog;
		},
		_reloadUploader: function() {
			var that = this,
				opts = this.options;
			
			delete opts.id;
			that.uploader.uploadify( opts );
			opts.id = that.element.attr("id");
		},
		getEventsObj: function () {		
			var that = this,
				opts = this.options,
				id = this.element.attr("id");
			
			return {
				onCancel: function (file) {
					that._trigger( "onCancel", null, [{file:file}] );
				},
				onClearQueue: function (queueItemCount) {
					that._trigger( "onClearQueue", null, [{queueItemCount:queueItemCount}] );
				},
				onDestroy: function() {
					that._trigger( "onDestroy", null, [] );
				},
				onDialogClose: function(queueData) {
					if ("custom" == opts.displayStyle && opts.auto && that._isQueueDialog()) {
						$("#" + id + "_queue").dialog("open");
					}
					that._trigger( "onDialogClose", null, [{queueData:queueData}] );
				},
				onDialogOpen: function() {
					if ("custom" == opts.displayStyle) {
		//				that.select = [];
					}
					that._trigger( "onDialogOpen", null, [] );
				},
				onDisable: function() {
					that._trigger( "onDisable", null, [] );
				},
				onEnable: function() {
					that._trigger( "onEnable", null, [] );
				},
				onFallback : function() {
					that._trigger( "onFallback ", null, [] );
				},
				onNoflash : function() {
					return that.uiBorder;
				},
				onInit: function(swfuploadify) {
					that._trigger( "onInit", null, [{swfuploadify:swfuploadify}] );
				},
				onQueueComplete: function(queueData) {
					var id = that.element.attr("id");
					
					if ( "custom" == opts.displayStyle && that._isQueueDialog())  {
						setTimeout(function() {
			        		$("#" + id + "_queue").dialog("close");
			        		that.select = [];
			        	}, opts.delay);
					}
					that._trigger( "onQueueComplete", null, [{queueData:queueData}] );
				},
				onSelectError: function(file, errorCode, errorMsg) {
					that._trigger( "onSelectError", null, [{arguments:arguments}] );
				},
				onSelect: function(file) {
					if ( "custom" == opts.displayStyle )  {
						that.select.push(file.name);
			        	that.uiUploader.find(".coral-file").html(that.select.join(","));
			        	that.uiUploader.find("object").attr("title",that.select.join(","));
					}

					that._trigger( "onSelect", null, [{file:file}] );
				},
				onSWFReady: function() {
					that._trigger( "onSWFReady", null, [] );
				},
				onUploadComplete: function(file) {
					that._trigger( "onUploadComplete", null, [{file:file}] );
				},
				onUploadError: function(file, errorCode, errorMsg, errorString) {
					that._trigger( "onUploadError", null, [{file:file, errorCode:errorCode, errorMsg:errorMsg, errorString:errorString}] );
				},
				onUploadSuccess: function (file, data, response) {
					that._trigger( "onUploadSuccess", null, [{file:file, data:data, response:response}] );
				},
				onUploadProgress: function(file, fileBytesLoaded, fileTotalBytes, queueBytesLoaded, uploadSize) {
					that._trigger( "onUploadProgress", null, [{file:file, fileBytesLoaded:fileBytesLoaded, fileTotalBytes:fileTotalBytes, queueBytesLoaded:queueBytesLoaded, uploadSize:uploadSize}] );
				},
				onUploadStart: function(file) {
					that._trigger( "onUploadStart", null, [{file:file}] );
				}				
			};
		},	
		_setOption: function ( key, value ) {
			var that = this;
			
			if  ( key === "id" || key === "name" ) {
				return ;
			}
			
 			this._super( key, value );
 			
 			if (key === "emptyText") {
 				this.uiUploader.find(".coral-file").html(value);
 				return;
 			}
 			
 			that.settings( key, value);
		},
		_destroy: function() {
			var that = this;
			
			that.uiUploader.replaceWith( that.element );
		}
	});
})(jQuery);


var tooltip = $.component( "coral.tooltip", {
	version: "4.0.1",
	options: {
		content: function() {
			// support: IE<9, Opera in jQuery <1.7
			// .text() can't accept undefined, so coerce to a string
			var title = $( this ).attr( "title" ) || "";
			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,
		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		tooltipClass: null,
		track: false,

		// callbacks
		onClose: null,
		onOpen: null
	},

	_addDescribedBy: function( elem, id ) {
		var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
		describedby.push( id );
		elem
			.data( "coral-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	},

	_removeDescribedBy: function( elem ) {
		var id = elem.data( "coral-tooltip-id" ),
			describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
			index = $.inArray( id, describedby );

		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "coral-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	},

	_create: function() {
		this._on({
			mouseover: "open",
			focusin: "open"
		});

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};
		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		if ( this.options.disabled ) {
			this._disable();
		}

		// Append the aria-live region so tooltips announce correctly
		this.liveRegion = $( "<div>" )
			.attr({
				role: "log",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			})
			.addClass( "coral-helper-hidden-accessible" )
			.appendTo( this.document[ 0 ].body );
	},

	_setOption: function( key, value ) {
		var that = this;

		if ( key === "disabled" ) {
			this[ value ? "_disable" : "_enable" ]();
			this.options[ key ] = value;
			// disable element style changes
			return;
		}

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, element ) {
				that._updateContent( element );
			});
		}
	},

	_disable: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, element ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = element[0];
			that.close( event, true );
		});

		// remove title attributes to prevent native tooltips
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.is( "[title]" ) ) {
				element
					.data( "coral-tooltip-title", element.attr( "title" ) )
					.removeAttr( "title" );
			}
		});
	},

	_enable: function() {
		// restore title attributes
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.data( "coral-tooltip-title" ) ) {
				element.attr( "title", element.data( "coral-tooltip-title" ) );
			}
		});
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )
				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "coral-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "coral-tooltip-title", target.attr( "title" ) );
		}

		target.data( "coral-tooltip-open", true );

		// kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each(function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "coral-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			});
		}

		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[0], function( response ) {
			// ignore async response if tooltip was closed already
			if ( !target.data( "coral-tooltip-open" ) ) {
				return;
			}
			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay(function() {
				// jQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			});
		});
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltip, events, delayedShow, a11yContent,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltip = this._find( target );
		if ( tooltip.length ) {
			tooltip.find( ".coral-tooltip-content" ).html( content );
			return;
		}

		// if we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltip = this._tooltip( target );
		this._addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".coral-tooltip-content" ).html( content );
		// Support: Voiceover on OS X, JAWS on IE <= 9
		// JAWS announces deletions even when aria-relevant="additions"
		// Voiceover will sometimes re-read the entire log region's contents from the beginning
		this.liveRegion.children().hide();
		if ( content.clone ) {
			a11yContent = content.clone();
			a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
		} else {
			a11yContent = content;
		}
		$( "<div>" ).html( a11yContent ).appendTo( this.liveRegion );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			});
			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend({
				of: target
			}, this.options.position ) );
		}

		this.hiding = false;
		this.closing = false;
		tooltip.hide();

		this._show( tooltip, this.options.show );
		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		if ( this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval(function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, $.fx.interval );
		}

		this._trigger( "onOpen", event, { tooltip: tooltip } );

		events = {
			keyup: function( event ) {
				if ( event.keyCode === $.coral.keyCode.ESCAPE ) {
					var fakeEvent = $.Event(event);
					fakeEvent.currentTarget = target[0];
					this.close( fakeEvent, true );
				}
			}
		};

		// Only bind remove handler for delegated targets. Non-delegated
		// tooltips will handle this in destroy.
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			events.remove = function() {
				this._removeTooltip( tooltip );
			};
		}

		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltip = this._find( target );

		// disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( this.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// only set title if we had one before (see comment in _open())
		// If the title attribute has changed since open(), don't restore
		if ( target.data( "coral-tooltip-title" ) && !target.attr( "title" ) ) {
			target.attr( "title", target.data( "coral-tooltip-title" ) );
		}

		this._removeDescribedBy( target );

		this.hiding = true;
		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
			this.hiding = false;
			this.closing = false;
		});

		target.removeData( "coral-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );

		// Remove 'remove' binding only on delegated targets
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			});
		}

		this.closing = true;
		this._trigger( "onClose", event, { tooltip: tooltip } );
		if ( !this.hiding ) {
			this.closing = false;
		}
	},

	_tooltip: function( element ) {
		var tooltip = $( "<div>" )
				.attr( "role", "tooltip" )
				.addClass( "coral-tooltip coral-component coral-corner-all coral-component-content " +
					( this.options.tooltipClass || "" ) ),
			id = tooltip.uniqueId().attr( "id" );

		$( "<div>" )
			.addClass( "coral-tooltip-content" )
			.appendTo( tooltip );

		tooltip.appendTo( this.document[0].body );
		this.tooltips[ id ] = element;
		return tooltip;
	},

	_find: function( target ) {
		var id = target.data( "coral-tooltip-id" );
		return id ? $( "#" + id ) : $();
	},

	_removeTooltip: function( tooltip ) {
		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_destroy: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, element ) {
			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" );
			event.target = event.currentTarget = element[0];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "coral-tooltip-title" ) ) {
				// If the title attribute has changed since open(), don't restore
				if ( !element.attr( "title" ) ) {
					element.attr( "title", element.data( "coral-tooltip-title" ) );
				}
				element.removeData( "coral-tooltip-title" );
			}
		});
		this.liveRegion.remove();
	}
});

/*!
 * jQuery UI Spinner 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/spinner/
 */


function spinner_modifier( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "onChange" );
		}
	};
}

var spinner = $.component( "coral.spinner", $.coral.formelement, {
	version: "4.0.3",
	castProperties : ["triggers"],
	defaultElement: "<input>",
	componentEventPrefix: "spin",
	options: {
		culture: null,
		icons: {
			down: "cui-icon-arrow-down3",
			up: "cui-icon-arrow-up3"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		onChange: null,
		onSpin: null,
		onStart: null,
		onStop: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},

	_create: function() {
		if (typeof this.element.attr("id") != "undefined") {
    		this.options.id = this.element.attr("id");
    	} else if (this.options.id) {
    		this.element.attr("id", this.options.id);
    	}
		if (typeof this.element.attr("name") != "undefined") {
    		this.options.name = this.element.attr("name");
    	} else if (this.options.name) {
    		this.element.attr("name", this.options.name);
    	}
		if (typeof this.element.attr("value") != "undefined") {
    		this.options.value = this.element.attr("value");
    	}
		
		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );
		
		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {
			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}
		this.originalValue = this.getValue();
		this._draw();
		this._on( this._events );
		this._refresh();

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the component is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
	},

	_getCreateOptions: function() {
		var options = {},
			element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value !== undefined && value.length ) {
				options[ option ] = value;
			}
		});

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "onChange", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay(function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .coral-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[0] === this.document[0].activeElement ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[0] === this.document[0].activeElement;
				if ( !isActive ) {
					this.element.focus();
					this.previous = previous;
					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay(function() {
						this.previous = previous;
					});
				}
			}

			// ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay(function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			});

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget ).hasClass( "coral-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .coral-spinner-button": "_stop",
		"mouseenter .coral-spinner-button": function( event ) {
			// button will add coral-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "coral-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget ).hasClass( "coral-spinner-up" ) ? 1 : -1, event );
		},
		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .coral-spinner-button": "_stop"
	},

	_draw: function() {
		var uiSpinner = this.uiSpinner = this.element
			.addClass( "coral-spinner-input coral-textbox-default" )
			.attr( "autocomplete", "off" )
			.wrap( this._uiSpinnerHtml() )
			.parent()
				// add buttons
				.append( this._buttonHtml() );

		this.element.attr( "role", "spinbutton" );

		// button bindings
		this.buttons = uiSpinner.find( ".coral-spinner-button" )
			.attr( "tabIndex", -1 )
			.button()
			.removeClass( "coral-corner-all" );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
				uiSpinner.height() > 0 ) {
			uiSpinner.height( uiSpinner.height() );
		}

		// disable spinner if element was already disabled
		if ( this.options.disabled ) {
			this.disable();
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.coral.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_uiSpinnerHtml: function() {
		return "<span class='coral-spinner coral-component'><span class='coral-textbox-border coral-corner-all'></span></span>";
	},

	_buttonHtml: function() {
		return "" +
			"<a class='coral-spinner-button coral-spinner-up coral-corner-tr'>" +
				"<span class='icon " + this.options.icons.up + "'>&#9650;</span>" +
			"</a>" +
			"<a class='coral-spinner-button coral-spinner-down coral-corner-br'>" +
				"<span class='icon " + this.options.icons.down + "'>&#9660;</span>" +
			"</a>";
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "onStart", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay(function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "onSpin", event, { value: value } ) !== false) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;
		// - round to the nearest step
		aboveMin = Math.round(aboveMin / options.step) * options.step;
		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// clamp the value
		if ( options.max !== null && value > options.max) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "onStop", event );
	},

	_setOption: function( key, value ) {
		if ( key === "value" ) {
			if ( typeof value !== "undefined" ) {
				this.value( value );
			} else {
				this.value( );
			}
		}
		
		if ( key === "culture" || key === "numberFormat" ) {
			var prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			this.buttons.first().find( ".coral-icon" )
				.removeClass( this.options.icons.up )
				.addClass( value.up );
			this.buttons.last().find( ".coral-icon" )
				.removeClass( this.options.icons.down )
				.addClass( value.down );
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this.component().toggleClass( "coral-state-disabled", !!value );
			this.element.prop( "disabled", !!value );
			this.buttons.button( value ? "disable" : "enable" );
		}
	},

	_setOptions: spinner_modifier(function( options ) {
		this._super( options );
	}),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr({
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,
			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		});
	},

	isValid: function() {
		var value = this.value();

		// null is invalid
		if ( value === null ) {
			return false;
		}

		// if value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.removeClass( "coral-spinner-input" )
			.removeClass("coral-textbox-default")
			.prop( "disabled", false )
			.removeAttr( "autocomplete" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );
		this.component().replaceWith( this.element );
	},
	reset: function(){
		this.setValue(this.originalValue);
	},
	stepUp: spinner_modifier(function( steps ) {
		this._stepUp( steps );
	}),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinner_modifier(function( steps ) {
		this._stepDown( steps );
	}),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinner_modifier(function( pages ) {
		this._stepUp( (pages || 1) * this.options.page );
	}),

	pageDown: spinner_modifier(function( pages ) {
		this._stepDown( (pages || 1) * this.options.page );
	}),
	setValue: function( newVal ) {
		this.value( newVal );
	},
	getValue: function( newVal ) {
		return this.value()+"";
	},
	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinner_modifier( this._value ).call( this, newVal );
	},

	component: function() {
		return this.uiSpinner.parent();
	}
});


/*!
 * jQuery UI Slider 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slider/
 */


var slider = $.component( "coral.slider", $.coral.mouse, {
	version: "4.0.3",
	componentEventPrefix: "slide",

	options: {
		animate: false,
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	// number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages: 5,

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();
		this._calculateNewMax();

		this.element
			.addClass( "coral-slider" +
				" coral-slider-" + this.orientation +
				" coral-component" +
				" coral-component-content" +
				" coral-corner-all");

		this._refresh();
		this._setOption( "disabled", this.options.disabled );

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".coral-slider-handle" ).addClass( "coral-state-default coral-corner-all" ),
			handle = "<span class='coral-slider-handle coral-state-default coral-corner-all' tabindex='0'></span>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this.handle = this.handles.eq( 0 );

		this.handles.each(function( i ) {
			$( this ).data( "coral-slider-handle-index", i );
		});
	},

	_createRange: function() {
		var options = this.options,
			classes = "";

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[0], options.values[0] ];
				} else if ( $.isArray( options.values ) ) {
					options.values = options.values.slice(0);
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div></div>" )
					.appendTo( this.element );

				classes = "coral-slider-range" +
				// note: this isn't the most fittingly semantic framework class for this element,
				// but worked best visually with a variety of themes
				" coral-component-header coral-corner-all";
			} else {
				this.range.removeClass( "coral-slider-range-min coral-slider-range-max" )
					// Handle range switching from true to min/max
					.css({
						"left": "",
						"bottom": ""
					});
			}

			this.range.addClass( classes +
				( ( options.range === "min" || options.range === "max" ) ? " coral-slider-range-" + options.range : "" ) );
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		this._off( this.handles );
		this._on( this.handles, this._handleEvents );
		this._hoverable( this.handles );
		this._focusable( this.handles );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this.element
			.removeClass( "coral-slider" +
				" coral-slider-horizontal" +
				" coral-slider-vertical" +
				" coral-component" +
				" coral-component-content" +
				" coral-corner-all" );

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each(function( i ) {
			var thisDistance = Math.abs( normValue - that.values(i) );
			if (( distance > thisDistance ) ||
				( distance === thisDistance &&
					(i === that._lastChangedValue || that.values(i) === o.min ))) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		});

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		closestHandle
			.addClass( "coral-state-active" )
			.focus();

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".coral-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
		};

		if ( !this.handles.hasClass( "coral-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this.handles.removeClass( "coral-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_start: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}
		return this._trigger( "start", event, uiHash );
	},

	_slide: function( event, index, newVal ) {
		var otherVal,
			newValues,
			allowed;

		if ( this.options.values && this.options.values.length ) {
			otherVal = this.values( index ? 0 : 1 );

			if ( ( this.options.values.length === 2 && this.options.range === true ) &&
					( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
				) {
				newVal = otherVal;
			}

			if ( newVal !== this.values( index ) ) {
				newValues = this.values();
				newValues[ index ] = newVal;
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal,
					values: newValues
				} );
				otherVal = this.values( index ? 0 : 1 );
				if ( allowed !== false ) {
					this.values( index, newVal );
				}
			}
		} else {
			if ( newVal !== this.value() ) {
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal
				} );
				if ( allowed !== false ) {
					this.value( newVal );
				}
			}
		}
	},

	_stop: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}

		this._trigger( "stop", event, uiHash );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;

			this._trigger( "change", event, uiHash );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this.options.values && this.options.values.length ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length - 1 );
				this.options.values = null;
			}
		}

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		if ( key === "disabled" ) {
			this.element.toggleClass( "coral-state-disabled", !!value );
		}

		this._super( key, value );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this.element
					.removeClass( "coral-slider-horizontal coral-slider-vertical" )
					.addClass( "coral-slider-" + this.orientation );
				this._refreshValue();

				// Reset positioning from previous orientation
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();
				for ( i = 0; i < valsLength; i += 1 ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "step":
			case "min":
			case "max":
				this._animateOff = true;
				this._calculateNewMax();
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this.options.values && this.options.values.length ) {
			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i += 1) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = (val - this._valueMin()) % step,
			alignValue = val - valModStep;

		if ( Math.abs(valModStep) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed(5) );
	},

	_calculateNewMax: function() {
		var remainder = ( this.options.max - this._valueMin() ) % this.options.step;
		this.max = this.options.max - remainder;
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.max;
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this.options.values && this.options.values.length ) {
			this.handles.each(function( i ) {
				valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					}
				}
				lastValPercent = valPercent;
			});
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "coral-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.coral.keyCode.HOME:
				case $.coral.keyCode.END:
				case $.coral.keyCode.PAGE_UP:
				case $.coral.keyCode.PAGE_DOWN:
				case $.coral.keyCode.UP:
				case $.coral.keyCode.RIGHT:
				case $.coral.keyCode.DOWN:
				case $.coral.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						$( event.target ).addClass( "coral-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this.options.values && this.options.values.length ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.coral.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.coral.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.coral.keyCode.PAGE_UP:
					newVal = this._trimAlignValue(
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
					);
					break;
				case $.coral.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue(
						curVal - ( (this._valueMax() - this._valueMin()) / this.numPages ) );
					break;
				case $.coral.keyCode.UP:
				case $.coral.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.coral.keyCode.DOWN:
				case $.coral.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "coral-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				$( event.target ).removeClass( "coral-state-active" );
			}
		}
	}
});

/*!
 * 组件库4.0：下拉树按钮
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

( function ($, undefined) {
"use strict";
	$.component( "coral.treebutton", $.coral.button, {
		version: $.coral.version,
		castProperties: ["treeOptions"],
		options: {
			/* default options */
			id: null,
			name: null,
			label: null,
			cls: null,
			position: {
				my: "left top",
				at: "left bottom",
				collision: "none"
			},
			width: null,
			text: true,
			disabled: false,
			multiple: false,
			//position:
			// tree options
			treeOptions: {
				id:null,
				name:null,
				data:null,
				showLine:false,
				showIcon:false,
				checkable:true
			},
			/* default events */
			onCreate: null,
			onClick: null,
			onCheck:null,
			onSelect:null
		},
		/**
		 * get tree - dom element
		 */
		tree: function() {
			return this.uiTree;
		},
		/**
		 * begin create a treebutton
		 */
	    _create: function() {
	    	var that = this;
	    	this._super();
	    	this._initElements();
		},	
		_initElements: function() {
			var that = this,
				opts = this.options,
				treeOpts = this.options.treeOptions;
	    	
	    	this.element.addClass("coral-treebutton-element").uniqueId();
	    	
	    	this.uiTree = $("<ul>")
	    		.attr( "id", $(this.element).attr('id')+"_tree" )
	    		.addClass( "coral-treebutton-panel coral-front" )
	    		.appendTo ( "body" );
	    	// init buttons
	    	/*this.element.button({
	    		label: opts.label,
	    		icons: opts.icons,
	    		text: opts.text,
	    		width: opts.width,
	    		disabled: opts.disabled
	    	});*/
	    	// listen tree's click event and trigger the default click event
	    	this.element.on( "click", function( e, ui ) {
	    		that._showtree();
	    	});
	    	
	    	this._on( this.document, {
	    		mousedown: function( event ) {
					if(event.isDefaultPrevented())return;
					that._hidetree();
				}
			});
	    	this.uiTree.unbind().bind("mousedown", function(e){
				e.preventDefault();
	    	});
	    	// listen tree's click event and trigger the default click event
	    	var setting = {
				checkable : this.options.multiple			
	    	};
	    	// init 
	    	treeOpts = $.extend({},  setting, opts.treeOptions, {
	    		id: $(this.element).attr('id')+"_tree"
	    	});
	    	
	    	this.uiTree.tree(treeOpts);
		},
		_bindEvents: function() {
			
		},
		/**
		 * set options
		 */
		_setOption: function (key, value) {
			var that = this;
			
			/*if (key === "id" || key === "name") {
				return;
			}
			if (key == "disabled") {
				this.element.button("option", "disabled", value);
			}*/
			this._super (key, value );
		},
		_showtree: function( items ) {
			var ul = this.uiTree;
			ul.show();
			var zIndicies = ul.siblings( ".coral-front:visible" ).map(function() {
				return +$( this ).css( "z-index" );
			}).get(),
			zIndexMax = Math.max.apply( null, zIndicies );
			if ( zIndexMax >= +ul.css( "z-index" ) ) {
				ul.css( "z-index", zIndexMax + 1 );
			}
			
			ul.position( $.extend({
				of: this.element
			}, this.options.position ) );
		},
		_hidetree: function(){
			this.uiTree.hide();	
		},
		disabledNode: function(id){
			var nodes = this.uiTree.tree("getNodesByParam", "id", id);
			for (var i=0, l=nodes.length; i < l; i++) {
				this.uiTree.tree("setChkDisabled", nodes[0], true);
			}
		},
		undisabledNode:function(id){
			var nodes = this.uiTree.tree("getNodesByParam", "id", id);
			for (var i=0, l=nodes.length; i < l; i++) {
				this.uiTree.tree("setChkDisabled", nodes[0], false);
			}
		},
		/**
		 * destroy
		 */
		_destroy : function() {
			this.uiTree.remove();
			this.element.removeClass("ctrl-init ctrl-init-treebutton coral-treebutton-element");
		}
	});
})(jQuery);

/*!
 * 组件库4.0：下拉按钮
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

( function ($, undefined) {
"use strict";
	
$.component( "coral.splitbutton", $.coral.button, {
	version: "4.0.2",
	componentName: "splitbutton",
	castProperties: ["menuOptions", "dataCustom"],
	options: {
		/* default options */
		id: null,
		name: null,
		label: null,
		cls: null,
		icons: {
			primary: null,
			secondary: null
		},
		width: null,
		text: true,
		disabled: false,
		// menu options
		menuOptions: {
			autoDisplay: false,
			popup: true
		},
		data: null, // menu data
		url: null, // menu url
		
		/* default events */
		onCreate: null,
		onClick: null,
		onDblClick: null
	},
	/**
	 * get splitbutton waper box
	 */
	component : function() {
		var that = this;
		
		return this.uiBox;
	},
	/**
	 * get splitbutton border - dom element
	 */
	uiBorder: function() {
		return this.uiBorder;
	},
	/**
	 * get the right button - dom element
	 */
	uiDropdownButton: function() {
		return this.dropdownButton;
	},
	/**
	 * get menu - dom element
	 */
	menu: function() {
		return this.uiMenu;
	},
	/**
	 * begin create a splitbutton
	 */
    _create: function() {
    	var that = this;
    	
    	this._initElements();
    	this._super();
	},	
	/**
	 * initialize relevant doms and attributes
	 */
	_initElements: function() {
		var that = this,
			opts = this.options,
			menuOpts = this.options.menuOptions,
			data = this.options.data,
			url = this.options.url;
    	
    	this.element.addClass("ctrl-init ctrl-init-splitbutton coral-splitbutton-element");
    	this.dropdownButton = $("<button class='coral-splitbutton-dropdownbutton' type='button'></button>").uniqueId();    	
    	this.uiBorder = $("<span class=\"coral-splitbutton-border\"></span>");
    	this.uiBox = $("<span class=\"coral-splitbutton\"></span>");
    	this.uiBox.append(this.uiBorder);
    	this.uiMenu = $("<ul class=\"coral-splitbutton-menu\"></ul>");    	
    	this.uiBox.insertAfter( this.element );
    	this.uiBorder.append( this.element ).append( this.dropdownButton );
    	this.uiMenu.appendTo( $(document.body) );
    	// set width and cls
    	if ( opts.width ) {
			this.uiBox.css({ width:opts.width });
		}
    	if ( typeof this.element.attr("id") != "undefined" ) {
    		this.options.id = this.element.attr("id");
    	} else if ( this.options.id ) {
    		this.element.attr("id", this.options.id);
    	} else {
    		this.options.id = this.element.uniqueId();
    	}
    	if ( typeof this.element.attr("name") != "undefined" ) {
    		this.options.name = this.element.attr("name");
    	} else if ( this.options.name ) {
    		this.element.attr("name", this.options.name);
    	}
    	this.triggerId = this.dropdownButton.attr("id");
    	// listen menu's click event and trigger the default click event
    	this._on( this.element, {
    		buttononclick: function(e, ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});
    	this.dropdownButton.button({
    		label: "下拉按钮",
    		text: false,
    		icons: "cui-icon-arrow-down3",
    		onClick: function(e, ui) {
    			if ( !that._getToolbar().length || that._getToolbar().toolbar("option", "clickToDisplay") == 0 ) return;
    			if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;

    			var $toolbarComponent = that._getToolbar(true);
    			
    			if ($toolbarComponent.length) {
    				$toolbarComponent.toggleClass("coral-toolbar-click-active");
    			}
    		},
    		onMouseEnter: function(e, ui) {  
    			if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;
    					
    			var $toolbarComponent = that._getToolbar(true);

    			if ($toolbarComponent.hasClass("coral-toolbar-click-active")) {
    				if ($(".coral-tieredmenu:visible").length) {
	    				that._hideMenus();			
	    			}
    				that.uiMenu.tieredmenu("show");
    			}
    		}
    	});    	
    	// init menu
    	var dataOrUrl = {};
    	if (null != data) {
    		dataOrUrl["data"] = data;
    	}
    	if (null != url) {
    		dataOrUrl["url"] = url;
    	}
    	menuOpts = $.extend({}, dataOrUrl, opts.menuOptions, {
    		id: this.element.attr("id")+"_tieredmenu",
    		trigger: this.dropdownButton,
    		of: this.element
    	});
    	this.uiMenu.tieredmenu( menuOpts );

    	if ( that._getToolbar().length && that._getToolbar().toolbar("option", "autoDisplay") ) {
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
	    	this.uiMenu.tieredmenu("component").bind("mouseleave", function() {
	    		that._hideMenus();
	    	});
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
    	}
    	// listen menu's click event and trigger the default click event
    	this._on( this.uiMenu, {
    		tieredmenuonclick: function(e,ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});
	},
	/**
		获取自身所属的工具条元素，如果没有则返回 $()
	**/
	_getToolbar: function(isComponent) {
		var that = this,
			opts = this.options,
			$toolbar = $();

		if ( this.element.hasClass("ctrl-toolbar-element") ) {
			$toolbar = isComponent ? this.element.parents(".coral-toolbar:eq(0)") : this.element.parents(".ctrl-init-toolbar:eq(0)");
		}

		return $toolbar;
	},
	/**
	 *	hide all tieredmenus
	**/
	_hideMenus: function() {
		$(".coral-tieredmenu").hide();
	},
	hideAllMenus: function(){
		$(".coral-tieredmenu").hide();
	},
	showMenu: function(){
		this.uiMenu.tieredmenu("show");
	},
	/**
	 * set options
	**/
	_setOption: function (key, value) {
		if ( key === "id" || key === "name" ) {
			return ;
		}

		var that = this;
		
		if ( key === "disabled" ) {
			this.element.toggleClass("coral-state-disabled", value);
			this.dropdownButton.button("option", "disabled", value);
		}

		this._super (key, value );
	},
	/**
	 * destroy
	**/
	_destroy : function() {		
		this.uiBox.replaceWith( this.element );
		this.uiMenu.parent().remove();
		//this.element.children().remove();
		this.element.removeClass("ctrl-init ctrl-init-splitbutton coral-splitbutton-element");
	}
});

})(jQuery);

/*!
 * 组件库4.0：下拉按钮
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

( function ($, undefined) {
"use strict";

$(document).unbind(".coral-menubutton").bind("mousedown.coral-menubutton mousewheel.coral-menubutton",function(e){
	if ( $(e.target).closest("span.coral-menubutton,.coral-menubutton-buttons").length ) return;
	$(".coral-menubutton-buttons").hide();
	
});

$.component( "coral.menubutton", $.coral.button, {
	version: "4.0.2",
	castProperties: ["menuOptions"],
	options: {
		/* default options */
		id: null,
		name: null,
		label: null,
		cls: null,
		icons: {
			primary: null,
			secondary: "cui-icon-arrow-down3"
		},
		width: null,
		text: true,
		disabled: false,
		renderType: "menu", // "menu"（渲染成菜单项，可嵌套）, "button"（渲染成按钮，只有一层）
		// menu options
		menuOptions: {
			autoDisplay: false,
			popup: true
		},
		data: null, // data（menu data 或者自己的data）
		url: null, // url（menu url 或者自己的url）
		method: "get",
		// 定义弹出面板的弹出位置，仅限 renderType 为 "button"
		position: {
			my: "left top",
			at: "left bottom"
		},
		/* default events */
		onCreate: null,
		onClick: null,
		onDblClick: null,
		onLoad: null
	},
	/**
		显示buttons弹出面板，仅限当renderType为"button"时
	 */
	showPanel: function() {
		var that = this,
			opts = this.options;

		var position = $.extend(opts.position, {
			of: this.element
		});
		
		var zIndicies = this.uiButtons.siblings( ".coral-front:visible" ).map(function() {
				return +$( this ).css( "z-index" );
			}).get(),
			zIndexMax = Math.max.apply( null, zIndicies );
		if ( zIndexMax >= +this.uiButtons.css( "z-index" ) ) {
			this.uiButtons.css( "z-index", zIndexMax + 1 );
		}

		this.uiButtons.css({
			position: "absolute",
			left: "",
			top: ""
		})
		.position(position)
		.show();
	},
	/**
		隐藏buttons弹出面板，仅限当renderType为"button"时
	 */
	hidePanel: function() {
		this.uiButtons.hide();
	},
	/**
	 * begin create a menubutton
	 */
    _create: function() {    	
    	this._initElements();
    	this._super();
	},	
	/**
		获取自身所属的工具条元素，如果没有则返回 $()
	**/
	_getToolbar: function(isComponent) {
		var that = this,
			opts = this.options,
			$toolbar = $();

		if (this.element.hasClass("ctrl-toolbar-element")) {
			$toolbar = isComponent ? this.element.parents(".coral-toolbar:eq(0)") : this.element.parents(".ctrl-init-toolbar:eq(0)");
		}

		return $toolbar ;
	},
	/**
		hide all tieredmenus
	**/
	_hideMenus: function() {
		$(".coral-tieredmenu").hide();
	},
	hideAllMenus: function(){
		$(".coral-tieredmenu").hide();
	},
	showMenu: function(){
		this.uiMenu.tieredmenu("show");
	},
	/**
	 * initialize relevant doms and attributes
	 */
	_initElements: function() {
		var that = this,
			opts = this.options;
    	
    	this.element.addClass("ctrl-init ctrl-init-menubutton coral-menubutton-element");    	
    	this.uiBorder = $("<span class=\"coral-menubutton-border\"></span>");
    	this.uiBox = $("<span class=\"coral-menubutton\"></span>");
    	this.uiBox.append(this.uiBorder);    	
    	this.uiBox.insertAfter (this.element );
    	this.uiBorder.append (this.element);
    	
    	if (typeof this.element.attr("id") != "undefined") {
    		this.options.id = this.element.attr("id");
    	} else if (this.options.id) {
    		this.element.attr("id", this.options.id);
    	} else {
    		this.options.id = this.element.uniqueId().attr("id");
    	}
    	if (typeof this.element.attr("name") != "undefined") {
    		this.options.name = this.element.attr("name");
    	} else if (this.options.name){
    		this.element.attr("name", this.options.name);
    	}

    	this.options.onClick = function (e, ui) {
    		if (opts.renderType == "button") {
				if ( !that.uiButtons.is(":visible") ) {
					that.showPanel();
				} else {
					that.hidePanel();
				}
			}
			if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;

			var $toolbarComponent = that._getToolbar(true);
			
			if ($toolbarComponent.length) {
				$toolbarComponent.toggleClass("coral-toolbar-click-active");
			}
    	},
    	this.options.onMouseEnter = function (e, ui) {
    		if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;
			if (opts.renderType == "button") return ;
			var $toolbarComponent = that._getToolbar(true);

			if ($toolbarComponent.hasClass("coral-toolbar-click-active")) {
				if ($(".coral-tieredmenu:visible").length) {
    				that._hideMenus();    				
    			}
				that.uiMenu.tieredmenu("show");
			}
    	};
    	
    	// listen menu's click event and trigger the default click event
    	this._on( this.element, {
    		buttononclick: function(e,ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});

    	if (opts.renderType == "button") {
    		this.uiButtons = $("<div class='coral-menubutton-buttons coral-front'></div>").appendTo( $(document.body) );
    		this._loadData();
    	} else {
    		this.uiMenu = $("<ul class=\"coral-menubutton-menu\"></ul>").appendTo( $(document.body) );
    		this._renderMenu();
    	}
	},	
	/**
		渲染成menu
	*/
	_renderMenu: function() {
		var that = this,
			opts = this.options,
			menuOpts = this.options.menuOptions,
			data = this.options.data,
			url = this.options.url;

		// init menu
    	var dataOrUrl = {};
    	if (null != data) {
    		dataOrUrl["data"] = data;
    	}
    	if (null != url) {
    		dataOrUrl["url"] = url;
    	}
    	
    	menuOpts = $.extend({}, dataOrUrl, opts.menuOptions, {
    		id: this.element.attr("id")+"_tieredmenu",
    		trigger: this.element,
    		of: this.element
    	});
    	
    	this.uiMenu.tieredmenu(menuOpts);
    	// listen menu's click event and trigger the default click event
    	if (that._getToolbar().length && that._getToolbar().toolbar("option", "autoDisplay")) {
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
	    	this.uiMenu.tieredmenu("component").bind("mouseleave", function() {
	    		that._hideMenus();
	    	});
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
    	}
    	this._on( this.uiMenu, {
    		tieredmenuonclick: function(e,ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});
	},
	/**
	 * load data，当renderType为button时
	 */
	_loadData: function () {
		var that = this,
			options = this.options;

		if (options.url) {
			$.ajax({
				type: options.method,
				url: options.url,
				data: {},
				dataType: "json",
				success: function (data) {
					that._initData(data);
				},
				error: function () {
			        $.alert( "Json Format Error!" );
				}
			});
		} else if (options.data) {
			this._initData(options.data);	
		}
	},	
	/**
	 * initialize data，当renderType为button时
	 */
	_initData: function (data) {
		var that = this;
		
		if (typeof data === "object") {
			this._addItems(null, data); // index = null 代表尾部直接添加
		}

		that._trigger("onLoad", null, {});
	},
	_addItems: function (index, data) {
		if (typeof data !== "object") return ;
		
		var that = this,
			items = [],
			len = data.length;
		
		for (var i = 0; i < len; i++) {
			var itemData = data[i];
			
			if ( !$.isEmptyObject( itemData ) ) {
				items.push( that._createButton(itemData) );
			}
		}
		
		this._appendItems(index, items);
		this._initItems(items);
	},	
	_createButton: function (options) {
		return {
			button: $("<button type='button'></button>").addClass("coral-menubutton-button-item"),
			options: options // coral init options
		};
	},
	_appendItems: function (index, items) {
		for (var i in items) {	
			items[i].button.appendTo(this.uiButtons);
		}
	},
	_initItems: function ( items ) {
		var that = this;
		
		for (var i in items) {
			var $el = items[i].button,
				opts = items[i].options;

			$el["button"](opts);
			// listen item's click event and trigger the default click event
			var _opts = {} ;				
			_opts["button" + "onclick"] = function(e,ui) {
    			that._trigger("onClick", e, ui);
    		};
			that._on( $el, _opts);
		}
	},
	/**
		add items
		@param $elements {jquery dom elements} : 要添加的 dom jquery 对象集合
	**/
	add: function ( $elements ) {
		/* */
	},
	/**
		prepend $elements
		@param $elements {jquery dom elements} : 要添加的 dom jquery 对象集合
	**/
	prepend: function($elements) {
		if (!$elements instanceof jQuery) return ;
		var that = this,
			len = $elements.length;
		if ( !($elements instanceof Array) ) {
			$elements = [$elements];
		}
		for(var i = len-1; i > -1; i--) {
			var $element = $elements[i];
			$element.css({
				"margin": "",
				"left": "",
				"right": ""
			})
			.removeClass("coral-menubutton-button-item")
			.addClass("coral-menubutton-button-item")
			.prependTo(that.uiButtons);
		}
	},
	/**
		append $elements
		@param $elements {jquery dom elements} : 要添加的 dom jquery 对象集合
	**/
	append: function($elements) {
		if (!$elements instanceof jQuery) return ;
		var that = this,
			len = $elements.length;
		if ( !($elements instanceof Array) ) {
			$elements = [$elements];
		}
		for(var i = len-1; i > -1; i--) {
			var $element = $elements[i];
			$element.css({
				"margin": "",
				"left": "",
				"right": ""
			})
			.removeClass("coral-menubutton-button-item")
			.addClass("coral-menubutton-button-item")
			.prependTo(that.uiButtons);
		}
	},
	pop: function () {
		var that = this,
			opts = this.options;

		if ( "button" != opts.renderType ) return $();

		var $elementPop = this.uiButtons.find(".coral-menubutton-button-item:eq(0)");

		if ($elementPop.length) {
			return $elementPop.removeClass("coral-menubutton-button-item");
		} else {
			return $();
		}
	},
	/**
	 * 返回 uiBox 元素
	 */
	component : function() {
		/*var that = this;*/
		
		return this.uiBox;
	},
	/**
	 * 返回 uiBorder 元素
	 */
	border: function() {
		/*var that = this;*/

		return this.uiBorder;
	},
	/**
		返回 buttons 面板，仅限 renderType 为 "button" 时
	**/
	buttons: function() {
		return this.uiButtons;
	},
	/**
		返回 buttons 面板下的所有子 $dom
	**/
	buttonElements: function() {
		return this.uiButtons.children();
	},
	/**
	 * 返回 mainButton 元素
	 */
	/*button: function() {
		return this.mainButton;
	},*/
	/**
	 *  返回 uiMenu，仅限renderType 为 "menu" 时
	 */
	menu: function() {
		return this.uiMenu;
	},
	/**
	 * !-- extend api: 绑定事件
	 */
	_bindEvents: function() {
		// add code here ...
	},
	/**
	 * 设置属性
	 */
	_setOption: function (key, value) {
		var that = this;
		
		if (key === "id" || key === "name") {
			return ;
		}
		if (key === "disabled") {
			this.element.toggleClass("coral-state-disabled", value);
		}

		this._super(key, value);
	},
	/**
	 * 销毁组件
	 */
	_destroy : function() {
		var opts = this.options;
		
		this.uiBox.replaceWith(this.element);

		if (opts.renderType == "buttons") {
			this.uiButtons.remove();
		} else {
			this.uiMenu.parent().remove();
		}

		this.element.children().remove();
		this.element.removeClass("ctrl-init ctrl-init-menubutton coral-menubutton-element");
	}
});

})(jQuery);

(function( $, undefined ) {

$.component( "coral.autocompletetree", $.coral.autocomplete, {
	requestIndex: 0,
	pending: 0,
	options: {
		allowPushParent: false,
		rootNode: false,
		multiLineLabel: false,
		radioType: "level",
		showRootNode: true,
		multiple : false,
        triggers: null, // 覆盖 validate 里的 triggers
        excluded: false // true 则不单独校验
	},
	_create: function() {
		this.options.render = "tree";
		this._super();
	},
	_filter: function( array, request, response  ){
		$( this.menu.element ).tree("reload", array);
		$( this.menu.element ).tree("filterNodesByParam", {"name": request.term} );
		response( array );
	},
	_initData: function(){
		var that = this;
		this.menu = {};
		var u = $( "<ul>" )[0];
		$( u )
		.uniqueId()
		.addClass( "coral-autocomplete-panel coral-front" )
		.appendTo( this._appendTo() )
		.tree({
			showLine: false,
			showIcon: false,
			radioType: this.options.radioType,
			showRootNode:this.options.showRootNode,
			rootNode:this.options.rootNode,
			componentCls: "coral-autocomplete-tree",
			addDiyDom : function (treeId, treeNode) {
				var spaceWidth = 15;
				var switchObj = $("#" + treeNode.tId + "_switch"), icoObj = $("#" + treeNode.tId + "_ico");
				icoObj.before(switchObj);

				if (treeNode.level > 0) {
					var spaceStr = "<span style='display: inline-block;width:"
							+ (spaceWidth * treeNode.level) + "px'></span>";
					switchObj.before(spaceStr);
				}
			},
			beforeClick : function ( treeId, treeNode ) {
				if ( !that.options.allowPushParent && treeNode.isParent ) {
					return false;
				} 
			},
			onClick: function( event, treeId, treeNode ){
				var item = treeNode,
					previous = that.previous;
				// only trigger when focus was lost (click on menu)
				if ( that.element[ 0 ] !== that.document[ 0 ].activeElement ) {
					that.element.focus();
					that.previous = previous;
					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					that._delay(function() {
						that.previous = previous;
						that.selectedItem = item;
					});
				}

				if ( false !== that._trigger( "beforeNodeClick", event, { item: item ,value: that.getValue() } ) ) {
					that.selectedItem = item;
					that.selectedItems.push( item );
					var value = that.getValue(),
					text = that.getText(),
					vv = value==""?[]:value.split(that.options.separator),
					vt = text==""?[]:text.split(that.options.separator);
					if ( that.options.multiple ) {
						if ( !that.options.allowRepeat && $.inArray(treeNode.id , vv) > -1 ) {
							return ;
						}
						vv.push( treeNode.id );
						vt.push( treeNode.name );
					} else {
						vv = [ treeNode.id ];
						vt = [ treeNode.name ];
					}
					that.setText( vt.join(that.options.separator) );
					that.setValue( vv.join(that.options.separator), true );
				}
				that._trigger( "onNodeClick", event, { item: item ,value: that.getValue() } );
				// reset the term after the select event
				// this allows custom select handling to work properly
				//that.term = that._text();
				that.term = that._text();
				that.close( event );
			}
		})
		.hide();
		this.menu.element = $( u );
		if ( isNaN( this.options.panelHeight ) ) {
			$(".coral-autocomplete-panel").css( {
				"max-height": this.options.maxPanelHeight +"px"
			} );
		}
	}
});

var autocomplete = $.coral.autocomplete;
})( jQuery );

/*jslint nomen: true */

/**
 * @fileOverview EasyEdit - A jQuery plugin for the input dom element of type text
 * @author Andres Jorquera
 * @version 0.2
 * @requires jQuery
 * @namespace easyInput.easyText
 * TODO Must set the new values if the storage option changes
 */

;(function ($, window, document, undefined) {
    'use strict';
    
    var NAMESPACE = 'easyInput',
        PLUG_NAME = 'easyText',
        // constant use for events handlers to get the plugin instance using
        //$(this).data(NAME_SPAC_PLUG)
        NAME_SPAC_PLUG = NAMESPACE + PLUG_NAME.charAt(0).toUpperCase() + 
                         PLUG_NAME.slice(1);

    /**
     * Description of the plugin
     * 
     */

    $.component(NAMESPACE + '.' + PLUG_NAME, {

        options: {
            /**
             * The current value of the input element
             * @type String
             * @default ''
             */
            currentValue: '',

            /**
             * A custom array containing values for the input element
             * @type Array
             * @default []
             */
            values: [],

            /**
             * Max width in pixels for the input element.
             * @type Number
             * @default 200
             */
            maxWidth: 200,
            /**
             * Min width for the input element in pixels fo the input element.
             * @type number
             * @default 80
             */
            minWidth: 80,
            /**
             * Maximum number of characters permitted in the input.
             * @type number
             * @default 200
             */
            maxChars: 200,
            /**
             * Type of storage use for the input element.
             * @type string
             * @default 'array'
             */
            storage: 'array',
            /**
             * Configuration options for the ajax requests
             * @type object
             */
            ajaxConfig: {
                url: '/',
                id: '',
                UPDATETemplate: '',
                UPDATEData: {},
                GETCallback: null
            }
        },
        //---------------------------------------------------------------------
        //                          PRIVATE PROPERTIES
        //---------------------------------------------------------------------

        /**
         * Holder for the name of the plugin.
         * @type string
         * @private
         */
        _name: PLUG_NAME,
        /**
         * Holder for the input Jquery object.
         * @type Jquery object
         * @private
         */
        _input:null,
        /**
         * Holder for the id of the input.
         * @type string
         * @private
         */
        _id:null,
        /**
         * Holder for the current position of the current value in the
         * values attribute. It's use by the getNextBackValue public function
         * @type number
         * @private
         */
        _valuesIndex:null,
        /**
         * Holder for the class-name for the 'unChange'. Its the look of the
         * input when it hasn't been modified
         * @type String
         * @private
         */
        _classUnChanged:null,
        /**
         * Holder for the class-name for the 'empty'. The look of the input
         * when it's empty
         * @type String
         * @private
         */
        _classEmpty:null,
        /**
         * Holder for the class-name for the 'onEdit'.The look of the input
         * when it's been edited
         * @type String
         * @private
         */
        _classOnEdit: null,
        /**
         * Holder for the class-name for the "changed". The look of the input
         * when it's has been changed
         * @type String
         * @private
         */
        _classChanged:null,
        /**
         * Holder for the class-name of the input. It will be a class for the
         * input that has the plugin.
         * @type String
         * @private
         */
        _classEasyText:PLUG_NAME.toLowerCase(),

//-----------------------------------------------------------------------------
//                          PRIVATE FUNCTIONS
//-----------------------------------------------------------------------------
        /**
         * Add listeners to the input
         * @private
         */
        _setListeners:function() {
            this._input.bind({
                focus: this._focusBehaviour,
                input: this._autoGrownBehaviour,
                blur: this._blurBehaviour,
                storageChange: this._storageChange
            });
        },

        /**
         * Function that it's inspired in the getClassName function from the YUI
         * widget library.
         * reference: http://yuilibrary.com/yui/docs/api/files/widget_js_Widget.js.html#l309
         * FIXME re-think this function
         * @private
         */
        _getClassName: function(str) {
            return this._name.toLowerCase() + '-' + str;
        },
        /**
         * Sets the name for all the classes
         * @private
         */
        _setClassNames: function() {
            // set classes names
            this._classOnHover = this._getClassName('onHover');
            this._classUnChanged = this._getClassName('unChanged');
            this._classOnEdit = this._getClassName('onEdit');
            this._classChanged = this._getClassName('changed');
            this._classEmpty = this._getClassName('empty');

        },
        /**
         * Sets initial values for private variables
         * @private
         */
        _setVars: function() {
            var input = this.element;

            //save the host node to the private variable
            this._input = input;

            //creates an unique id in the element
            input.uniqueId();

            //saves the current position for the values attribute
            this._valuesIndex = 0;

            //sets the id
            this._id = this._name + '-' + input.attr('id');

            //set the maximum characters allow in the input
            input.attr('maxLength',this.options.maxChars);
        },
        /**
         * Creates a span element with the purpose for measuring the length in
         * pixels.
         * @private
         */
        _setRuler: function() {
            var rulerID    = '#' + this._name + '-ruler',
                ruler      = $(rulerID),
                input      = this._input;

            // check if a ruler already exist
            if (!ruler.length) {
                //NOTE maybe we shouldn't augment the string object
                String.prototype.visualLength = function() {
                    var ruler = $(rulerID);
                    //we need to escaped spaces
                    ruler.html(this.replace(/&/g, '&amp;').replace(/\s/g,'&nbsp;')
                          .replace(/</g, '&lt;').replace(/>/g, '&gt;'));

                    return ruler.width();
                };
                /* It will copy the same font family and size. Must be
                 * careful because if the font doesn't match it will not grown in the
                 * same way as the ruler
                 */
                ruler = $('<span id="' + rulerID.substr(1) + '"></span>');

                ruler.css({
                    fontSize:input.css('fontSize'),
                    fontFamily:input.css('font-family'),
                    fontWeight:input.css('fontWeight'),
                    position:'absolute',
                    visibility:'hidden',
                    //hides the ruler and breaks the text to avoid overflow
                    whiteSpace: 'nowrap'
                });
                $('body').after(ruler);
            }
        },
        /**
         * Prepares the configuration object for the ajax request. 
         * @private
         */
        _initializeAjax: function() {
            var ajaxConfig = this.options.ajaxConfig;
            
            //checks if there's a callback in the configuration object.
            //Do not send request if not
            if (!$.isFunction(ajaxConfig.GETCallback)) return;
            
            if (ajaxConfig.url.charAt(ajaxConfig.url.length - 1) !== '/') {
                ajaxConfig.url += '/'; 
            }
            
            if (!ajaxConfig.id) {
                ajaxConfig.id = this._id;
            }
            
            $.ajax({
                url:ajaxConfig.url + ajaxConfig.id,
                succes:ajaxConfig.GETCallback
            });
        },
        /**
         * Checks and sets the state for the input element 
         * @private
         */
        _setState:function() {
            var input         = this._input,
                text          = input.val(),
                visualLenText = text.visualLength(),
                minWidth      = this.options.minWidth,
                maxWidth      = this.options.maxWidth,
                width;

            if (visualLenText < minWidth) {
                width = minWidth;
            } else if (maxWidth < visualLenText) {
                width = maxWidth;
            } else {
                width = visualLenText;
            }

            input.width(width);

            //set the appropriate classes
            if (input.val().length === 0){
                //TODO do it in one call
                input.removeClass(this._classChanged);
                input.addClass(this._classEmpty);
            } else {
                input.addClass(this._classChanged);
            }
        },

        /**
         * Set the behaviour when the input gets clicked
         * @private
         */
        _focusBehaviour: function() {
            var that = $(this).data(NAME_SPAC_PLUG),
                input = that._input;

            input.removeClass(that._classChanged + ' ' +
                              that._classUnChanged + ' ' +
                              that._classEmpty)
                 .addClass(that._classOnEdit);
        },
        
        /**
         * Function that controls the auto-grown behaviour of the input 
         * @private
         */
        _autoGrownBehaviour: function() {
            var that     = $(this).data(NAME_SPAC_PLUG),
                input    = that._input,
                text     = input.val(),
                minWidth = that.options.minWidth,
                maxWidth = that.options.maxWidth,
                width    = text.visualLength();
                
            if (width < minWidth) {
                width = minWidth;
            } else if (width > maxWidth) {
                width = maxWidth;
            } 

            input.width(width);   
        },
        /**
         * Function that is trigger when the input loses focus. 
         * @private 
         */
        _blurBehaviour: function(){
            var that = $(this).data(NAME_SPAC_PLUG),
                input = that._input,
                value = input.val(),
                ajaxConfig = that.options.ajaxConfig,
                UPDATETemplate;

            input.removeClass(that._classOnEdit);

            //check if the field if empty. Don't store values if it is
            if (value.length === 0) {
                input.addClass(that._classEmpty);

            } else {
                
                input.addClass(that._classChanged);
                that.option('values',value);

                //TODO check this, not sure if it is the best way to do it
                that._valuesIndex = that.option('values').length - 1;

                //ajax feature
                if (that.options.storage === 'ajax') {
                    ajaxConfig.UPDATEData.value = input.val();

                    $.ajax({
                        url: ajaxConfig.url + ajaxConfig.id,
                        data: that._tmpl(ajaxConfig.UPDATETemplate,
                                         ajaxConfig.UPDATEData),
                        type: 'UPDATE'
                    });
                }
            }
            that._setState();
        },

        /**
         * Simple JavaScript Templating
         * John Resig - http://ejohn.org/ - MIT Licensed
         * ref:http://ejohn.org/blog/javascript-micro-templating/
         * @private
         */
        _tmpl : function(str, data) {
            // Figure out if we're getting a template, or if we need to
            // load the template - and be sure to cache the result.
            var fn = typeof(str) !== 'string' ?
               (function(){throw {
                   name: 'Invalid Parameter',
                   message: 'You must insert a string into the function'
               }}()):
             
              // Generate a reusable function that will serve as a template
              // generator (and which will be cached).
              new Function("obj",
                "var p=[],print=function(){p.push.apply(p,arguments);};" +
               
                // Introduce the data as local variables using with(){}
                "with(obj){p.push('" +
               
                // Convert the template into pure JavaScript
                str
                  .replace(/[\r\t\n]/g, " ")
                  .split("<%").join("\t")
                  .replace(/((^|%>)[^\t]*)'/g, "$1\r")
                  .replace(/\t=(.*?)%>/g, "',$1,'")
                  .split("\t").join("');")
                  .split("%>").join("p.push('")
                  .split("\r").join("\\'")
              + "');}return p.join('');");
           
            // Provide some basic currying to the user
            return data ? fn( data ) : fn;
        },
        /**
         * Setter function for the options of the plugin
         * @param {string} key - key string for the option value
         * @param {string} value - value for the option 
         * @private
         */
        _setOption: function(key, value) {
            var options = this.options;

            switch (key) {

            case 'values':
                //adds a new value to the array
                options.values.push(value);

                //saves the value on the local storage if it applies.
                //Add instead of replace. 
                if (options.storage === 'localStorage') {
                    localStorage.setItem(this._id,JSON.stringify(options.values));
                }

                return;
            case 'currentValue':
                this.option('values',value);
                this._input.val(value);
                break;
            }
            this._super("_setOption", key, value);

        },
        /**
         * Function that automatically runs the first time the plugin is 
         * instantiated. 
         * @private
         */
        _create: function () {
            var values,
                input,
                storage = this.options.storage;

            this._setClassNames();
            this._setVars();
            this._setListeners();


            input = this._input;
            //TODO re-think this
            input.addClass(this._classEasyText);

            //check the type of storage
            if (storage === 'localStorage') {

                //Check if there's some initial value in the localStorage
                if (localStorage[this._id]) {
                    values = JSON.parse(localStorage[this._id]);
                    this.options.values = values;

                    input.val(values[values.length - 1]);
                    this._valuesIndex = values.length - 1;
                }

            //ajax feature. Sends a GET request to the the web service.
            //TODO Not sure of this. With server side scripting we can write the
            //     values on the input.
            } else if (storage === 'ajax') {
                this._initializeAjax();
            }

            //create a ruler to measure the text in pixels
            this._setRuler();
            this._setState();
        },
        /**
         * Destroy an instantiated plugin and clean up
         * @private
         */
        _destroy: function () {
            //removes any classes
            this._input.attr('class','');
            //$.Widget.prototype.destroy.call(this);
        },
        
        /**
         * Deletes the storage for all the values. 
         * @public
         */
        deleteStorage: function() {
            var ajaxConfig = this.options.ajaxConfig,
                typeStorage = this.options.storage;

            if (typeStorage === 'localStorage') {
                localStorage.removeItem(this._id);

            } else if (typeStorage === 'ajax') {
                $.ajax({
                    url: ajaxConfig.url + ajaxConfig.id,
                    type: 'DELETE'
                });
            }

            this.options.values = [];
            this._input.val('');
            this._setState();
        },
        /**
         * Get the value store before or after the current value.
         * @param {boolean} direction - Flag use to set the direction of the
         *                              searched value. True is next value
         *                              and false is the previous value.
         * @public
         */
        getNextBackValue:function(direction) {
            var values = this.option('values'),
                index = this._valuesIndex;

            if (direction === undefined) {
                direction = true;
            }

            //check valid direction
            if (typeof(direction) !== 'boolean') {
                throw new Error('Invalid parameter');
            }

            //check if next or back
            index += direction ? 1 : (-1);

            //check if we are in one extreme
            if (values[index] === undefined) return -1;

            this._valuesIndex = index;
            this._input.val(values[index]);
            
            this._setState();
            
            return values[index];    
        }
    });
})(jQuery, window, document );

/**
* Loading plugin for jQuery
* version: v1.0.6
* 
* Small helper to give the user a visual feedback that something is happening 
* when fetching/posting data
* 
* USAGE:
* - global overlay:                     $.loading();
* - use javascript:                     $( selector ).loading();
* - On non-form elements:               $("div").loading({ text: "Loading", position:'inside'});
* - remove the loading element:         $( selector ).loading( "hide" );
*
* @author Laurent Blanes <laurent.blanes@gmail.com>
* ---
* Copyright 2013, Laurent Blanes ( https://github.com/hekigan/is-loading )
* 
* The MIT License (MIT)
* 
* Copyright (c) 2013 Laurent Blanes
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/
;(function ($, window, document, undefined) {

    // Create the defaults once
    var pluginName = "loading",
        defaults = {
            'position': "overlay",        // right | inside | overlay
            'text': "",                 // Text to display next to the loader
            'loadingIcon': "coral-icon-loading",    // loader CSS loadingIcon
            'tpl': '<span class="loading-wrapper {wrapper}">{text}<span class="{loadingIcon}"></span></span>',    // loader base Tag
            'disableSource': false,      // true | false
            'disableOthers': []
        };

    // The actual plugin constructor
    function Plugin(element, options) {
        this.element = element;
        
        // Merge user options with default ones
        this.options = $.extend({}, defaults, options);

        this._defaults     = defaults;
        this._name         = pluginName;
        this._loader       = null;                // Contain the loading tag element

        this.init();
    }

    // Contructor function for the plugin (only once on page load)
    function contruct() {

        if ( !$[pluginName] ) {
            $.loading = function( opts ) {
                $( "body" ).loading( opts );
            };
        }
    }
    
    Plugin.prototype = {
        init: function() {
            if($(this.element).is("body")) {
                this.options.position = "overlay";
            }
            this.show();
        },

        show: function() {
            var self = this,
                tpl = self.options.tpl.replace( '{wrapper}', ' loading-show ');
            tpl = tpl.replace('{loadingIcon}', self.options['loadingIcon']);
            tpl = tpl.replace('{text}', (self.options.text !== "") ? self.options.text + ' ' : '' );
            self._loader = $( tpl );
            // Disable the element
            if( $(self.element).is("input, textarea") && true === self.options.disableSource ) {
                $(self.element).attr("disabled", "disabled");
            }
            else if(true === self.options.disableSource) {
                $(self.element).addClass("disabled");
            }
            // Set position
            switch (self.options.position) {
                case "inside":
                    $( self.element ).append( self._loader );
                    break;
                case "overlay":
                    var $wrapperTpl = null;
                    if ($(self.element).is("body")) {
                        $wrapperTpl = $('<div class="coral-loading" style="position:fixed; left:0; top:0; z-index: 10001; width: 100%; height: ' + $(window).height() + 'px;" />');
                        $wrapperTpl.prepend("<div class ='coral-component-overlay'/>");
                        $("body").prepend($wrapperTpl);
                        /*$( window ).on('resize', function() {
                            $wrapperTpl.height( $(window).height() + 'px' );
                            self._loader.css({top: ($(window).height()/2 - self._loader.outerHeight()/2) + 'px' });
                        });*/
                    } else {
                        var cssPosition = $(self.element).css('position'),
                            pos = {},
                            height = $(self.element).outerHeight() + 'px',
                            width = '100%'; // $( self.element ).outerWidth() + 'px;

                        if('relative' === cssPosition || 'absolute' === cssPosition ) {
                            pos = {'top': 0 , 'left': 0};
                        } else {
                            pos = $(self.element).position();
                        }
                        $wrapperTpl = $('<div class="coral-loading" style="position:absolute; top: ' + pos.top + 'px; left: ' + pos.left + 'px; z-index: 10000; width: ' + width + '; height: ' + height + ';" />');
                        $wrapperTpl.prepend("<div style='position:absolute;width:100%;height:100%;'><div class ='coral-component-overlay'style='position:relative;'></div></div>");
                        $(self.element).prepend($wrapperTpl);
                        /*$( window ).on('resize', function() {
                            $wrapperTpl.height( $( self.element ).outerHeight() + 'px' );
                            self._loader.css({top: ($wrapperTpl.outerHeight()/2 - self._loader.outerHeight()/2) + 'px' });
                        });*/
                    }
                    $wrapperTpl.append(self._loader);
                    self._loader.css({
                    	top: ($wrapperTpl.outerHeight()/2 - self._loader.outerHeight()/2) + 'px' 
                    });
                    break;
                default:
                    $(self.element).after(self._loader);
                    break;
            }
            self.disableOthers();
        },
        refresh: function(){
        	 var $wrapperTpl = null,
        	 	 self = this,
        	 	 cssPosition = $( self.element ).css('position'),
                 pos = {},
                 height = $( self.element ).outerHeight() + 'px',
                 width = '100%'; // $( self.element ).outerWidth() + 'px;
             if( 'relative' === cssPosition || 'absolute' === cssPosition ) {
                 pos = { 'top': 0,  'left': 0 };
             } else {
                 pos = $( self.element ).position();
             }
             $wrapperTpl = $( self.element ).find(".coral-loading");
             $wrapperTpl.css({
            	 top: pos.top,
            	 left: pos.left,
            	 width: width,
            	 height: height
             });
             self._loader.css({
            	 top: ($wrapperTpl.outerHeight()/2 - self._loader.outerHeight()/2) + 'px' 
            });
        },
        hide: function() {
            if("overlay" === this.options.position) {
                $(this.element).find(".coral-loading").first().remove();
            } else {
                $(this._loader).remove();
                $(this.element).text($(this.element).attr("data-loading-label"));
            }
            $(this.element).removeAttr("disabled").removeClass("disabled");
            this.enableOthers();
        },
        /**
         * TODO: do with coral
         */
        disableOthers: function() {
            $.each(this.options.disableOthers, function(i, e) {
                var elt = $(e);
                if(elt.is( "button, input, textarea")) {
                    elt.attr("disabled", "disabled");
                }
                else {
                    elt.addClass("disabled");
                }
            });
        },
        /**
         * TODO: do with coral
         */
        enableOthers: function() {
            $.each(this.options.disableOthers, function(i, e) {
                var elt = $(e);
                if(elt.is("button, input, textarea")) {
                    elt.removeAttr("disabled");
                }
                else {
                    elt.removeClass("disabled");
                }
            });
        }
    };
    var slice = Array.prototype.slice;
    // Constructor
    $.fn[pluginName] = function (options) {
    	var returnValue = this,
    		args = slice.call(arguments, 1),
    		isMethodCall = typeof options === "string";
        return this.each (function () {
        	if (isMethodCall) {
        		if ($.data(this, "plugin_" + pluginName)) {
        			var methodValue, 
        				instance = $.data( this, "plugin_" + pluginName );
        			if (!$.isFunction( instance[options]) || options.charAt( 0 ) === "_") {
    					return $.error( "no such method '" + options + "' for " + name + " component instance" );
    				}
    				methodValue = instance[options].apply(instance, args);
    				if ( methodValue !== instance && methodValue !== undefined ) {
    					returnValue = methodValue && methodValue.jquery ?
    						returnValue.pushStack(methodValue.get()) :
    						methodValue;
    					return false;
    				}
        		}
        	} else {
        		$.data( this, "plugin_" + pluginName, new Plugin( this, options ) );
        	}
        });
    };
    
    contruct();

})( jQuery, window, document );

window.PINYIN_DATA = {a:"啊阿吖嗄腌锕",ai:"爱埃挨哎唉哀皑癌蔼矮艾碍隘捱嗳嗌嫒瑷暧砹锿霭",an:"安案按鞍氨俺暗岸胺谙埯揞犴庵桉铵鹌黯",ang:"肮昂盎",ao:"凹敖熬翱袄傲奥懊澳坳拗嗷岙廒遨媪骜獒聱螯鏊鳌鏖",ba:"芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸茇菝岜灞钯粑鲅魃",bai:"白柏百摆佰败拜稗捭掰",ban:"版般办斑班搬扳颁板扮拌伴瓣半绊阪坂钣瘢癍舨",bang:"帮邦梆榜膀绑棒磅蚌镑傍谤蒡浜",bao:"保报包苞胞褒剥薄雹堡饱宝抱暴豹鲍爆炮曝瀑勹葆孢煲鸨褓趵龅",bei:"北备杯碑悲卑辈背贝钡倍狈惫焙被孛陂邶蓓呗悖碚鹎褙鐾鞴",ben:"本奔苯笨夯畚坌锛",beng:"蚌崩绷甭泵蹦迸嘣甏",bi:"比必币毕逼鼻鄙笔彼碧蓖蔽毙毖庇痹闭敝弊辟壁臂避陛匕俾芘荜荸萆薜吡哔狴庳愎滗濞弼妣婢嬖璧贲睥畀铋秕裨筚箅篦舭襞跸髀",bian:"变编边便鞭贬扁卞辨辩辫遍匾弁苄忭汴缏煸砭碥窆褊蝙笾鳊",biao:"表标彪膘婊骠飑飙飚镖镳瘭裱鳔",bie:"别鳖憋瘪蹩",bin:"彬斌濒滨宾摈傧豳缤玢槟殡膑镔髌鬓",bing:"并兵冰柄丙秉饼炳病屏禀邴摒槟",bo:"播博柏剥薄玻菠拨钵波勃搏铂箔伯帛舶脖膊渤泊驳卜亳啵饽檗擘礴钹鹁簸跛踣",bu:"不布部步捕卜哺补埠簿怖埔卟逋瓿晡钚钸醭",ca:"擦嚓礤",cai:"才采材彩猜裁财睬踩菜蔡",can:"参餐蚕残惭惨灿孱骖璨粲黪",cang:"藏苍舱仓沧伧",cao:"操糙槽曹草嘈漕螬艚",ce:"册策测厕侧恻",ceng:"曾层蹭噌",cha:"查插叉茬茶碴搽察岔差诧刹喳嚓猹馇汊姹杈楂槎檫锸镲衩",chai:"差拆柴豺侪钗瘥虿",chan:"产搀掺蝉馋谗缠铲阐颤冁谄蒇廛忏潺澶孱羼婵骣觇禅蟾躔",chang:"场常长昌猖尝偿肠厂敞畅唱倡裳伥鬯苌菖徜怅惝阊娼嫦昶氅鲳",chao:"超抄钞朝嘲潮巢吵炒绰剿怊晁焯耖",che:"车扯撤掣彻澈坼砗",chen:"称郴臣辰尘晨忱沉陈趁衬沈谌谶抻嗔宸琛榇碜龀",cheng:"成程称城撑橙呈乘惩澄诚承逞骋秤丞埕枨柽塍瞠铖铛裎蛏酲",chi:"持吃痴匙池迟弛驰耻齿侈尺赤翅斥炽傺墀茌叱哧啻嗤彳饬媸敕眵鸱瘛褫蚩螭笞篪豉踟魑",chong:"重充冲虫崇宠茺忡憧铳舂艟",chou:"抽酬畴踌稠愁筹仇绸瞅丑臭俦帱惆瘳雠",chu:"出除处础初橱厨躇锄雏滁楚储矗搐触畜亍刍怵憷绌杵楮樗褚蜍蹰黜",chuai:"揣搋啜嘬膪踹",chuan:"传川穿椽船喘串舛遄氚钏舡",chuang:"创疮窗幢床闯怆",chui:"吹炊捶锤垂椎陲棰槌",chun:"春椿醇唇淳纯蠢莼鹑蝽",chuo:"戳绰啜辍踔龊",ci:"次此词差疵茨磁雌辞慈瓷刺赐茈祠鹚糍",cong:"从聪葱囱匆丛苁淙骢琮璁枞",cou:"凑楱辏腠",cu:"促粗醋簇卒蔟徂猝殂酢蹙蹴",cuan:"蹿篡窜攒汆撺爨镩",cui:"摧崔催脆瘁粹淬翠衰萃啐悴璀榱毳",cun:"存村寸忖皴",cuo:"错措磋撮搓挫厝嵯脞锉矬痤瘥鹾蹉",da:"大达打答搭瘩耷哒嗒囗怛妲沓褡笪靼鞑",dai:"代带呆歹傣戴殆贷袋待逮怠埭甙呔岱迨绐玳黛",dan:"单但耽担丹郸掸胆旦氮惮淡诞弹蛋石儋凼萏菪啖澹宕殚赕眈疸瘅聃箪",dang:"当挡党荡档谠砀铛裆",dao:"到道导刀捣蹈倒岛祷稻悼盗叨氘焘纛",de:"的地得德锝",deng:"等登蹬灯瞪凳邓噔嶝戥磴镫簦",di:"的地第底弟堤低滴迪敌笛狄涤翟嫡抵蒂帝递缔氐籴诋谛邸坻荻嘀娣柢棣觌祗砥碲睇镝羝骶",dian:"电点典店颠掂滇碘靛垫佃甸惦奠淀殿丶阽坫巅玷钿癜癫簟踮",diao:"调碉叼雕凋刁掉吊钓铞貂鲷",die:"跌爹碟蝶迭谍叠垤堞揲喋牒瓞耋鲽",ding:"定丁盯叮钉顶鼎锭订仃啶玎腚碇町疔耵酊",diu:"丢铥",dong:"动东冬董懂栋侗恫冻洞垌咚岽峒氡胨胴硐鸫",dou:"都兜抖斗陡豆逗痘蔸钭窦蚪篼",du:"都度读督毒犊独堵睹赌杜镀肚渡妒芏嘟渎椟牍蠹笃髑黩",duan:"断段短端锻缎椴煅簖",dui:"对堆兑队敦怼憝碓镦",dun:"墩吨蹲敦顿囤钝盾遁沌炖砘礅盹趸",duo:"多度掇哆夺垛躲朵跺舵剁惰堕咄哚沲缍铎裰踱",e:"阿蛾峨鹅俄额讹娥恶厄扼遏鄂饿哦噩谔垩苊莪萼呃愕屙婀轭腭锇锷鹗颚鳄",en:"恩蒽摁嗯",er:"而二儿耳尔饵洱贰迩珥铒鸸鲕",fa:"发法罚筏伐乏阀珐垡砝",fan:"范藩帆番翻樊矾钒繁凡烦反返贩犯饭泛蕃蘩幡夂梵攵燔畈蹯",fang:"方放访房坊芳肪防妨仿纺邡枋钫舫鲂",fei:"费非菲啡飞肥匪诽吠肺废沸芾狒悱淝妃绯榧腓斐扉砩镄痱蜚篚翡霏鲱",fen:"分份芬酚吩氛纷坟焚汾粉奋忿愤粪偾瀵棼鲼鼢",feng:"风丰封枫蜂峰锋疯烽逢冯缝讽奉凤俸酆葑唪沣砜",fo:"佛",fou:"否缶",fu:"服复府父负福富夫敷肤孵扶拂辐幅氟符伏俘浮涪袱弗甫抚辅俯釜斧脯腑腐赴副覆赋傅付阜腹讣附妇缚咐莆匐凫郛芙芾苻茯莩菔拊呋呒幞怫滏艴孚驸绂绋桴赙祓黻黼罘稃馥蚨蜉蝠蝮麸趺跗鲋鳆",ga:"噶嘎夹轧垓尬尕尜旮钆",gai:"改该概钙盖溉芥丐陔戤赅",gan:"感敢干甘杆柑竿肝赶秆赣坩苷尴擀泔淦澉绀橄旰矸疳酐",gang:"港冈刚钢缸肛纲岗杠戆罡筻",gao:"告高篙皋膏羔糕搞镐稿睾诰郜藁缟槔槁杲锆",ge:"个格合歌各革哥搁戈鸽胳疙割葛蛤阁隔铬咯鬲仡哿圪塥嗝纥搿膈硌镉袼颌虼舸骼",gei:"给",gen:"根跟亘茛哏艮",geng:"更耕庚羹埂耿梗哽赓绠鲠",gong:"公工供功共贡攻恭龚躬宫弓巩汞拱珙肱蚣觥",gou:"构够购钩勾沟苟狗垢佝诟岣遘媾缑枸觏彀笱篝鞲",gu:"告故辜菇咕箍估沽孤姑鼓古蛊骨谷股顾固雇贾嘏诂菰崮汩梏轱牯牿臌毂瞽罟钴锢鸪鹄痼蛄酤觚鲴鹘",gua:"刮瓜剐寡挂褂卦诖呱栝胍鸹",guai:"乖拐怪掴",guan:"关管观棺官冠馆罐惯灌贯纶倌莞掼涫盥鹳矜鳏",guang:"广光逛咣犷桄胱",gui:"规瑰圭硅归龟闺轨鬼诡癸桂柜跪贵刽匦刿庋宄妫桧炅晷皈簋鲑鳜",gun:"辊滚棍衮绲磙鲧",guo:"国过果锅郭裹馘埚掴呙帼崞猓椁虢聒蜾蝈",ha:"哈蛤铪",hai:"还海孩骸氦亥害骇嗨胲醢",han:"韩酣憨邯含涵寒函喊罕翰撼捍旱憾悍焊汗汉邗菡撖犴阚瀚晗焓顸颔蚶鼾",hang:"行杭夯航吭沆绗颃",hao:"好号壕嚎豪毫郝耗浩貉蒿薅嗥嚆濠灏昊皓颢蚝",he:"何合呵喝荷菏核禾和盒貉阂河涸赫褐鹤贺诃劾壑嗬阖曷盍颌蚵翮",hei:"嘿黑",hen:"很痕狠恨",heng:"哼亨横衡恒蘅珩桁",hong:"轰哄烘虹鸿洪宏弘红黉訇讧荭蕻薨闳泓",hou:"后候喉侯猴吼厚堠後逅瘊篌糇鲎骺",hu:"户护乎互和呼忽瑚壶葫胡蝴狐糊湖弧虎唬沪冱唿囫岵猢怙惚浒滹琥槲轷觳烀煳戽扈祜瓠鹄鹕鹱笏醐斛鹘",hua:"话华化划花哗猾滑画骅桦砉铧",huai:"槐徊怀淮坏踝",huan:"还欢环桓缓换患唤痪豢焕涣宦幻郇奂萑擐圜獾洹浣漶寰逭缳锾鲩鬟",huang:"荒慌黄磺蝗簧皇凰惶煌晃幌恍谎隍徨湟潢遑璜肓癀蟥篁鳇",hui:"会回恢挥灰辉徽蛔毁悔慧卉惠晦贿秽烩汇讳诲绘诙茴荟蕙咴喙隳洄彗缋珲桧晖恚虺蟪麾",hun:"荤昏婚魂浑混诨馄阍溷珲",huo:"活或获和豁伙火惑霍货祸劐藿攉嚯夥钬锪镬耠蠖",ji:"系己机技计级积际及基击记济辑即几继集极给绩激圾畸稽箕肌饥迹讥鸡姬缉吉棘籍急疾汲嫉挤脊蓟冀季伎祭剂悸寄寂既忌妓纪藉骑亟乩剞佶偈墼芨芰荠蒺蕺掎叽咭哜唧岌嵴洎屐骥畿玑楫殛戟戢赍觊犄齑矶羁嵇稷瘠虮笈笄暨跻跽霁鲚鲫髻麂",jia:"家加价佳嘉枷夹荚颊贾甲钾假稼架驾嫁茄伽郏葭岬浃迦珈戛胛恝铗镓痂瘕蛱笳袈跏",jian:"间件建简荐见健检坚监减键歼尖笺煎兼肩艰奸缄茧柬碱硷拣捡俭剪槛鉴践贱箭舰剑饯渐溅涧僭谏谫菅蒹搛囝湔蹇謇缣枧楗戋戬牮犍毽腱睑锏鹣裥笕翦踺鲣鞯",jiang:"江强僵姜将浆疆蒋桨奖讲匠酱降茳洚绛缰犟礓耩糨豇靓",jiao:"教交校较蕉椒礁焦胶郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿酵轿叫窖佼僬艽茭挢噍峤徼湫姣敫皎鹪蛟醮跤鲛",jie:"接结解介界阶姐揭皆秸街截劫节桔杰捷睫竭洁戒藉芥借疥诫届讦诘拮喈嗟婕孑桀碣疖颉蚧羯鲒骱",jin:"进今金近仅津尽巾筋斤襟紧锦谨靳晋禁烬浸劲卺荩堇噤馑廑妗缙瑾槿赆觐衿矜",jing:"经京精境睛竞竟荆兢茎晶鲸惊粳井警景颈静敬镜径痉靖净刭儆阱菁獍憬泾迳弪婧肼胫腈旌箐",jiong:"炯窘迥扃",jiu:"就究酒揪纠玖韭久灸九厩救旧臼舅咎疚僦啾阄柩桕鸠鹫赳鬏",ju:"具且据车举巨鞠拘狙疽居驹菊局咀矩沮聚拒距踞锯俱句惧炬剧倨讵苣苴莒掬遽屦琚枸椐榘榉橘犋飓钜锔窭裾趄醵踽龃雎鞫",juan:"捐鹃娟倦眷卷绢鄄狷涓桊蠲锩镌隽",jue:"觉决绝嚼撅攫抉掘倔爵诀厥劂谲矍蕨噘噱崛獗孓珏桷橛爝镢蹶觖",jun:"均菌钧军君峻俊竣浚郡骏捃皲筠麇",ka:"喀咖卡咯佧咔胩",kai:"开揩楷凯慨剀垲蒈忾恺铠锎锴",kan:"看槛刊堪勘坎砍侃莰阚戡龛瞰",kang:"康慷糠扛抗亢炕伉闶钪",kao:"考拷烤靠尻栲犒铐",ke:"可科客课坷苛柯棵磕颗壳咳渴克刻嗑岢恪溘骒缂珂轲氪瞌钶锞稞疴窠颏蝌髁",ken:"肯啃垦恳裉龈",keng:"坑吭铿",kong:"控空恐孔倥崆箜",kou:"口抠扣寇芤蔻叩囗眍筘",ku:"枯哭窟苦酷库裤刳堀喾绔骷",kua:"夸垮挎跨胯侉",kuai:"会快块筷侩蒯郐哙狯浍脍",kuan:"款宽髋",kuang:"况匡筐狂框矿眶旷诓诳邝圹夼哐纩贶",kui:"亏盔岿窥葵奎魁傀馈愧溃馗匮夔隗蒉揆喹喟悝愦逵暌睽聩蝰篑跬",kun:"坤昆捆困悃阃琨锟醌鲲髡",kuo:"括扩廓阔蛞",la:"垃拉喇蜡腊辣啦落剌邋旯砬瘌",lai:"来莱赖崃徕涞濑赉睐铼癞籁",lan:"览蓝婪栏拦篮阑兰澜谰揽懒缆烂滥岚漤榄斓罱镧褴",lang:"琅榔狼廊郎朗浪蒗啷阆稂螂",lao:"老捞劳牢佬姥酪烙涝潦唠崂忉栳铑铹痨耢醪",le:"了乐勒仂叻泐鳓",lei:"类雷镭蕾磊累儡垒擂肋泪羸诔嘞嫘缧檑耒酹",leng:"棱楞冷塄愣",li:"理里力立历离利丽厘梨犁黎篱狸漓李鲤礼莉荔吏栗厉励砾傈例俐痢粒沥隶璃哩俪俚郦坜苈莅蓠藜呖唳喱猁溧澧逦娌嫠骊缡枥栎轹膦戾砺詈罹锂鹂疠疬蛎蜊蠡笠篥粝醴跞雳鲡鳢黧",lia:"俩",lian:"联链连练脸莲镰廉怜涟帘敛恋炼蔹奁潋濂琏楝殓臁裢裣蠊鲢",liang:"量两良亮俩粮凉梁粱辆晾谅墚莨椋锒踉靓魉",liao:"了料疗撩聊僚燎寥辽潦撂镣廖蓼尥嘹獠寮缭钌鹩",lie:"列裂烈劣猎冽埒捩咧洌趔躐鬣",lin:"琳林磷霖临邻鳞淋凛赁吝拎蔺啉嶙廪懔遴檩辚瞵粼躏麟",ling:"领另铃令玲菱零龄伶羚凌灵陵岭酃苓呤囹泠绫柃棂瓴聆蛉翎鲮",liu:"留浏流溜琉榴硫馏刘瘤柳六遛骝绺旒熘锍镏鹨鎏",long:"龙聋咙笼窿隆垄拢陇垅茏泷珑栊胧砻癃",lou:"楼娄搂篓漏陋露偻蒌喽嵝镂瘘耧蝼髅",lu:"录陆芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄戮垆撸噜泸渌漉逯璐栌橹轳辂辘氇胪镥鸬鹭簏舻鲈",lv:"律旅虑驴吕铝侣履屡缕氯率滤绿偻捋闾榈膂稆褛",luan:"峦挛孪滦卵乱脔娈栾鸾銮",lue:"略掠锊",lun:"论抡轮伦仑沦纶囵",luo:"络咯烙萝螺罗逻锣箩骡裸落洛骆倮蠃荦摞猡泺漯珞椤脶镙瘰跞雒",ma:"码妈马麻玛蚂骂嘛吗抹唛犸杩蟆麽",mai:"买埋麦卖迈脉劢荬霾",man:"满瞒馒蛮蔓曼慢漫谩墁幔缦熳镘颟螨鳗鞔",mang:"芒茫盲氓忙莽邙漭硭蟒",mao:"贸猫茅锚毛矛铆卯茂冒帽貌袤茆峁泖瑁昴牦耄旄懋瞀蝥蟊髦",me:"么麽",mei:"没美每媒魅玫枚梅酶霉煤眉镁昧寐妹媚糜莓嵋猸浼湄楣镅鹛袂",men:"们门闷扪焖懑钔",meng:"盟萌蒙檬锰猛梦孟勐甍瞢懵朦礞虻蜢蠓艋艨",mi:"密眯醚靡糜迷谜弥米秘觅泌蜜幂芈谧咪嘧猕汨宓弭脒祢敉縻麋",mian:"面免棉眠绵冕勉娩缅沔渑湎腼眄",miao:"描苗瞄藐秒渺庙妙喵邈缈缪杪淼眇鹋",mie:"蔑灭乜咩蠛篾",min:"民抿皿敏悯闽苠岷闵泯缗玟珉愍黾鳘",ming:"明名命螟鸣铭冥茗溟暝瞑酩",miu:"谬缪",mo:"没模脉摸摹蘑膜磨摩魔抹末莫墨默沫漠寞陌谟茉蓦馍嫫嬷殁镆秣瘼耱貊貘麽",mou:"谋牟某侔哞缪眸蛑鍪",mu:"目母牟拇牡亩姆墓暮幕募慕木睦牧穆仫坶苜沐毪钼",na:"那拿哪呐钠娜纳讷捺肭镎衲",nai:"氖乃奶耐奈鼐佴艿萘柰",nan:"男南难喃囝囡楠腩蝻赧",nang:"囊攮囔馕曩",nao:"脑挠恼闹淖孬垴呶猱瑙硇铙蛲",ne:"呢讷",nei:"内馁",nen:"嫩恁",neng:"能",ni:"你妮霓倪泥尼拟匿腻逆溺伲坭蘼猊怩昵旎睨铌鲵",nian:"年蔫拈碾撵捻念粘廿埝辇黏鲇鲶",niang:"娘酿",niao:"鸟尿茑嬲脲袅",nie:"捏聂孽啮镊镍涅乜陧蘖嗫颞臬蹑",nin:"您",ning:"柠狞凝宁拧泞佞咛甯聍",niu:"牛扭钮纽拗狃忸妞",nong:"农脓浓弄侬哝",nu:"努奴怒弩胬孥驽",nv:"女恧钕衄",nuan:"暖",nue:"虐疟挪",nuo:"娜懦糯诺傩搦喏锘",o:"哦噢",ou:"欧鸥殴藕呕偶沤讴怄瓯耦",pa:"扒耙啪趴爬帕怕琶葩杷筢",pai:"牌派排拍徘湃俳蒎哌",pan:"攀潘盘磐盼畔判叛胖拚爿泮袢襻蟠蹒",pang:"磅乓庞旁耪胖彷夂滂逄攵螃",pao:"抛咆刨炮袍跑泡匏狍庖脬疱",pei:"培配呸胚裴赔陪佩沛辔帔旆锫醅霈",pen:"喷盆湓",peng:"朋砰抨烹澎彭蓬棚硼篷膨鹏捧碰堋嘭怦蟛",pi:"否被辟坯砒霹批披劈琵毗啤脾疲皮匹痞僻屁譬丕仳陴邳郫圮埤鼙芘擗噼庀淠媲纰枇甓罴铍癖疋蚍蜱貔",pian:"片便篇偏骗谝骈犏胼翩蹁",piao:"漂飘瓢票剽莩嘌嫖缥殍瞟螵",pie:"撇瞥丿苤彡氕",pin:"品频聘拼贫姘嫔榀牝颦",ping:"评平冯乒坪苹萍凭瓶屏俜娉枰鲆",po:"坡泼颇婆破魄迫粕叵鄱珀钋钷皤笸",pu:"普暴扑铺仆莆葡菩蒲埔朴圃浦谱曝瀑匍噗溥濮璞氆镤镨蹼",qi:"其企起期汽器启气奇缉欺栖戚妻七凄漆柒沏棋歧畦崎脐齐旗祈祁骑岂乞契砌迄弃泣讫亓俟圻芑芪萁萋葺蕲嘁屺岐汔淇骐绮琪琦杞桤槭耆祺憩碛颀蛴蜞綦鳍麒",qia:"夹掐恰洽葜袷髂",qian:"前钱牵扦钎铅千迁签仟谦乾黔钳潜遣浅谴堑嵌欠歉纤倩佥阡芊芡茜荨掮岍悭慊骞搴褰缱椠肷愆钤虔箝",qiang:"强将枪呛腔羌墙蔷抢戕嫱樯戗炝锖锵镪襁蜣羟跄",qiao:"壳橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍削劁诮谯荞峤愀憔缲樵硗跷鞒",qie:"且切茄怯窃郄惬慊妾挈锲箧趄",qin:"亲钦侵秦琴勤芹擒禽寝沁芩揿吣嗪噙溱檎锓矜覃螓衾",qing:"情请庆轻青氢倾卿清擎晴氰顷苘圊檠磬蜻罄綮謦鲭黥",qiong:"琼穷邛茕穹蛩筇跫銎",qiu:"求球秋丘邱囚酋泅俅巯犰湫逑遒楸赇虬蚯蝤裘糗鳅鼽",qu:"区去取曲趋蛆躯屈驱渠娶龋趣诎劬苣蕖蘧岖衢阒璩觑氍朐祛磲鸲癯蛐蠼麴瞿黢",quan:"全权圈颧醛泉痊拳犬券劝诠荃犭悛绻辁畎铨蜷筌鬈",que:"确缺炔瘸却鹊榷雀阕阙悫",qun:"裙群逡麇",ran:"然燃冉染苒蚺髯",rang:"让瓤壤攘嚷禳穰",rao:"饶扰绕荛娆桡",re:"惹热喏",ren:"人任认壬仁忍韧刃妊纫仞荏饪轫稔衽",reng:"扔仍",ri:"日",rong:"容戎茸蓉荣融熔溶绒冗嵘狨榕肜蝾",rou:"揉柔肉糅蹂鞣",ru:"如入茹蠕儒孺辱乳汝褥蓐薷嚅洳溽濡缛铷襦颥",ruan:"软阮朊",rui:"蕊瑞锐芮蕤枘睿蚋",run:"闰润",ruo:"若弱偌箬",sa:"撒洒萨卅挲脎飒",sai:"赛腮鳃塞噻",san:"三叁伞散仨彡馓毵糁",sang:"桑嗓丧搡磉颡",sao:"搔骚扫嫂埽缫臊瘙鳋",se:"色塞瑟涩啬铯穑",sen:"森",seng:"僧",sha:"莎砂杀刹沙纱傻啥煞厦唼挲歃铩痧裟霎鲨",shai:"筛晒酾",shan:"删山珊苫杉煽衫闪陕擅赡膳善汕扇缮栅剡讪鄯埏芟潸姗嬗骟膻钐疝蟮舢跚鳝",shang:"上商尚赏墒伤晌裳垧泷绱殇熵觞",shao:"少绍鞘梢捎稍烧芍勺韶哨邵劭苕潲杓蛸筲艄",she:"设社奢赊蛇舌舍赦摄射慑涉厍佘揲猞滠歙畲麝",shen:"什身参深神甚申砷呻伸娠绅沈审婶肾慎渗诜谂莘葚哂渖椹胂矧蜃糁",sheng:"生声乘甥牲升绳省盛剩胜圣嵊渑晟眚笙",shi:"是时式什市实使事示始世施识视试师史十食势释失室匙狮湿诗尸虱石拾蚀矢屎驶士柿拭誓逝嗜噬适仕侍饰氏恃嘘谥埘莳蓍弑轼贳炻礻铈螫舐筮豕鲥鲺",shou:"手首受授收售守寿瘦兽狩绶艏",shu:"数术束输属殊述蔬枢梳抒叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠树戍竖墅庶漱恕俞丨倏塾菽摅沭澍姝纾毹腧殳秫",shua:"刷耍唰",shuai:"率摔衰甩帅蟀",shuan:"栓拴闩涮",shuang:"霜双爽孀",shui:"说水谁睡税",shun:"吮瞬顺舜",shuo:"数说硕朔烁蒴搠妁槊铄",si:"司思似食四斯撕嘶私丝死肆寺嗣伺饲巳厮俟兕厶咝汜泗澌姒驷缌祀锶鸶耜蛳笥",song:"松送耸怂颂宋讼诵凇菘崧嵩忪悚淞竦",sou:"搜艘擞嗽叟薮嗖嗾馊溲飕瞍锼螋",su:"速诉苏素酥俗粟僳塑溯宿肃缩夙谡蔌嗉愫涑簌觫稣",suan:"算酸蒜狻",sui:"虽随隋绥髓碎岁穗遂隧祟谇荽濉邃燧眭睢",sun:"孙损笋荪狲飧榫隼",suo:"所索莎蓑梭唆缩琐锁唢嗦嗍娑桫挲睃羧",ta:"他它她塌塔獭挞蹋踏嗒闼溻漯遢榻沓铊趿鳎",tai:"大态台胎苔抬泰酞太汰邰薹骀肽炱钛跆鲐",tan:"坛弹坍摊贪瘫滩檀痰潭谭谈坦毯袒碳探叹炭郯澹昙忐钽锬覃",tang:"汤塘搪堂棠膛唐糖倘躺淌趟烫傥帑惝溏瑭樘铴镗耥螗螳羰醣",tao:"讨掏涛滔绦萄桃逃淘陶套鼗叨啕洮韬饕",te:"特忒忑慝铽",teng:"藤腾疼誊滕",ti:"题提体梯剔踢锑蹄啼替嚏惕涕剃屉倜荑悌逖绨缇鹈裼醍",tian:"天添填田甜恬舔腆掭忝阗殄畋",tiao:"调条挑迢眺跳佻苕祧窕蜩笤粜龆鲦髫",tie:"帖贴铁萜餮",ting:"庭听厅烃汀廷停亭挺艇莛葶婷梃铤蜓霆",tong:"同统通桐酮瞳铜彤童桶捅筒痛佟仝茼嗵恸潼砼",tou:"投头偷透骰",tu:"图突凸秃徒途涂屠土吐兔堍荼菟钍酴",tuan:"团湍抟彖疃",tui:"推颓腿蜕褪退忒煺",tun:"囤褪吞屯臀氽饨暾豚",tuo:"拖托脱鸵陀驮驼椭妥拓唾乇佗坨庹沱柝��橐砣箨酡跎鼍",wa:"挖哇蛙洼娃瓦袜佤娲腽",wai:"外歪崴",wan:"完湾万晚玩蔓豌弯顽丸烷碗挽皖惋宛婉腕剜芄莞菀纨绾琬脘畹蜿",wang:"网望汪王亡枉往旺忘妄罔惘辋魍",wei:"为位威未围维委巍微危韦违桅唯惟潍苇萎伟伪尾纬蔚味畏胃喂魏渭谓尉慰卫偎诿隈隗圩葳薇帏帷崴嵬猥猬闱沩洧涠逶娓玮韪軎炜煨痿艉鲔",wen:"文问闻稳瘟温蚊纹吻紊刎夂阌汶璺攵雯",weng:"嗡翁瓮蓊蕹",wo:"我挝蜗涡窝斡卧握沃倭莴喔幄渥肟硪龌",wu:"务无误物午恶巫呜钨乌污诬屋芜梧吾吴毋武五捂舞伍侮坞戊雾晤勿悟兀仵阢邬圬芴唔庑怃忤寤迕妩婺骛杌牾焐鹉鹜痦蜈鋈鼯",xi:"系息戏习希细西喜析栖昔熙硒矽晰嘻吸锡牺稀悉膝夕惜熄烯溪汐犀檄袭席媳铣洗隙僖兮隰郗茜菥葸蓰奚唏徙饩阋浠淅屣嬉玺樨曦觋欷歙熹禊禧皙穸裼蜥螅蟋舄舾羲粞翕醯蹊鼷",xia:"下瞎虾匣霞辖暇峡侠狭厦夏吓呷狎遐瑕柙硖罅黠",xian:"现限线显先见献衔险铣掀锨仙鲜纤咸贤舷闲涎弦嫌县腺馅羡宪陷冼苋莶藓岘猃暹娴氙燹祆鹇痫蚬筅籼酰跣跹霰",xiang:"相想项享详象响香像向降厢镶箱襄湘乡翔祥巷橡芗葙饷庠骧缃蟓鲞飨",xiao:"小销消效校萧硝霄削哮嚣宵淆晓孝肖啸笑哓崤潇逍骁绡枭枵蛸筱箫魈",xie:"些谢械楔歇蝎鞋协挟携邪斜胁谐写卸蟹懈泄泻屑偕亵勰燮薤撷獬廨渫瀣邂绁缬榭榍颉蹀躞",xin:"信新心欣薪芯锌辛忻衅囟馨莘昕歆镡鑫",xing:"行形型性幸姓省星腥猩惺兴刑邢醒杏陉荇荥擤饧悻硎",xiong:"兄凶胸匈汹雄熊芎",xiu:"修秀臭休羞朽嗅锈袖绣咻岫馐庥溴鸺貅髹",xu:"需许须序续墟戌虚嘘徐蓄酗叙旭畜恤絮婿绪吁诩勖圩蓿洫溆顼栩肷煦盱胥糈醑",xuan:"选宣轩喧悬旋玄癣眩绚儇谖萱揎泫渲漩璇楦暄炫煊碹铉镟痃",xue:"学削靴薛穴雪血谑噱泶踅鳕",xun:"询训讯迅寻浚勋熏循旬驯巡殉汛逊巽郇埙荀荨蕈薰峋徇獯恂洵浔曛窨醺鲟",ya:"压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶轧伢垭揠岈迓娅琊桠氩砑睚痖",yan:"言研验眼严颜焉咽阉烟淹盐蜒岩延阎炎沿奄掩衍演艳堰燕厌砚雁唁彦焰宴谚殷厣赝剡俨偃兖谳郾鄢埏芫菸崦恹闫阏湮滟妍嫣琰檐晏胭腌焱罨筵酽趼魇餍鼹",yang:"样央阳养殃鸯秧杨扬佯疡羊洋氧仰痒漾徉怏泱炀烊恙蛘鞅",yao:"要邀腰妖瑶摇尧遥窑谣姚咬舀药耀钥夭爻吆崾徭幺珧杳轺曜肴铫鹞窈繇鳐麽",ye:"业也页椰噎耶爷野冶掖叶曳腋夜液拽靥谒邺揶揲晔烨铘",yi:"一以已意易议医移艺益义艾蛇壹揖铱依伊衣颐夷遗仪胰疑沂宜姨彝椅蚁倚乙矣抑邑屹亿役臆逸肄疫亦裔毅忆溢诣谊译异翼翌绎刈劓佚佾诒圯埸懿苡荑薏弈奕挹弋呓咦咿嗌噫峄嶷猗饴怿怡悒漪迤驿缢殪轶贻欹旖熠眙钇镒镱痍瘗癔翊蜴舣羿翳酏黟",yin:"因音引银茵荫殷阴姻吟淫寅饮尹隐印胤鄞垠堙茚吲喑狺夤洇氤铟瘾窨蚓霪龈",ying:"影应营英迎樱婴鹰缨莹萤荧蝇赢盈颖硬映嬴郢茔荥莺萦蓥撄嘤膺滢潆瀛瑛璎楹媵鹦瘿颍罂",yo:"哟唷",yong:"用拥永佣臃痈庸雍踊蛹咏泳涌恿勇俑壅墉喁慵邕镛甬鳙饔",you:"有游由友优右邮幽悠忧尤铀犹油酉佑釉诱又幼卣攸侑莠莜莸尢呦囿宥柚猷牖铕疣蚰蚴蝣蝤繇鱿黝鼬",yu:"于育语域娱与遇尉迂淤盂榆虞愚舆余俞逾鱼愉渝渔隅予雨屿禹宇羽玉芋郁吁喻峪御愈欲狱誉浴寓裕预豫驭粥禺毓伛俣谀谕萸蓣揄圄圉嵛狳饫馀庾阈鬻妪妤纡瑜昱觎腴欤於煜熨燠聿畲钰鹆鹬瘐瘀窬窳蜮蝓竽臾舁雩龉",yuan:"员原源元院远鸳渊冤垣袁援辕园圆猿缘苑愿怨垸塬芫掾圜沅媛瑗橼爰眢鸢螈箢鼋",yue:"说乐阅越曰约跃钥岳粤月悦龠哕瀹栎樾刖钺",yun:"运耘云郧匀陨允蕴酝晕韵孕郓芸狁恽愠纭韫殒昀氲熨筠",za:"匝砸杂咋拶咂",zai:"在载子再栽哉灾宰崽甾",zan:"暂咱攒赞瓒昝簪糌趱錾",zang:"赃脏葬奘驵臧",zao:"造遭糟凿藻枣早澡蚤躁噪皂灶燥唣",ze:"责择则泽咋仄赜啧帻迮昃笮箦舴",zei:"贼",zen:"怎谮",zeng:"增综曾憎赠缯甑罾锃",zha:"扎喳渣札轧铡闸眨栅榨咋乍炸诈柞揸吒咤哳楂砟痄蚱齄",zhai:"翟摘斋宅窄债寨砦瘵",zhan:"站展战瞻毡詹粘沾盏斩辗崭蘸栈占湛绽谵搌旃",zhang:"章长张樟彰漳掌涨杖丈帐账仗胀瘴障仉鄣幛嶂獐嫜璋蟑",zhao:"着照找招朝昭沼赵罩兆肇召爪诏棹钊笊",zhe:"这者着浙遮折哲蛰辙锗蔗乇谪摺柘辄磔鹧褶蜇螫赭",zhen:"真圳珍斟甄砧臻贞针侦枕疹诊震振镇阵帧蓁浈缜桢椹榛轸赈胗朕祯畛稹鸩箴",zheng:"正政整证争蒸挣睁征狰怔拯症郑诤峥徵钲铮筝",zhi:"只之知制置址支直至织治质执职值致指志芝枝吱蜘肢脂汁植殖侄止趾旨纸挚掷帜峙智秩稚炙痔滞窒卮陟郅埴芷摭帙忮彘咫骘栉枳栀桎轵轾贽胝膣祉黹雉鸷痣蛭絷酯跖踬踯豸觯",zhong:"中种重终盅忠钟衷肿仲众冢忪锺螽舯踵",zhou:"州舟周洲诌粥轴肘帚咒皱宙昼骤荮啁妯纣绉胄碡籀繇酎",zhu:"注主助筑属珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱著柱蛀贮铸住祝驻伫侏邾苎茱洙渚潴杼槠橥炷铢疰瘃竺箸舳翥躅麈",zhua:"挝抓爪",zhuai:"拽",zhuan:"专传转砖撰赚篆啭馔颛",zhuang:"状装幢桩庄妆撞壮僮",zhui:"椎锥追赘坠缀萑惴骓缒隹",zhun:"准屯谆肫窀",zhuo:"着捉拙卓桌琢茁酌啄灼浊倬诼擢浞涿濯禚斫镯",zi:"自资子字咨兹姿滋淄孜紫仔籽滓渍谘茈呲嵫姊孳缁梓辎赀恣眦锱秭耔笫粢趑觜訾龇鲻髭",zong:"综总鬃棕踪宗纵偬腙粽",zou:"邹走奏揍诹陬鄹驺鲰",zu:"组足租卒族祖诅阻俎菹镞",zuan:"钻纂攥缵躜",zui:"最嘴醉罪蕞觜",zun:"尊遵撙樽鳟",zuo:"作左昨佐柞做坐座阼唑嘬怍胙祚笮酢"};

﻿/*
 * 基于本地数据拼音搜索引擎 v0.1
 * Date: 2011-07-20
 * http://code.google.com/p/pinyin-engine/
 * (c) 2009-2010 TangBin, http://www.planeArt.cn
 * download by http://www.codefans.net
 * This is licensed under the GNU LGPL, version 2.1 or later.
 * For details, see: http://creativecommons.org/licenses/LGPL/2.1/
 */
var pinyinEngine = function () {
	return (this instanceof pinyinEngine) ? this.resetCache() : new pinyinEngine;
};

pinyinEngine.prototype = {
	/**
	 * 查询
	 * @param		{String}	关键字
	 * @param		{Function}	回调函数(每一次成功匹配都将运行，
	 *							函数接收的第一个参数为匹配到的内容数据)
	 * @return		{Array}		所有匹配到的内容数据列表
	 */
	search: function (keyword, callback) {
		var cache = this._cache,
			history = this._history,
			value = [], number = 0;
		
		keyword = keyword.toLowerCase();
		callback = callback || function () {};
		
		// 在上一次搜索结果中查询
		if (history.length && keyword.indexOf(history.keyword) === 1) {
			cache = history.content;
		};
		
		for (var i = 0, len = cache.length; i < len; i ++) {
			if (cache[i].tags.indexOf(keyword) !== -1) {
				number ++;
				value.push(cache[i]);
				callback(cache[i].content);
			};
		};

		// 缓存本次查询结果
		this._history = {
			keyword: keyword,
			value: value,
			length: number
		};
		
		return value;
	},
	
	/**
	 * 设置索引缓存
	 * @param		{Array}		标签
	 * @param		{Any}		被索引的内容
	 */
	setCache: function (tags, content) {
		var keys, excision = '\u0001';
		
		keys = tags;
		for (var i = 0, len = tags.length; i < len; i ++) {
			 keys.push(pinyinEngine.toPinyin(tags[i], false, excision));
		};
		keys = keys.join(excision);
		
		var obj = {
			tags: keys,
			content: content
		};
		this._cache.push(obj);
	},
	
	/**
	 * 重置索引缓存
	 */
	resetCache: function () {
		this._cache = [];
		this._history = {};
	}
};



/**
 * 拼音转换算法
 *
 * @version	2011-07-19
 * @see		https://github.com/hotoo/pinyin.js
 * @author	闲耘™ (@hotoo <hotoo.cn[AT]gmail.com>), 唐斌 (1987.tangbin[AT]gmail.com)
 */
pinyinEngine.toPinyin = function () {
	var data = window.PINYIN_DATA;

    /*
	 * 建立高速索引缓存
     * Note: 除 Firefox 之外，IE,Chrome,Safari,Opera
     *       均为 s.split("")[i] 比 s.charAt(i) 的性能好。
     */
	var cache = {}, hans, i, j, m;
    for (var i in data) {
        hans = data[i];
		j = 0;
		m = hans.length;
        for(; j < m; j ++) {
            var han = hans.charAt(j);
            if (!cache[han]) {
                cache[han] = [];
            };
            cache[han].push(i);
        };
    };
    data = null;

    /*
     * 笛卡尔乘积，返回两个数组的所有可能的组合。
     * @param	{Array}
     * @param	{Array}
	 * @param	{String}	字符串分割符
     * @return	{Object}	成员包括array与string
     */
    function product (a, b, sp) {
        var r = [], val, str = [];
        for (var i = 0, l = a.length; i < l; i ++) {
            for (var j = 0, m = b.length; j < m; j ++) {
                val = r[r.length] = (a[i] instanceof Array) ? a[i].concat(b[j]) : [].concat(a[i],b[j]);
				str.push(val.join(""));
            };
        };
        return {
			array: r,
			string: str.join(sp || "")
		};
    };

    /**
     *	@param	{String}		要转为拼音的目标字符串（汉字）。
     *	@param	{Boolean}		是否仅保留匹配的第一个拼音。
     *	@param	{String}		返回结果的分隔符，默认返回数组集合。
     *	@return	{String, Array} 如果 sp 为 null，则返回 Array。
     *							否则，返回以 sp 分隔的字符串。
     */
    return function (keyword, single, sp) {
        var len, pys, py, pyl, i, y;
        if(keyword==null||keyword.length==0){
        	len = 0;
        }else{
        	len = keyword.length;
        }
		
        if (len === 0) {return single ? "" : []};
        if (len === 1) {
            y = cache[keyword];
            if (single) {return y && y[0] ? y[0] : keyword};
            return y || [keyword];
        } else {
            var py = [];
            for (i = 0; i < len; i ++) {
                y = cache[keyword.charAt(i)];
                if (y) {
                    py[py.length] = single ? y[0] : y;
                } else {
                    py[py.length] = single ? keyword.charAt(i) : [keyword.charAt(i)];
                };
            };
            if (single) {return sp == null ? py : py.join(sp || "")};

            pys = py[0];
			pyl = py.length;
			var prt, str;
            for (i = 1; i < pyl; i++) {
				prt = product(pys, py[i], sp);
                pys = prt.array;
            };
            return sp == null ? pys : prt.string;
        };
    };
	
}();

$(function(){
	$( document ).tooltip({
		items: "[data-errors]",
		content: function() {
			var element = $( this );
		    if ( element.is( "[data-errors]" ) ) {
		    	return element.attr( "data-errors" );
		    }
		},
		show: {
	    	effect: "fadeIn",
	        delay: 300
	    },
	    tooltipClass : "coral-state-error",
	    hide: { effect: "fadeOut", delay: 0 },
		position: {
			my: "left top",
	        at: "left bottom+5"/*,
			using: function( position, feedback ) {
				$( this ).css( position );
				$( "<div>" )
					.addClass( "coral-state-error" )
					.addClass( feedback.vertical )
					.addClass( feedback.horizontal )
					.appendTo( this );
			}*/
		}
	});
});
(function($){
	
	/*$.validate.validTypeOptions = {
		"maxlength": {
			restrictInput: true
		},
		"number": {
			restrictInput: true
		}
	};*/
	/*$.fn['datepicker'].defaults = {
		minDate: "2015/8/7", //最小的可选日期，为null则无限制
		maxDate: "2015-09-01"// 最大的可选日期，为null则无限制
	};*/
})(jQuery);

